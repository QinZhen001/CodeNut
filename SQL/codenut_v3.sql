-- MySQL dump 10.16  Distrib 10.1.32-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: codenut
-- ------------------------------------------------------
-- Server version	10.1.32-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `contests`
--

DROP TABLE IF EXISTS `contests`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `contests` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `title` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `description` text NOT NULL,
  `start_time` datetime NOT NULL,
  `end_time` datetime NOT NULL,
  `auto_approve` tinyint(1) DEFAULT NULL,
  `password` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ix_contests_title` (`title`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `contests_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contests`
--

LOCK TABLES `contests` WRITE;
/*!40000 ALTER TABLE `contests` DISABLE KEYS */;
/*!40000 ALTER TABLE `contests` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problems`
--

DROP TABLE IF EXISTS `problems`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `problems` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `level` smallint(6) NOT NULL,
  `tag` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `accepted` int(11) DEFAULT NULL,
  `submitted` int(11) DEFAULT NULL,
  `description` text NOT NULL,
  `code` text NOT NULL,
  `solution` text,
  `contest_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `input` text NOT NULL,
  `output` text NOT NULL,
  `program` text NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ix_problems_title` (`title`),
  KEY `contest_id` (`contest_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `problems_ibfk_1` FOREIGN KEY (`contest_id`) REFERENCES `contests` (`id`),
  CONSTRAINT `problems_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=501 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problems`
--

LOCK TABLES `problems` WRITE;
/*!40000 ALTER TABLE `problems` DISABLE KEYS */;
INSERT INTO `problems` VALUES (1,'3个数的最大乘积',1,'数组,数学',0,0,'<p></p><p>给定一个整数数组，找出3个数，使得它们的乘积最大，输出该乘积。</p>\n<p><b>例子1：</b><br/>\n</p><pre>\n<b>输入：</b>[1,2,3]\n<b>输出：</b>6\n</pre><p><b>例子2：</b><br/>\n</p><pre>\n<b>输入：</b>[1,2,3,4]\n<b>输出：</b>24\n</pre><p><b>注意：</b><br/>\n</p><ol>\n<li>给定的数组长度在[3,10<sup>4</sup>]范围内，并且所有的值都在[-1000, 1000]范围内。</li>\n<li>输入的任意三个数字的乘积不超过32位有符号整数的范围。</li>\n</ol>','[{\"value\":\"c\",\"text\":\"C\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* convertBST(struct TreeNode* root) {\n    \n}\"},{\"value\":\"javascript\",\"text\":\"JavaScript\",\"defaultCode\":\"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumProduct = function(nums) {\n    \n};\"},{\"value\":\"python3\",\"text\":\"Python3\",\"defaultCode\":\"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\"},{\"value\":\"csharp\",\"text\":\"C#\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConvertBST(TreeNode root) {\n        \n    }\n}\"},{\"value\":\"cpp\",\"text\":\"C++\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        \n    }\n};\"},{\"value\":\"java\",\"text\":\"Java\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode convertBST(TreeNode root) {\n        \n    }\n}\"},{\"value\":\"ruby\",\"text\":\"Ruby\",\"defaultCode\":\"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {TreeNode}\ndef convert_bst(root)\n    \nend\"},{\"value\":\"golang\",\"text\":\"Go\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc convertBST(root *TreeNode) *TreeNode {\n    \n}\"]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-sorting-accepted\">Approach #2 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-3-single-scan-accepted\">Approach #3 Single Scan [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest solution is to consider every triplet out of the given <script type=\"math/tex; mode=display\">nums</script> array and check their product and find out the maximum product out of them.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. We need to consider every triplet from <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-sorting-accepted\">Approach #2 Using Sorting [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another solution could be to sort the given <script type=\"math/tex; mode=display\">nums</script> array(in ascending order) and find out the product of the last three numbers. </p>\n<p>But, we can note that this product will be maximum only if all the numbers in <script type=\"math/tex; mode=display\">nums</script> array are positive. But, in the given problem statement, negative elements could exist as well. </p>\n<p>Thus, it could also be possible that two negative numbers lying at the left extreme end could also contribute to lead to a larger product if the third number in the triplet being considered is the largest positive number in the <script type=\"math/tex; mode=display\">nums</script> array. </p>\n<p>Thus, either the product <script type=\"math/tex; mode=display\">nums[0]</script>x<script type=\"math/tex; mode=display\">nums[1]</script>x<script type=\"math/tex; mode=display\">nums[n-1]</script> or <script type=\"math/tex; mode=display\">nums[n-3]</script>x<script type=\"math/tex; mode=display\">nums[n-2]</script>x<script type=\"math/tex; mode=display\">nums[n-1]</script> will give the required result. Thus, we need to find the larger one from out of these values.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximumProduct</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. Sorting the <script type=\"math/tex; mode=display\">nums</script> array takes <script type=\"math/tex; mode=display\">nlog(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log(n)))</script>. Sorting takes O(logn) space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-single-scan-accepted\">Approach #3 Single Scan [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We need not necessarily sort the given <script type=\"math/tex; mode=display\">nums</script> array to find the maximum product. Instead, we can only find the required 2 smallest values(<script type=\"math/tex; mode=display\">min1</script> and <script type=\"math/tex; mode=display\">min2</script>) and the three largest values(<script type=\"math/tex; mode=display\">max1, max2, max3</script>) in the <script type=\"math/tex; mode=display\">nums</script> array, by iterating over the <script type=\"math/tex; mode=display\">nums</script> array only once. </p>\n<p>At the end, again we can find out the larger value out of <script type=\"math/tex; mode=display\">min1</script>x<script type=\"math/tex; mode=display\">min2</script>x<script type=\"math/tex; mode=display\">max1</script> and <script type=\"math/tex; mode=display\">max1</script>x<script type=\"math/tex; mode=display\">max2</script>x<script type=\"math/tex; mode=display\">max3</script> to find the required maximum product.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximumProduct</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min1</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">min2</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max1</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max2</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">min2</span> <span class=\"o\">=</span> <span class=\"n\">min1</span><span class=\"o\">;</span>\n                <span class=\"n\">min1</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min2</span><span class=\"o\">)</span> <span class=\"o\">{</span>     <span class=\"c1\">// n lies between min1 and min2</span>\n                <span class=\"n\">min2</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max1</span><span class=\"o\">)</span> <span class=\"o\">{</span>            <span class=\"c1\">// n is greater than max1, max2 and max3</span>\n                <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">max2</span><span class=\"o\">;</span>\n                <span class=\"n\">max2</span> <span class=\"o\">=</span> <span class=\"n\">max1</span><span class=\"o\">;</span>\n                <span class=\"n\">max1</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max2</span><span class=\"o\">)</span> <span class=\"o\">{</span>     <span class=\"c1\">// n lies betweeen max1 and max2</span>\n                <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">max2</span><span class=\"o\">;</span>\n                <span class=\"n\">max2</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max3</span><span class=\"o\">)</span> <span class=\"o\">{</span>     <span class=\"c1\">// n lies betwen max2 and max3</span>\n                <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">min1</span> <span class=\"o\">*</span> <span class=\"n\">min2</span> <span class=\"o\">*</span> <span class=\"n\">max1</span><span class=\"o\">,</span> <span class=\"n\">max1</span> <span class=\"o\">*</span> <span class=\"n\">max2</span> <span class=\"o\">*</span> <span class=\"n\">max3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only one iteration over the <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script> is required.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'[1,2,3]\n[1,2,3,4]','6\n24',''),(2,'键盘上的一行',1,'哈希表',0,0,'<p></p><p>给定一个单词列表，返回可以由键盘上一行<b>字母键</b>打出来的单词列表。\n<br/>美式键盘：</p><br/><p>\n<img alt=\"American keyboard\" src=\"https://leetcode.com/static/images/problemset/keyboard.png\"/>\n</p><br/><p><b>例子1：</b><br/>\n</p><pre>\n<b>输入：</b>[\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\n<b>输出：</b>[\"Alaska\", \"Dad\"]\n</pre><p><b>注意：</b><br/>\n</p><ol>\n<li>同一个字符在键盘上可多次使用。</li>\n<li>假设输入字符串只包含字母表。</li>\n</ol>','[{\"value\":\"c\",\"text\":\"C\",\"defaultCode\":\"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findWords(char** words, int wordsSize, int* returnSize) {\n    \n}\"},{\"value\":\"cpp\",\"text\":\"C++\",\"defaultCode\":\"class Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n        \n    }\n};\"},{\"value\":\"csharp\",\"text\":\"C#\",\"defaultCode\":\"public class Solution {\n    public string[] FindWords(string[] words) {\n        \n    }\n}\"},{\"value\":\"java\",\"text\":\"Java\",\"defaultCode\":\"class Solution {\n    public String[] findWords(String[] words) {\n        \n    }\n}\"},{\"value\":\"python3\",\"text\":\"Python3\",\"defaultCode\":\"class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \"},{\"value\":\"javascript\",\"text\":\"JavaScript\",\"defaultCode\":\"/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(words) {\n    \n};\"},{\"value\":\"ruby\",\"text\":\"Ruby\",\"defaultCode\":\"# @param {String[]} words\n# @return {String[]}\ndef find_words(words)\n    \nend\"},{\"value\":\"golang\",\"text\":\"Go\",\"defaultCode\":\"func findWords(words []string) []string {\n    \n}\"]',NULL,NULL,1,'[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n[\"Other\",\"Code\",\"Fly\",\"Add\"]\n[\"Hack\",\"Pig\",\"Wow\",\"Mv\",\"Lass\"]','[\"Alaska\",\"Dad\"]\n[\"Add\"]\n[\"Wow\",\"Mv\",\"Lass\"]',''),(3,'2个数的平方和',1,'数学',0,0,'<p></p><p>给定一个非负整数 <code>c</code>，判断是否存在两个整数<code>a</code>和 <code>b</code>的平方之和等于该数，比如：a<sup>2</sup> + b<sup>2</sup> = c。\n</p><p><b>例子1：</b><br/>\n</p><pre>\n<b>输入：</b>5\n<b>输出：</b>1\n<b>解释：</b>1 * 1 + 2 * 2 = 5\n</pre><p><b>例子2：</b><br/>\n</p><pre>\n<b>输入：</b>3\n<b>输出：</b>0\n</pre>','[{\"value\":\"c\",\"text\":\"C\",\"defaultCode\":\"bool judgeSquareSum(int c) {\n    \n}\"},{\"value\":\"cpp\",\"text\":\"C++\",\"defaultCode\":\"class Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        \n    }\n};\"},{\"value\":\"java\",\"text\":\"Java\",\"defaultCode\":\"class Solution {\n    public boolean judgeSquareSum(int c) {\n        \n    }\n}\"},{\"value\":\"python3\",\"text\":\"Python3\",\"defaultCode\":\"class Solution:\n    def judgeSquareSum(self, c):\n        \"\"\"\n        :type c: int\n        :rtype: bool\n        \"\"\"\n        \"},{\"value\":\"javascript\",\"text\":\"JavaScript\",\"defaultCode\":\"/**\n * @param {number} c\n * @return {boolean}\n */\nvar judgeSquareSum = function(c) {\n    \n};\"},{\"value\":\"ruby\",\"text\":\"Ruby\",\"defaultCode\":\"# @param {Integer} c\n# @return {Boolean}\ndef judge_square_sum(c)\n    \nend\"},{\"value\":\"golang\",\"text\":\"Go\",\"defaultCode\":\"func judgeSquareSum(c int) bool {\n    \n}\"},{\"value\":\"csharp\",\"text\":\"C#\",\"defaultCode\":\"public class Solution {\n    public bool JudgeSquareSum(int c) {\n        \n    }\n}\"]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-sqrt-function-accepted\">Approach #3 Using sqrt function [Accepted]</a></li>\n<li><a href=\"#approach-4-using-binary-search-accepted\">Approach #4 Using Binary Search [Accepted]</a></li>\n<li><a href=\"#approach-5-fermat-theorem-accepted\">Approach #5 Fermat Theorem [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest solution would be to consider every possible combination of integers <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> and check if the sum of their squares equals <script type=\"math/tex; mode=display\">c</script>. Now, both <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> can lie within the range <script type=\"math/tex; mode=display\">(0,\\sqrt{c})</script>. Thus, we need to check for the values of <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> in this range only.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">b</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(c)</script>. Two loops upto <script type=\"math/tex; mode=display\">\\sqrt{c}</script>. Here, <script type=\"math/tex; mode=display\">c</script> refers to the given integer(sum of squares).</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p>We can improve the last solution, if we make the following observation. For any particular <script type=\"math/tex; mode=display\">a</script> chosen, the value of <script type=\"math/tex; mode=display\">b</script> required to satisfy the equation <script type=\"math/tex; mode=display\">a^2 + b^2 = c</script> will be such that <script type=\"math/tex; mode=display\">b^2 = c - a^2</script>. Thus, we need to traverse over the range <script type=\"math/tex; mode=display\">(0, \\sqrt{c})</script> only for considering the various values of <script type=\"math/tex; mode=display\">a</script>. For every current value of <script type=\"math/tex; mode=display\">a</script> chosen, we can determine the corresponding <script type=\"math/tex; mode=display\">b^2</script> value and check if it is a perfect square or not. If it happens to be a perfect square, <script type=\"math/tex; mode=display\">c</script> is a sum of squares of two integers, otherwise not.</p>\n<p>Now, to determine, if the number <script type=\"math/tex; mode=display\">c - a^2</script> is a perfect square or not, we can make use of the following theorem: \"The square of <script type=\"math/tex; mode=display\">n^{th}</script> positive integer can be represented as a sum of first <script type=\"math/tex; mode=display\">n</script> odd positive integers.\" Or in mathematical terms:</p>\n<p>\n<script type=\"math/tex; mode=display\">n^2 = 1 + 3 + 5 + ... + (2*n-1) = \\sum_{1}^{n} (2*i - 1)</script>.</p>\n<p>To look at the proof of this statement, look at the L.H.S. of the above statement.</p>\n<p>\n<script type=\"math/tex; mode=display\">1 + 3 + 5 + ... + (2*n-1)=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">(2*1-1) + (2*2-1) + (2*3-1) + ... + (2*n-1)=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">2*(1+2+3+....+n) - (1+1+...n times)=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">2*n*(n+1)/2 - n=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">n*(n+1) - n=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">n^2 + n - n = n^2</script>\n</p>\n<p>This completes the proof of the above statement.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span>  <span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(c)</script>. The total number of times the <script type=\"math/tex; mode=display\">sum</script> is updated is: <script type=\"math/tex; mode=display\">1+2+3+...(\\sqrt{c} times) = \\sqrt{c}(\\sqrt{c}+1)/2 = O(c)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-sqrt-function-accepted\">Approach #3 Using sqrt function [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of finding if <script type=\"math/tex; mode=display\">c - a^2</script> is a perfect square using sum of odd numbers, as done in the last approach, we can make use of the inbuilt <script type=\"math/tex; mode=display\">sqrt</script> function and check if <script type=\"math/tex; mode=display\">\\sqrt{c - a^2}</script> turns out to be an integer. If it happens for any value of <script type=\"math/tex; mode=display\">a</script> in the range <script type=\"math/tex; mode=display\">[0, \\sqrt{c}]</script>, we can return a True value immediately.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">double</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">sqrt</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\sqrt{c}log(c)\\big)</script>. We iterate over <script type=\"math/tex; mode=display\">\\sqrt{c}</script> values for choosing <script type=\"math/tex; mode=display\">a</script>. For every <script type=\"math/tex; mode=display\">a</script> chosen, finding square root of <script type=\"math/tex; mode=display\">c - a^2</script> takes <script type=\"math/tex; mode=display\">O\\big(log(c)\\big)</script> time in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-binary-search-accepted\">Approach #4 Using Binary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another method to check if <script type=\"math/tex; mode=display\">c - a^2</script> is a perfect square, is by making use of Binary Search. The method remains same as that of a typical Binary Search to find a number.\nThe only difference lies in that we need to find an integer, <script type=\"math/tex; mode=display\">mid</script> in the range <script type=\"math/tex; mode=display\">[0, c - a^2]</script>, such that this number is the square root of <script type=\"math/tex; mode=display\">c - a^2</script>.\nOr in other words, we need to find an integer, <script type=\"math/tex; mode=display\">mid</script>, in the range <script type=\"math/tex; mode=display\">[0, c - a^2]</script>, such that <script type=\"math/tex; mode=display\">mid</script>x<script type=\"math/tex; mode=display\">mid = c - a^2</script>.</p>\n<p>The following animation illustrates the search process for a particular value of <script type=\"math/tex; mode=display\">c - a^2 = 36</script>.</p>\n<p>!?!../Documents/633_Sum_of_Squares.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">binary_search</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">binary_search</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">long</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">*</span> <span class=\"n\">mid</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">*</span> <span class=\"n\">mid</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">binary_search</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">binary_search</span><span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\sqrt{c}log(c)\\big)</script>. Binary search taking <script type=\"math/tex; mode=display\">O\\big(log(c)\\big)</script> in the worst case is done for <script type=\"math/tex; mode=display\">\\sqrt{c}</script> values of <script type=\"math/tex; mode=display\">a</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log(c))</script>. Binary Search will take <script type=\"math/tex; mode=display\">O(log(c))</script> space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-fermat-theorem-accepted\">Approach #5 Fermat Theorem [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is based on the following statement, which is based on Fermat\'s Theorem:</p>\n<p>\"Any positive number <script type=\"math/tex; mode=display\">n</script> is expressible as a sum of two squares if and only if the prime factorization of <script type=\"math/tex; mode=display\">n</script>, every prime of the form <script type=\"math/tex; mode=display\">(4k+3)</script> occurs an even number of times.\"</p>\n<p>By making use of the above theorem, we can directly find out if the given number <script type=\"math/tex; mode=display\">c</script> can be expressed as a sum of two squares.</p>\n<p>To do so we simply find all the prime factors of the given number <script type=\"math/tex; mode=display\">c</script>, which could range from <script type=\"math/tex; mode=display\">[2,\\sqrt{c}]</script> along with the count of those factors, by repeated division. \nIf at any step, we find out that the number of occurences of any prime factor of the form <script type=\"math/tex; mode=display\">(4k+3)</script> occurs an odd number of times, we can return a False value.</p>\n<p>In case, <script type=\"math/tex; mode=display\">c</script> itself is a prime number, it won\'t be divisible by any of the primes in the <script type=\"math/tex; mode=display\">[2,\\sqrt{c}]</script>. Thus, we need to check if <script type=\"math/tex; mode=display\">c</script> can be expressed in the form of\n<script type=\"math/tex; mode=display\">4k+3</script>. If so, we need to return a False value, indicating that this prime occurs an odd number(1) of times. </p>\n<p>Otherwise, we can return a True value.</p>\n<p>The proof of this theorem includes the knowledge of advanced mathematics and is beyond the scope of this article. However, interested reader can refer to <a href=\"http://wstein.org/edu/124/lectures/lecture21/lecture21/node2.html\">this</a> documentation.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">c</span> <span class=\"o\">/=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">count</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\sqrt{c}log(c)\\big)</script>. We find the factors of <script type=\"math/tex; mode=display\">c</script> and their count using repeated division. We check for the factors in the range <script type=\"math/tex; mode=display\">[0, \\sqrt{c}]</script>.\nThe maximum number of times a factor can occur(repeated division can be done) is <script type=\"math/tex; mode=display\">log(n)</script>(considering 2 as the only factor, <script type=\"math/tex; mode=display\">c=2^x</script>. Thus, <script type=\"math/tex; mode=display\">x=log(c)</script>).</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'5\n3','true\nfalse\n','eyJjcHAiOiAiI2RlZmluZSBfQ1JUX1NCQ1VSRV9OT19ERVBSRUNBVEVcbiNpbmNsdWRlIDxzZXQ+XG4jaW5jbHVkZSA8Y21hdGg+XG4jaW5jbHVkZSA8cXVldWU+XG4jaW5jbHVkZSA8c3RhY2s+XG4jaW5jbHVkZSA8dmVjdG9yPlxuI2luY2x1ZGUgPHN0cmluZz5cbiNpbmNsdWRlIDxjc3RkaW8+XG4jaW5jbHVkZSA8Y3N0ZGxpYj5cbiNpbmNsdWRlIDxjc3RyaW5nPlxuI2luY2x1ZGUgPGlvc3RyZWFtPlxuI2luY2x1ZGUgPGFsZ29yaXRobT5cbiNpbmNsdWRlIDxmdW5jdGlvbmFsPlxuI2luY2x1ZGUgPHVub3JkZXJlZF9zZXQ+XG5cbnVzaW5nIG5hbWVzcGFjZSBzdGQ7XG5cbi8vIHNzc3RhcnRcbmNsYXNzIFNvbHV0aW9uIHtcbnB1YmxpYzpcblx0Ym9vbCBqdWRnZVNxdWFyZVN1bSggaW50IGMgKVxuXHR7XG5cdFx0Zm9yICggaW50IGkgPSAwOyBpIDw9IHNxcnQoIGMgKTsgaSsrIClcblx0XHR7XG5cdFx0XHRpbnQgdCA9IHNxcnQoIGMgLSBpICogaSApO1xuXHRcdFx0aWYgKCB0ICogdCA9PSBjIC0gaSAqIGkgKVxuXHRcdFx0XHRyZXR1cm4odHJ1ZSk7XG5cdFx0fVxuXHRcdHJldHVybihmYWxzZSk7XG5cdH1cbn07XG4vLyBlZWVuZFxuaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgY29uc3QgKmFyZ3ZbXSkge1xuXHRpbnQgYztcblx0c3NjYW5mKGFyZ3ZbMV0sXCIlZFwiLCZjKTtcblx0U29sdXRpb24gc29sdXRpb247XG5cdGJvb2wgcmVzdWx0ID0gc29sdXRpb24uanVkZ2VTcXVhcmVTdW0oYyk7XG5cdGNvdXQgPDwgc3RkOjpib29sYWxwaGE7XG5cdGNvdXQ8PHJlc3VsdDtcblx0cHV0cyhcIlwiKTtcblx0cmV0dXJuIDA7XG59XG4iLCAicHkiOiAiIyBzc3N0YXJ0XG5jbGFzcyBTb2x1dGlvbjpcbiAgICBkZWYganVkZ2VTcXVhcmVTdW0oc2VsZiwgYyk6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICA6dHlwZSBjOiBpbnRcbiAgICAgICAgOnJ0eXBlOiBib29sXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBkZWYgaXNfc3F1YXJlKE4pOlxuICAgICAgICAgICAgcmV0dXJuIGludChOKiogMC41KSoqMiA9PSBOXG5cbiAgICAgICAgcmV0dXJuIGFueShpc19zcXVhcmUoYyAtIGEqYSlcbiAgICAgICAgICAgICAgICAgICBmb3IgYSBpbiByYW5nZShpbnQoYyoqLjUpICsgMSkpXG5cbiMgZWVlbmRcblxuZGVmIGdldElucHV0KCk6XG4gICAgZnJvbSBzeXMgaW1wb3J0IGFyZ3ZcbiAgICBpbnB1dF8gPSBhcmd2WzFdXG4gICAgI2lucHV0X3NldCA9IGlucHV0Xy5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgnICcsICcnKS5zcGxpdCgnLCcpXG4gICAgI2lucHV0X3NldCA9IFtpbnQoeCkgZm9yIHggaW4gaW5wdXRfc2V0XVxuICAgIHJldHVybiBpbnQoaW5wdXRfKVxuZGVmIHByaW50UmVzdWx0KHJlc3VsdF9zZXQpOlxuICAgICNyZXN1bHRfc2V0ID0gWyclcycgJSB4IGZvciB4IGluIHJlc3VsdF9zZXRdXG4gICAgI3ByaW50KCdbJXNdJyAlICcsJy5qb2luKHJlc3VsdF9zZXQpKVxuICAgIHByaW50KHN0cihyZXN1bHRfc2V0KS5sb3dlcigpKVxuZGVmIG1haW4oKTpcbiAgICBzb2x1dGlvbiA9IFNvbHV0aW9uKClcbiAgICByZXN1bHRfc2V0ID0gc29sdXRpb24uanVkZ2VTcXVhcmVTdW0oZ2V0SW5wdXQoKSlcbiAgICBwcmludFJlc3VsdChyZXN1bHRfc2V0KVxubWFpbigpXG4iLCAianMiOiAiXG5cblxuLy8gQHBhcmFtIHtudW1iZXJ9IGNcbi8vIEByZXR1cm4ge2Jvb2xlYW59XG5cbi8vIHNzc3RhcnRcbnZhciBqdWRnZVNxdWFyZVN1bSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoTWF0aC5zcXJ0KGMpJTEgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBhID0gMTtcbiAgICBiID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoYykpO1xuICAgIHdoaWxlKGE8PWIpIHtcbiAgICAgIGlmIChhKmErYipiID4gYykge1xuICAgICAgICAtLWI7XG4gICAgICB9IGVsc2UgaWYgKGEqYStiKmIgPCBjKSB7XG4gICAgICAgICsrYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBlZWVuZFxuZnVuY3Rpb24gdmFyaWFibGVJbnB1dChpbnB1dF9zZXQpe1xuICBxdWV1ZT1bXTtcbiAgaWYgKGlucHV0X3NldC5sZW5ndGg9PTApe1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGVsc2V7XG4gICAgcm9vdD1uZXcgVHJlZU5vZGUoaW5wdXRfc2V0LnNoaWZ0KCkpO1xuICAgIHF1ZXVlLnB1c2gocm9vdClcbiAgICB3aGlsZSAodHJ1ZSl7XG4gICAgICBub2RlPXF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZihub2RlLmxlZnQ9PW51bGwpe1xuICAgICAgICBpZiAoaW5wdXRfc2V0Lmxlbmd0aD09MCl7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbnVtYmVyPWlucHV0X3NldC5zaGlmdCgpO1xuICAgICAgICBpZiAobnVtYmVyIT0wKXtcbiAgICAgICAgICBuZXdfbm9kZT0gbmV3IFRyZWVOb2RlKG51bWJlcik7XG4gICAgICAgICAgbm9kZS5sZWZ0PW5ld19ub2RlO1xuICAgICAgICAgIHF1ZXVlLnB1c2gobmV3X25vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG5cbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICBpZihub2RlLnJpZ2h0PT1udWxsKXtcbiAgICAgICAgaWYoaW5wdXRfc2V0Lmxlbmd0aD09MCl7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbnVtYmVyPWlucHV0X3NldC5zaGlmdCgpO1xuICAgICAgICBpZihudW1iZXIhPTApe1xuICAgICAgICAgIG5ld19ub2RlPSBuZXcgVHJlZU5vZGUobnVtYmVyKTtcbiAgICAgICAgICBub2RlLnJpZ2h0PW5ld19ub2RlO1xuICAgICAgICAgIHF1ZXVlLnB1c2gobmV3X25vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByb290O1xuICB9XG59XG5mdW5jdGlvbiBnZXRJbnB1dCgpe1xuICBpbnB1dD1wcm9jZXNzLmFyZ3ZbMl07XG4gIC8vaW5wdXQ9J1s1LDIsMTNdJztcbiAgLy9pbnB1dF9zZXQ9aW5wdXQucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoJyAnLCAnJykuc3BsaXQoJywnKTtcbiAgLy9pbnB1dF9zZXQ9aW5wdXRfc2V0Lm1hcChmdW5jdGlvbih4KXtyZXR1cm4gbmV3IE51bWJlcih4KX0pO1xuICAvL3RtcCA9IHZhcmlhYmxlSW5wdXQoaW5wdXRfc2V0KTtcbiAgdG1wPW5ldyBOdW1iZXIoaW5wdXQpO1xuICByZXR1cm4gdG1wO1xufVxuZnVuY3Rpb24gbGlzdGlmeVJlc3VsdChyb290KXtcbiAgcmV2PVtdO1xuICBxPVtdO1xuICBpZiAocm9vdD09bnVsbCl7XG4gICAgcmV0dXJuIHJldjtcbiAgfVxuICBxLnB1c2gocm9vdClcbiAgd2hpbGUocS5sZW5ndGghPTApe1xuICAgIG5vZGU9cS5zaGlmdCgpXG4gICAgcmV2LnB1c2gobm9kZS52YWwpXG4gICAgaWYobm9kZS5sZWZ0IT1udWxsKXEucHVzaChub2RlLmxlZnQpO1xuICAgIGlmKG5vZGUucmlnaHQhPW51bGwpcS5wdXNoKG5vZGUucmlnaHQpO1xuICB9XG4gIHJldHVybiByZXY7XG59XG5mdW5jdGlvbiBwcmludFJlc3VsdChyZXN1bHRfc2V0KXtcbiAgLy9yZXN1bHRfc2V0PWxpc3RpZnlSZXN1bHQocmVzdWx0X3NldCk7XG4gIC8vcmVzdWx0X3NldD1yZXN1bHRfc2V0Lm1hcChmdW5jdGlvbih4KXtyZXR1cm4gJ1wiJyt4KydcIid9KVxuICAvL2NvbnNvbGUubG9nKCdbJytyZXYuam9pbihcIixcIikrJ10nKTtcbiAgY29uc29sZS5sb2cocmVzdWx0X3NldCk7XG59XG5mdW5jdGlvbiBtYWluKCkge1xuICB0bXA9Z2V0SW5wdXQoKVxuICByZXN1bHRfc2V0PWp1ZGdlU3F1YXJlU3VtKHRtcCk7XG4gIHByaW50UmVzdWx0KHJlc3VsdF9zZXQpO1xufVxubWFpbigpXG4iLCAiamF2YSI6ICJcblxuXG5cbi8vIHNzc3RhcnRcbnB1YmxpYyBjbGFzcyBTb2x1dGlvbiB7XG5cbiAgICBwdWJsaWMgYm9vbGVhbiBqdWRnZVNxdWFyZVN1bShpbnQgYykge1xuICAgICAgICBmb3IgKGxvbmcgYSA9IDA7IGEgKiBhIDw9IGM7IGErKykge1xuICAgICAgICAgICAgaW50IGIgPSAgYyAtIChpbnQpKGEgKiBhKTtcbiAgICAgICAgICAgIGludCBpID0gMSwgc3VtID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChzdW0gPCBiKSB7XG4gICAgICAgICAgICAgICAgc3VtICs9IGk7XG4gICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN1bSA9PSBiKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cblxuICAgIC8vIGVlZW5kXG5cblxuICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcblxuICAgICAgICBTdHJpbmcgaW5wdXQ9YXJnc1swXTtcbiAgICAgICAgLypcbiAgICAgICAgU3RyaW5nW10gaXRlbXM9aW5wdXQucmVwbGFjZUFsbChcIlxcXFxbXCIsXCJcIikucmVwbGFjZUFsbChcIlxcXFxdXCIsXCJcIikucmVwbGFjZUFsbChcIlxcXFxzXCIsXCJcIikuc3BsaXQoXCIsXCIpO1xuICAgICAgICBTdHJpbmdbXSByZXN1bHRzPW5ldyBTdHJpbmdbaXRlbXMubGVuZ3RoXTtcbiAgICAgICAgZm9yKGludCBpPTA7aTxpdGVtcy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICByZXN1bHRzW2ldPSgoaXRlbXNbaV0pLnJlcGxhY2UoXCJcXFwiXCIsXCJcIikpO1xuICAgICAgICAgICAgfWNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gbmZlKXtcbiAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJ0aGUgZm9ybWF0IG9mIGlucHV0IGlzIG5vdCByZWNvZ25pemVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICovXG4gICAgICAgIFNvbHV0aW9uIHNvbHV0aW9uID0gbmV3IFNvbHV0aW9uKCk7XG4gICAgICAgIGJvb2xlYW4gcmVzdWx0PXNvbHV0aW9uLmp1ZGdlU3F1YXJlU3VtKEludGVnZXIucGFyc2VJbnQoaW5wdXQpKTtcbiAgICAgICAgLypcbiAgICAgICAgU3lzdGVtLm91dC5wcmludCgnWycpO1xuICAgICAgICBmb3IoU3RyaW5nIHdvcmQ6cmVzdWx0KXtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnQoXCJcXFwiXCIpO1xuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludCh3b3JkKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnQoXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnQoJ10nKTtcbiAgICAgICAgKi9cbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKHJlc3VsdCk7XG4gICAgfVxufVxuIn0='),(4,'二叉搜索树中找众数',1,'树',0,0,'<p></p><p>给定一个带有重复数的二叉搜索树（BST），找出所有<a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\"target=\"_blank\">众数</a>（出现次数最多的数）。</p>\n<p>假设二叉搜索树定义如下：</p><ul>\n<li>一个节点的左子树仅包含节点值<b>小于或等于</b>根值的节点。</li>\n<li>一个节点的右子树仅包含节点值<b>大于或等于</b>根值的节点。</li>\n<li>左、右子树也必须是二叉搜索树。</li></ul><p>\n例子：<br/>\n给定二叉搜索树<code>[1,0,2,2]</code>：<br/>\n</p><pre>\n   1\n    \n     2\n    /\n   2\n</pre><p>\n返回<code>[2]</code>。\n</p><p><b>注意：</b>\n如果不止一个众数，你可以把它们按任意顺序返回。\n</p><p><b>更进一步：</b>\n不占用额外空间你可以吗？（假设不算由于递归引起的隐式堆栈空间）。\n</p>','[{\"value\":\"c\",\"text\":\"C\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMode(struct TreeNode* root, int* returnSize) {\n    \n}\"},{\"value\":\"cpp\",\"text\":\"C++\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findMode(TreeNode* root) {\n        \n    }\n};\"},{\"value\":\"csharp\",\"text\":\"C#\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int[] FindMode(TreeNode root) {\n        \n    }\n}\"},{\"value\":\"java\",\"text\":\"Java\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] findMode(TreeNode root) {\n        \n    }\n}\"},{\"value\":\"python3\",\"text\":\"Python3\",\"defaultCode\":\"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \"},{\"value\":\"javascript\",\"text\":\"JavaScript\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar findMode = function(root) {\n    \n};\"},{\"value\":\"ruby\",\"text\":\"Ruby\",\"defaultCode\":\"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer[]}\ndef find_mode(root)\n    \nend\"},{\"value\":\"golang\",\"text\":\"Go\",\"defaultCode\":\"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findMode(root *TreeNode) []int {\n    \n}\"]',NULL,NULL,1,'[1,0,2,2]\n','[2]',''),(5,'Recover Binary Search Tree',3,'Tree,Depth-first Search',0,0,'<p></p><p>\nTwo elements of a binary search tree (BST) are swapped by mistake.</p><p>Recover the tree without changing its structure.\n</p><b>Note:</b><br/>\nA solution using O(<i>n</i>) space is pretty straight forward. Could you devise a constant space solution?\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void recoverTree(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def recoverTree(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: void Do not return anything, modify root in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nvoid recoverTree(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void RecoverTree(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {void} Do not return anything, modify root in-place instead.\r\n */\r\nvar recoverTree = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Void} Do not return anything, modify root in-place instead.\r\ndef recover_tree(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func recoverTree(_ root: TreeNode?) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc recoverTree(root *TreeNode)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def recoverTree(root: TreeNode): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'[5,2,13]','[18,20,13]',''),(6,'test',3,'aa,bb',0,0,'test','[{\"value\":\"c\",\"text\":\"C\",\"defaultCode\":\"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target) {\n    \n}\"]',NULL,NULL,1,'','',''),(7,'Lowest Common Ancestor of a Binary Tree',2,'Tree',0,0,'<p></p><p>\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n</p><p>\nAccording to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow <b>a node to be a descendant of itself</b>).”\n</p><pre>\n        _______3______\n       /              \\\n    ___5__          ___1__\n   /      \\        /      \\\n   6      _2       0       8\n         /  \\\n         7   4\n</pre><p>\nFor example, the lowest common ancestor (LCA) of nodes <code>5</code> and <code>1</code> is <code>3</code>. Another example is LCA of nodes <code>5</code> and <code>4</code> is <code>5</code>, since a node can be a descendant of itself according to the LCA definition.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def lowestCommonAncestor(self, root, p, q):\r\n        """\r\n        :type root: TreeNode\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {TreeNode} p\r\n * @param {TreeNode} q\r\n * @return {TreeNode}\r\n */\r\nvar lowestCommonAncestor = function(root, p, q) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {TreeNode} p\r\n# @param {TreeNode} q\r\n# @return {TreeNode}\r\ndef lowest_common_ancestor(root, p, q)\r\n    \r\nend\" }]',NULL,NULL,1,'none','none','none'),(8,'Random Pick Index',2,'Reservoir Sampling',0,0,'<p></p><p>\nGiven an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\n</p><p>\n<b>Note:</b><br/>\nThe array size can be very large. Solution that uses too much extra space will not pass the judge.\n</p><p><b>Example:</b>\n</p><pre>\nint[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(3);\n\n// pick(1) should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(1);\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    Solution(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    int pick(int target) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(nums);\r\n * int param_1 = obj.pick(target);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n\n    public Solution(int[] nums) {\n        \n    }\n    \n    public int pick(int target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.pick(target);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n\r\n    def __init__(self, nums):\r\n        """\r\n        \r\n        :type nums: List[int]\r\n        :type numsSize: int\r\n        """\r\n        \r\n\r\n    def pick(self, target):\r\n        """\r\n        :type target: int\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(nums)\r\n# param_1 = obj.pick(target)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} Solution;\n\nSolution* solutionCreate(int* nums, int numsSize) {\n    \n}\n\nint solutionPick(Solution* obj, int target) {\n    \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * struct Solution* obj = solutionCreate(nums, numsSize);\n * int param_1 = solutionPick(obj, target);\n * solutionFree(obj);\n */\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(nums []int) Solution {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) Pick(target int) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(nums);\r\n * param_1 := obj.Pick(target);\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class Solution(var _nums: Array[Int]) {\n    \n    def pick(int target) : Int = {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums);\n * Int param_1 = obj.pick(target);\n */\" }]',NULL,NULL,1,'none','none','none'),(9,'Add and Search Word - Data structure design',2,'Backtracking,Trie,Design',0,0,'<p></p><p>\nDesign a data structure that supports the following two operations:\n</p><pre>\nvoid addWord(word)\nbool search(word)\n</pre><p>\nsearch(word) can search a literal word or a regular expression string containing only letters <code>a-z</code> or <code>.</code>. A <code>.</code> means it can represent any one letter.</p><p>\nFor example:</p><pre>\naddWord(\"bad\")\naddWord(\"dad\")\naddWord(\"mad\")\nsearch(\"pad\") -&gt; false\nsearch(\"bad\") -&gt; true\nsearch(\".ad\") -&gt; true\nsearch(\"b..\") -&gt; true\n</pre><p>\n<b>Note:</b><br/>\nYou may assume that all words are consist of lowercase letters <code>a-z</code>.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show hint.</a></p><div class=\"spoilers\">You should be familiar with how a Trie works. If not, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first.\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class WordDictionary {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    void addWord(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. */\r\n    bool search(string word) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.addWord(word);\r\n * bool param_2 = obj.search(word);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class WordDictionary {\n\n    /** Initialize your data structure here. */\n    public WordDictionary() {\n        \n    }\n    \n    /** Adds a word into the data structure. */\n    public void addWord(String word) {\n        \n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. */\n    public boolean search(String word) {\n        \n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class WordDictionary(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def addWord(self, word):\r\n        """\r\n        Adds a word into the data structure.\r\n        :type word: str\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def search(self, word):\r\n        """\r\n        Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter.\r\n        :type word: str\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary()\r\n# obj.addWord(word)\r\n# param_2 = obj.search(word)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} WordDictionary;\n\n/** Initialize your data structure here. */\nWordDictionary* wordDictionaryCreate() {\n    \n}\n\n/** Adds a word into the data structure. */\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\n    \n}\n\n/** Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. */\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\n    \n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    \n}\n\n/**\n * Your WordDictionary struct will be instantiated and called as such:\n * struct WordDictionary* obj = wordDictionaryCreate();\n * wordDictionaryAddWord(obj, word);\n * bool param_2 = wordDictionarySearch(obj, word);\n * wordDictionaryFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class WordDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    public void AddWord(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.AddWord(word);\r\n * bool param_2 = obj.Search(word);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar WordDictionary = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Adds a word into the data structure. \r\n * @param {string} word\r\n * @return {void}\r\n */\r\nWordDictionary.prototype.addWord = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nWordDictionary.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/** \r\n * Your WordDictionary object will be instantiated and called as such:\r\n * var obj = Object.create(WordDictionary).createNew()\r\n * obj.addWord(word)\r\n * var param_2 = obj.search(word)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class WordDictionary\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Adds a word into the data structure.\r\n    :type word: String\r\n    :rtype: Void\r\n=end\r\n    def add_word(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter.\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary.new()\r\n# obj.add_word(word)\r\n# param_2 = obj.search(word)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type WordDictionary struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() WordDictionary {\r\n    \r\n}\r\n\r\n\r\n/** Adds a word into the data structure. */\r\nfunc (this *WordDictionary) AddWord(word string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. */\r\nfunc (this *WordDictionary) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.AddWord(word);\r\n * param_2 := obj.Search(word);\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class WordDictionary() {\n    \n    /** Adds a word into the data structure. */\n    def addWord(String word) {\n\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. */\n    def search(String word) : Boolean = {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary();\n * obj.addWord(word);\n * Boolean param_2 = obj.search(word);\n */\" }]',NULL,NULL,1,'none','none','none'),(10,'Maximum Subarray',1,'Array,Dynamic Programming,Divide and Conquer',0,0,'<p></p><p>\nFind the contiguous subarray within an array (containing at least one number) which has the largest sum.\n</p><p>\nFor example, given the array <code>[-2,1,-3,4,-1,2,1,-5,4]</code>,<br/>\nthe contiguous subarray <code>[4,-1,2,1]</code> has the largest sum = <code>6</code>.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more practice.</a></p><div class=\"spoilers\"><b>More practice:</b>\n<p>If you have figured out the O(<i>n</i>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxSubArray(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxSubArray(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxSubArray(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxSubArray(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxSubArray(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxSubArray = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_sub_array(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxSubArray(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxSubArray(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(11,'Longest Consecutive Sequence',3,'Array,Union Find',0,0,'<p></p><p>\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\n</p><p>\nFor example,<br/>\nGiven <code>[100, 4, 200, 1, 3, 2]</code>,<br/>\nThe longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Return its length: <code>4</code>.\n</p><p>\nYour algorithm should run in O(<i>n</i>) complexity.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int longestConsecutive(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestConsecutive(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int longestConsecutive(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LongestConsecutive(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar longestConsecutive = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef longest_consecutive(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestConsecutive(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestConsecutive(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestConsecutive(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(12,'Department Top Three Salaries',3,'',0,0,'<p></p><p>\nThe <code>Employee</code> table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p><pre>\n+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n+----+-------+--------+--------------+\n</pre><p>\nThe <code>Department</code> table holds all departments of the company.</p><pre>\n+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+\n</pre><p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows.</p><pre>\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n| IT         | Joe      | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-join-and-sub-query-accepted\">Approach: Using JOIN and sub-query [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-join-and-sub-query-accepted\">Approach: Using <code>JOIN</code> and sub-query [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>A top 3 salary in this company means there is no more than 3 salary bigger than itself in the company.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">as</span> <span class=\"s1\">&#39;Employee&#39;</span><span class=\"p\">,</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n<span class=\"k\">from</span> <span class=\"n\">Employee</span> <span class=\"n\">e1</span>\n<span class=\"k\">where</span> <span class=\"mi\">3</span> <span class=\"o\">&gt;</span>\n<span class=\"p\">(</span>\n    <span class=\"k\">select</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"k\">distinct</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">Salary</span><span class=\"p\">)</span>\n    <span class=\"k\">from</span> <span class=\"n\">Employee</span> <span class=\"n\">e2</span>\n    <span class=\"k\">where</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"o\">&gt;</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n<span class=\"p\">)</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<p>In this code, we count the salary number of which is bigger than e1.Salary. So the output is as below for the sample data.</p>\n<div class=\"codehilite\"><pre><span></span>| Employee | Salary |\n|----------|--------|\n| Henry    | 80000  |\n| Max      | 90000  |\n| Randy    | 85000  |\n</pre></div>\n\n\n<p>Then, we need to join the <strong>Employee</strong> table with <strong>Department</strong> in order to retrieve the department information.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span> <span class=\"s1\">&#39;Department&#39;</span><span class=\"p\">,</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span> <span class=\"s1\">&#39;Employee&#39;</span><span class=\"p\">,</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Employee</span> <span class=\"n\">e1</span>\n        <span class=\"k\">JOIN</span>\n    <span class=\"n\">Department</span> <span class=\"n\">d</span> <span class=\"k\">ON</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"mi\">3</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"k\">SELECT</span>\n            <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"k\">DISTINCT</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">Salary</span><span class=\"p\">)</span>\n        <span class=\"k\">FROM</span>\n            <span class=\"n\">Employee</span> <span class=\"n\">e2</span>\n        <span class=\"k\">WHERE</span>\n            <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"o\">&gt;</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n                <span class=\"k\">AND</span> <span class=\"n\">e1</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span> <span class=\"o\">=</span> <span class=\"n\">e2</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span>\n        <span class=\"p\">)</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>| Department | Employee | Salary |\n|------------|----------|--------|\n| IT         | Joe      | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n</pre></div>',NULL,1,'none','none','none'),(13,'Find Minimum in Rotated Sorted Array',2,'Array,Binary Search',0,0,'<p></p><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p><p>Find the minimum element.</p><p>You may assume no duplicate exists in the array.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMin(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMin(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMin(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMin(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMin(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findMin = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_min(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMin(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMin(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMin(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(14,'Implement strStr()',1,'Two Pointers,String',0,0,'<p></p><p>\nImplement strStr().\n</p><p>\nReturns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int strStr(string haystack, string needle) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def strStr(self, haystack, needle):\r\n        """\r\n        :type haystack: str\r\n        :type needle: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int strStr(char* haystack, char* needle) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int StrStr(string haystack, string needle) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} haystack\r\n * @param {string} needle\r\n * @return {number}\r\n */\r\nvar strStr = function(haystack, needle) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} haystack\r\n# @param {String} needle\r\n# @return {Integer}\r\ndef str_str(haystack, needle)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func strStr(_ haystack: String, _ needle: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func strStr(haystack string, needle string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(15,'Subsets',2,'Array,Backtracking,Bit Manipulation',0,0,'<p></p><p>\nGiven a set of <b>distinct</b> integers, <i>nums</i>, return all possible subsets.\n</p><p><b>Note:</b> The solution set must not contain duplicate subsets.\n</p><p>\nFor example,<br/>\nIf <b><i>nums</i></b> = <code>[1,2,3]</code>, a solution is:\n</p><pre>\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> subsets(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def subsets(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** subsets(int* nums, int numsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> Subsets(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar subsets = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef subsets(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func subsets(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func subsets(nums []int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def subsets(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(16,'Split Array into Consecutive Subsequences',2,'Heap,Greedy',0,0,'<p></p><p>You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,3,4,5]\n<b>Output:</b> True\n<b>Explanation:</b>\nYou can split them into two consecutive subsequences : \n1, 2, 3\n3, 4, 5\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,3,4,4,5,5]\n<b>Output:</b> True\n<b>Explanation:</b>\nYou can split them into two consecutive subsequences : \n1, 2, 3, 4, 5\n3, 4, 5\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,4,4,5]\n<b>Output:</b> False\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the input is in range of [1, 10000]</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    bool isPossible(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPossible(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def isPossible(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: bool\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def isPossible(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPossible(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public bool IsPossible(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossible = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isPossible(_ nums: [Int]) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPossible(nums []int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPossible(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(17,'Minimum Genetic Mutation',2,'',0,0,'<p></p><p>A gene string can be represented by an 8-character long string, with choices from <code>\"A\"</code>, <code>\"C\"</code>, <code>\"G\"</code>, <code>\"T\"</code>.</p><p>Suppose we need to investigate about a mutation (mutation from \"start\" to \"end\"), where ONE mutation is defined as ONE single character changed in the gene string.</p><p>For example, <code>\"AACCGGTT\"</code> -&gt; <code>\"AACCGGTA\"</code> is 1 mutation.</p><p>Also, there is a given gene \"bank\", which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.</p><p>Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from \"start\" to \"end\". If there is no such a mutation, return -1.</p><p><b>Note:</b>\n</p><ol>\n<li>Starting point is assumed to be valid, so it might not be included in the bank.</li>\n<li>If multiple mutations are needed, all mutations during in the sequence must be valid.</li>\n<li>You may assume start and end string is not the same.</li>\n</ol><p><b>Example 1:</b>\n</p><pre>\nstart: \"AACCGGTT\"\nend:   \"AACCGGTA\"\nbank: [\"AACCGGTA\"]\n\nreturn: 1\n</pre><p><b>Example 2:</b>\n</p><pre>\nstart: \"AACCGGTT\"\nend:   \"AAACGGTA\"\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\n\nreturn: 2\n</pre><p><b>Example 3:</b>\n</p><pre>\nstart: \"AAAAACCC\"\nend:   \"AACCCCCC\"\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\n\nreturn: 3\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minMutation(string start, string end, vector<string>& bank) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minMutation(String start, String end, String[] bank) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minMutation(self, start, end, bank):\r\n        """\r\n        :type start: str\r\n        :type end: str\r\n        :type bank: List[str]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minMutation(char* start, char* end, char** bank, int bankSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinMutation(string start, string end, string[] bank) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} start\r\n * @param {string} end\r\n * @param {string[]} bank\r\n * @return {number}\r\n */\r\nvar minMutation = function(start, end, bank) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} start\r\n# @param {String} end\r\n# @param {String[]} bank\r\n# @return {Integer}\r\ndef min_mutation(start, end, bank)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minMutation(_ start: String, _ end: String, _ bank: [String]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minMutation(start string, end string, bank []string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minMutation(start: String, end: String, bank: Array[String]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(18,'Sum of Two Integers',1,'Bit Manipulation',0,0,'<p></p><p>Calculate the sum of two integers <i>a</i> and <i>b</i>, but you are <b>not allowed</b> to use the operator <code>+</code> and <code>-</code>.</p><p><b>Example:</b><br/>\nGiven <i>a</i> = 1 and <i>b</i> = 2, return 3.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/fujiaozhu\">@fujiaozhu</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int getSum(int a, int b) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int getSum(int a, int b) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def getSum(self, a, b):\r\n        """\r\n        :type a: int\r\n        :type b: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int getSum(int a, int b) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int GetSum(int a, int b) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @return {number}\r\n */\r\nvar getSum = function(a, b) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} a\r\n# @param {Integer} b\r\n# @return {Integer}\r\ndef get_sum(a, b)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func getSum(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getSum(a int, b int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getSum(a: Int, b: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(19,'Exchange Seats',2,'',0,0,'<p></p><p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students\' names and their corresponding seat ids.</p>\nThe column <b>id</b> is continuous increment.\nMary wants to change seats for the adjacent students.\nCan you write a SQL query to output the result for Mary?\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n</pre>\nFor the sample input, the output is:\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+\n</pre><p>\n<b>Note:</b><br/>\nIf the number of students is odd, there is no need to change the last one\'s seat.\n</p>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-i-using-flow-control-statement-case-accepted\">Approach I: Using flow control statement CASE [Accepted]</a></li>\n<li><a href=\"#approach-ii-using-bit-manipulation-and-coalesce-accepted\">Approach II: Using bit manipulation and COALESCE() [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-i-using-flow-control-statement-case-accepted\">Approach I: Using flow control statement <code>CASE</code> [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>For students with odd id, the new id is (id+1) after switch unless it is the last seat. And for students with even id, the new id is (id-1). In order to know how many seats in total, we can use a subquery:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">counts</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">seat</span>\n</pre></div>\n\n\n<p>Then, we can use the <code>CASE</code> statement and <code>MOD()</code> function to alter the seat id of each student.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"p\">(</span><span class=\"k\">CASE</span>\n        <span class=\"k\">WHEN</span> <span class=\"k\">MOD</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">AND</span> <span class=\"n\">counts</span> <span class=\"o\">!=</span> <span class=\"n\">id</span> <span class=\"k\">THEN</span> <span class=\"n\">id</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">WHEN</span> <span class=\"k\">MOD</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">AND</span> <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">id</span> <span class=\"k\">THEN</span> <span class=\"n\">id</span>\n        <span class=\"k\">ELSE</span> <span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">END</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">id</span><span class=\"p\">,</span>\n    <span class=\"n\">student</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">seat</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"k\">SELECT</span>\n        <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">counts</span>\n    <span class=\"k\">FROM</span>\n        <span class=\"n\">seat</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">seat_counts</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">id</span> <span class=\"k\">ASC</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h4 id=\"approach-ii-using-bit-manipulation-and-coalesce-accepted\">Approach II: Using bit manipulation and <code>COALESCE()</code> [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Bit manipulation expression <code>(id+1)^1-1</code> can calculate the new id after switch.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">id</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">student</span> <span class=\"k\">FROM</span> <span class=\"n\">seat</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>| id | (id+1)^1-1 | student |\n|----|------------|---------|\n| 1  | 2          | Abbot   |\n| 2  | 1          | Doris   |\n| 3  | 4          | Emerson |\n| 4  | 3          | Green   |\n| 5  | 6          | Jeames  |\n</pre></div>\n\n\n<p>Then, we can make a temp table and join seat with this table like below.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"o\">*</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">seat</span> <span class=\"n\">s1</span>\n        <span class=\"k\">LEFT</span> <span class=\"k\">JOIN</span>\n    <span class=\"n\">seat</span> <span class=\"n\">s2</span> <span class=\"k\">ON</span> <span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>| id | student | id | student |\n|----|---------|----|---------|\n| 1  | Abbot   | 2  | Doris   |\n| 2  | Doris   | 1  | Abbot   |\n| 3  | Emerson | 4  | Green   |\n| 4  | Green   | 3  | Emerson |\n| 5  | Jeames  |    |         |\n</pre></div>\n\n\n<blockquote>\n<p>Note:The first two columns are from s1 and the last two are from s2.</p>\n</blockquote>\n<p>At last, we can output s1.id and s2.student. However, the s2.student is NULL for seat id \'5\' but s1.student is right. Thus, we we can use function <a href=\"https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#function_coalesce\"><code>COALESCE()</code></a> to generate the correct output for the last record.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">COALESCE</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">student</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">student</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">seat</span> <span class=\"n\">s1</span>\n        <span class=\"k\">LEFT</span> <span class=\"k\">JOIN</span>\n    <span class=\"n\">seat</span> <span class=\"n\">s2</span> <span class=\"k\">ON</span> <span class=\"p\">((</span><span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: This solution comes from <a href=\"https://discuss.leetcode.com/user/fangxiaofang\">@FANGXIAOFANG</a>.</p>\n</blockquote>',NULL,1,'none','none','none'),(20,'Longest Increasing Path in a Matrix',3,'Depth-first Search,Topological Sort,Memoization',0,0,'<p></p><p>Given an integer matrix, find the length of the longest increasing path.</p><p>\nFrom each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p><p>\n<b>Example 1:</b>\n</p><pre>\nnums = [\n  [<font color=\"red\">9</font>,9,4],\n  [<font color=\"red\">6</font>,6,8],\n  [<font color=\"red\">2</font>,<font color=\"red\">1</font>,1]\n]\n</pre><p>\nReturn <code>4</code><br/>\n\nThe longest increasing path is <code>[1, 2, 6, 9]</code>.</p><p>\n<b>Example 2:</b>\n</p><pre>\nnums = [\n  [<font color=\"red\">3</font>,<font color=\"red\">4</font>,<font color=\"red\">5</font>],\n  [3,2,<font color=\"red\">6</font>],\n  [2,2,1]\n]\n</pre><p>\nReturn <code>4</code><br/>\n\nThe longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestIncreasingPath(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int longestIncreasingPath(int** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LongestIncreasingPath(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {number}\r\n */\r\nvar longestIncreasingPath = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Integer}\r\ndef longest_increasing_path(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestIncreasingPath(matrix [][]int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(21,'Lowest Common Ancestor of a Binary Search Tree',1,'Tree',0,0,'<p></p><p>\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n</p><p>\nAccording to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow <b>a node to be a descendant of itself</b>).”\n</p><pre>\n        _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   0      _4       7       9\n         /  \\\n         3   5\n</pre><p>\nFor example, the lowest common ancestor (LCA) of nodes <code>2</code> and <code>8</code> is <code>6</code>. Another example is LCA of nodes <code>2</code> and <code>4</code> is <code>2</code>, since a node can be a descendant of itself according to the LCA definition.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def lowestCommonAncestor(self, root, p, q):\r\n        """\r\n        :type root: TreeNode\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {TreeNode} p\r\n * @param {TreeNode} q\r\n * @return {TreeNode}\r\n */\r\nvar lowestCommonAncestor = function(root, p, q) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {TreeNode} p\r\n# @param {TreeNode} q\r\n# @return {TreeNode}\r\ndef lowest_common_ancestor(root, p, q)\r\n    \r\nend\" }]',NULL,NULL,1,'none','none','none'),(22,'Course Schedule II',2,'Depth-first Search,Breadth-first Search,Graph,Topological Sort',0,0,'<p></p><p>\nThere are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n - 1</code>.</p><p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p><p>\nGiven the total number of courses and a list of prerequisite <b>pairs</b>, return the ordering of courses you should take to finish all courses.</p><p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\n</p><p>For example:</p><pre>2, [[1,0]]</pre><p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is <code>[0,1]</code></p><pre>4, [[1,0],[2,0],[3,1],[3,2]]</pre><p>There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is <code>[0,1,2,3]</code>. Another correct ordering is<code>[0,2,1,3]</code>.</p><p><b>Note:</b><br/>\n</p><ol>\n<li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more hints.</a></p><div class=\"spoilers\"><b>Hints:</b>\n<ol>\n<li>This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.</li>\n<li><a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.</li>\n<li>Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>.</li>\n</ol>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findOrder(self, numCourses, prerequisites):\r\n        """\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesRowSize, int prerequisitesColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] FindOrder(int numCourses, int[,] prerequisites) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} numCourses\r\n * @param {number[][]} prerequisites\r\n * @return {number[]}\r\n */\r\nvar findOrder = function(numCourses, prerequisites) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num_courses\r\n# @param {Integer[][]} prerequisites\r\n# @return {Integer[]}\r\ndef find_order(num_courses, prerequisites)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findOrder(numCourses int, prerequisites [][]int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(23,'Integer Replacement',2,'Math,Bit Manipulation',0,0,'<p></p><p>\nGiven a positive integer <i>n</i> and you can do operations as follow:\n</p><p>\n</p><ol>\n<li>If <i>n</i> is even, replace <i>n</i> with <code><i>n</i>/2</code>.</li>\n<li>If <i>n</i> is odd, you can replace <i>n</i> with either <code><i>n</i> + 1</code> or <code><i>n</i> - 1</code>.</li>\n</ol><p>\nWhat is the minimum number of replacements needed for <i>n</i> to become 1?\n</p><p><b>Example 1:</b>\n</p><pre>\n<b>Input:</b>\n8\n\n<b>Output:</b>\n3\n\n<b>Explanation:</b>\n8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>Input:</b>\n7\n\n<b>Output:</b>\n4\n\n<b>Explanation:</b>\n7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor\n7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int integerReplacement(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int integerReplacement(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def integerReplacement(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int integerReplacement(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int IntegerReplacement(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar integerReplacement = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef integer_replacement(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func integerReplacement(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func integerReplacement(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def integerReplacement(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(24,'N-Queens II',3,'Backtracking',0,0,'<p></p><p>Follow up for N-Queens problem.</p><p>Now, instead outputting board configurations, return the total number of distinct solutions.</p><p><img src=\"https://leetcode.com/static/images/problemset/8-queens.png\"/></p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int totalNQueens(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int totalNQueens(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def totalNQueens(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int totalNQueens(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int TotalNQueens(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar totalNQueens = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef total_n_queens(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func totalNQueens(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func totalNQueens(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def totalNQueens(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(25,'Word Pattern',1,'Hash Table',0,0,'<p></p><p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p><p> Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>str</code>.</p><p>\n<b>Examples:</b><br/>\n</p><ol>\n<li>pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat dog\"</code> should return true.</li>\n<li>pattern = <code>\"abba\"</code>, str = <code>\"dog cat cat fish\"</code> should return false.</li>\n<li>pattern = <code>\"aaaa\"</code>, str = <code>\"dog cat cat dog\"</code> should return false.</li>\n<li>pattern = <code>\"abba\"</code>, str = <code>\"dog dog dog dog\"</code> should return false.</li>\n</ol><p>\n<b>Notes:</b><br/>\nYou may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters separated by a single space.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/minglotus6\">@minglotus6</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool wordPattern(string pattern, string str) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean wordPattern(String pattern, String str) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def wordPattern(self, pattern, str):\r\n        """\r\n        :type pattern: str\r\n        :type str: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool wordPattern(char* pattern, char* str) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool WordPattern(string pattern, string str) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} pattern\r\n * @param {string} str\r\n * @return {boolean}\r\n */\r\nvar wordPattern = function(pattern, str) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} pattern\r\n# @param {String} str\r\n# @return {Boolean}\r\ndef word_pattern(pattern, str)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func wordPattern(_ pattern: String, _ str: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wordPattern(pattern string, str string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def wordPattern(pattern: String, str: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(26,'Department Highest Salary',2,'',0,0,'<p></p><p>\nThe <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p><pre>\n+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\n</pre><p>\nThe <code>Department</code> table holds all departments of the company.</p><pre>\n+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+\n</pre><p>Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, Max has the highest salary in the IT department and Henry has the highest salary in the Sales department.</p><pre>\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| Sales      | Henry    | 80000  |\n+------------+----------+--------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-join-and-in-clause-accepted\">Approach: Using JOIN and IN clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-join-and-in-clause-accepted\">Approach: Using <code>JOIN</code> and <code>IN</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Since the <strong>Employee</strong> table contains the <em>Salary</em> and <em>DepartmentId</em> information, we can query the highest salary in a department.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">DepartmentId</span><span class=\"p\">,</span> <span class=\"k\">MAX</span><span class=\"p\">(</span><span class=\"n\">Salary</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Employee</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">DepartmentId</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: There might be multiple employees having the same highest salary, so it is safe not to include the employee name information in this query.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>| DepartmentId | MAX(Salary) |\n|--------------|-------------|\n| 1            | 90000       |\n| 2            | 80000       |\n</pre></div>\n\n\n<p>Then, we can join table <strong>Employee</strong> and <strong>Department</strong>, and query the (DepartmentId, Salary) are in the temp table using <code>IN</code> statement as below.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">Department</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"k\">AS</span> <span class=\"s1\">&#39;Department&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">Employee</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"k\">AS</span> <span class=\"s1\">&#39;Employee&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">Salary</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Employee</span>\n        <span class=\"k\">JOIN</span>\n    <span class=\"n\">Department</span> <span class=\"k\">ON</span> <span class=\"n\">Employee</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span> <span class=\"o\">=</span> <span class=\"n\">Department</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"p\">(</span><span class=\"n\">Employee</span><span class=\"p\">.</span><span class=\"n\">DepartmentId</span> <span class=\"p\">,</span> <span class=\"n\">Salary</span><span class=\"p\">)</span> <span class=\"k\">IN</span>\n    <span class=\"p\">(</span>   <span class=\"k\">SELECT</span>\n            <span class=\"n\">DepartmentId</span><span class=\"p\">,</span> <span class=\"k\">MAX</span><span class=\"p\">(</span><span class=\"n\">Salary</span><span class=\"p\">)</span>\n        <span class=\"k\">FROM</span>\n            <span class=\"n\">Employee</span>\n        <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">DepartmentId</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>| Department | Employee | Salary |\n|------------|----------|--------|\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n</pre></div>',NULL,1,'none','none','none'),(27,'Maximum Product Subarray',2,'Array,Dynamic Programming',0,0,'<p></p><p>\nFind the contiguous subarray within an array (containing at least one number) which has the largest product.\n</p><p>\nFor example, given the array <code>[2,3,-2,4]</code>,<br/>\nthe contiguous subarray <code>[2,3]</code> has the largest product = <code>6</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProduct(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProduct(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProduct(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProduct(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxProduct = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_product(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxProduct(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProduct(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(28,'Combinations',2,'Backtracking',0,0,'<p></p><p>\nGiven two integers <i>n</i> and <i>k</i>, return all possible combinations of <i>k</i> numbers out of 1 ... <i>n</i>.\n</p><p>\nFor example,<br/>\nIf <i>n</i> = 4 and <i>k</i> = 2, a solution is:\n</p><pre>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> combine(int n, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def combine(self, n, k):\r\n        """\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combine(int n, int k, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> Combine(int n, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number[][]}\r\n */\r\nvar combine = function(n, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {Integer[][]}\r\ndef combine(n, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func combine(n int, k int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def combine(n: Int, k: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(29,'Find K Closest Elements',2,'Binary Search',0,0,'<p></p><p>\nGiven a sorted array, two integers <code>k</code> and <code>x</code>, find the <code>k</code> closest elements to <code>x</code> in the array.  The result should also be sorted in ascending order.\nIf there is a tie,  the smaller elements are always preferred.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,4,5], k=4, x=3\n<b>Output:</b> [1,2,3,4]\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,4,5], k=4, x=-1\n<b>Output:</b> [1,2,3,4]\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The value k is positive and will always be smaller than the length of the sorted array.</li>\n<li> Length of the given array is positive and will not exceed 10<sup>4</sup></li>\n<li> Absolute value of elements in the array and x will not exceed 10<sup>4</sup></li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findClosestElements(vector<int>& arr, int k, int x) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> findClosestElements(List<Integer> arr, int k, int x) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findClosestElements(self, arr, k, x):\r\n        """\r\n        :type arr: List[int]\r\n        :type k: int\r\n        :type x: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findClosestElements(self, arr, k, x):\r\n        """\r\n        :type arr: List[int]\r\n        :type k: int\r\n        :type x: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> FindClosestElements(IList<int> arr, int k, int x) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} arr\r\n * @param {number} k\r\n * @param {number} x\r\n * @return {number[]}\r\n */\r\nvar findClosestElements = function(arr, k, x) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} arr\r\n# @param {Integer} k\r\n# @param {Integer} x\r\n# @return {Integer[]}\r\ndef find_closest_elements(arr, k, x)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findClosestElements(_ arr: [Int], _ k: Int, _ x: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findClosestElements(arr []int, k int, x int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findClosestElements(arr: List[Int], k: Int, x: Int): List[Int] = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(30,'Largest Divisible Subset',2,'Dynamic Programming,Math',0,0,'<p></p><p>\nGiven a set of <b>distinct</b> positive integers, find the largest subset such that every pair (S<sub>i</sub>, S<sub>j</sub>) of elements in this subset satisfies: S<sub>i</sub> % S<sub>j</sub> = 0 or S<sub>j</sub> % S<sub>i</sub> = 0.\n</p><p>If there are multiple solutions, return any subset is fine.\n</p><p><b>Example 1:</b>\n</p><pre>\nnums: [1,2,3]\n\nResult: [1,2] (of course, [1,3] will also be ok)\n</pre><p><b>Example 2:</b>\n</p><pre>\nnums: [1,2,4,8]\n\nResult: [1,2,4,8]\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/stomach_ache\">@Stomach_ache</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> largestDivisibleSubset(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def largestDivisibleSubset(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def largestDivisibleSubset(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* largestDivisibleSubset(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> LargestDivisibleSubset(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar largestDivisibleSubset = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef largest_divisible_subset(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func largestDivisibleSubset(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func largestDivisibleSubset(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def largestDivisibleSubset(nums: Array[Int]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(31,'Odd Even Linked List',2,'Linked List',0,0,'<p></p><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p><p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p><p>\n</p><p>\n<b>Example:</b><br/>\nGiven <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>,<br/>\nreturn <code>1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code>.\n</p><p>\n<b>Note:</b><br/>\nThe relative order inside both the even and odd groups should remain as it was in the input. <br/>\nThe first node is considered odd, the second node even and so on ...\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/DjangoUnchained\">@DjangoUnchained</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* oddEvenList(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def oddEvenList(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* oddEvenList(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode OddEvenList(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar oddEvenList = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef odd_even_list(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func oddEvenList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc oddEvenList(head *ListNode) *ListNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def oddEvenList(head: ListNode): ListNode = {\n        \n    }\n}\" }]','<h2 id=\"solution\">Solution</h2>\n<p><strong>Intuition</strong></p>\n<p>Put the odd nodes in a linked list and the even nodes in another. Then link the evenList to the tail of the oddList.</p>\n<p><strong>Algorithm</strong></p>\n<p>The solution is very intuitive. But it is not trivial to write a concise and bug-free code.</p>\n<p>A well-formed <code>LinkedList</code> need two pointers head and tail to support operations at both ends. The variables <code>head</code> and <code>odd</code> are the head pointer and tail pointer of one <code>LinkedList</code> we call oddList; the variables <code>evenHead</code> and <code>even</code> are the head pointer and tail pointer of another <code>LinkedList</code> we call evenList. The algorithm traverses the original LinkedList and put the odd nodes into the oddList and the even nodes into the evenList. To traverse a LinkedList we need at least one pointer as an iterator for the current node. But here the pointers <code>odd</code> and <code>even</code> not only serve as the tail pointers but also act as the iterators of the original list.</p>\n<p>The best way of solving any linked list problem is to visualize it either in your mind or on a piece of paper. An illustration of our algorithm is following:</p>\n<p align=\"center\"><img alt=\"Illustration of odd even linked list\" src=\"https://leetcode.com/media/documents/328_Odd_Even.svg\" title=\"Odd Even Linked List\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 1. Step by step example of the odd and even linked list.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">oddEvenList</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">odd</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">,</span> <span class=\"n\">evenHead</span> <span class=\"o\">=</span> <span class=\"n\">even</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">even</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">odd</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">even</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">odd</span> <span class=\"o\">=</span> <span class=\"n\">odd</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">even</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">odd</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n            <span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">even</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">odd</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">evenHead</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. There are total <script type=\"math/tex; mode=display\">n</script> nodes and we visit each node once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. All we need is the four pointers.</p>\n</li>\n</ul>',NULL,1,'none','none','none'),(32,'Palindrome Linked List',1,'Linked List,Two Pointers',0,0,'<p></p><p>Given a singly linked list, determine if it is a palindrome.</p><p><b>Follow up:</b><br/>\nCould you do it in O(n) time and O(1) space?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isPalindrome(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def isPalindrome(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nbool isPalindrome(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsPalindrome(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {Boolean}\r\ndef is_palindrome(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func isPalindrome(_ head: ListNode?) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc isPalindrome(head *ListNode) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def isPalindrome(head: ListNode): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(33,'Rotate Function',2,'Math',0,0,'<p></p><p>\nGiven an array of integers <code>A</code> and let <i>n</i> to be its length.\n</p><p>\nAssume <code>B<sub>k</sub></code> to be an array obtained by rotating the array <code>A</code> <i>k</i> positions clock-wise, we define a \"rotation function\" <code>F</code> on <code>A</code> as follow:\n</p><p>\n<code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>.</p><p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>. \n</p><p><b>Note:</b><br/>\n<i>n</i> is guaranteed to be less than 10<sup>5</sup>.\n</p><p><b>Example:</b>\n</p><pre>\nA = [4, 3, 2, 6]\n\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxRotateFunction(vector<int>& A) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxRotateFunction(int[] A) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxRotateFunction(self, A):\r\n        """\r\n        :type A: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxRotateFunction(int* A, int ASize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxRotateFunction(int[] A) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} A\r\n * @return {number}\r\n */\r\nvar maxRotateFunction = function(A) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} a\r\n# @return {Integer}\r\ndef max_rotate_function(a)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxRotateFunction(_ A: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxRotateFunction(A []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxRotateFunction(A: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(34,'Customers Who Never Order',1,'',0,0,'<p></p><p>\nSuppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p><p>\nTable: <code>Customers</code>.</p><pre>\n+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n</pre><p>\nTable: <code>Orders</code>.</p><pre>\n+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n</pre><p>Using the above tables as example, return the following:</p><pre>\n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-sub-query-and-not-in-clause-accepted\">Approach: Using sub-query and NOT IN clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-sub-query-and-not-in-clause-accepted\">Approach: Using sub-query and <code>NOT IN</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>If we have a list of customers who have ever ordered, it will be easy to know who never ordered.</p>\n<p>We can use the following code to get such list.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">customerid</span> <span class=\"k\">from</span> <span class=\"n\">orders</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Then, we can use <code>NOT IN</code> to query the customers who are not in this list.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">customers</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"k\">as</span> <span class=\"s1\">&#39;Customers&#39;</span>\n<span class=\"k\">from</span> <span class=\"n\">customers</span>\n<span class=\"k\">where</span> <span class=\"n\">customers</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"k\">not</span> <span class=\"k\">in</span>\n<span class=\"p\">(</span>\n    <span class=\"k\">select</span> <span class=\"n\">customerid</span> <span class=\"k\">from</span> <span class=\"n\">orders</span>\n<span class=\"p\">);</span>\n</pre></div>',NULL,1,'none','none','none'),(35,'Reverse Words in a String',2,'String',0,0,'<p></p><p>\nGiven an input string, reverse the string word by word.\n</p><p>\nFor example,<br/>\nGiven s = \"<code>the sky is blue</code>\",<br/>\nreturn \"<code>blue is sky the</code>\".\n</p><p>\n<b><font color=\"red\">Update (2015-02-12):</font></b><br/>\nFor C programmers: Try to solve it <i>in-place</i> in <i>O</i>(1) space.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show clarification.</a></p><div class=\"spoilers\"><b>Clarification:</b>\n<p>\n</p><ul>\n<li>What constitutes a word?<br/>\nA sequence of non-space characters constitutes a word.</li>\n<li>Could the input string contain leading or trailing spaces?<br/>\nYes. However, your reversed string should not contain leading or trailing spaces.</li>\n<li>How about multiple spaces between two words?<br/>\nReduce them to a single space in the reversed string.</li>\n</ul>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void reverseWords(string &s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"public class Solution {\r\n    public String reverseWords(String s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reverseWords(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void reverseWords(char *s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ReverseWords(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nvar reverseWords = function(str) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(36,'Minimum Window Substring',3,'Hash Table,Two Pointers,String',0,0,'<p></p><p>\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n</p><p>\nFor example,<br/>\n<b>S</b> = <code>\"ADOBECODEBANC\"</code><br/>\n<b>T</b> = <code>\"ABC\"</code><br/>\n</p><p>\nMinimum window is <code>\"BANC\"</code>.\n</p><p>\n<b>Note:</b><br/>\nIf there is no such window in S that covers all characters in T, return the empty string <code>\"\"</code>.\n</p><p>\nIf there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string minWindow(string s, string t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minWindow(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* minWindow(char* s, char* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string MinWindow(string s, string t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {string}\r\n */\r\nvar minWindow = function(s, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} t\r\n# @return {String}\r\ndef min_window(s, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minWindow(_ s: String, _ t: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minWindow(s string, t string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(37,'Judge Route Circle',1,'String',0,0,'<p></p><p>\nInitially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to <b>the original place</b>. \n</p><p>\nThe move sequence is represented by a string. And each move is represent by a character. The valid robot moves are <code>R</code> (Right), <code>L</code> (Left), <code>U</code> (Up) and <code>D</code> (down). The output should be true or false representing whether the robot makes a circle.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"UD\"\n<b>Output:</b> true\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"LL\"\n<b>Output:</b> false\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    bool judgeCircle(string moves) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean judgeCircle(String moves) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def judgeCircle(self, moves):\n        """\n        :type moves: str\n        :rtype: bool\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def judgeCircle(self, moves):\n        """\n        :type moves: str\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool judgeCircle(char* moves) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public bool JudgeCircle(string moves) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} moves\n * @return {boolean}\n */\nvar judgeCircle = function(moves) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} moves\n# @return {Boolean}\ndef judge_circle(moves)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func judgeCircle(_ moves: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func judgeCircle(moves string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def judgeCircle(moves: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(38,'Valid Perfect Square',1,'Binary Search,Math',0,0,'<p></p><p>Given a positive integer <i>num</i>, write a function which returns True if <i>num</i> is a perfect square else False.</p><p>\n<b>Note:</b> <b>Do not</b> use any built-in library function such as <code>sqrt</code>.\n</p><p><b>Example 1:</b>\n</p><pre>\nInput: 16\nReturns: True\n</pre><p><b>Example 2:</b>\n</p><pre>\nInput: 14\nReturns: False\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/elmirap\">@elmirap</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isPerfectSquare(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPerfectSquare(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isPerfectSquare(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: bool\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPerfectSquare(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsPerfectSquare(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {boolean}\r\n */\r\nvar isPerfectSquare = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Boolean}\r\ndef is_perfect_square(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isPerfectSquare(_ num: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPerfectSquare(num int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPerfectSquare(num: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(39,'Count of Range Sum',3,'Divide and Conquer,Binary Search Tree',0,0,'<p></p><p>\n    Given an integer array <code>nums</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.<br/>\n\n    Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and \n    <code>j</code> (<code>i</code> ? <code>j</code>), inclusive.\n</p><p>\n<b>Note:</b><br/>\n    A naive algorithm of <i>O</i>(<i>n</i><sup>2</sup>) is trivial. You MUST do better than that.\n</p><p>\n<b>Example:</b><br/>\n    Given <i>nums</i> = <code>[-2, 5, -1]</code>, <i>lower</i> = <code>-2</code>, <i>upper</i> = <code>2</code>,<br/>\n    Return <code>3</code>.<br/>\n    The three ranges are : <code>[0, 0]</code>, <code>[2, 2]</code>, <code>[0, 2]</code> and their respective sums are: <code>-2, -1, 2</code>.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int countRangeSum(vector<int>& nums, int lower, int upper) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countRangeSum(int[] nums, int lower, int upper) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countRangeSum(self, nums, lower, upper):\r\n        """\r\n        :type nums: List[int]\r\n        :type lower: int\r\n        :type upper: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countRangeSum(int* nums, int numsSize, int lower, int upper) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CountRangeSum(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} lower\r\n * @param {number} upper\r\n * @return {number}\r\n */\r\nvar countRangeSum = function(nums, lower, upper) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} lower\r\n# @param {Integer} upper\r\n# @return {Integer}\r\ndef count_range_sum(nums, lower, upper)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func countRangeSum(_ nums: [Int], _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countRangeSum(nums []int, lower int, upper int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countRangeSum(nums: Array[Int], lower: Int, upper: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(40,'Number of Digit One',3,'Math',0,0,'<p></p><p>Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.</p><p>\nFor example:<br/> \nGiven n = 13,<br/>\nReturn 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int countDigitOne(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countDigitOne(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countDigitOne(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countDigitOne(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CountDigitOne(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar countDigitOne = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef count_digit_one(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countDigitOne(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countDigitOne(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countDigitOne(n: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-solve-it-mathematically-accepted\">Approach #2 Solve it mathematically [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do as directed in question.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>:</li>\n<li>Convert <script type=\"math/tex; mode=display\">i</script> to string and count <script type=\"math/tex; mode=display\">\\text{\'1\'}</script> in each integer string</li>\n<li>Add count of <script type=\"math/tex; mode=display\">\\text{\'1\'}</script> in each string to the sum, say <script type=\"math/tex; mode=display\">countr</script>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">countDigitOne</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">countr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">string</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">countr</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">countr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n*log_{10}(n))</script>.</li>\n<li>We iterate from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>\n</li>\n<li>\n<p>In each iteration, we convert integer to string and count \'1\' in string which takes linear time in number of digits in <script type=\"math/tex; mode=display\">i</script>, which is <script type=\"math/tex; mode=display\">log_{10}(n)</script>.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(log_{10}(n))</script> Extra space for the countr and the converted string <script type=\"math/tex; mode=display\">\\text{str}</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-solve-it-mathematically-accepted\">Approach #2 Solve it mathematically [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>In Approach #1, we manually calculated the number of all the <script type=\"math/tex; mode=display\">\'1\'</script>s in the digits, but this is very slow. Hence, we need a way to find a pattern in the way <script type=\"math/tex; mode=display\">\'1\'</script>s (or for that matter any digit) appears in the numbers. We could then use the pattern to formulate the answer.</p>\n<p>Consider the <script type=\"math/tex; mode=display\">1</script>s in <script type=\"math/tex; mode=display\">\\text{ones}</script> place , <script type=\"math/tex; mode=display\">\\text{tens}</script> place, <script type=\"math/tex; mode=display\">\\text{hundreds}</script> place and so on... An analysis\nhas been performed in the following figure.</p>\n<p align=\"center\"><img alt=\"Number of digit one\" src=\"../Figures/233/number_of_digit_one.png\" width=\"800px\" /></p>\n<p>From the figure, we can see that from digit \'1\' at <script type=\"math/tex; mode=display\">\\text{ones}</script> place repeat in group of 1 after interval of <script type=\"math/tex; mode=display\">10</script>. Similarly, \'1\' at <script type=\"math/tex; mode=display\">\\text{tens}</script> place repeat in group of 10 after interval of <script type=\"math/tex; mode=display\">100</script>.\nThis can be formulated as <script type=\"math/tex; mode=display\">(n/(i*10))*i</script>.</p>\n<p>Also, notice that if the digit at <script type=\"math/tex; mode=display\">\\text{tens}</script> place is <script type=\"math/tex; mode=display\">\\text{\'1\'}</script>, then the number of terms with <script type=\"math/tex; mode=display\">\\text{\'1\'s}</script>  is increased by <script type=\"math/tex; mode=display\">x+1</script>, if the number is say <script type=\"math/tex; mode=display\">\\text{\"ab1x\"}</script>. As if digits at <script type=\"math/tex; mode=display\">\\text{tens}</script> place is greater than <script type=\"math/tex; mode=display\">1</script>, then all the <script type=\"math/tex; mode=display\">10</script> occurances of numbers with <script type=\"math/tex; mode=display\">\'1\'</script> at <script type=\"math/tex; mode=display\">\\text{tens}</script> place have taken place, hence, we add <script type=\"math/tex; mode=display\">10</script>.\nThis is formluated as <script type=\"math/tex; mode=display\">{\\min(\\max((\\text{n mod (i*10)} )-i+1,0),i)}</script>.</p>\n<p>Lets take an example, say <script type=\"math/tex; mode=display\">n= 1234</script>.</p>\n<p>No of <script type=\"math/tex; mode=display\">\\text{\'1\'}</script> in <script type=\"math/tex; mode=display\">\\text{ones}</script> place = <script type=\"math/tex; mode=display\">1234/10</script>(corresponding to 1,11,21,...1221) + <script type=\"math/tex; mode=display\">\\min(4,1)</script>(corresponding to 1231) =<script type=\"math/tex; mode=display\">124</script>\n</p>\n<p>No of <script type=\"math/tex; mode=display\">\\text{\'1\'}</script> in <script type=\"math/tex; mode=display\">\\text{tens}</script> place = <script type=\"math/tex; mode=display\">(1234/100)*10</script>(corresponding to 10,11,12,...,110,111,...1919) +<script type=\"math/tex; mode=display\">\\min(21,10)</script>(corresponding to 1210,1211,...1219)=<script type=\"math/tex; mode=display\">130</script>\n</p>\n<p>No of <script type=\"math/tex; mode=display\">\\text{\'1\'}</script> in <script type=\"math/tex; mode=display\">\\text{hundreds}</script> place = <script type=\"math/tex; mode=display\">(1234/1000)*100</script>(corresponding to 100,101,12,...,199) +<script type=\"math/tex; mode=display\">\\min(135,100)</script>(corresponding to 1100,1101...1199)=<script type=\"math/tex; mode=display\">200</script>\n</p>\n<p>No of <script type=\"math/tex; mode=display\">\\text{\'1\'}</script> in <script type=\"math/tex; mode=display\">\\text{thousands}</script> place = <script type=\"math/tex; mode=display\">(1234/10000)*10000</script> +<script type=\"math/tex; mode=display\">\\min(235,1000)</script>(corresponding to 1000,1001,...1234)=<script type=\"math/tex; mode=display\">235</script>\n</p>\n<p>Therefore, Total = <script type=\"math/tex; mode=display\">124+130+200+235 = 689</script>.</p>\n<p>Herein, one formula has been devised, but many other formulae can be devised for faster implementations, but the essence and complexity remains the same. The users are encouraged to try to divise their own version of solution using the mathematical concepts.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script> incrementing by <script type=\"math/tex; mode=display\">10</script> each time:</li>\n<li>Add  <script type=\"math/tex; mode=display\">(n/(i*10))*i</script> to <script type=\"math/tex; mode=display\">\\text{countr}</script> representing the repetition of groups of $$i$ sizes after each <script type=\"math/tex; mode=display\">(i*10)</script> interval.</li>\n<li>Add <script type=\"math/tex; mode=display\">{\\min(\\max((\\text{n mod (i*10)} )-i+1,0),i)}</script> to <script type=\"math/tex; mode=display\">\\text{countr}</script> representing the additional digits dependant on the digit in <script type=\"math/tex; mode=display\">i</script>th place as described in intuition.</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">countDigitOne</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">countr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">divider</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n        <span class=\"n\">countr</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"n\">divider</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">divider</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0LL</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">countr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(log_{10}(n))</script>.</li>\n<li>\n<p>No of iterations equal to the number of digits in n which is <script type=\"math/tex; mode=display\">log_{10}(n)</script>\n</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script> space required.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/abhinavbansal0\">@abhinavbansal0</a>.</p>',NULL,1,'none','none','none'),(41,'Longest Substring with At Least K Repeating Characters',2,'',0,0,'<p></p><p>\nFind the length of the longest substring <b><i>T</i></b> of a given string (consists of lowercase letters only) such that every character in <b><i>T</i></b> appears no less than <i>k</i> times.\n</p><p><b>Example 1:</b>\n</p><pre>\nInput:\ns = \"aaabb\", k = 3\n\nOutput:\n3\n\nThe longest substring is \"aaa\", as \'a\' is repeated 3 times.\n</pre><p><b>Example 2:</b>\n</p><pre>\nInput:\ns = \"ababbc\", k = 2\n\nOutput:\n5\n\nThe longest substring is \"ababb\", as \'a\' is repeated 2 times and \'b\' is repeated 3 times.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int longestSubstring(string s, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int longestSubstring(String s, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestSubstring(self, s, k):\r\n        """\r\n        :type s: str\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int longestSubstring(char* s, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LongestSubstring(string s, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar longestSubstring = function(s, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef longest_substring(s, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestSubstring(_ s: String, _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestSubstring(s string, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestSubstring(s: String, k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(42,'Duplicate Emails',1,'',0,0,'<p></p><p>\nWrite a SQL query to find all duplicate emails in a table named <code>Person</code>.</p><pre>\n+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n</pre><p>For example, your query should return the following for the above table:</p><pre>\n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n</pre><p><b>Note</b>: All emails are in lowercase.</p>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-i-using-group-by-and-a-temporary-table-accepted\">Approach I: Using GROUP BY and a temporary table [Accepted]</a></li>\n<li><a href=\"#approach-ii-using-group-by-and-having-condition-accepted\">Approach II: Using GROUP BY and HAVING condition [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-i-using-group-by-and-a-temporary-table-accepted\">Approach I: Using <code>GROUP BY</code> and a temporary table [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Duplicated emails existed more than one time. To count the times each email exists, we can use the following code.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">Email</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">num</span>\n<span class=\"k\">from</span> <span class=\"n\">Person</span>\n<span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">Email</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>| Email   | num |\n|---------|-----|\n| a@b.com | 2   |\n| c@d.com | 1   |\n</pre></div>\n\n\n<p>Taking this as a temporary table, we can get a solution as below.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">Email</span> <span class=\"k\">from</span>\n<span class=\"p\">(</span>\n  <span class=\"k\">select</span> <span class=\"n\">Email</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">num</span>\n  <span class=\"k\">from</span> <span class=\"n\">Person</span>\n  <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">Email</span>\n<span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">statistic</span>\n<span class=\"k\">where</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<h4 id=\"approach-ii-using-group-by-and-having-condition-accepted\">Approach II: Using <code>GROUP BY</code> and <code>HAVING</code> condition [Accepted]</h4>\n<p>A more common used way to add a condition to a <code>GROUP BY</code> is to use the <code>HAVING</code> clause, which is much simpler and more efficient.</p>\n<p>So we can rewrite the above solution to this one.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">Email</span>\n<span class=\"k\">from</span> <span class=\"n\">Person</span>\n<span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">Email</span>\n<span class=\"k\">having</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"n\">Email</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(43,'Evaluate Reverse Polish Notation',2,'Stack',0,0,'<p></p><p>\nEvaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\">Reverse Polish Notation</a>.\n</p><p>\nValid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.\n</p><p>\nSome examples:<br/>\n</p><pre>\n  [\"2\", \"1\", \"+\", \"3\", \"*\"] -&gt; ((2 + 1) * 3) -&gt; 9\n  [\"4\", \"13\", \"5\", \"/\", \"+\"] -&gt; (4 + (13 / 5)) -&gt; 6\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int evalRPN(vector<string>& tokens) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int evalRPN(String[] tokens) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def evalRPN(self, tokens):\r\n        """\r\n        :type tokens: List[str]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int evalRPN(char** tokens, int tokensSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int EvalRPN(string[] tokens) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} tokens\r\n * @return {number}\r\n */\r\nvar evalRPN = function(tokens) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} tokens\r\n# @return {Integer}\r\ndef eval_rpn(tokens)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func evalRPN(tokens []string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(44,'Water and Jug Problem',2,'Math',0,0,'<p></p><p>You are given two jugs with capacities <i>x</i> and <i>y</i> litres. There is an infinite amount of water supply available.\nYou need to determine whether it is possible to measure exactly <i>z</i> litres using these two jugs.</p><p>If <i>z</i> liters of water is measurable, you must have <i>z</i> liters of water contained within <b>one or both buckets</b> by the end.</p><p>\nOperations allowed:\n</p><ul>\n<li>Fill any of the jugs completely with water.</li>\n<li>Empty any of the jugs.</li>\n<li>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.</li>\n</ul><p><b>Example 1:</b> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\" target=\"_blank\"><i>\"Die Hard\"</i> example</a>)\n</p><pre>\nInput: x = 3, y = 5, z = 4\nOutput: True\n</pre><p><b>Example 2:</b>\n</p><pre>\nInput: x = 2, y = 6, z = 5\nOutput: False\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/vinod23\">@vinod23</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canMeasureWater(int x, int y, int z) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canMeasureWater(int x, int y, int z) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canMeasureWater(self, x, y, z):\r\n        """\r\n        :type x: int\r\n        :type y: int\r\n        :type z: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canMeasureWater(int x, int y, int z) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanMeasureWater(int x, int y, int z) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} z\r\n * @return {boolean}\r\n */\r\nvar canMeasureWater = function(x, y, z) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} x\r\n# @param {Integer} y\r\n# @param {Integer} z\r\n# @return {Boolean}\r\ndef can_measure_water(x, y, z)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func canMeasureWater(_ x: Int, _ y: Int, _ z: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canMeasureWater(x int, y int, z int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canMeasureWater(x: Int, y: Int, z: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(45,'Power of Three',1,'Math',0,0,'<p></p><p>\n    Given an integer, write a function to determine if it is a power of three.\n</p><p>\n<b>Follow up:</b><br/>\n    Could you do it without using any loop / recursion?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isPowerOfThree(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPowerOfThree(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isPowerOfThree(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPowerOfThree(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsPowerOfThree(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar isPowerOfThree = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Boolean}\r\ndef is_power_of_three(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isPowerOfThree(_ n: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPowerOfThree(n int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPowerOfThree(n: Int): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-loop-iteration-accepted\">Approach #1 Loop Iteration [Accepted]</a></li>\n<li><a href=\"#approach-2-base-conversion-accepted\">Approach #2 Base Conversion [Accepted]</a></li>\n<li><a href=\"#approach-3-mathematics-accepted\">Approach #3 Mathematics [Accepted]</a></li>\n<li><a href=\"#approach-4-integer-limitations-accepted\">Approach #4 Integer Limitations [Accepted]</a></li>\n</ul>\n</li>\n<li><a href=\"#performance-measurements\">Performance Measurements</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<p>In this article we will look into ways of speeding up simple computations and why that is useful in practice.</p>\n<hr />\n<h4 id=\"approach-1-loop-iteration-accepted\">Approach #1 Loop Iteration [Accepted]</h4>\n<p>One simple way of finding out if a number <code>n</code> is a power of a number <code>b</code> is to keep dividing <code>n</code> by <code>b</code> as long as the remainder is <strong>0</strong>. This is because we can write</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nn &= b^x \\\\\nn &= b \\times b \\times \\ldots \\times b\n\\end{align*}\n</script>\n</p>\n<p>Hence it should be possible to divide <code>n</code> by <code>b</code> <code>x</code> times, every time with a remainder of <strong>0</strong> and the end result to be <strong>1</strong>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPowerOfThree</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">n</span> <span class=\"o\">/=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Notice that we need a guard to check that <code>n != 0</code>, otherwise the while loop will never finish. For negative numbers, the algorithm does not make sense, so we will include this guard as well.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(log_b(n))</script>. In our case that is <script type=\"math/tex; mode=display\">O(log_3n)</script>. The number of divisions is given by that logarithm.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. We are not using any additional memory.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-base-conversion-accepted\">Approach #2 Base Conversion [Accepted]</h4>\n<p>In Base 10, all powers of 10 start with the digit <strong>1</strong> and then are followed only by <strong>0</strong> (e.g. 10, 100, 1000). This is true for other bases and their respective powers. For instance in <em>base 2</em>, the representations of <script type=\"math/tex; mode=display\">10_2</script>, <script type=\"math/tex; mode=display\">100_2</script> and <script type=\"math/tex; mode=display\">1000_2</script> are <script type=\"math/tex; mode=display\">2_{10}</script>, <script type=\"math/tex; mode=display\">4_{10}</script> and <script type=\"math/tex; mode=display\">8_{10}</script> respectively. Therefore if we convert our number to base 3 and the representation is of the form 100...0, then the number is a power of 3.</p>\n<p><strong>Proof</strong></p>\n<p>Given the base 3 representation of a number as the array <code>s</code>, with the least significant digit on index 0, the formula for converting from base <strong>3</strong> to base <strong>10</strong> is:</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\sum_{i=0}^{len(s) - 1} s[i] * 3^{i}\n</script>\n</p>\n<p>Therefore, having just one digit of <strong>1</strong> and everything else <strong>0</strong> means the number is a power of 3.</p>\n<p><strong>Implementation</strong></p>\n<p>All we need to do is convert <sup>[4]</sup> the number to <em>base 3</em> and check if it is written as a leading <strong>1</strong> followed by all <strong>0</strong>.</p>\n<p>A couple of built-in Java functions will help us along the way.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">String</span> <span class=\"n\">baseChange</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">number</span><span class=\"o\">,</span> <span class=\"n\">base</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>The code above converts <code>number</code> into base <code>base</code> and returns the result as a <code>String</code>. For example, <code>Integer.toString(5, 2) == \"101\"</code> and <code>Integer.toString(5, 3) == \"12\"</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">boolean</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">myString</span><span class=\"o\">.</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"s\">&quot;123&quot;</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>The code above checks if a certain <strong>Regular Expression</strong><sup>[2]</sup> pattern exists inside a string. For instance the above will return true if the substring \"123\" exists inside the string <code>myString</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">boolean</span> <span class=\"n\">powerOfThree</span> <span class=\"o\">=</span> <span class=\"n\">baseChange</span><span class=\"o\">.</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"s\">&quot;^10*$&quot;</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>We will use the regular expression above for checking if the string starts with <strong>1</strong> <code>^1</code>, is followed by zero or more <strong>0</strong>s <code>0*</code> and contains nothing else <code>$</code>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPowerOfThree</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">).</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"s\">&quot;^10*$&quot;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(log_3n)</script>.</p>\n<p>Assumptions:</p>\n<ul>\n<li><code>Integer.toString()</code> - Base conversion is generally implemented as a repeated division. The complexity of  should be similar to our approach #1: <script type=\"math/tex; mode=display\">O(log_3n)</script>.</li>\n<li><code>String.matches()</code> - Method iterates over the entire string. The number of digits in the base 3 representation of <code>n</code> is <script type=\"math/tex; mode=display\">O(log_3n)</script>.</li>\n</ul>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log_3n)</script>.</p>\n<p>We are using two additional variables,</p>\n<ul>\n<li>The string of the base 3 representation of the number (size <script type=\"math/tex; mode=display\">log_3n</script>)</li>\n<li>The string of the regular expression (constant size)</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-mathematics-accepted\">Approach #3 Mathematics [Accepted]</h4>\n<p>We can use mathematics as follows</p>\n<p>\n<script type=\"math/tex; mode=display\">\nn = 3^i \\\\\ni = log_3(n) \\\\\ni = \\frac{log_b(n)}{log_b(3)}\n</script>\n</p>\n<p><code>n</code> is a power of three if and only if <code>i</code> is an integer. In Java, we check if a number is an integer by taking the decimal part (using <code>% 1</code>) and checking if it is 0.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPowerOfThree</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">log10</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">log10</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Common pitfalls</strong></p>\n<p>This solution is problematic because we start using <code>double</code>s, which means we are subject to precision errors. This means, we should never use <code>==</code> when comparing <code>double</code>s. That is because the result of <code>Math.log10(n) / Math.log10(3)</code> could be <code>5.0000001</code> or <code>4.9999999</code>. This effect can be observed by using the function <code>Math.log()</code> instead of <code>Math.log10()</code>.</p>\n<p>In order to fix that, we need to compare the result against an <code>epsilon</code>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">log</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">log</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">epsilon</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">epsilon</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">Unknown</script> The expensive operation here is <code>Math.log</code>, which upper bounds the time complexity of our algorithm. The implementation is dependent on the language we are using and the compiler<sup>[3]</sup></p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. We are not using any additional memory. The <code>epsilon</code> variable can be inlined.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-integer-limitations-accepted\">Approach #4 Integer Limitations [Accepted]</h4>\n<p>An important piece of information can be deduced from the function signature</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPowerOfThree</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>In particular, <code>n</code> is of type <code>int</code>. In Java, this means it is a 4 byte, signed integer [ref]. The maximum value of this data type is <strong>2147483647</strong>. Three ways of calculating this value are</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/15004944/max-value-of-integer\">Google</a></li>\n<li><code>System.out.println(Integer.MAX_VALUE);</code></li>\n<li>MaxInt = <script type=\"math/tex; mode=display\">\\frac{ 2^{32} }{2} - 1</script> since we use 32 bits to represent the number, half of the range is used for negative numbers and 0 is part of the positive numbers</li>\n</ul>\n<p>Knowing the limitation of <code>n</code>, we can now deduce that the maximum value of <code>n</code> that is also a power of three is <strong>1162261467</strong>. We calculate this as:</p>\n<p>\n<script type=\"math/tex; mode=display\">\n3^{\\lfloor{}log_3{MaxInt}\\rfloor{}} = 3^{\\lfloor{}19.56\\rfloor{}} = 3^{19} = 1162261467\n</script>\n</p>\n<p>Therefore, the possible values of <code>n</code> where we should return <code>true</code> are <script type=\"math/tex; mode=display\">3^0</script>, <script type=\"math/tex; mode=display\">3^1</script> ... <script type=\"math/tex; mode=display\">3^{19}</script>. Since 3 is a prime number, the only divisors of <script type=\"math/tex; mode=display\">3^{19}</script> are <script type=\"math/tex; mode=display\">3^0</script>, <script type=\"math/tex; mode=display\">3^1</script> ... <script type=\"math/tex; mode=display\">3^{19}</script>, therefore all we need to do is divide <script type=\"math/tex; mode=display\">3^{19}</script> by <code>n</code>. A remainder of <strong>0</strong> means <code>n</code> is a divisor of <script type=\"math/tex; mode=display\">3^{19}</script> and therefore a power of three.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPowerOfThree</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"mi\">1162261467</span> <span class=\"o\">%</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>. We are only doing one operation.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. We are not using any additional memory.</p>\n</li>\n</ul>\n<h2 id=\"performance-measurements\">Performance Measurements</h2>\n<p>Single runs of the function make it is hard to accurately measure the difference of the two solutions. On LeetCode, on the <em>Accepted Solutions Runtime Distribution</em> page, all solutions being between <code>15 ms</code> and <code>20 ms</code>. For completeness, we have proposed the following benchmark to see how the two solutions differ.</p>\n<p><strong>Java Benchmark Code</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Solution</span> <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Solution</span><span class=\"o\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">iterations</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"c1\">// See table header for this value</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">iterations</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"na\">isPowerOfThree</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>In the table below, the values are in seconds.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Iterations</th>\n<th align=\"center\">\n<script type=\"math/tex; mode=display\">10^6</script>\n</th>\n<th align=\"center\">\n<script type=\"math/tex; mode=display\">10^7</script>\n</th>\n<th align=\"center\">\n<script type=\"math/tex; mode=display\">10^8</script>\n</th>\n<th align=\"center\">\n<script type=\"math/tex; mode=display\">10^9</script>\n</th>\n<th align=\"center\">\n<script type=\"math/tex; mode=display\">Maxint</script>\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Java Approach #1 (Naive)</td>\n<td align=\"center\">0.04</td>\n<td align=\"center\">0.07</td>\n<td align=\"center\">0.30</td>\n<td align=\"center\">2.47</td>\n<td align=\"center\">5.26</td>\n</tr>\n<tr>\n<td align=\"center\">Java Approach #2 (Strings)</td>\n<td align=\"center\">0.68</td>\n<td align=\"center\">4.02</td>\n<td align=\"center\">38.90</td>\n<td align=\"center\">409.16</td>\n<td align=\"center\">893.89</td>\n</tr>\n<tr>\n<td align=\"center\">Java Approach #3 (Logarithms)</td>\n<td align=\"center\">0.09</td>\n<td align=\"center\">0.50</td>\n<td align=\"center\">4.59</td>\n<td align=\"center\">45.53</td>\n<td align=\"center\">97.50</td>\n</tr>\n<tr>\n<td align=\"center\">Java Approach #4 (Fast)</td>\n<td align=\"center\">0.04</td>\n<td align=\"center\">0.06</td>\n<td align=\"center\">0.08</td>\n<td align=\"center\">0.41</td>\n<td align=\"center\">0.78</td>\n</tr>\n</tbody>\n</table>\n<p>As we can see, for small values of N, the difference is not noticeable, but as we do more iterations and the values of <code>n</code> passed to <code>isPowerOfThree()</code> grow, we see significant boosts in performance for Approach #4.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Simple optimizations like this might seem negligible, but historically, when computation power was an issue, it allowed certain computer programs (such as Quake 3<sup>[1]</sup>) possible.</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li>[1] <a href=\"https://en.wikipedia.org/wiki/Fast_inverse_square_root\">https://en.wikipedia.org/wiki/Fast_inverse_square_root</a></li>\n<li>[2] <a href=\"https://en.wikipedia.org/wiki/Regular_expression\">https://en.wikipedia.org/wiki/Regular_expression</a></li>\n<li>[3] <a href=\"http://developer.classpath.org/doc/java/lang/StrictMath-source.html\">http://developer.classpath.org/doc/java/lang/StrictMath-source.html</a></li>\n<li>[4] <a href=\"http://www.cut-the-knot.org/recurrence/conversion.shtml\">http://www.cut-the-knot.org/recurrence/conversion.shtml</a></li>\n</ul>\n<p>Analysis written by: <a href=\"http://andrei.cioara.me\">@aicioara</a></p>',NULL,1,'none','none','none'),(46,'Implement Queue using Stacks',1,'Stack,Design',0,0,'<p></p><p>\nImplement the following operations of a queue using stacks.\n</p><ul>\n<li>\npush(x) -- Push element x to the back of queue.\n</li>\n<li>\npop() -- Removes the element from in front of queue.\n</li>\n<li>\npeek() -- Get the front element.\n</li>\n<li>\nempty() -- Return whether the queue is empty.\n</li>\n</ul><b>Notes:</b><br/><ul>\n<li>You must use <i>only</i> standard operations of a stack -- which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\n<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\n</ul>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MyQueue {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyQueue() {\r\n        \r\n    }\r\n    \r\n    /** Push element x to the back of queue. */\r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element from in front of queue and returns that element. */\r\n    int pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the front element. */\r\n    int peek() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the queue is empty. */\r\n    bool empty() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.peek();\r\n * bool param_4 = obj.empty();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MyQueue {\n\n    /** Initialize your data structure here. */\n    public MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        \n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        \n    }\n    \n    /** Get the front element. */\n    public int peek() {\n        \n    }\n    \n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MyQueue(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def push(self, x):\r\n        """\r\n        Push element x to the back of queue.\r\n        :type x: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def pop(self):\r\n        """\r\n        Removes the element from in front of queue and returns that element.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def peek(self):\r\n        """\r\n        Get the front element.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def empty(self):\r\n        """\r\n        Returns whether the queue is empty.\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} MyQueue;\n\n/** Initialize your data structure here. */\nMyQueue* myQueueCreate(int maxSize) {\n    \n}\n\n/** Push element x to the back of queue. */\nvoid myQueuePush(MyQueue* obj, int x) {\n    \n}\n\n/** Removes the element from in front of queue and returns that element. */\nint myQueuePop(MyQueue* obj) {\n    \n}\n\n/** Get the front element. */\nint myQueuePeek(MyQueue* obj) {\n    \n}\n\n/** Returns whether the queue is empty. */\nbool myQueueEmpty(MyQueue* obj) {\n    \n}\n\nvoid myQueueFree(MyQueue* obj) {\n    \n}\n\n/**\n * Your MyQueue struct will be instantiated and called as such:\n * struct MyQueue* obj = myQueueCreate(maxSize);\n * myQueuePush(obj, x);\n * int param_2 = myQueuePop(obj);\n * int param_3 = myQueuePeek(obj);\n * bool param_4 = myQueueEmpty(obj);\n * myQueueFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MyQueue {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyQueue() {\r\n        \r\n    }\r\n    \r\n    /** Push element x to the back of queue. */\r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element from in front of queue and returns that element. */\r\n    public int Pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the front element. */\r\n    public int Peek() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the queue is empty. */\r\n    public bool Empty() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.Push(x);\r\n * int param_2 = obj.Pop();\r\n * int param_3 = obj.Peek();\r\n * bool param_4 = obj.Empty();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyQueue = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Push element x to the back of queue. \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMyQueue.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes the element from in front of queue and returns that element.\r\n * @return {number}\r\n */\r\nMyQueue.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the front element.\r\n * @return {number}\r\n */\r\nMyQueue.prototype.peek = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Returns whether the queue is empty.\r\n * @return {boolean}\r\n */\r\nMyQueue.prototype.empty = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyQueue object will be instantiated and called as such:\r\n * var obj = Object.create(MyQueue).createNew()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.peek()\r\n * var param_4 = obj.empty()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MyQueue\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Push element x to the back of queue.\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes the element from in front of queue and returns that element.\r\n    :rtype: Integer\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the front element.\r\n    :rtype: Integer\r\n=end\r\n    def peek()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns whether the queue is empty.\r\n    :rtype: Boolean\r\n=end\r\n    def empty()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue.new()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MyQueue struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyQueue {\r\n    \r\n}\r\n\r\n\r\n/** Push element x to the back of queue. */\r\nfunc (this *MyQueue) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\n/** Removes the element from in front of queue and returns that element. */\r\nfunc (this *MyQueue) Pop() int {\r\n    \r\n}\r\n\r\n\r\n/** Get the front element. */\r\nfunc (this *MyQueue) Peek() int {\r\n    \r\n}\r\n\r\n\r\n/** Returns whether the queue is empty. */\r\nfunc (this *MyQueue) Empty() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * param_2 := obj.Pop();\r\n * param_3 := obj.Peek();\r\n * param_4 := obj.Empty();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class MyQueue() {\n    \n    /** Push element x to the back of queue. */\n    def push(int x) {\n\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    def pop() : Int = {\n\n    }\n    \n    /** Get the front element. */\n    def peek() : Int = {\n\n    }\n    \n    /** Returns whether the queue is empty. */\n    def empty() : Boolean = {\n\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue();\n * obj.push(x);\n * Int param_2 = obj.pop();\n * Int param_3 = obj.peek();\n * Boolean param_4 = obj.empty();\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-two-stacks-push-on-per-operation-pop-o1-per-operation\">Approach #1 (Two Stacks) Push - O(n) per operation, Pop - O(1) per operation.</a></li>\n<li><a href=\"#approach-2-two-stacks-push-o1-per-operation-pop-amortized-o1-per-operation\">Approach #2 (Two Stacks) Push - O(1) per operation, Pop - Amortized O(1) per operation.</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for beginners. It introduces the following ideas:\nQueue, Stack.</p>\n<h2 id=\"solution\">Solution</h2>\n<p>Queue is <strong>FIFO</strong> (first in - first out) data structure, in which the elements are inserted from one side - <code>rear</code> and removed from the other - <code>front</code>.\nThe most intuitive way to implement it is with linked lists, but this article will introduce another approach  using stacks.\nStack is <strong>LIFO</strong> (last in - first out) data structure, in which elements are added and removed from the same end, called <code>top</code>.\nTo satisfy <strong>FIFO</strong> property of a queue we need to keep two stacks. They serve to reverse arrival order of the  elements and one of them store the queue elements in their final order.</p>\n<hr />\n<h4 id=\"approach-1-two-stacks-push-on-per-operation-pop-o1-per-operation\">Approach #1 (Two Stacks) Push - <script type=\"math/tex; mode=display\">O(n)</script> per operation, Pop - <script type=\"math/tex; mode=display\">O(1)</script> per operation.</h4>\n<p><strong>Algorithm</strong></p>\n<p><strong>Push</strong></p>\n<p>A queue is FIFO (first-in-first-out) but a stack is LIFO (last-in-first-out). This means the newest element must be pushed to the bottom of the stack. To do so we first transfer all <code>s1</code> elements to auxiliary stack <code>s2</code>. Then the newly arrived element is pushed on top of <code>s2</code> and all its elements are popped and pushed to <code>s1</code>.</p>\n<p align=\"center\"><img alt=\"Push an element in queue\" src=\"https://leetcode.com/media/original_images/232_queue_using_stacksBPush.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 1. Push an element in queue</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">front</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">())</span>\n        <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span>\n        <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n    <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span>\n        <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n</ul>\n<p>Each element, with the exception of the newly arrived, is pushed and popped twice. The last inserted element is popped and pushed once. Therefore this gives  <script type=\"math/tex; mode=display\">4 n + 2</script>  operations where <script type=\"math/tex; mode=display\">n</script> is the queue size. The  <code>push</code> and <code>pop</code> operations have <script type=\"math/tex; mode=display\">O(1)</script> time complexity.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nWe need additional memory to store the queue elements</li>\n</ul>\n<p><strong>Pop</strong></p>\n<p>The algorithm pops an element from  the stack <code>s1</code>, because <code>s1</code> stores always on its top the first inserted element in the queue.\nThe front element of the queue is kept as <code>front</code>.</p>\n<p align=\"center\"><img alt=\"Pop an element from queue\" src=\"https://leetcode.com/media/original_images/232_queue_using_stacksBPop.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 2. Pop an element from queue</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Removes the element from the front of queue.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">())</span>\n        <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p><strong>Empty</strong></p>\n<p>Stack <code>s1</code> contains all stack elements, so the algorithm checks <code>s1</code> size to return if the queue is empty.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Return whether the queue is empty.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">empty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p><strong>Peek</strong></p>\n<p>The <code>front</code> element is kept in constant memory and is modified when we push or pop an element.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Get the front element.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">peek</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">front</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nThe <code>front</code> element has been calculated in advance and only returned in <code>peek</code> operation.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<hr />\n<h4 id=\"approach-2-two-stacks-push-o1-per-operation-pop-amortized-o1-per-operation\">Approach #2 (Two Stacks) Push - <script type=\"math/tex; mode=display\">O(1)</script> per operation, Pop - Amortized <script type=\"math/tex; mode=display\">O(1)</script> per operation.</h4>\n<p><strong>Algorithm</strong></p>\n<p><strong>Push</strong></p>\n<p>The newly arrived element is always added on top of stack <code>s1</code> and the first element is kept as <code>front</code> queue element</p>\n<p align=\"center\"><img alt=\"Push an element in queue\" src=\"https://leetcode.com/media/original_images/232_queue_using_stacksAPush.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 3. Push an element in queue</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"kd\">private</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;&gt;();</span>\n\n<span class=\"c1\">// Push element x to the back of queue.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">())</span>\n        <span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p>Аppending an element to a stack is an O(1) operation.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nWe need additional memory to store the queue elements</li>\n</ul>\n<p><strong>Pop</strong></p>\n<p>We have to remove element in front of the queue. This is the first inserted element in the stack <code>s1</code> and it is positioned at the bottom of the stack because of stack\'s <code>LIFO (last in - first out)</code> policy. To remove the bottom element  from  <code>s1</code>, we have to pop all elements from <code>s1</code> and to push them on to an additional stack <code>s2</code>, which helps us to store the elements of <code>s1</code> in reversed order. This way  the bottom element of <code>s1</code> will be positioned on top of <code>s2</code> and we can simply pop it from stack <code>s2</code>. Once <code>s2</code> is empty, the algorithm transfer data from <code>s1</code> to <code>s2</code> again.</p>\n<p align=\"center\"><img alt=\"Pop an element from stack\" src=\"https://leetcode.com/media/original_images/232_queue_using_stacksAPop.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 4. Pop an element from stack</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Removes the element from in front of queue.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span>\n            <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>    \n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity: Amortized <script type=\"math/tex; mode=display\">O(1)</script>, Worst-case <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n</ul>\n<p>In the worst case scenario when stack <code>s2</code> is empty, the algorithm pops <script type=\"math/tex; mode=display\">n</script> elements from stack s1 and pushes <script type=\"math/tex; mode=display\">n</script> elements to <code>s2</code>, where <script type=\"math/tex; mode=display\">n</script> is the queue size. This gives <script type=\"math/tex; mode=display\">2n</script> operations, which is <script type=\"math/tex; mode=display\">O(n)</script>. But when stack <code>s2</code> is not empty the algorithm has <script type=\"math/tex; mode=display\">O(1)</script> time complexity. So what does it mean by Amortized <script type=\"math/tex; mode=display\">O(1)</script>? Please see the next section on Amortized Analysis for more information.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p><strong>Amortized Analysis</strong></p>\n<p>Amortized analysis gives the average performance (over time) of each operation in the worst case. The basic idea is that a worst case operation can alter the state in such a way that the worst case cannot occur again for a long time, thus amortizing its cost.</p>\n<p>Consider this example where we start with an empty queue with the following sequence of operations applied:</p>\n<p>\n<script type=\"math/tex; mode=display\">\npush_1, push_2, \\ldots, push_n, pop_1,pop_2 \\ldots, pop_n\n</script>\n</p>\n<p>The worst case time complexity of a single pop operation is <script type=\"math/tex; mode=display\">O(n)</script>. Since we have <script type=\"math/tex; mode=display\">n</script> pop operations, using the worst-case per operation analysis gives us a total of <script type=\"math/tex; mode=display\">O(n^2)</script> time.</p>\n<p>However, in a sequence of operations the worst case does not occur often in each operation - some operations may be cheap, some may be expensive. Therefore, a traditional worst-case per operation analysis can give overly pessimistic bound. For example, in a dynamic array only some inserts take a linear time, though others - a constant time.</p>\n<p>In the example above, the number of times pop operation can be called is limited by the number of push operations before it. Although a single pop operation could be expensive, it is expensive only once per <code>n</code> times (queue size), when <code>s2</code> is empty and there is a need for data transfer between <code>s1</code> and <code>s2</code>. Hence the total time complexity of the sequence is : <code>n</code> (for push operations) + <code>2*n</code> (for first pop operation) + <code>n - 1</code> ( for pop operations) which is <script type=\"math/tex; mode=display\">O(2*n)</script>.This gives <script type=\"math/tex; mode=display\">O(2n/2n)</script> = <script type=\"math/tex; mode=display\">O(1)</script> average time per operation.</p>\n<p><strong>Empty</strong></p>\n<p>Both stacks <code>s1</code> and <code>s2</code> contain all stack elements, so the algorithm checks <code>s1</code> and <code>s2</code> size to return if the queue is empty.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Return whether the queue is empty.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">empty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p><strong>Peek</strong></p>\n<p>The <code>front</code> element is kept in constant memory and is modified when we push an element. When <code>s2</code> is not empty, front element is positioned on the top of <code>s2</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Get the front element.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">peek</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">front</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>The <code>front</code> element was either previously calculated or returned as a top element of stack <code>s2</code>. Therefore complexity is <script type=\"math/tex; mode=display\">O(1)</script>\n</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(47,'Employees Earning More Than Their Managers',1,'',0,0,'<p></p><p>\nThe <code>Employee</code> table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p><pre>\n+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n</pre><p>Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p><pre>\n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-i-using-where-clause-accepted\">Approach I: Using WHERE clause [Accepted]</a></li>\n<li><a href=\"#approach-i-using-join-clause-accepted\">Approach I: Using JOIN clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-i-using-where-clause-accepted\">Approach I: Using <code>WHERE</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>As this table has the employee\'s manager information, we probably need to select information from it twice.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">b</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: The keyword \'AS\' is optional.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Name</th>\n<th>Salary</th>\n<th>ManagerId</th>\n<th>Id</th>\n<th>Name</th>\n<th>Salary</th>\n<th>ManagerId</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>Henry</td>\n<td>80000</td>\n<td>4</td>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n</tr>\n<tr>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n<td>4</td>\n<td>Max</td>\n<td>90000</td>\n<td></td>\n</tr>\n<tr>\n<td>&gt; The first 3 columns are from a and the last 3 ones are from b.</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Select from two tables will get the <a href=\"https://en.wikipedia.org/wiki/Cartesian_product\">Cartesian product</a> of these two tables. In this case, the output will be 4*4 = 16 records. However, what we interest is the employee\'s salary higher than his/her manager. So we should add two conditions in a <code>WHERE</code> clause like below.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"o\">*</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n    <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">b</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">ManagerId</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n        <span class=\"k\">AND</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Name</th>\n<th>Salary</th>\n<th>ManagerId</th>\n<th>Id</th>\n<th>Name</th>\n<th>Salary</th>\n<th>ManagerId</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Joe</td>\n<td>70000</td>\n<td>3</td>\n<td>3</td>\n<td>Sam</td>\n<td>60000</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>As we only need to output the employee\'s name, so we modify the above code a little to get a solution.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span> <span class=\"s1\">&#39;Employee&#39;</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n    <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">b</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">ManagerId</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n        <span class=\"k\">AND</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<h4 id=\"approach-i-using-join-clause-accepted\">Approach I: Using <code>JOIN</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Actually, <code>JOIN</code> is a more common and efficient way to link tables together, and we can use <code>ON</code> to specify some conditions.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n     <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">NAME</span> <span class=\"k\">AS</span> <span class=\"n\">Employee</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">a</span> <span class=\"k\">JOIN</span> <span class=\"n\">Employee</span> <span class=\"k\">AS</span> <span class=\"n\">b</span>\n     <span class=\"k\">ON</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">ManagerId</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n     <span class=\"k\">AND</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Salary</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">Salary</span>\n<span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(48,'Decode String',2,'Depth-first Search,Stack',0,0,'<p></p><p>\nGiven an encoded string, return it\'s decoded string.\n</p><p>\nThe encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times. Note that <i>k</i> is guaranteed to be a positive integer.</p><p>\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <i>k</i>. For example, there won\'t be input like <code>3a</code> or <code>2[4]</code>.\n</p><p><b>Examples:</b>\n</p><pre>\ns = \"3[a]2[bc]\", return \"aaabcbc\".\ns = \"3[a2[c]]\", return \"accaccacc\".\ns = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string decodeString(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String decodeString(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def decodeString(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* decodeString(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string DecodeString(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar decodeString = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef decode_string(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func decodeString(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func decodeString(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def decodeString(s: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(49,'Minimum Moves to Equal Array Elements II',2,'Math',0,0,'<p></p><p></p><p>Given a <b>non-empty</b> integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p><p>You may assume the array\'s length is at most 10,000.</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b>\n[1,2,3]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nOnly two moves are needed (remember each move increments or decrements one element):\n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minMoves2(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minMoves2(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minMoves2(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minMoves2(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinMoves2(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar minMoves2 = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef min_moves2(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minMoves2(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minMoves2(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minMoves2(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(50,'Max Points on a Line',3,'Hash Table,Math',0,0,'<p></p><p>Given <i>n</i> points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * struct Point {\r\n *     int x;\r\n *     int y;\r\n *     Point() : x(0), y(0) {}\r\n *     Point(int a, int b) : x(a), y(b) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int maxPoints(vector<Point>& points) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a point.\n * class Point {\n *     int x;\n *     int y;\n *     Point() { x = 0; y = 0; }\n *     Point(int a, int b) { x = a; y = b; }\n * }\n */\nclass Solution {\n    public int maxPoints(Point[] points) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a point.\r\n# class Point(object):\r\n#     def __init__(self, a=0, b=0):\r\n#         self.x = a\r\n#         self.y = b\r\n\r\nclass Solution(object):\r\n    def maxPoints(self, points):\r\n        """\r\n        :type points: List[Point]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * struct Point {\r\n *     int x;\r\n *     int y;\r\n * }\r\n */\r\nint maxPoints(struct Point* points, int pointsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * public class Point {\r\n *     public int x;\r\n *     public int y;\r\n *     public Point() { x = 0; y = 0; }\r\n *     public Point(int a, int b) { x = a; y = b; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int MaxPoints(Point[] points) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * function Point(x, y) {\r\n *     this.x = x;\r\n *     this.y = y;\r\n * }\r\n */\r\n/**\r\n * @param {Point[]} points\r\n * @return {number}\r\n */\r\nvar maxPoints = function(points) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a point.\r\n# class Point\r\n#     attr_accessor :x, :y\r\n#     def initialize(x=0, y=0)\r\n#         @x = x\r\n#         @y = y\r\n#     end\r\n# end\r\n\r\n# @param {Point[]} points\r\n# @return {Integer}\r\ndef max_points(points)\r\n    \r\nend\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * type Point struct {\r\n *     X int\r\n *     Y int\r\n * }\r\n */\r\nfunc maxPoints(points []Point) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a point.\n * class Point(var _x: Int, var _y: Int) {\n *     var x: Int = _x\n *     var y: Int = _y\n * }\n */\nobject Solution {\n    def maxPoints(points: Array[Point]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(51,'Wiggle Sort II',2,'Sort',0,0,'<p></p><p>\n    Given an unsorted array <code>nums</code>, reorder it such that\n    <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.\n</p><p>\n<b>Example:</b><br/>\n    (1) Given <code>nums = [1, 5, 1, 1, 6, 4]</code>, one possible answer is <code>[1, 4, 1, 5, 1, 6]</code>. <br/>\n    (2) Given <code>nums = [1, 3, 2, 2, 3, 1]</code>, one possible answer is <code>[2, 3, 1, 3, 1, 2]</code>.\n</p><p>\n<b>Note:</b><br/>\n    You may assume all input has valid answer.\n</p><p>\n<b>Follow Up:</b><br/>\n    Can you do it in O(n) time and/or in-place with O(1) extra space?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void wiggleSort(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void wiggleSort(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def wiggleSort(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void wiggleSort(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void WiggleSort(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */\r\nvar wiggleSort = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Void} Do not return anything, modify nums in-place instead.\r\ndef wiggle_sort(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func wiggleSort(_ nums: inout [Int]) {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wiggleSort(nums []int)  {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def wiggleSort(nums: Array[Int]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(52,'Subtree of Another Tree',1,'Tree',0,0,'<p></p><p>\nGiven two non-empty binary trees <b>s</b> and <b>t</b>, check whether tree <b>t</b> has exactly the same structure and node values with a subtree of <b>s</b>. A subtree of <b>s</b> is a tree consists of a node in <b>s</b> and all of this node\'s descendants. The tree <b>s</b> could also be considered as a subtree of itself.\n</p><p><b>Example 1:</b><br/>\n\nGiven tree s:\n</p><pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n</pre>\nGiven tree t:\n<pre>\n   4 \n  / \\\n 1   2\n</pre>\nReturn <b>true</b>, because t has the same structure and node values with a subtree of s.\n\n\n<p><b>Example 2:</b><br/>\n\nGiven tree s:\n</p><pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n</pre>\nGiven tree t:\n<pre>\n   4\n  / \\\n 1   2\n</pre>\nReturn <b>false</b>.\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode s, TreeNode t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSubtree(self, s, t):\n        """\n        :type s: TreeNode\n        :type t: TreeNode\n        :rtype: bool\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def isSubtree(self, s, t):\n        """\n        :type s: TreeNode\n        :type t: TreeNode\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSubtree(struct TreeNode* s, struct TreeNode* t) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool IsSubtree(TreeNode s, TreeNode t) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} s\n * @param {TreeNode} t\n * @return {boolean}\n */\nvar isSubtree = function(s, t) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} s\n# @param {TreeNode} t\n# @return {Boolean}\ndef is_subtree(s, t)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSubtree(_ s: TreeNode?, _ t: TreeNode?) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSubtree(s *TreeNode, t *TreeNode) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSubtree(s: TreeNode, t: TreeNode): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-preorder-traversal-accepted\">Approach #1 Using Preorder Traversal [Accepted]</a></li>\n<li><a href=\"#approach-2-by-comparison-of-nodes-accepted\">Approach #2 By Comparison of Nodes  [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-preorder-traversal-accepted\">Approach #1 Using Preorder Traversal [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can find the preorder traversal of the given tree <script type=\"math/tex; mode=display\">s</script> and <script type=\"math/tex; mode=display\">t</script>, given by, say <script type=\"math/tex; mode=display\">s_{preorder}</script> and <script type=\"math/tex; mode=display\">t_{preorder}</script> respectively(represented in the form of a string). Now, we can check if <script type=\"math/tex; mode=display\">t_{preorder}</script> is a substring of <script type=\"math/tex; mode=display\">s_{preorder}</script>. </p>\n<p>But, in order to use this approach, we need to treat the given tree in a different manner. Rather than assuming a <script type=\"math/tex; mode=display\">null</script> value for the childern of the leaf nodes, we need to treat the left and right child as a <script type=\"math/tex; mode=display\">lnull</script> and <script type=\"math/tex; mode=display\">rnull</script> value respectively. This is done to ensure that the <script type=\"math/tex; mode=display\">t_{preorder}</script> doesn\'t become a substring of <script type=\"math/tex; mode=display\">s_{preorder}</script> even in cases when <script type=\"math/tex; mode=display\">t</script> isn\'t a subtree of <script type=\"math/tex; mode=display\">s</script>. </p>\n<p>You can also note that we\'ve added a \'#\' before every considering every value. If this isn\'t done, the trees of the form <code>s:[23, 4, 5]</code> and <code>t:[3, 4, 5]</code> will also give a true result since the preorder string of the <code>t(\"23 4 lnull rull 5 lnull rnull\")</code> will be a substring of the preorder string of <code>s(\"3 4 lnull rull 5 lnull rnull\")</code>. Adding a \'#\' before the node\'s value solves this problem.</p>\n<p align=\"center\"><img alt=\"Preorder_null\" src=\"../Figures/572_Subtree_1.PNG\" /></p>\n<p align=\"center\"><img alt=\"Preorder_lnull_rnull\" src=\"../Figures/572_Subtree_2.PNG\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">trees</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSubtree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">tree1</span> <span class=\"o\">=</span> <span class=\"n\">preorder</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">tree2</span> <span class=\"o\">=</span> <span class=\"n\">preorder</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">tree1</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">tree2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">preorder</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;lnull&quot;</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;rnull&quot;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;#&quot;</span><span class=\"o\">+</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">+</span> <span class=\"s\">&quot; &quot;</span> <span class=\"o\">+</span><span class=\"n\">preorder</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">)+</span><span class=\"s\">&quot; &quot;</span> <span class=\"o\">+</span><span class=\"n\">preorder</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m^2+n^2+m*n)</script>. A total of <script type=\"math/tex; mode=display\">n</script> nodes of the tree <script type=\"math/tex; mode=display\">s</script> and <script type=\"math/tex; mode=display\">m</script> nodes of tree <script type=\"math/tex; mode=display\">t</script> are traversed. Assuming string concatenation takes <script type=\"math/tex; mode=display\">O(k)</script> time for strings of length <script type=\"math/tex; mode=display\">k</script> and <code>indexOf</code> takes <script type=\"math/tex; mode=display\">O(m*n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(max(m,n))</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script> for tree <script type=\"math/tex; mode=display\">t</script> and <script type=\"math/tex; mode=display\">m</script> for tree <script type=\"math/tex; mode=display\">s</script> in worst case.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-by-comparison-of-nodes-accepted\">Approach #2 By Comparison of Nodes  [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of creating an inorder traversal, we can treat every node of the given tree <script type=\"math/tex; mode=display\">t</script> as the root, treat it as a subtree and compare the corresponding subtree with the given subtree <script type=\"math/tex; mode=display\">s</script> for equality. For checking the equality, we can compare the all the nodes of the two subtrees. </p>\n<p>For doing this, we make use a function <code>traverse(s,t)</code> which traverses over the given tree <script type=\"math/tex; mode=display\">s</script> and treats every node as the root of the subtree currently being considered. It also checks the two subtrees currently being considered for their equality. In order to check the equality of the two subtrees, we make use of <code>equals(x,y)</code> function, which takes <script type=\"math/tex; mode=display\">x</script> and <script type=\"math/tex; mode=display\">y</script>, which are the roots of the two subtrees to be compared as the inputs and returns True or False depending on whether the two are equal or not. It compares all the nodes of the two subtrees for equality. Firstly, it checks whether the roots of the two trees for equality and then calls itself recursively for the left subtree and the right subtree.</p>\n<p>The follwowing animation depicts an abstracted view of the process:</p>\n<p>!?!../Documents/572_Subtree.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSubtree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">traverse</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">equals</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">TreeNode</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">y</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">==</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">traverse</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">return</span>  <span class=\"n\">s</span><span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span> <span class=\"n\">equals</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">traverse</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">traverse</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. In worst case(skewed tree) <code>traverse</code> function takes <script type=\"math/tex; mode=display\">O(m*n)</script> time. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>. <script type=\"math/tex; mode=display\">n</script> refers to the number of nodes in <script type=\"math/tex; mode=display\">s</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(53,'Max Sum of Rectangle No Larger Than K',3,'Binary Search,Dynamic Programming,Queue',0,0,'<p></p><p>Given a non-empty 2D matrix <i>matrix</i> and an integer <i>k</i>, find the max sum of a rectangle in the <i>matrix</i> such that its sum is no larger than <i>k</i>.</p><p><b>Example:</b><br/>\n</p><pre>Given matrix = [\n  [1,  0, 1],\n  [0, -2, 3]\n]\nk = 2\n</pre><p>The answer is <code>2</code>. Because the sum of rectangle <code>[[0, 1], [-2, 3]]</code> is 2 and 2 is the max number no larger than k (k = 2).</p><p><b>Note:</b><br/>\n</p><ol>\n<li>The rectangle inside the matrix must have an area &gt; 0.</li>\n<li>What if the number of rows is much larger than the number of columns?</li>\n</ol><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/fujiaozhu\">@fujiaozhu</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxSumSubmatrix(self, matrix, k):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxSumSubmatrix(int** matrix, int matrixRowSize, int matrixColSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxSumSubmatrix(int[,] matrix, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar maxSumSubmatrix = function(matrix, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef max_sum_submatrix(matrix, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxSumSubmatrix(_ matrix: [[Int]], _ k: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxSumSubmatrix(matrix [][]int, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxSumSubmatrix(matrix: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(54,'Power of Two',1,'Math,Bit Manipulation',0,0,'<p></p><p>\nGiven an integer, write a function to determine if it is a power of two.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isPowerOfTwo(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPowerOfTwo(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isPowerOfTwo(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPowerOfTwo(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsPowerOfTwo(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar isPowerOfTwo = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Boolean}\r\ndef is_power_of_two(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isPowerOfTwo(_ n: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPowerOfTwo(n int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPowerOfTwo(n: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(55,'K-diff Pairs in an Array',1,'Two Pointers,Array',0,0,'<p></p><p>\nGiven an array of integers and an integer <b>k</b>, you need to find the number of <b>unique</b> k-diff pairs in the array. Here a <b>k-diff</b> pair is defined as an integer pair (i, j), where <b>i</b> and <b>j</b> are both numbers in the array and their <a href=\"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> is <b>k</b>.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [3, 1, 4, 1, 5], k = 2\n<b>Output:</b> 2\n<b>Explanation: </b>There are two 2-diff pairs in the array, (1, 3) and (3, 5).Although we have two 1s in the input, we should only return the number of <b>unique</b> pairs.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>[1, 2, 3, 4, 5], k = 1\n<b>Output: </b>4\n<b>Explanation:</b> There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input: </b>[1, 3, 1, 5, 4], k = 0\n<b>Output: </b>1\n<b>Explanation:</b> There is one 0-diff pair in the array, (1, 1).\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The pairs (i, j) and (j, i) count as the same pair.</li>\n<li>The length of the array won\'t exceed 10,000.</li>\n<li>All the integers in the given input belong to the range: [-1e7, 1e7].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findPairs(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findPairs(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findPairs(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findPairs(int* nums, int numsSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindPairs(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findPairs = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef find_pairs(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findPairs(_ nums: [Int], _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findPairs(nums []int, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findPairs(nums: Array[Int], k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(56,'Consecutive Numbers',2,'',0,0,'<p></p><p>\nWrite a SQL query to find all numbers that appear at least three times consecutively.</p><pre>\n+----+-----+\n| Id | Num |\n+----+-----+\n| 1  |  1  |\n| 2  |  1  |\n| 3  |  1  |\n| 4  |  2  |\n| 5  |  1  |\n| 6  |  2  |\n| 7  |  2  |\n+----+-----+\n</pre><p>For example, given the above <code>Logs</code> table, <code>1</code> is the only number that appears consecutively for at least three times.</p><pre>\n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-distinct-and-where-clause-accepted\">Approach: Using DISTINCT and WHERE clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-distinct-and-where-clause-accepted\">Approach: Using <code>DISTINCT</code> and <code>WHERE</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Consecutive appearing means the Id of the Num are next to each others. Since this problem asks for numbers appearing at least three times consecutively, we can use 3 aliases for this table <strong>Logs</strong>, and then check whether 3 consecutive numbers are all the same.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Logs</span> <span class=\"n\">l1</span><span class=\"p\">,</span>\n    <span class=\"n\">Logs</span> <span class=\"n\">l2</span><span class=\"p\">,</span>\n    <span class=\"n\">Logs</span> <span class=\"n\">l3</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">l1</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">=</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">AND</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">=</span> <span class=\"n\">l3</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">AND</span> <span class=\"n\">l1</span><span class=\"p\">.</span><span class=\"n\">Num</span> <span class=\"o\">=</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Num</span>\n    <span class=\"k\">AND</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Num</span> <span class=\"o\">=</span> <span class=\"n\">l3</span><span class=\"p\">.</span><span class=\"n\">Num</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Num</th>\n<th>Id</th>\n<th>Num</th>\n<th>Id</th>\n<th>Num</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&gt;Note: The first two columns are from l1, then the next two are from l2, and the last two are from l3.</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Then we can select any <em>Num</em> column from the above table to get the target data. However, we need to add a keyword <code>DISTINCT</code> because it will display a duplicated number if one number appears more than 3 times consecutively.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span>\n    <span class=\"n\">l1</span><span class=\"p\">.</span><span class=\"n\">Num</span> <span class=\"k\">AS</span> <span class=\"n\">ConsecutiveNums</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Logs</span> <span class=\"n\">l1</span><span class=\"p\">,</span>\n    <span class=\"n\">Logs</span> <span class=\"n\">l2</span><span class=\"p\">,</span>\n    <span class=\"n\">Logs</span> <span class=\"n\">l3</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">l1</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">=</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">AND</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">=</span> <span class=\"n\">l3</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">AND</span> <span class=\"n\">l1</span><span class=\"p\">.</span><span class=\"n\">Num</span> <span class=\"o\">=</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Num</span>\n    <span class=\"k\">AND</span> <span class=\"n\">l2</span><span class=\"p\">.</span><span class=\"n\">Num</span> <span class=\"o\">=</span> <span class=\"n\">l3</span><span class=\"p\">.</span><span class=\"n\">Num</span>\n<span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(57,'Hamming Distance',1,'Bit Manipulation',0,0,'<p></p><p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p><p><b>Note:</b><br/>\n0 ≤ <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.\n</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b> x = 1, y = 4\n\n<b>Output:</b> 2\n\n<b>Explanation:</b>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ?   ?\n\nThe above arrows point to positions where the corresponding bits are different.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int hammingDistance(int x, int y) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int hammingDistance(int x, int y) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def hammingDistance(self, x, y):\r\n        """\r\n        :type x: int\r\n        :type y: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int hammingDistance(int x, int y) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int HammingDistance(int x, int y) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {number}\r\n */\r\nvar hammingDistance = function(x, y) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} x\r\n# @param {Integer} y\r\n# @return {Integer}\r\ndef hamming_distance(x, y)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func hammingDistance(_ x: Int, _ y: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func hammingDistance(x int, y int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def hammingDistance(x: Int, y: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(58,'Next Greater Element I',1,'Stack',0,0,'<p></p><p>\nYou are given two arrays <b>(without duplicates)</b> <code>nums1</code> and <code>nums2</code> where <code>nums1</code>’s elements are subset of <code>nums2</code>. Find all the next greater numbers for <code>nums1</code>\'s elements in the corresponding places of <code>nums2</code>. \n</p><p>\nThe Next Greater Number of a number <b>x</b> in <code>nums1</code> is the first greater number to its right in <code>nums2</code>. If it does not exist, output -1 for this number.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> <b>nums1</b> = [4,1,2], <b>nums2</b> = [1,3,4,2].\n<b>Output:</b> [-1,3,-1]\n<b>Explanation:</b>\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\n    For number 1 in the first array, the next greater number for it in the second array is 3.\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> <b>nums1</b> = [2,4], <b>nums2</b> = [1,2,3,4].\n<b>Output:</b> [3,-1]\n<b>Explanation:</b>\n    For number 2 in the first array, the next greater number for it in the second array is 3.\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>All elements in <code>nums1</code> and <code>nums2</code> are unique.</li>\n<li>The length of both <code>nums1</code> and <code>nums2</code> would not exceed 1000.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def nextGreaterElement(self, findNums, nums):\r\n        """\r\n        :type findNums: List[int]\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* nextGreaterElement(int* findNums, int findNumsSize, int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] NextGreaterElement(int[] findNums, int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} findNums\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar nextGreaterElement = function(findNums, nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} find_nums\r\n# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef next_greater_element(find_nums, nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func nextGreaterElement(_ findNums: [Int], _ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nextGreaterElement(findNums []int, nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nextGreaterElement(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(59,'Binary Tree Zigzag Level Order Traversal',2,'Tree,Breadth-first Search,Stack',0,0,'<p></p><p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes\' values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>\nFor example:<br/>\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br/>\n</p><pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre><p>\nreturn its zigzag level order traversal as:<br/>\n</p><pre>\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def zigzagLevelOrder(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** zigzagLevelOrder(struct TreeNode* root, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[][]}\r\n */\r\nvar zigzagLevelOrder = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[][]}\r\ndef zigzag_level_order(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func zigzagLevelOrder(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def zigzagLevelOrder(root: TreeNode): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(60,'Sort List',2,'Linked List,Sort',0,0,'<p></p><p>Sort a linked list in <i>O</i>(<i>n</i> log <i>n</i>) time using constant space complexity.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* sortList(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def sortList(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* sortList(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode SortList(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar sortList = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef sort_list(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func sortList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc sortList(head *ListNode) *ListNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def sortList(head: ListNode): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(61,'Count Numbers with Unique Digits',2,'Dynamic Programming,Backtracking,Math',0,0,'<p></p><p>Given a <b>non-negative</b> integer n, count all numbers with unique digits, x, where 0 ≤ x &lt; 10<sup>n</sup>.</p><p>\n<b>Example:</b><br/>\nGiven n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x &lt; 100, excluding <code>[11,22,33,44,55,66,77,88,99]</code>)\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/memoryless\">@memoryless</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int countNumbersWithUniqueDigits(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countNumbersWithUniqueDigits(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countNumbersWithUniqueDigits(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countNumbersWithUniqueDigits(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CountNumbersWithUniqueDigits(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar countNumbersWithUniqueDigits = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef count_numbers_with_unique_digits(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countNumbersWithUniqueDigits(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countNumbersWithUniqueDigits(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countNumbersWithUniqueDigits(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(62,'Coin Change',2,'Dynamic Programming',0,0,'<p></p><p>\nYou are given coins of different denominations and a total amount of money <i>amount</i>. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.\n</p><p>\n<b>Example 1:</b><br/>\ncoins = <code>[1, 2, 5]</code>, amount = <code>11</code><br/>\nreturn <code>3</code> (11 = 5 + 5 + 1)\n</p><p>\n<b>Example 2:</b><br/>\ncoins = <code>[2]</code>, amount = <code>3</code><br/>\nreturn <code>-1</code>.\n</p><p>\n<b>Note</b>:<br/>\nYou may assume that you have an infinite number of each kind of coin.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int coinChange(vector<int>& coins, int amount) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int coinChange(int[] coins, int amount) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def coinChange(self, coins, amount):\r\n        """\r\n        :type coins: List[int]\r\n        :type amount: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int coinChange(int* coins, int coinsSize, int amount) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CoinChange(int[] coins, int amount) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} coins\r\n * @param {number} amount\r\n * @return {number}\r\n */\r\nvar coinChange = function(coins, amount) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} coins\r\n# @param {Integer} amount\r\n# @return {Integer}\r\ndef coin_change(coins, amount)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func coinChange(_ coins: [Int], _ amount: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func coinChange(coins []int, amount int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def coinChange(coins: Array[Int], amount: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute force) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-dynamic-programming-top-down-accepted\">Approach #2 (Dynamic programming - Top down) [Accepted]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-bottom-up-accepted\">Approach #3 (Dynamic programming - Bottom up) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for intermediate users. It introduces the following ideas:\nBacktracking, Dynamic programming.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute force) [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>The problem could be modeled as the following optimization problem :\n<script type=\"math/tex; mode=display\">\n\\min_{x} \\sum_{i=0}^{n - 1} x_i \\\\\n\\text{subject to} \\sum_{i=0}^{n - 1} x_i*c_i = S\n</script>\n</p>\n<p>, where <script type=\"math/tex; mode=display\">S</script> is the amount,    <script type=\"math/tex; mode=display\">c_i</script> is the coin denominations, <script type=\"math/tex; mode=display\">x_i</script>  is the number of coins with denominations <script type=\"math/tex; mode=display\">c_i</script> used in change of amount <script type=\"math/tex; mode=display\">S</script>. We could easily see that <script type=\"math/tex; mode=display\">x_i = [{0, \\frac{S}{c_i}}]</script>.</p>\n<p>A trivial solution is to enumerate all subsets of coin frequencies <script type=\"math/tex; mode=display\">[x_0\\dots\\ x_{n - 1}]</script>  that satisfy the constraints above, compute their sums and return the minimum among them.</p>\n<p><strong>Algorithm</strong></p>\n<p>To apply this idea, the algorithm uses backtracking technique to generate all combinations of coin frequencies <script type=\"math/tex; mode=display\">[x_0\\dots\\ x_{n-1}]</script> in the range <script type=\"math/tex\">[{0, \\frac{S}{c_i}}]</script> which satisfy the constraints above. It makes a sum of the combinations and returns their minimum or <script type=\"math/tex; mode=display\">-1</script> in case there is no acceptable combination.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    \n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">coinChange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">amount</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">coinChange</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"n\">amount</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">coinChange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">idxCoin</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">amount</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">idxCoin</span> <span class=\"o\">&lt;</span> <span class=\"n\">coins</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">amount</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">maxVal</span> <span class=\"o\">=</span> <span class=\"n\">amount</span><span class=\"o\">/</span><span class=\"n\">coins</span><span class=\"o\">[</span><span class=\"n\">idxCoin</span><span class=\"o\">];</span>\n            <span class=\"kt\">int</span> <span class=\"n\">minCost</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">maxVal</span><span class=\"o\">;</span> <span class=\"n\">x</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">&gt;=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">coins</span><span class=\"o\">[</span><span class=\"n\">idxCoin</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">coinChange</span><span class=\"o\">(</span><span class=\"n\">idxCoin</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"o\">-</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">coins</span><span class=\"o\">[</span><span class=\"n\">idxCoin</span><span class=\"o\">]);</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n                        <span class=\"n\">minCost</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">minCost</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>                    \n            <span class=\"o\">}</span>           \n            <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">minCost</span> <span class=\"o\">==</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">)?</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">minCost</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>        \n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>  \n<span class=\"o\">}</span>\n\n<span class=\"c1\">// Time Limit Exceeded</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(S^n)</script>. In the worst case, complexity is exponential in the number of the coins <script type=\"math/tex; mode=display\">n</script>. The reason is that every coin denomination <script type=\"math/tex; mode=display\">c_i</script> could have at most <script type=\"math/tex; mode=display\">\\frac{S}{c_i}</script> values. Therefore the number of possible combinations is :</li>\n</ul>\n<p>\n<script type=\"math/tex; mode=display\">\n\\frac{S}{c_1}*\\frac{S}{c_2}*\\frac{S}{c_3}\\ldots\\frac{S}{c_n} = \\frac{S^{n}}{{c_1}*{c_2}*{c_3}\\ldots{c_n}}\n</script>\n</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nIn the worst case the maximum depth of recursion is <script type=\"math/tex; mode=display\">n</script>. Therefore we need <script type=\"math/tex; mode=display\">O( n)</script> space used by the system recursive stack.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-dynamic-programming-top-down-accepted\">Approach #2 (Dynamic programming - Top down) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Could we improve the exponential solution above? Definitely! The problem could be solved with polynomial time using Dynamic programming technique. First, let\'s define:</p>\n<blockquote>\n<p>\n<script type=\"math/tex; mode=display\">F(S)</script> - minimum number of coins needed to make change for amount <script type=\"math/tex; mode=display\">S</script> using coin denominations <script type=\"math/tex; mode=display\">[{c_0\\ldots c_{n-1}}]</script>\n</p>\n</blockquote>\n<p>We note that this problem has an optimal substructure property, which is the key piece in solving any Dynamic Programming problems. In other words, the optimal solution can be constructed from optimal solutions of its subproblems.\nHow to split the problem into subproblems? Let\'s assume that we know <script type=\"math/tex; mode=display\">F(S)</script> where some change <script type=\"math/tex; mode=display\">val_1, val_2, \\ldots</script> for <script type=\"math/tex; mode=display\">S</script> which is optimal and the last coin\'s denomination is <script type=\"math/tex; mode=display\">C</script>.\nThen the following equation should be true because of optimal substructure of the problem:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nF(S) = F(S - C) + 1\n</script>\n</p>\n<p>But we don\'t know which is the denomination of the last coin <script type=\"math/tex; mode=display\">C</script>. We compute  <script type=\"math/tex; mode=display\">F(S - c_i)</script> for each possible denomination <script type=\"math/tex; mode=display\">c_0, c_1, c_2 \\ldots c_{n -1}</script> and choose the minimum among them. The following recurrence relation holds:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nF(S) = \\min_{i=0 ... n-1} { F(S - c_i) } + 1 \\\\\n\\text{subject to} \\ \\  S-c_i \\geq 0 \\\\\n</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">\nF(S) = 0 \\ , \\text{when} \\ S = 0 \\\\\nF(S) = -1 \\ , \\text{when} \\ n = 0\n</script>\n</p>\n<p align=\"center\"><img alt=\"Recursion tree for finding coin change of amount 6 with coin denominations {1,2,3}.\" src=\"https://leetcode.com/media/original_images/322_coin_change_tree.png\" width=\"100%\" /></p>\n<p>In the recursion tree above, we could see that a lot of subproblems were calculated multiple times.  For example the problem <script type=\"math/tex; mode=display\">F(1)</script> was calculated <script type=\"math/tex; mode=display\">13</script> times. Therefore we should cache the solutions to the subproblems in a table and access them in constant time when necessary</p>\n<p><strong>Algorithm</strong></p>\n<p>The idea of the algorithm is to build the solution of the problem from top to bottom. It applies the idea described above. It use backtracking and cut the partial solutions in the recursive tree, which doesn\'t lead to a viable solution. Тhis happens when we try to make a change of a coin with a value greater than the amount <em><script type=\"math/tex; mode=display\">S</script></em>. To improve  time complexity we should store the solutions of the already calculated subproblems in a table.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">coinChange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">amount</span><span class=\"o\">)</span> <span class=\"o\">{</span>        \n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">coinChange</span><span class=\"o\">(</span><span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">amount</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">coinChange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">rem</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rem</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rem</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">[</span><span class=\"n\">rem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">[</span><span class=\"n\">rem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">coin</span> <span class=\"o\">:</span> <span class=\"n\">coins</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">coinChange</span><span class=\"o\">(</span><span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"n\">rem</span> <span class=\"o\">-</span> <span class=\"n\">coin</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">res</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span><span class=\"o\">)</span>\n                <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">count</span><span class=\"o\">[</span><span class=\"n\">rem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">==</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">)</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">[</span><span class=\"n\">rem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(S*n)</script>. where S is the amount, n is denomination count.\nIn the worst case the recursive tree of the algorithm has height of <script type=\"math/tex; mode=display\">S</script> and the algorithm  solves only <script type=\"math/tex; mode=display\">S</script> subproblems because it caches precalculated solutions in a table. Each subproblem is computed with  <script type=\"math/tex; mode=display\">n</script> iterations, one by coin denomination. Therefore there is <script type=\"math/tex; mode=display\">O(S*n)</script> time complexity.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(S)</script>, where <script type=\"math/tex; mode=display\">S</script> is the amount to change\nWe use extra space for the memoization table.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-bottom-up-accepted\">Approach #3 (Dynamic programming - Bottom up) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>For the iterative solution, we think in bottom-up manner. Before calculating <em><script type=\"math/tex; mode=display\">F(i)</script></em>, we have to compute all minimum counts for amounts up to <script type=\"math/tex; mode=display\">i</script>. On each iteration <script type=\"math/tex; mode=display\">i</script> of the algorithm <em><script type=\"math/tex; mode=display\">F(i)</script></em> is computed as <script type=\"math/tex; mode=display\">\\min_{j=0 \\ldots n-1}{F(i -c_j)} + 1</script>\n</p>\n<p align=\"center\"><img alt=\"Bottom-up approach using a table to build up the solution to F6.\" src=\"https://leetcode.com/media/original_images/322_coin_change_table.png\" width=\"539px\" /></p>\n<p>In the example above you can see that:</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\nF(3) &= \\min\\{{F(3- c_1), F(3-c_2), F(3-c_3)}\\} + 1 \\\\\n&= \\min\\{{F(3- 1), F(3-2), F(3-3)}\\} + 1 \\\\\n&= \\min\\{{F(2), F(1), F(0)}\\} + 1 \\\\\n&= \\min\\{{1, 1, 0}\\} + 1 \\\\\n&= 1\n\\end{align}\n</script>\n</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">coinChange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">coins</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">amount</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>             \n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>  \n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">,</span> <span class=\"n\">max</span><span class=\"o\">);</span>  \n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>   \n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">amount</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">coins</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">coins</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">coins</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">amount</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">amount</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">amount</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(S*n)</script>.\nOn each step the algorithm finds the next <em><script type=\"math/tex; mode=display\">F(i)</script></em> in <script type=\"math/tex; mode=display\">n</script> iterations, where <script type=\"math/tex; mode=display\">1\\leq i \\leq S</script>. Therefore in total the iterations are <script type=\"math/tex; mode=display\">S*n</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(S)</script>.\nWe use extra space for the memoization table.</li>\n</ul>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(63,'Minimum Absolute Difference in BST',1,'Binary Search Tree',0,0,'<p></p><p>Given a binary search tree with non-negative values, find the minimum <a href=\"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> between values of any two nodes.</p><p>\n<b>Example:</b>\n</p><pre>\n<b>Input:</b>\n\n   1\n    \\\n     3\n    /\n   2\n\n<b>Output:</b>\n1\n\n<b>Explanation:</b>\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\n</pre><p><b>Note:</b>\nThere are at least two nodes in this BST.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int getMinimumDifference(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        """\n        :type root: TreeNode\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint getMinimumDifference(struct TreeNode* root) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int GetMinimumDifference(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar getMinimumDifference = function(root) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef get_minimum_difference(root)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func getMinimumDifference(_ root: TreeNode?) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc getMinimumDifference(root *TreeNode) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def getMinimumDifference(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(64,'Largest Number',2,'Sort',0,0,'<p></p><p>Given a list of non negative integers, arrange them such that they form the largest number.</p><p>For example, given <code>[3, 30, 34, 5, 9]</code>, the largest formed number is <code>9534330</code>.</p><p>Note: The result may be very large, so you need to return a string instead of an integer.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string largestNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String largestNumber(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution:\r\n    # @param {integer[]} nums\r\n    # @return {string}\r\n    def largestNumber(self, nums):\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* largestNumber(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string LargestNumber(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {string}\r\n */\r\nvar largestNumber = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {String}\r\ndef largest_number(nums)\r\n    \r\nend\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func largestNumber(nums []int) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def largestNumber(nums: Array[Int]): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(65,'LFU Cache',3,'Design',0,0,'<p></p><p>Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\" target=\"_blank\">Least Frequently Used (LFU)</a> cache. It should support the following operations: <code>get</code> and <code>put</code>.\n</p><p>\n<code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br/>\n<code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least <b>recently</b> used key would be evicted.\n</p><p><b>Follow up:</b><br/>\nCould you do both operations in <b>O(1)</b> time complexity?</p><p><b>Example:</b>\n</p><pre>\nLFUCache cache = new LFUCache( 2 /* capacity */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)\ncache.get(3);       // returns 3.\ncache.put(4, 4);    // evicts key 1.\ncache.get(1);       // returns -1 (not found)\ncache.get(3);       // returns 3\ncache.get(4);       // returns 4\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class LFUCache {\r\npublic:\r\n    LFUCache(int capacity) {\r\n        \r\n    }\r\n    \r\n    int get(int key) {\r\n        \r\n    }\r\n    \r\n    void put(int key, int value) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your LFUCache object will be instantiated and called as such:\r\n * LFUCache obj = new LFUCache(capacity);\r\n * int param_1 = obj.get(key);\r\n * obj.put(key,value);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class LFUCache {\n\n    public LFUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class LFUCache(object):\r\n\r\n    def __init__(self, capacity):\r\n        """\r\n        :type capacity: int\r\n        """\r\n        \r\n\r\n    def get(self, key):\r\n        """\r\n        :type key: int\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def put(self, key, value):\r\n        """\r\n        :type key: int\r\n        :type value: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n\r\n# Your LFUCache object will be instantiated and called as such:\r\n# obj = LFUCache(capacity)\r\n# param_1 = obj.get(key)\r\n# obj.put(key,value)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} LFUCache;\n\nLFUCache* lFUCacheCreate(int capacity) {\n    \n}\n\nint lFUCacheGet(LFUCache* obj, int key) {\n    \n}\n\nvoid lFUCachePut(LFUCache* obj, int key, int value) {\n    \n}\n\nvoid lFUCacheFree(LFUCache* obj) {\n    \n}\n\n/**\n * Your LFUCache struct will be instantiated and called as such:\n * struct LFUCache* obj = lFUCacheCreate(capacity);\n * int param_1 = lFUCacheGet(obj, key);\n * lFUCachePut(obj, key, value);\n * lFUCacheFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class LFUCache {\r\n\r\n    public LFUCache(int capacity) {\r\n        \r\n    }\r\n    \r\n    public int Get(int key) {\r\n        \r\n    }\r\n    \r\n    public void Put(int key, int value) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your LFUCache object will be instantiated and called as such:\r\n * LFUCache obj = new LFUCache(capacity);\r\n * int param_1 = obj.Get(key);\r\n * obj.Put(key,value);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} capacity\r\n */\r\nvar LFUCache = function(capacity) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} key\r\n * @return {number}\r\n */\r\nLFUCache.prototype.get = function(key) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} key \r\n * @param {number} value\r\n * @return {void}\r\n */\r\nLFUCache.prototype.put = function(key, value) {\r\n    \r\n};\r\n\r\n/** \r\n * Your LFUCache object will be instantiated and called as such:\r\n * var obj = Object.create(LFUCache).createNew(capacity)\r\n * var param_1 = obj.get(key)\r\n * obj.put(key,value)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class LFUCache\r\n\r\n=begin\r\n    :type capacity: Integer\r\n=end\r\n    def initialize(capacity)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :rtype: Integer\r\n=end\r\n    def get(key)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :type value: Integer\r\n    :rtype: Void\r\n=end\r\n    def put(key, value)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your LFUCache object will be instantiated and called as such:\r\n# obj = LFUCache.new(capacity)\r\n# param_1 = obj.get(key)\r\n# obj.put(key,value)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type LFUCache struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(capacity int) LFUCache {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LFUCache) Get(key int) int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LFUCache) Put(key int, value int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your LFUCache object will be instantiated and called as such:\r\n * obj := Constructor(capacity);\r\n * param_1 := obj.Get(key);\r\n * obj.Put(key,value);\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class LFUCache(var _capacity: Int) {\n    \n    def get(int key) : Int = {\n\n    }\n    \n    def put(int key, int value) {\n\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity);\n * Int param_1 = obj.get(key);\n * obj.put(key,value);\n */\" }]',NULL,NULL,1,'none','none','none'),(66,'Teemo Attacking',2,'Array',0,0,'<p></p><p>\nIn LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo\'s attacking <b>ascending</b> time series towards Ashe and the poisoning time duration per Teemo\'s attacking, you need to output the total time that Ashe is in poisoned condition.\n</p><p>You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,4], 2\n<b>Output:</b> 4\n<b>Explanation:</b> At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. <br/>This poisoned status will last 2 seconds until the end of time point 2. <br/>And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. <br/>So you finally need to output 4.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2], 2\n<b>Output:</b> 3\n<b>Explanation:</b> At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. <br/>This poisoned status will last 2 seconds until the end of time point 2. <br/>However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. <br/>Since the poisoned status won\'t add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. <br/>So you finally need to output 3.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume the length of given time series array won\'t exceed 10000.</li>\n<li>You may assume the numbers in the Teemo\'s attacking time series and his poisoning time duration per attacking are non-negative integers, which won\'t exceed 10,000,000.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findPoisonedDuration(self, timeSeries, duration):\r\n        """\r\n        :type timeSeries: List[int]\r\n        :type duration: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findPoisonedDuration(int* timeSeries, int timeSeriesSize, int duration) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} timeSeries\r\n * @param {number} duration\r\n * @return {number}\r\n */\r\nvar findPoisonedDuration = function(timeSeries, duration) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} time_series\r\n# @param {Integer} duration\r\n# @return {Integer}\r\ndef find_poisoned_duration(time_series, duration)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findPoisonedDuration(_ timeSeries: [Int], _ duration: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findPoisonedDuration(timeSeries []int, duration int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findPoisonedDuration(timeSeries: Array[Int], duration: Int): Int = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(67,'All O`one Data Structure',3,'Design',0,0,'<p></p><p>Implement a data structure supporting the following operations:</p><p>\n</p><ol>\n<li>Inc(Key) - Inserts a new key <key> with value 1. Or increments an existing key by 1. Key is guaranteed to be a <b>non-empty</b> string.</key></li>\n<li>Dec(Key) - If Key\'s value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a <b>non-empty</b> string.</li>\n<li>GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string <code>\"\"</code>.</li>\n<li>GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string <code>\"\"</code>.</li>\n</ol><p>\nChallenge: Perform all these in O(1) time complexity.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class AllOne {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    AllOne() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\r\n    void inc(string key) {\r\n        \r\n    }\r\n    \r\n    /** Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure. */\r\n    void dec(string key) {\r\n        \r\n    }\r\n    \r\n    /** Returns one of the keys with maximal value. */\r\n    string getMaxKey() {\r\n        \r\n    }\r\n    \r\n    /** Returns one of the keys with Minimal value. */\r\n    string getMinKey() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your AllOne object will be instantiated and called as such:\r\n * AllOne obj = new AllOne();\r\n * obj.inc(key);\r\n * obj.dec(key);\r\n * string param_3 = obj.getMaxKey();\r\n * string param_4 = obj.getMinKey();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class AllOne {\n\n    /** Initialize your data structure here. */\n    public AllOne() {\n        \n    }\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    public void inc(String key) {\n        \n    }\n    \n    /** Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure. */\n    public void dec(String key) {\n        \n    }\n    \n    /** Returns one of the keys with maximal value. */\n    public String getMaxKey() {\n        \n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    public String getMinKey() {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class AllOne(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def inc(self, key):\r\n        """\r\n        Inserts a new key <Key> with value 1. Or increments an existing key by 1.\r\n        :type key: str\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def dec(self, key):\r\n        """\r\n        Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure.\r\n        :type key: str\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def getMaxKey(self):\r\n        """\r\n        Returns one of the keys with maximal value.\r\n        :rtype: str\r\n        """\r\n        \r\n\r\n    def getMinKey(self):\r\n        """\r\n        Returns one of the keys with Minimal value.\r\n        :rtype: str\r\n        """\r\n        \r\n\r\n\r\n# Your AllOne object will be instantiated and called as such:\r\n# obj = AllOne()\r\n# obj.inc(key)\r\n# obj.dec(key)\r\n# param_3 = obj.getMaxKey()\r\n# param_4 = obj.getMinKey()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} AllOne;\n\n/** Initialize your data structure here. */\nAllOne* allOneCreate() {\n    \n}\n\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\nvoid allOneInc(AllOne* obj, char* key) {\n    \n}\n\n/** Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure. */\nvoid allOneDec(AllOne* obj, char* key) {\n    \n}\n\n/** Returns one of the keys with maximal value. */\nchar* allOneGetMaxKey(AllOne* obj) {\n    \n}\n\n/** Returns one of the keys with Minimal value. */\nchar* allOneGetMinKey(AllOne* obj) {\n    \n}\n\nvoid allOneFree(AllOne* obj) {\n    \n}\n\n/**\n * Your AllOne struct will be instantiated and called as such:\n * struct AllOne* obj = allOneCreate();\n * allOneInc(obj, key);\n * allOneDec(obj, key);\n * char* param_3 = allOneGetMaxKey(obj);\n * char* param_4 = allOneGetMinKey(obj);\n * allOneFree(obj);\n */\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type AllOne struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() AllOne {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\r\nfunc (this *AllOne) Inc(key string)  {\r\n    \r\n}\r\n\r\n\r\n/** Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure. */\r\nfunc (this *AllOne) Dec(key string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns one of the keys with maximal value. */\r\nfunc (this *AllOne) GetMaxKey() string {\r\n    \r\n}\r\n\r\n\r\n/** Returns one of the keys with Minimal value. */\r\nfunc (this *AllOne) GetMinKey() string {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your AllOne object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Inc(key);\r\n * obj.Dec(key);\r\n * param_3 := obj.GetMaxKey();\r\n * param_4 := obj.GetMinKey();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class AllOne() {\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    def inc(String key) {\n\n    }\n    \n    /** Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure. */\n    def dec(String key) {\n\n    }\n    \n    /** Returns one of the keys with maximal value. */\n    def getMaxKey() : String = {\n\n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    def getMinKey() : String = {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */\" }]',NULL,NULL,1,'none','none','none'),(68,'Word Ladder',2,'',0,0,'<p></p><p>\nGiven two words (<i>beginWord</i> and <i>endWord</i>), and a dictionary\'s word list, find the length of shortest transformation sequence from <i>beginWord</i> to <i>endWord</i>, such that:\n</p><ol>\n<li>Only one letter can be changed at a time.</li>\n<li>Each transformed word must exist in the word list. Note that <i>beginWord</i> is <i>not</i> a transformed word.</li>\n</ol><p>\nFor example,\n</p><p>\nGiven:<br/>\n<i>beginWord</i> = <code>\"hit\"</code><br/>\n<i>endWord</i> = <code>\"cog\"</code><br/>\n<i>wordList</i> = <code>[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]</code><br/>\n</p><p>\nAs one shortest transformation is <code>\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\"</code>,<br/>\nreturn its length <code>5</code>.\n</p><p>\n<b>Note:</b><br/>\n</p><ul>\n<li>Return 0 if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume <i>beginWord</i> and <i>endWord</i> are non-empty and are not the same.</li>\n</ul><p>\n<b><font color=\"red\">UPDATE (2017/1/20):</font></b><br/>\nThe <i>wordList</i> parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def ladderLength(self, beginWord, endWord, wordList):\r\n        """\r\n        :type beginWord: str\r\n        :type endWord: str\r\n        :type wordList: List[str]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} beginWord\r\n * @param {string} endWord\r\n * @param {string[]} wordList\r\n * @return {number}\r\n */\r\nvar ladderLength = function(beginWord, endWord, wordList) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} begin_word\r\n# @param {String} end_word\r\n# @param {String[]} word_list\r\n# @return {Integer}\r\ndef ladder_length(begin_word, end_word, word_list)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func ladderLength(beginWord string, endWord string, wordList []string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(69,'Insertion Sort List',2,'Linked List,Sort',0,0,'<p></p><p>Sort a linked list using insertion sort.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* insertionSortList(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def insertionSortList(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* insertionSortList(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode InsertionSortList(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar insertionSortList = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef insertion_sort_list(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func insertionSortList(_ head: ListNode?) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc insertionSortList(head *ListNode) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def insertionSortList(head: ListNode): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(70,'Remove Element',1,'Array,Two Pointers',0,0,'<p></p><p>Given an array and a value, remove all instances of that value in place and return the new length.\n</p><p>Do not allocate extra space for another array, you must do this in place with constant memory.</p><p>The order of elements can be changed. It doesn\'t matter what you leave beyond the new length.</p><p>\n<b>Example:</b><br/>\nGiven input array <i>nums</i> = <code>[3,2,2,3]</code>, <i>val</i> = <code>3</code>\n</p><p>Your function should return length = 2, with the first two elements of <i>nums</i> being 2.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int removeElement(vector<int>& nums, int val) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int removeElement(int[] nums, int val) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def removeElement(self, nums, val):\r\n        """\r\n        :type nums: List[int]\r\n        :type val: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int removeElement(int* nums, int numsSize, int val) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int RemoveElement(int[] nums, int val) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} val\r\n * @return {number}\r\n */\r\nvar removeElement = function(nums, val) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} val\r\n# @return {Integer}\r\ndef remove_element(nums, val)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeElement(nums []int, val int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeElement(nums: Array[Int], val: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#hints\">Hints</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-two-pointers-accepted\">Approach #1 (Two Pointers) [Accepted]</a></li>\n<li><a href=\"#approach-2-two-pointers-when-elements-to-remove-are-rare-accepted\">Approach #2 (Two Pointers - when elements to remove are rare) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This is a pretty easy problem, but one may get confused by the term \"in-place\" and thought it is impossible to remove an element from the array without making a copy of the array.</p>\n<h2 id=\"hints\">Hints</h2>\n<ol>\n<li>Try two pointers.</li>\n<li>Did you use the property of \"the order of elements can be changed\"?</li>\n<li>What happens when the elements to remove are rare?</li>\n</ol>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-two-pointers-accepted\">Approach #1 (Two Pointers) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Since question asked us to remove all elements of the given value in-place, we have to handle it with <script type=\"math/tex; mode=display\">O(1)</script> extra space. How to solve it? We can keep two pointers <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script>, where <script type=\"math/tex; mode=display\">i</script> is the slow-runner while <script type=\"math/tex; mode=display\">j</script> is the fast-runner.</p>\n<p><strong>Algorithm</strong></p>\n<p>When <script type=\"math/tex; mode=display\">nums[j]</script> equals to the given value, skip this element by incrementing <script type=\"math/tex; mode=display\">j</script>. As long as <script type=\"math/tex; mode=display\">nums[j] \\neq val</script>, we copy <script type=\"math/tex; mode=display\">nums[j]</script> to <script type=\"math/tex; mode=display\">nums[i]</script> and increment both indexes at the same time. Repeat the process until <script type=\"math/tex; mode=display\">j</script> reaches the end of the array and the new length is <script type=\"math/tex; mode=display\">i</script>.</p>\n<p>This solution is very similar to the solution to <a href=\"https://leetcode.com/articles/remove-duplicates-sorted-array/\">Remove Duplicates from Sorted Array</a>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">removeElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nAssume the array has a total of <script type=\"math/tex; mode=display\">n</script> elements, both <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> traverse at most <script type=\"math/tex; mode=display\">2n</script> steps.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-two-pointers-when-elements-to-remove-are-rare-accepted\">Approach #2 (Two Pointers - when elements to remove are rare) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Now consider cases where the array contains few elements to remove. For example, <script type=\"math/tex; mode=display\">nums = [1,2,3,5,4], val = 4</script>. The previous algorithm will do unnecessary copy operation of the first four elements. Another example is <script type=\"math/tex; mode=display\">nums = [4,1,2,3,5], val = 4</script>. It seems unnecessary to move elements <script type=\"math/tex; mode=display\">[1,2,3,5]</script> one step left as the problem description mentions that the order of elements could be changed.</p>\n<p><strong>Algorithm</strong></p>\n<p>When we encounter <script type=\"math/tex; mode=display\">nums[i] = val</script>, we can swap the current element out with the last element and dispose the last one. This essentially reduces the array\'s size by 1.</p>\n<p>Note that the last element that was swapped in could be the value you want to remove itself. But don\'t worry, in the next iteration we will still check this element.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">removeElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"c1\">// reduce array size by one</span>\n            <span class=\"n\">n</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nBoth <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">n</script> traverse at most <script type=\"math/tex; mode=display\">n</script> steps. In this approach, the number of assignment operation is equal to the number of elements to remove. So it is more efficient if elements to remove are rare.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<p>Analysis written by @feelxia, revised by @1337c0d3r.</p>',NULL,1,'none','none','none'),(71,'Minesweeper',2,'Depth-first Search,Breadth-first Search',0,0,'<p></p><p>Let\'s play the minesweeper game (<a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\">Wikipedia</a>, <a href=\"http://minesweeperonline.com\">online game</a>)! </p><p>You are given a 2D char matrix representing the game board. <b>\'M\'</b> represents an <b>unrevealed</b> mine, <b>\'E\'</b> represents an <b>unrevealed</b> empty square, <b>\'B\'</b> represents a <b>revealed</b> blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, <b>digit</b> (\'1\' to \'8\') represents how many mines are adjacent to this <b>revealed</b> square, and finally <b>\'X\'</b> represents a <b>revealed</b> mine.</p><p>Now given the next click position (row and column indices) among all the <b>unrevealed</b> squares (\'M\' or \'E\'), return the board after revealing this position according to the following rules:</p><p>\n</p><ol>\n<li>If a mine (\'M\') is revealed, then the game is over - change it to <b>\'X\'</b>.</li>\n<li>If an empty square (\'E\') with <b>no adjacent mines</b> is revealed, then change it to revealed blank (\'B\') and all of its adjacent <b>unrevealed</b> squares should be revealed recursively.</li>\n<li>If an empty square (\'E\') with <b>at least one adjacent mine</b> is revealed, then change it to a digit (\'1\' to \'8\') representing the number of adjacent mines.</li>\n<li>Return the board when no more squares will be revealed.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \n\n[[\'E\', \'E\', \'E\', \'E\', \'E\'],\n [\'E\', \'E\', \'M\', \'E\', \'E\'],\n [\'E\', \'E\', \'E\', \'E\', \'E\'],\n [\'E\', \'E\', \'E\', \'E\', \'E\']]\n\nClick : [3,0]\n\n<b>Output:</b> \n\n[[\'B\', \'1\', \'E\', \'1\', \'B\'],\n [\'B\', \'1\', \'M\', \'1\', \'B\'],\n [\'B\', \'1\', \'1\', \'1\', \'B\'],\n [\'B\', \'B\', \'B\', \'B\', \'B\']]\n\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/minesweeper_example_1.png\" width=\"40%\"/>\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \n\n[[\'B\', \'1\', \'E\', \'1\', \'B\'],\n [\'B\', \'1\', \'M\', \'1\', \'B\'],\n [\'B\', \'1\', \'1\', \'1\', \'B\'],\n [\'B\', \'B\', \'B\', \'B\', \'B\']]\n\nClick : [1,2]\n\n<b>Output:</b> \n\n[[\'B\', \'1\', \'E\', \'1\', \'B\'],\n [\'B\', \'1\', \'X\', \'1\', \'B\'],\n [\'B\', \'1\', \'1\', \'1\', \'B\'],\n [\'B\', \'B\', \'B\', \'B\', \'B\']]\n\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/minesweeper_example_2.png\" width=\"40%\"/>\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The range of the input matrix\'s height and width is [1,50].</li>\n<li>The click position will only be an unrevealed square (\'M\' or \'E\'), which also means the input board contains at least one clickable square.</li>\n<li>The input board won\'t be a stage when game is over (some mines have been revealed).</li>\n<li>For simplicity, not mentioned rules should be ignored in this problem. For example, you <b>don\'t</b> need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public char[][] updateBoard(char[][] board, int[] click) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def updateBoard(self, board, click):\r\n        """\r\n        :type board: List[List[str]]\r\n        :type click: List[int]\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar** updateBoard(char** board, int boardRowSize, int boardColSize, int* click, int clickSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public char[,] UpdateBoard(char[,] board, int[] click) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @param {number[]} click\r\n * @return {character[][]}\r\n */\r\nvar updateBoard = function(board, click) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @param {Integer[]} click\r\n# @return {Character[][]}\r\ndef update_board(board, click)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func updateBoard(_ board: [[Character]], _ click: [Int]) -> [[Character]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func updateBoard(board [][]byte, click []int) [][]byte {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def updateBoard(board: Array[Array[Char]], click: Array[Int]): Array[Array[Char]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(72,'Create Maximum Number',3,'Dynamic Programming,Greedy',0,0,'<p></p><p>\n    Given two arrays of length <code>m</code> and <code>n</code> with digits <code>0-9</code> representing two numbers.\n    Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two. The relative order of the digits\n    from the same array must be preserved. Return an array of the <code>k</code> digits. You should try to optimize your time and space complexity.\n</p><p>\n<b>Example 1:</b><br/>\n</p><p>\n    nums1 = <code>[3, 4, 6, 5]</code><br/>\n    nums2 = <code>[9, 1, 2, 5, 8, 3]</code><br/>\n    k = <code>5</code><br/>\n    return <code>[9, 8, 6, 5, 3]</code>\n</p><p>\n<b>Example 2:</b><br/>\n</p><p>\n    nums1 = <code>[6, 7]</code><br/>\n    nums2 = <code>[6, 0, 4]</code><br/>\n    k = <code>5</code><br/>\n    return <code>[6, 7, 6, 0, 4]</code>\n</p><p>\n<b>Example 3:</b><br/>\n</p><p>\n    nums1 = <code>[3, 9]</code><br/>\n    nums2 = <code>[8, 9]</code><br/>\n    k = <code>3</code><br/>\n    return <code>[9, 8, 9]</code>\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxNumber(self, nums1, nums2, k):\r\n        """\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] MaxNumber(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar maxNumber = function(nums1, nums2, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @param {Integer} k\r\n# @return {Integer[]}\r\ndef max_number(nums1, nums2, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxNumber(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxNumber(nums1 []int, nums2 []int, k int) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(73,'Game of Life',2,'Array',0,0,'<p></p><p>\nAccording to the <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia\'s article</a>: \"The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\n</p><p>\nGiven a <i>board</i> with <i>m</i> by <i>n</i> cells, each cell has an initial state <i>live</i> (1) or <i>dead</i> (0). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n</p><p>\n</p><ol>\n<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>\n<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>\n<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n</ol><p>\nWrite a function to compute the next state (after one update) of the board given its current state.</p><p>\n<b>Follow up</b>: <br/>\n</p><ol>\n<li>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.</li>\n<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</li>\n</ol><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void gameOfLife(vector<vector<int>>& board) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void gameOfLife(int[][] board) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def gameOfLife(self, board):\r\n        """\r\n        :type board: List[List[int]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void gameOfLife(int** board, int boardRowSize, int boardColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void GameOfLife(int[,] board) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar gameOfLife = function(board) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef game_of_life(board)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func gameOfLife(_ board: inout [[Int]]) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func gameOfLife(board [][]int)  {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def gameOfLife(board: Array[Array[Int]]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(74,'Rank Scores',2,'',0,0,'<p></p><p>\nWrite a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no \"holes\" between ranks.\n</p><pre>\n+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n</pre><p>For example, given the above <code>Scores</code> table, your query should generate the following report (order by highest score):</p><pre>\n+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]',NULL,NULL,1,'none','none','none'),(75,'Add One Row to Tree',2,'Tree',0,0,'<p></p><p>Given the root of a binary tree, then value <code>v</code> and depth <code>d</code>, you need to add a row of nodes with value <code>v</code> at the given depth <code>d</code>. The root node is at depth 1. </p><p>The adding rule is: given a positive integer depth <code>d</code>, for each NOT null tree nodes <code>N</code> in depth <code>d-1</code>, create two tree nodes with value <code>v</code> as <code>N\'s</code> left subtree root and right subtree root. And <code>N\'s</code> <b>original left subtree</b> should be the left subtree of the new left subtree root, its <b>original right subtree</b> should be the right subtree of the new right subtree root. If depth <code>d</code> is 1 that means there is no depth d-1 at all, then create a tree node with value <b>v</b> as the new root of the whole original tree, and the original tree is the new root\'s left subtree.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \nA binary tree as following:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\n<b>v = 1</b>\n\n<b>d = 2</b>\n\n<b>Output:</b> \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \nA binary tree as following:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\n<b>v = 1</b>\n\n<b>d = 3</b>\n\n<b>Output:</b> \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The given d is in range [1, maximum depth of the given tree + 1].</li>\n<li>The given binary tree has at least one tree node.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* addOneRow(TreeNode* root, int v, int d) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode addOneRow(TreeNode root, int v, int d) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def addOneRow(self, root, v, d):\n        """\n        :type root: TreeNode\n        :type v: int\n        :type d: int\n        :rtype: TreeNode\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def addOneRow(self, root, v, d):\n        """\n        :type root: TreeNode\n        :type v: int\n        :type d: int\n        :rtype: TreeNode\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* addOneRow(struct TreeNode* root, int v, int d) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode AddOneRow(TreeNode root, int v, int d) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} v\n * @param {number} d\n * @return {TreeNode}\n */\nvar addOneRow = function(root, v, d) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} v\n# @param {Integer} d\n# @return {TreeNode}\ndef add_one_row(root, v, d)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func addOneRow(_ root: TreeNode?, _ v: Int, _ d: Int) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc addOneRow(root *TreeNode, v int, d int) *TreeNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def addOneRow(root: TreeNode, v: Int, d: Int): TreeNode = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursiondfs-accepted\">Approach #1 Using Recursion(DFS) [Accepted]</a></li>\n<li><a href=\"#approach-2-using-stackdfs-accepted\">Approach #2 Using stack(DFS) [Accepted]</a></li>\n<li><a href=\"#approach-3-using-queuebfs-accepted\">Approach #3 Using queue(BFS) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursiondfs-accepted\">Approach #1 Using Recursion(DFS) [Accepted]</h4>\n<p>If the given depth <script type=\"math/tex; mode=display\">d</script> happens to be equal to 1, we can directly put the whole current tree as a left child of the newly added node. Otherwise, we need to put the new node at appropriate levels. </p>\n<p>To do so, we make use of a recursive function <code>insert(val,node,depth,n)</code>. Here, <script type=\"math/tex; mode=display\">val</script> refers to the value of the new node to be inserted, <script type=\"math/tex; mode=display\">depth</script> refers to the depth of the node currently considered, <script type=\"math/tex; mode=display\">node</script> refers to the node calling the current function for its child subtrees and <script type=\"math/tex; mode=display\">n</script> refers to the height at which the new node needs to be inserted. </p>\n<p>For inserting the new node at appropriate level, we can start by making a call to <code>insert</code> with the root node and 1 as the current level. Inside every such call, we check if we\'ve reached one level prior to the level where the new node needs to be inserted. </p>\n<p>From this level, we can store the roots of the left and right subtrees of the current node temporarily, and insert the new node as the new left and right subchild of the current node, with the temporarily stored left and right subtrees as the left and right subtrees of the newly inserted left or right subchildren appropriately.</p>\n<p>But, if we haven\'t reached the destined level, we keep on continuing the recursive calling process with the left and right children of the current node respectively. At every such call, we also incrmenet the depth of the current level to reflect the depth change appropriately.</p>\n<p>The animation below illustrates the process:</p>\n<p>!?!../Documents/623_Add_One_Row_Recursion_New.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">addOneRow</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n            <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">depth</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">==</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">);</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">);</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n            <span class=\"n\">insert</span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A total of <script type=\"math/tex; mode=display\">n</script> nodes of the given tree will be considered.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script> in the worst case(skewed tree).</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-stackdfs-accepted\">Approach #2 Using stack(DFS) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can do the same task as discussed in the last approach by making use of a <script type=\"math/tex; mode=display\">stack</script> as well. But, we need to make use of a new data structure, <script type=\"math/tex; mode=display\">Node</script> here, to keep a track of the depth of the current node along with its value. </p>\n<p>We start by pushing the root <script type=\"math/tex; mode=display\">Node</script> onto the <script type=\"math/tex; mode=display\">stack</script>. Then, at every step we do as follows:</p>\n<ul>\n<li>\n<p>Pop an element from the <script type=\"math/tex; mode=display\">stack</script>. </p>\n</li>\n<li>\n<p>For every Node popped, check if its depth corresponds to one prior to the depth at which the new node needs to be inserted. </p>\n</li>\n<li>\n<p>If yes, insert the new nodes appropriately as in the last approach. </p>\n</li>\n<li>\n<p>If no, we push both the left and the right child Node(value+depth) of the current node onto the <script type=\"math/tex; mode=display\">stack</script>. </p>\n</li>\n<li>\n<p>Continue the popping and pushing process till the <script type=\"math/tex; mode=display\">stack</script> becomes empty.</p>\n</li>\n</ul>\n<p>Look at the animation below for a better understanding.</p>\n<p>!?!../Documents/623_Add_One_Row_Stack_new.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">class</span> <span class=\"nc\">Node</span><span class=\"o\">{</span>\n        <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"o\">){</span>\n            <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">depth</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">addOneRow</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n            <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> \n        <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">));</span>\n        <span class=\"k\">while</span><span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">Node</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n                <span class=\"k\">continue</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">depth</span> <span class=\"o\">==</span> <span class=\"n\">d</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">TreeNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n                <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n                <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n                <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n                <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n\n            <span class=\"o\">}</span> <span class=\"k\">else</span><span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A total of <script type=\"math/tex; mode=display\">n</script> nodes of the given tree will be considered.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the <script type=\"math/tex; mode=display\">stack</script> can go upto <script type=\"math/tex; mode=display\">n</script> in the worst case(skewed tree).</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-queuebfs-accepted\">Approach #3 Using queue(BFS) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea of traversal in the last approach is similar to Depth First Search. In that case, we need to traverse through all the nodes of the given tree in the order of branches. Firstly we explored one branch to as much depth as possible and then continued with the other ones. </p>\n<p>If, instead, we go for Breadth First Search, along with keeping track of the depth of the nodes being considered at any moment during the Breadth First Search, we can stop the search process as soon as all the nodes at the depth <script type=\"math/tex; mode=display\">d - 1</script> have been considered once. </p>\n<p>To implement this BFS, we make use of a <script type=\"math/tex; mode=display\">queue</script>. We start off by pushing the root node of the given tree at the back of the <script type=\"math/tex; mode=display\">queue</script> and with the depth of the current level set as 1. Then, at every step, we do the following:</p>\n<ul>\n<li>\n<p>Remove an element from the front of the <script type=\"math/tex; mode=display\">queue</script> and add all its children to the back of another temporary queue, <script type=\"math/tex; mode=display\">temp</script>. </p>\n</li>\n<li>\n<p>Keep on adding the elements to the back of the <script type=\"math/tex; mode=display\">temp</script> till <script type=\"math/tex; mode=display\">queue</script> becomes empty. (Once <script type=\"math/tex; mode=display\">queue</script> becomes empty, it indicates that all the nodes at the current level have been considered and now <script type=\"math/tex; mode=display\">temp</script> contains all the nodes lying at the next level).</p>\n</li>\n<li>\n<p>Reinitialize <script type=\"math/tex; mode=display\">queue</script>  with its value as <script type=\"math/tex; mode=display\">temp</script>. Update the current value of the <script type=\"math/tex; mode=display\">depth</script> to reflect the level of nodes currently being considered. </p>\n</li>\n<li>\n<p>Repeat the process till we reach the depth <script type=\"math/tex; mode=display\">d - 1</script>. </p>\n</li>\n<li>\n<p>On hitting this depth level(<script type=\"math/tex; mode=display\">d-1</script>), add the new nodes appropriately to all the nodes in the <script type=\"math/tex; mode=display\">queue</script> currently, as done in the previous approaches.</p>\n</li>\n</ul>\n<p>The following animation illustrates the process.</p>\n<p>!?!../Documents/623_Add_One_Row_queue_new.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">addOneRow</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n            <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">depth</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">TreeNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"n\">depth</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n            <span class=\"n\">TreeNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n            <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A total of <script type=\"math/tex; mode=display\">n</script> nodes of the given tree will be considered in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(x)</script>. The size of the <script type=\"math/tex; mode=display\">queue</script> or <script type=\"math/tex; mode=display\">temp</script> queue can grow upto <script type=\"math/tex; mode=display\">x</script> only. Here, <script type=\"math/tex; mode=display\">x</script> refers to the number of maximum number of nodes at any level in the given tree.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(76,'Minimum Size Subarray Sum',2,'Array,Two Pointers,Binary Search',0,0,'<p></p><p>\nGiven an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a <b>contiguous</b> subarray of which the sum ≥ <strong>s</strong>. If there isn\'t one, return 0 instead.\n</p><p>\nFor example, given the array <code>[2,3,1,2,4,3]</code> and <code>s = 7</code>,<br/>\nthe subarray <code>[4,3]</code> has the minimal length under the problem constraint.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more practice.</a></p><div class=\"spoilers\"><b>More practice:</b>\n<p>If you have figured out the <i>O</i>(<i>n</i>) solution, try coding another solution of which the time complexity is <i>O</i>(<i>n</i> log <i>n</i>).</p>\n</div><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/Freezen\">@Freezen</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minSubArrayLen(int s, vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minSubArrayLen(self, s, nums):\r\n        """\r\n        :type s: int\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minSubArrayLen(int s, int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinSubArrayLen(int s, int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} s\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar minSubArrayLen = function(s, nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} s\r\n# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef min_sub_array_len(s, nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minSubArrayLen(_ s: Int, _ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minSubArrayLen(s int, nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def minSubArrayLen(s: Int, nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-a-better-brute-force-accepted\">Approach #2 A better brute force [Accepted]</a></li>\n<li><a href=\"#approach-3-using-binary-search-accepted\">Approach #3 Using Binary search [Accepted]</a></li>\n<li><a href=\"#approach-4-using-2-pointers-accepted\">Approach #4 Using 2 pointers [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do as directed in question. Find the sum for all the possible subarrays and update the <script type=\"math/tex; mode=display\">\\text{ans}</script> as and when we get a better subarray that fulfill the requirements (<script type=\"math/tex; mode=display\">\\text{sum}>=\\text{s}</script>).</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Initialize <script type=\"math/tex; mode=display\">\\text{ans}=\\text{INT_MAX}</script>\n</li>\n<li>Iterate the array from left to right using <script type=\"math/tex; mode=display\">i</script>:</li>\n<li>Iterate from the current element to the end of vector using <script type=\"math/tex; mode=display\">j</script>:<ul>\n<li>Find the <script type=\"math/tex; mode=display\">\\text{sum}</script> of elements from index <script type=\"math/tex; mode=display\">i</script> to <script type=\"math/tex; mode=display\">j</script>\n</li>\n<li>If sum is greater then <script type=\"math/tex; mode=display\">s</script>:</li>\n<li>Update <script type=\"math/tex; mode=display\">\\text{ans} = \\min(\\text{ans}, (j - i + 1))</script>\n</li>\n<li>Start the next <script type=\"math/tex; mode=display\">i</script>th iteration, since, we got the smallest subarray with <script type=\"math/tex; mode=display\">\\text{sum}>=s</script> starting from the current index.</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"c1\">//Found the smallest subarray with sum&gt;=s starting with index i, hence move to next index</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">!=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">ans</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n^3)</script>.</li>\n<li>For each element of array, we find all the subarrays starting from that index which is <script type=\"math/tex; mode=display\">O(n^2)</script>.</li>\n<li>Time complexity to find the sum of each subarray is <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n<li>\n<p>Thus, the total time complexity : <script type=\"math/tex; mode=display\">O(n^2 * n) = O(n^3)</script>\n</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script> extra space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-a-better-brute-force-accepted\">Approach #2 A better brute force [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>In Approach #1, you may notice that the sum is calculated for every surarray in <script type=\"math/tex; mode=display\">O(n)</script> time. But, we could easily find the sum in O(1) time by storing the cumulative sum from the beginning(Memoization). After we have stored the cumulative sum in <script type=\"math/tex; mode=display\">\\text{sums}</script>, we could easily find the sum of any subarray from <script type=\"math/tex; mode=display\">i</script> to <script type=\"math/tex; mode=display\">j</script>.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>The algorithm is similar to Approach #1.</li>\n<li>The only difference is in the way of finding the sum of subarrays:</li>\n<li>Create a vector <script type=\"math/tex; mode=display\">\\text{sums}</script> of size of <script type=\"math/tex; mode=display\">\\text{nums}</script>\n</li>\n<li>Initialize <script type=\"math/tex; mode=display\">\\text{sums}[0]=\\text{nums}[0]</script>\n</li>\n<li>Iterate over the <script type=\"math/tex; mode=display\">\\text{sums}</script> vector:<ul>\n<li>Update <script type=\"math/tex; mode=display\">\\text{sums}[i] = \\text{sums}[i-1] + \\text{nums}[i]</script>\n</li>\n</ul>\n</li>\n<li>Sum of subarray from <script type=\"math/tex; mode=display\">i</script> to <script type=\"math/tex; mode=display\">j</script> is calculated as:\n    <script type=\"math/tex; mode=display\">\\text{sum}=\\text{sums}[j] - \\text{sums}[i] +\\text{nums}[i]</script>, , wherein <script type=\"math/tex; mode=display\">\\text{sums}[j] - \\text{sums}[i]</script> is the sum from (<script type=\"math/tex; mode=display\">i+1</script>)th element to the <script type=\"math/tex; mode=display\">j</script>th element.</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">sums</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"c1\">//Found the smallest subarray with sum&gt;=s starting with index i, hence move to next index</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">!=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">ans</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>.</li>\n<li>Time complexity to find all the subarrays is <script type=\"math/tex; mode=display\">O(n^2)</script>.</li>\n<li>Sum of the subarrays is calculated in <script type=\"math/tex; mode=display\">O(1)</script> time.</li>\n<li>\n<p>Thus, the total time complexity: <script type=\"math/tex; mode=display\">O(n^2 * 1) = O(n^2)</script>\n</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> extra space.</p>\n</li>\n<li>Additional <script type=\"math/tex; mode=display\">O(n)</script> space for <script type=\"math/tex; mode=display\">\\text{sums}</script> vector than in Approach #1.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-binary-search-accepted\">Approach #3 Using Binary search [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>We could further improve the Approach #2 using the binary search. Notice that we find the subarray with <script type=\"math/tex; mode=display\">\\text{sum} >=\\text{s}</script> starting with an index <script type=\"math/tex; mode=display\">i</script> in <script type=\"math/tex; mode=display\">O(n)</script> time. But, we could reduce the time to <script type=\"math/tex; mode=display\">O(log(n))</script> using binary search. Note that in Approach #2, we search for subarray starting with index <script type=\"math/tex; mode=display\">i</script>, until we find <script type=\"math/tex; mode=display\">\\text{sum}=\\text{sums}[j] - \\text{sums}[i] +\\text{nums}[i]</script> that is greater than <script type=\"math/tex; mode=display\">\\text{s}</script>. So, instead of iterating linearly to find the sum, we could use binary search to find the index that is not lower than  <script type=\"math/tex; mode=display\">\\text{s}-\\text{sums[i]}</script> in the <script type=\"math/tex; mode=display\">\\text{sums}</script>, which can be done using <script type=\"math/tex; mode=display\">\\text{lower_bound}</script> function in C++ STL or could be implemented manually.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>\n<p>Create vector <script type=\"math/tex; mode=display\">sums</script> of size <script type=\"math/tex; mode=display\">n+1</script> with :\n<script type=\"math/tex; mode=display\">\\text{sums}[0]=0\\text{, }\\text{sums}[i]=\\text{sums}[i-1]+\\text{nums}[i-1]</script>\n</p>\n</li>\n<li>\n<p>Iterate from <script type=\"math/tex; mode=display\">i=1</script> to <script type=\"math/tex; mode=display\">n</script>:</p>\n</li>\n<li>Find the value <script type=\"math/tex; mode=display\">\\text{to_find}</script> in <script type=\"math/tex; mode=display\">\\text{sum}</script> required for minimum subarray starting from index <script type=\"math/tex; mode=display\">i</script> to have sum greater than <script type=\"math/tex; mode=display\">s</script>, that is:\n    <script type=\"math/tex; mode=display\">\\text{to_find}=\\text{s}+\\text{sums}[i-1]</script>\n</li>\n<li>Find the index in <script type=\"math/tex; mode=display\">\\text{sums}</script> such that value at that index is not lower than the <script type=\"math/tex; mode=display\">\\text{to_find}</script> value, say <script type=\"math/tex; mode=display\">\\text{bound}</script>\n</li>\n<li>If we find the <script type=\"math/tex; mode=display\">\\text{to_find}</script> in <script type=\"math/tex; mode=display\">\\text{sums}</script>, then:<ul>\n<li>Size of current subarray is given by:\n  <script type=\"math/tex; mode=display\">\\text{bound} - (\\text{sums.begin}()+i-1)</script>\n</li>\n<li>Compare <script type=\"math/tex; mode=display\">ans</script> with the current subarray size and store minimum in <script type=\"math/tex; mode=display\">ans</script>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">sums</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">//size = n+1 for easier calculations</span>\n    <span class=\"c1\">//sums[0]=0 : Meaning that it is the sum of first 0 elements</span>\n    <span class=\"c1\">//sums[1]=A[0] : Sum of first 1 elements</span>\n    <span class=\"c1\">//ans so on...</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">to_find</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">sums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">auto</span> <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">sums</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">sums</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">to_find</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bound</span> <span class=\"o\">!=</span> <span class=\"n\">sums</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">bound</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">sums</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">!=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">ans</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(nlog(n))</script>.<ul>\n<li>For each element in the vector, find the subarray starting from that index, and having sum greater than <script type=\"math/tex; mode=display\">s</script> using binary search. Hence, the time required is <script type=\"math/tex; mode=display\">O(n)</script> for iteration over the vector and $$O(log(n)) for finding the subarray for each index using binary search.</li>\n</ul>\n</li>\n<li>Therefore, total time complexity = <script type=\"math/tex; mode=display\">O(n*log(n))</script>\n</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Additional <script type=\"math/tex; mode=display\">O(n)</script> space for <script type=\"math/tex; mode=display\">\\text{sums}</script> vector</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-2-pointers-accepted\">Approach #4 Using 2 pointers [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Until now, we have kept the starting index of subarray fixed, and found the last position. Instead, we could move the starting index of the current subarray as soon as we know that no better could be done with this index as the starting index. We could keep 2 pointer,one for the start and another for the end of the current subarray, and make optimal moves so as to keep the <script type=\"math/tex; mode=display\">\\text{sum}</script> greater than <script type=\"math/tex; mode=display\">s</script> as well as maintain the lowest size possible.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Initialize <script type=\"math/tex; mode=display\">\\text{left}</script> pointer to 0 and <script type=\"math/tex; mode=display\">\\text{sum}</script> to 0</li>\n<li>Iterate over the <script type=\"math/tex; mode=display\">\\text{nums}</script>:</li>\n<li>Add <script type=\"math/tex; mode=display\">\\text{nums}[i]</script> to <script type=\"math/tex; mode=display\">\\text{sum}</script>\n</li>\n<li>While <script type=\"math/tex; mode=display\">\\text{sum}</script> is greater than or equal to <script type=\"math/tex; mode=display\">s</script>:<ul>\n<li>Update <script type=\"math/tex; mode=display\">\\text{ans}=\\min(\\text{ans},i+1-\\text{left})</script>, where <script type=\"math/tex; mode=display\">i+1-\\text{left}</script> is the size of current subarray</li>\n<li>It means that the first index can safely be incremented, since, the minimum subarray starting with this index with <script type=\"math/tex; mode=display\">\\text{sum}>=s</script> has been achieved</li>\n<li>Subtract <script type=\"math/tex; mode=display\">\\text{nums[left]}</script> from <script type=\"math/tex; mode=display\">\\text{sum}</script> and increment <script type=\"math/tex; mode=display\">\\text{left}</script>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">minSubArrayLen</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;=</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"p\">);</span>\n            <span class=\"n\">sum</span> <span class=\"o\">-=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">ans</span> <span class=\"o\">!=</span> <span class=\"n\">INT_MAX</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"nl\">ans</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Single iteration of <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n<li>Each element can be visited atmost twice, once by the right pointer(<script type=\"math/tex; mode=display\">i</script>) and (atmost)once by the <script type=\"math/tex; mode=display\">\\text{left}</script> pointer.</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script> extra space. Only constant space required for <script type=\"math/tex; mode=display\">\\text{left}</script>, <script type=\"math/tex; mode=display\">\\text{sum}</script>, <script type=\"math/tex; mode=display\">\\text{ans}</script> and <script type=\"math/tex; mode=display\">i</script>.</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/abhinavbansal0\">@abhinavbansal0</a>.</p>',NULL,1,'none','none','none'),(77,'Target Sum',2,'Depth-first Search,Dynamic Programming',0,0,'<p></p><p>\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol.\n</p><p>Find out how many ways to assign symbols to make sum of integers equal to target S.  \n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> nums is [1, 1, 1, 1, 1], S is 3. \n<b>Output:</b> 5\n<b>Explanation:</b> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the given array is positive and will not exceed 20. </li>\n<li>The sum of elements in the given array will not exceed 1000.</li>\n<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findTargetSumWays(vector<int>& nums, int S) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findTargetSumWays(int[] nums, int S) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findTargetSumWays(self, nums, S):\r\n        """\r\n        :type nums: List[int]\r\n        :type S: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findTargetSumWays(int* nums, int numsSize, int S) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindTargetSumWays(int[] nums, int S) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} S\r\n * @return {number}\r\n */\r\nvar findTargetSumWays = function(nums, S) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} s\r\n# @return {Integer}\r\ndef find_target_sum_ways(nums, s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findTargetSumWays(_ nums: [Int], _ S: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findTargetSumWays(nums []int, S int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findTargetSumWays(nums: Array[Int], S: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-2-recursion-with-memoization-accepted\">Approach #2 Recursion with memoization [Accepted]</a></li>\n<li><a href=\"#approach-3-2d-dynamic-programming-accepted\">Approach #3 2D Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-4-1d-dynamic-programming-accepted\">Approach #4 1D Dynamic Programming [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The brute force approach is based on recursion. We need to try to put both the <code>+</code> and <code>-</code> symbols at every location in the given <script type=\"math/tex; mode=display\">nums</script> array and find out the assignments which lead to the required result <script type=\"math/tex; mode=display\">S</script>.</p>\n<p>For this, we make use of a recursive function <code>calculate(nums, i, sum, S)</code>, which returns the assignments leading to the sum <script type=\"math/tex; mode=display\">S</script>, starting from the <script type=\"math/tex; mode=display\">i^{th}</script> index onwards, provided the sum of elements upto the <script type=\"math/tex; mode=display\">i^{th}</script> element is <script type=\"math/tex; mode=display\">sum</script>. This function appends a <code>+</code> sign and a <code>-</code> sign both to the element at the current index and calls itself with the updated <script type=\"math/tex; mode=display\">sum</script> as <script type=\"math/tex; mode=display\">sum + nums[i]</script> and <script type=\"math/tex; mode=display\">sum - nums[i]</script> repectively along with the updated current index as <script type=\"math/tex; mode=display\">i+1</script>.  Whenver, we reach the end of the array, we compare the sum obtained with <script type=\"math/tex; mode=display\">S</script>. If they are equal, we increment the <script type=\"math/tex; mode=display\">count</script> value to be returned.</p>\n<p>Thus, the function call <code>calculate(nums, 0, 0, S)</code> retuns the required no. of assignments.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findTargetSumWays</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">calculate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">S</span><span class=\"o\">);</span>\n            <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">S</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. Size of recursion tree will be <script type=\"math/tex; mode=display\">2^n</script>. <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursion-with-memoization-accepted\">Approach #2 Recursion with memoization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>It can be easily observed that in the last approach, a lot of redundant function calls could be made with the same value of <script type=\"math/tex; mode=display\">i</script> as the current index and the same value of <script type=\"math/tex; mode=display\">sum</script> as the current sum, since the same values could be obtained through multiple paths in the recursion tree. In order to remove this redundancy, we make use of memoization as well to store the results which have been calculated earlier.</p>\n<p>Thus, for every call to <code>calculate(nums, i, sum, S)</code>, we store the result obtained in <script type=\"math/tex; mode=display\">memo[i][sum + 1000]</script>. The factor of 1000 has been added as an offset to the <script type=\"math/tex; mode=display\">sum</script> value to map all the <script type=\"math/tex; mode=display\">sum</script>s possible to positive integer range. By making use of memoization, we can prune the search space to a good extent.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findTargetSumWays</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"mi\">2001</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">row</span><span class=\"o\">:</span> <span class=\"n\">memo</span><span class=\"o\">)</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">calculate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n            <span class=\"kt\">int</span> <span class=\"n\">add</span> <span class=\"o\">=</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">subtract</span> <span class=\"o\">=</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">add</span> <span class=\"o\">+</span> <span class=\"n\">subtract</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l*n)</script>. The <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">l*n</script> has been filled just once. Here, <script type=\"math/tex; mode=display\">l</script> refers to the range of <script type=\"math/tex; mode=display\">sum</script> and <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-2d-dynamic-programming-accepted\">Approach #3 2D Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is as follows. Suppose we can find out the number of times a particular sum, say <script type=\"math/tex; mode=display\">sum_i</script> is possible upto a particular index, say <script type=\"math/tex; mode=display\">i</script>, in the given <script type=\"math/tex; mode=display\">nums</script> array, which is given by say <script type=\"math/tex; mode=display\">count_i</script>. Now, we can find out the number of times the sum <script type=\"math/tex; mode=display\">sum_i + nums[i]</script> can occur easily as <script type=\"math/tex; mode=display\">count_i</script>. Similarly, the number of times the sum <script type=\"math/tex; mode=display\">sum_i - nums[i]</script> occurs is also given by <script type=\"math/tex; mode=display\">count_i</script>. </p>\n<p>Thus, if we know all the sums <script type=\"math/tex; mode=display\">sum_j</script>\'s which are possible upto the <script type=\"math/tex; mode=display\">j^{th}</script> index by using various assignments, along with the corresponding count of assignments, <script type=\"math/tex; mode=display\">count_j</script>, leading to the same sum, we can determine all the sums possible upto the <script type=\"math/tex; mode=display\">(j+1)^{th}</script> index  along with the corresponding count of assignments leading to the new sums.</p>\n<p>Based on this idea, we make use of a <script type=\"math/tex; mode=display\">dp</script> to determine the number of assignments which can lead to the given sum. <script type=\"math/tex; mode=display\">dp[i][j]</script> refers to the number of assignments which can lead to a sum of <script type=\"math/tex; mode=display\">j</script> upto the <script type=\"math/tex; mode=display\">i^{th}</script> index. To determine the number of assignments which can lead to a sum of <script type=\"math/tex; mode=display\">sum + nums[i]</script> upto the <script type=\"math/tex; mode=display\">(i+1)^{th}</script> index, we can use <script type=\"math/tex; mode=display\">dp[i][sum + nums[i]] = dp[i][sum + nums[i]] + dp[i-1][sum]</script>. Similarly, <script type=\"math/tex; mode=display\">dp[i][sum - nums[i]] = dp[i][sum + nums[i]] + dp[i-1][sum]</script>. We iterate over the <script type=\"math/tex; mode=display\">dp</script> array in a rowwise fashion i.e. Firstly we obtain all the sums which are possible upto a particular index along with the corresponding count of assignments and then proceed for the next element(index) in the <script type=\"math/tex; mode=display\">nums</script> array.</p>\n<p>But, since the $$sum can range from -1000 to +1000, we need to add an offset of 1000 to the sum indices (column number) to map all the sums obtained to positive range only. </p>\n<p>At the end, the value of <script type=\"math/tex; mode=display\">dp[n-1][S+1000]</script> gives us the required number of assignments. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in the <script type=\"math/tex; mode=display\">nums</script> array.</p>\n<p>The animation below shows the way various sums are generated along with the corresponding indices. The example assumes <script type=\"math/tex; mode=display\">sum</script> values to lie in the range of -6 to +6 just for the purpose of illustration. This animation is inspired by <a href=\"http://leetcode.com/Chidong\">@Chidong</a></p>\n<p>!?!../Documents/494_Target_Sum.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findTargetSumWays</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"mi\">2001</span><span class=\"o\">];</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][-</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"o\">;</span> <span class=\"n\">sum</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1000</span><span class=\"o\">;</span> <span class=\"n\">sum</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">S</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">S</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l*n)</script>. The entire <script type=\"math/tex; mode=display\">nums</script> array is travesed 2001(constant no.: <script type=\"math/tex; mode=display\">l</script>) times. <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array. <script type=\"math/tex; mode=display\">l</script> refers to the range of <script type=\"math/tex; mode=display\">sum</script> possible.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(l*n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">l*n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-1d-dynamic-programming-accepted\">Approach #4 1D Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>If we look closely at the last solution, we can observe that for the evaluation of the current row of <script type=\"math/tex; mode=display\">dp</script>, only the values of the last row of <script type=\"math/tex; mode=display\">dp</script> are needed. Thus, we can save some space by using a 1D DP array instead of a 2-D DP array. The only difference that needs to be made is that now the same <script type=\"math/tex; mode=display\">dp</script> array will be updated for every row traversed. </p>\n<p>Below code is inspired by <a href=\"http://leetcode.com/Chidong\">@Chidong</a></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findTargetSumWays</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">2001</span><span class=\"o\">];</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">dp</span><span class=\"o\">[-</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">2001</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"o\">;</span> <span class=\"n\">sum</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1000</span><span class=\"o\">;</span> <span class=\"n\">sum</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n                    <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">S</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">+</span> <span class=\"mi\">1000</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l.n)</script>. The entire <script type=\"math/tex; mode=display\">nums</script> array is traversed <script type=\"math/tex; mode=display\">l</script> times. <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array. <script type=\"math/tex; mode=display\">l</script> refers to the range of <script type=\"math/tex; mode=display\">sum</script> possible.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(78,'Repeated Substring Pattern',1,'String',0,0,'<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000. \n\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"abab\"\n\n<b>Output:</b> True\n\n<b>Explanation:</b> It\'s the substring \"ab\" twice.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"aba\"\n\n<b>Output:</b> False\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> \"abcabcabcabc\"\n\n<b>Output:</b> True\n\n<b>Explanation:</b> It\'s the substring \"abc\" four times. (And the substring \"abcabc\" twice.)\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool repeatedSubstringPattern(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean repeatedSubstringPattern(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def repeatedSubstringPattern(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool repeatedSubstringPattern(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool RepeatedSubstringPattern(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar repeatedSubstringPattern = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Boolean}\r\ndef repeated_substring_pattern(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func repeatedSubstringPattern(_ s: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func repeatedSubstringPattern(s string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def repeatedSubstringPattern(s: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(79,'LRU Cache',3,'Design',0,0,'<p></p><p>\nDesign and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.\n</p><p>\n<code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br/>\n<code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\n</p><p><b>Follow up:</b><br/>\nCould you do both operations in <b>O(1)</b> time complexity?</p><p><b>Example:</b>\n</p><pre>\nLRUCache cache = new LRUCache( 2 /* capacity */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)\ncache.put(4, 4);    // evicts key 1\ncache.get(1);       // returns -1 (not found)\ncache.get(3);       // returns 3\ncache.get(4);       // returns 4\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class LRUCache {\r\npublic:\r\n    LRUCache(int capacity) {\r\n        \r\n    }\r\n    \r\n    int get(int key) {\r\n        \r\n    }\r\n    \r\n    void put(int key, int value) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * LRUCache obj = new LRUCache(capacity);\r\n * int param_1 = obj.get(key);\r\n * obj.put(key,value);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class LRUCache {\n\n    public LRUCache(int capacity) {\n        \n    }\n    \n    public int get(int key) {\n        \n    }\n    \n    public void put(int key, int value) {\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class LRUCache(object):\r\n\r\n    def __init__(self, capacity):\r\n        """\r\n        :type capacity: int\r\n        """\r\n        \r\n\r\n    def get(self, key):\r\n        """\r\n        :type key: int\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def put(self, key, value):\r\n        """\r\n        :type key: int\r\n        :type value: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n\r\n# Your LRUCache object will be instantiated and called as such:\r\n# obj = LRUCache(capacity)\r\n# param_1 = obj.get(key)\r\n# obj.put(key,value)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} LRUCache;\n\nLRUCache* lRUCacheCreate(int capacity) {\n    \n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n    \n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n    \n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    \n}\n\n/**\n * Your LRUCache struct will be instantiated and called as such:\n * struct LRUCache* obj = lRUCacheCreate(capacity);\n * int param_1 = lRUCacheGet(obj, key);\n * lRUCachePut(obj, key, value);\n * lRUCacheFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class LRUCache {\r\n\r\n    public LRUCache(int capacity) {\r\n        \r\n    }\r\n    \r\n    public int Get(int key) {\r\n        \r\n    }\r\n    \r\n    public void Put(int key, int value) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * LRUCache obj = new LRUCache(capacity);\r\n * int param_1 = obj.Get(key);\r\n * obj.Put(key,value);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} capacity\r\n */\r\nvar LRUCache = function(capacity) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} key\r\n * @return {number}\r\n */\r\nLRUCache.prototype.get = function(key) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} key \r\n * @param {number} value\r\n * @return {void}\r\n */\r\nLRUCache.prototype.put = function(key, value) {\r\n    \r\n};\r\n\r\n/** \r\n * Your LRUCache object will be instantiated and called as such:\r\n * var obj = Object.create(LRUCache).createNew(capacity)\r\n * var param_1 = obj.get(key)\r\n * obj.put(key,value)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class LRUCache\r\n\r\n=begin\r\n    :type capacity: Integer\r\n=end\r\n    def initialize(capacity)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :rtype: Integer\r\n=end\r\n    def get(key)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :type value: Integer\r\n    :rtype: Void\r\n=end\r\n    def put(key, value)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your LRUCache object will be instantiated and called as such:\r\n# obj = LRUCache.new(capacity)\r\n# param_1 = obj.get(key)\r\n# obj.put(key,value)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type LRUCache struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(capacity int) LRUCache {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LRUCache) Get(key int) int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LRUCache) Put(key int, value int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * obj := Constructor(capacity);\r\n * param_1 := obj.Get(key);\r\n * obj.Put(key,value);\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class LRUCache(var _capacity: Int) {\n    \n    def get(int key) : Int = {\n\n    }\n    \n    def put(int key, int value) {\n\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity);\n * Int param_1 = obj.get(key);\n * obj.put(key,value);\n */\" }]',NULL,NULL,1,'none','none','none'),(80,'N-Queens',3,'Backtracking',0,0,'<p></p><p>The <i>n</i>-queens puzzle is the problem of placing <i>n</i> queens on an <i>n</i>×<i>n</i> chessboard such that no two queens attack each other.</p><p><img src=\"https://leetcode.com/static/images/problemset/8-queens.png\"/></p><p>Given an integer <i>n</i>, return all distinct solutions to the <i>n</i>-queens puzzle.</p><p>Each solution contains a distinct board configuration of the <i>n</i>-queens\' placement, where <code>\'Q\'</code> and <code>\'.\'</code> both indicate a queen and an empty space respectively.</p><p>For example,<br/>\nThere exist two distinct solutions to the 4-queens puzzle:</p><pre>\n[\n [\".Q..\",  // Solution 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // Solution 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<string>> solveNQueens(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def solveNQueens(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar*** solveNQueens(int n, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<string>> SolveNQueens(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {string[][]}\r\n */\r\nvar solveNQueens = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {String[][]}\r\ndef solve_n_queens(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func solveNQueens(_ n: Int) -> [[String]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func solveNQueens(n int) [][]string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(81,'Bulb Switcher',2,'Math,Brainteaser',0,0,'<p></p><p>\nThere are <i>n</i> bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it\'s off or turning off if it\'s on). For the <i>i</i>th round, you toggle every <i>i</i> bulb. For the <i>n</i>th round, you only toggle the last bulb.\n\nFind how many bulbs are on after <i>n</i> rounds.\n</p><p>\n<b>Example:</b><br/></p><pre>\nGiven <i>n</i> = 3. <br/>\nAt first, the three bulbs are <b>[off, off, off]</b>.\nAfter first round, the three bulbs are <b>[on, on, on]</b>.\nAfter second round, the three bulbs are <b>[on, off, on]</b>.\nAfter third round, the three bulbs are <b>[on, off, off]</b>. <br/>\nSo you should return 1, because there is only one bulb is on.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int bulbSwitch(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int bulbSwitch(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def bulbSwitch(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int bulbSwitch(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int BulbSwitch(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar bulbSwitch = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef bulb_switch(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func bulbSwitch(_ n: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func bulbSwitch(n int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def bulbSwitch(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(82,'Find the Duplicate Number',2,'Binary Search,Array,Two Pointers',0,0,'<p></p><p>\nGiven an array <i>nums</i> containing <i>n</i> + 1 integers where each integer is between 1 and <i>n</i> (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n</p><p>\n<b>Note:</b><br/>\n</p><ol>\n<li>You <b>must not</b> modify the array (assume the array is read only).</li>\n<li>You must use only constant, <i>O</i>(1) extra space.</li>\n<li>Your runtime complexity should be less than <code>O(n<sup>2</sup>)</code>.</li>\n<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>\n</ol><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findDuplicate(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findDuplicate(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findDuplicate(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findDuplicate(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindDuplicate(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findDuplicate = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_duplicate(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findDuplicate(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findDuplicate(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findDuplicate(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(83,'Beautiful Arrangement',2,'Backtracking',0,0,'<p></p><p>\nSuppose you have <b>N</b> integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these <b>N</b> numbers successfully if one of the following is true for the i<sub>th</sub> position (1 ? i ? N) in this array:\n</p><ol>\n<li>The number at the i<sub>th</sub> position is divisible by <b>i</b>.</li>\n<li><b>i</b> is divisible by the number at the i<sub>th</sub> position.</li>\n</ol><p>\nNow given N, how many beautiful arrangements can you construct?\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 2\n<b>Output:</b> 2\n<b>Explanation:</b> \n<br/>The first beautiful arrangement is [1, 2]:\n<br/>Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\n<br/>Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\n<br/>The second beautiful arrangement is [2, 1]:\n<br/>Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\n<br/>Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li><b>N</b> is a positive integer and will not exceed 15.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int countArrangement(int N) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countArrangement(int N) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def countArrangement(self, N):\n        """\n        :type N: int\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countArrangement(int N) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int CountArrangement(int N) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} N\n * @return {number}\n */\nvar countArrangement = function(N) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\n# @return {Integer}\ndef count_arrangement(n)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func countArrangement(_ N: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countArrangement(N int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countArrangement(N: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-3-backtracking-accepted\">Approach #3 Backtracking [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the brute force method, we can find out all the arrays that can be formed using the numbers from 1 to N(by creating every possible permutation of the given elements). Then, we iterate over all the elements of every permutation generated and check for the required conditions of divisibility.</p>\n<p>In order to generate all the possible pairings, we make use of a function <code>permute(nums, current_index)</code>. This function creates all the possible permutations of the elements of the given array.</p>\n<p>To do so, <code>permute</code> takes the index of the current element <script type=\"math/tex; mode=display\">current_index</script> as one of the arguments. Then, it swaps the current element with every other element in the array, lying towards its right, so as to generate a new ordering of the array elements. After the swapping has been done, it makes another call to permute but this time with the index of the next element in the array. While returning back, we reverse the swapping done in the current function call.</p>\n<p>Thus, when we reach the end of the array, a new ordering of the array\'s elements is generated. The following animation depicts the process of generating the permutations.</p>\n<p>!?!../Documents/561_Array.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">countArrangement</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">permute</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n            <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n!)</script>. A total of <script type=\"math/tex; mode=display\">n!</script> permutations will be generated for an array of length <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>. <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the brute force approach, we create the full array for every permutation and then check the array for the given divisibilty conditions. But this method can be optimized to a great extent. To do so, we can keep checking the elements while being added to the permutation array at every step for the divisibility condition and  can stop creating it any further as soon as we find out the element just added to the permutation violates the divisiblity condition. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">countArrangement</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">permute</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">%</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(k)</script>. <script type=\"math/tex; mode=display\">k</script> refers to the number of valid permutations.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>. Further, <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> is used, where, <script type=\"math/tex; mode=display\">n</script> is the given number.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-backtracking-accepted\">Approach #3 Backtracking [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is simple. We try to create all the permutations of numbers from 1 to N. We can fix one number at a particular position and check for the divisibility criteria of that number at the particular position. But, we need to keep a track of the numbers which have already been considered earlier so that they aren\'t reconsidered while generating the permutations. If the current \nnumber doesn\'t satisfy the divisibility criteria, we can leave all the permutations that can be generated with that number at the particular position. This helps to prune the search space of the permutations to a great extent. We do so by trying to place each of the numbers at each position.</p>\n<p>We make use of a visited array of size <script type=\"math/tex; mode=display\">N</script>. Here, <script type=\"math/tex; mode=display\">visited[i]</script> refers to the <script type=\"math/tex; mode=display\">i^{th}</script> number being already placed/not placed in the array being formed till now(True indicates that the number has already been placed).</p>\n<p>We make use of a <code>calculate</code> function, which puts all the numbers pending numbers from 1 to N(i.e. not placed till now in the array), indicated by a <script type=\"math/tex; mode=display\">False</script> at the corresponding <script type=\"math/tex; mode=display\">visited[i]</script> position, and tries to create all the permutations with those numbers starting from the <script type=\"math/tex; mode=display\">pos</script> index onwards in the current array. While putting the <script type=\"math/tex; mode=display\">pos^{th}</script> number, we check whether the <script type=\"math/tex; mode=display\">i^{th}</script> number satisfies the divisibility criteria on the go i.e. we continue forward with creating the permutations with the number <script type=\"math/tex; mode=display\">i</script> at the <script type=\"math/tex; mode=display\">pos^{th}</script> position only if the number <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">pos</script> satisfy the given criteria. Otherwise, we continue with putting the next numbers at the same position and keep on generating the permutations.</p>\n<p>Look at the animation below for a better understanding of the methodology:</p>\n<p>!?!../Documents/526_Beautiful.json:1000,563!?!</p>\n<p>Below code is inspired by <a href=\"http://leetcode.com/shawngao\">@shawngao</a></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">countArrangement</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">boolean</span><span class=\"o\">[]</span> <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">visited</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">calculate</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span><span class=\"o\">[]</span> <span class=\"n\">visited</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n            <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">visited</span><span class=\"o\">);</span>\n                <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(k)</script>. <script type=\"math/tex; mode=display\">k</script> refers to the number of valid permutations.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">visited</script> array of size <script type=\"math/tex; mode=display\">n</script> is used. The depth of recursion tree will also go upto <script type=\"math/tex; mode=display\">n</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the given integer <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(84,'Task Scheduler',2,'Array,Greedy,Queue',0,0,'<p></p><p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p><p>However, there is a non-negative cooling interval <b>n</b> that means between two <b>same tasks</b>, there must be at least n intervals that CPU are doing different tasks or just be idle. </p><p>You need to return the <b>least</b> number of intervals the CPU will take to finish all the given tasks.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> tasks = [\'A\',\'A\',\'A\',\'B\',\'B\',\'B\'], n = 2\n<b>Output:</b> 8\n<b>Explanation:</b> A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The number of tasks is in the range [1, 10000].</li>\n<li>The integer n is in the range [0, 100].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int leastInterval(vector<char>& tasks, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int leastInterval(char[] tasks, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def leastInterval(self, tasks, n):\r\n        """\r\n        :type tasks: List[str]\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def leastInterval(self, tasks, n):\r\n        """\r\n        :type tasks: List[str]\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int leastInterval(char* tasks, int tasksSize, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LeastInterval(char[] tasks, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[]} tasks\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar leastInterval = function(tasks, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[]} tasks\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef least_interval(tasks, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func leastInterval(_ tasks: [Character], _ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func leastInterval(tasks []byte, n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def leastInterval(tasks: Array[Char], n: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-sorting-accepted\">Approach #1 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-2-using-priority-queue-accepted\">Approach #2 Using Priority-Queue [Accepted]</a></li>\n<li><a href=\"#approach-3-calculating-idle-slots-accepted\">Approach #3 Calculating Idle slots [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-sorting-accepted\">Approach #1 Using Sorting [Accepted]</h4>\n<p>Before we start off with the solution, we can note that the names of the tasks are irrelevant for obtaining the solution of the given problem. The time taken for the tasks to be finished is only dependent on the number of instances of each task and not on the names of tasks. </p>\n<p>The first solution that comes to the mind is to consider the tasks to be executed in the descending order of their number of instances. For every task executed, we can keep a track of the time at which this task was executed in order to consider the impact of cooling time in the future. We can execute all the tasks in the descending order of their number of instances and can keep on updating the number of instances pending for each task as well. After one cycle of the task list is executed, we can again start with the first task(largest count of instances) and keep on continuing the process by inserting idle cycles wherever appropriate by considering the last execution time of the task and the cooling time as well. </p>\n<p>But, there is a flaw in the above idea. Consider the case, where say the number of instances of tasks A, B, C, D, E  are 6, 1, 1, 1, 1 respectively with n=2(cooling time). If we go by the above method, firstly we give 1 round to each A, B, C, D and E. Now, only 5 instances of A are pending, but each instance will take 3 time units to complete because of cooling time. But a better way to schedule the tasks will be this: A, B, C, A, D, E, ... . In this way, by giving turn to the task A as soon as its cooling time is over, we can save a good number of clock cycles.</p>\n<p>From the above example, we are clear with one idea. It is that, the tasks with the currently maximum number of outstanding (pending)instances will contribute to a large number of idle cycles in the future, if not executed with appropriate interleavings with the other tasks. Thus, we need to re-execute such a task as soon as its cooling time is finished. </p>\n<p>Thus, based on the above ideas, firstly, we obtain a count of the number of instances of each task in <script type=\"math/tex; mode=display\">map</script> array. Then, we start executing the tasks in the order of descending number of their initial instances. As soon as we execute the first task, we start its cooling timer as well(<script type=\"math/tex; mode=display\">i</script>). For every task executed, we update the pending number of instances of the current task. We update the current time, <script type=\"math/tex; mode=display\">time</script>, at every instant as well. Now, as soon as the timer, <script type=\"math/tex; mode=display\">i</script>\'s value exceeds the cooling time, as discussed above, we again need to consider the task with the largest number of pending instances. Thus, we again sort the <script type=\"math/tex; mode=display\">tasks</script> array with updated counts of instances and again pick up the tasks in the descending order of their number of instances. </p>\n<p>Now, the task picked up first after the sorting, will either be the first task picked up in the last iteration(which will now be picked after its cooling time has been finished) or the task picked will be the one which lies at <script type=\"math/tex; mode=display\">(n+1)^{th}</script> position in the previous descending <script type=\"math/tex; mode=display\">tasks</script> array. In either of the cases, the cooling time won\'t cause any conflicts(it has been considered implicitly). Further, the task most critical currently will always be picked up which was the main requirement.</p>\n<p>We stop this process, when the pending instances of all the tasks have been reduced to 0. At this moment, <script type=\"math/tex; mode=display\">time</script> gives the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">leastInterval</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">tasks</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">tasks</span><span class=\"o\">)</span>\n            <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">[</span><span class=\"mi\">25</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">[</span><span class=\"mi\">25</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">26</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"mi\">25</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"mi\">25</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">]--;</span>\n                <span class=\"n\">time</span><span class=\"o\">++;</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(time)</script>. Number of iterations will be equal to resultant time <script type=\"math/tex; mode=display\">time</script>. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant size array <script type=\"math/tex; mode=display\">map</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-priority-queue-accepted\">Approach #2 Using Priority-Queue [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of making use of sorting as done in the last approach, we can also make use of a Max-Heap(<script type=\"math/tex; mode=display\">queue</script>) to pick the order in which the tasks need to be executed. But we need to ensure that the heapification occurs only after the intervals of cooling time, <script type=\"math/tex; mode=display\">n</script>, as done in the last approach.</p>\n<p>To do so, firstly, we put only those elements from <script type=\"math/tex; mode=display\">map</script> into the <script type=\"math/tex; mode=display\">queue</script> which have non-zero number of instances. Then, we start picking up the largest task from the <script type=\"math/tex; mode=display\">queue</script> for current execution. (Again, at every instant, we update the current <script type=\"math/tex; mode=display\">time</script> as well.) We pop this element from the <script type=\"math/tex; mode=display\">queue</script>. We also decrement its pending number of instances and if any more instances of the current task are pending, we store them(count) in a temporary <script type=\"math/tex; mode=display\">temp</script> list, to be added later on back into the <script type=\"math/tex; mode=display\">queue</script>. We keep on doing so, till a cycle of cooling time has been finished. After every such cycle, we add the generated <script type=\"math/tex; mode=display\">temp</script> list back to the <script type=\"math/tex; mode=display\">queue</script> for considering the most critical task again. </p>\n<p>We keep on doing so till the <script type=\"math/tex; mode=display\">queue</script>(and <script type=\"math/tex; mode=display\">temp</script>) become totally empty. At this instant, the current value of <script type=\"math/tex; mode=display\">time</script> gives the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">leastInterval</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">tasks</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">tasks</span><span class=\"o\">)</span>\n            <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"n\">PriorityQueue</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PriorityQueue</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">26</span><span class=\"o\">,</span> <span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"na\">reverseOrder</span><span class=\"o\">());</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                    <span class=\"k\">else</span>\n                        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">time</span><span class=\"o\">++;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">temp</span><span class=\"o\">)</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Number of iterations will be equal to resultant time <script type=\"math/tex; mode=display\">time</script>. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. <script type=\"math/tex; mode=display\">queue</script> and <script type=\"math/tex; mode=display\">temp</script> size will not exceed O(26).</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-calculating-idle-slots-accepted\">Approach #3 Calculating Idle slots [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is inpired by <a href=\"http://leetcode.com/zhanzq\">@zhanzq</a></p>\n<p>If we are able to, somehow, determine the number of idle slots(<script type=\"math/tex; mode=display\">idle\\_slots</script>), we can find out the time required to execute all the tasks as <script type=\"math/tex; mode=display\">idle\\_slots + Total Number Of Tasks</script>. Thus, the idea is to find out the idle time first.</p>\n<p>To find the idle time, consider figure 1 below.</p>\n<p align=\"align\"><img alt=\"Tasks\" src=\"../Figures/621_Task_Scheduler_new.PNG\" /></p>\n<p>From this figure, we can observe that the maximum number of idle slots will always be given by the product of the cooling time and the number of instances of the task with maximum count less 1(in case only multiple instances of the same task need to be executed, and each, then, is executed after lapse of every cooling time). The factor of 1 is deducted from the task\'s count with maximum number of instances, as is clear from the figure, is that in the last round of execution of the tasks, the idle slots need not be considered for insertion following the execution of the related task. Now, based on the count of the instances of the other tasks, we can reduce the number of idle slots from this maximum value, to determine the minimum number of idle slots needed.</p>\n<p>To do so, consider figure 2 as shown above. From the figure above, assuming the tasks are executed in row-wise order, we can see that in case the number of instances of another task equal the number of instances of the task with maximum number of instances, the number of idle slots saved is equal to its number of instances less 1 as is clear for the case of task B above. But, if the count of the number of instances, say <script type=\"math/tex; mode=display\">i</script> is lesser than the this maximum value, the number of idle slots saved is equal to the value <script type=\"math/tex; mode=display\">i</script> itself as is clear for the case of task C. Further, we can observe that  for any arbitrary task other than A, B or C with the count of number of instances lesser than C, this task can be easily accomodated into the idle slots or if no more idle slot is available, this task can be appended after every row of tasks without interfering with the cooling time. In the first case, subtracting its number of intances from the number of idle slots leads to obtaining the correct number of available idle slots. In the second case, which will only occur if the number of idle slots pending is already zero, it leads to negative net idle slots, which can later be considered as zero for the purpose of calculations.</p>\n<p>Thus, we can easily obtain the number of pending idle slots by subtracting appropriate number of slots from the available ones and at the end, we can obtain the total time required as the sum of pending idle slots and the total number of tasks.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">leastInterval</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">tasks</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">tasks</span><span class=\"o\">)</span>\n            <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;A&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"mi\">25</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">idle_slots</span> <span class=\"o\">=</span> <span class=\"n\">max_val</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">24</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"n\">idle_slots</span> <span class=\"o\">-=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">max_val</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">idle_slots</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">idle_slots</span> <span class=\"o\">+</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">:</span> <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over <script type=\"math/tex; mode=display\">tasks</script> array only once. (<script type=\"math/tex; mode=display\">O(n)</script>).Sorting <script type=\"math/tex; mode=display\">tasks</script> array of length <script type=\"math/tex; mode=display\">n</script> takes <script type=\"math/tex; mode=display\">O\\big(26log(26)\\big)= O(1)</script> time. After this, only one iteration over 26 elements of <script type=\"math/tex; mode=display\">map</script> is done(<script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. <script type=\"math/tex; mode=display\">map</script> array of constant size(26) is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(85,'Nth Highest Salary',2,'',0,0,'<p></p><p>\nWrite a SQL query to get the <i>n</i><sup>th</sup> highest salary from the <code>Employee</code> table.\n</p><pre>\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre><p>For example, given the above Employee table, the <i>n</i><sup>th</sup> highest salary where <i>n</i> = 2 is <code>200</code>. If there is no <i>n</i><sup>th</sup> highest salary, then the query should return <code>null</code>.</p><pre>\n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\r\nBEGIN\r\n  RETURN (\r\n      # Write your MySQL query statement below.\r\n      \r\n  );\r\nEND\" }]',NULL,NULL,1,'none','none','none'),(86,'Implement Trie (Prefix Tree)',2,'Design,Trie',0,0,'<p></p><p>\nImplement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.\n</p><p>\n<b>Note:</b><br/>\nYou may assume that all inputs are consist of lowercase letters <code>a-z</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Trie {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    void insert(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    bool search(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    bool startsWith(string prefix) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.insert(word);\r\n * bool param_2 = obj.search(word);\r\n * bool param_3 = obj.startsWith(prefix);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Trie {\n\n    /** Initialize your data structure here. */\n    public Trie() {\n        \n    }\n    \n    /** Inserts a word into the trie. */\n    public void insert(String word) {\n        \n    }\n    \n    /** Returns if the word is in the trie. */\n    public boolean search(String word) {\n        \n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    public boolean startsWith(String prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Trie(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def insert(self, word):\r\n        """\r\n        Inserts a word into the trie.\r\n        :type word: str\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def search(self, word):\r\n        """\r\n        Returns if the word is in the trie.\r\n        :type word: str\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n    def startsWith(self, prefix):\r\n        """\r\n        Returns if there is any word in the trie that starts with the given prefix.\r\n        :type prefix: str\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.startsWith(prefix)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} Trie;\n\n/** Initialize your data structure here. */\nTrie* trieCreate() {\n    \n}\n\n/** Inserts a word into the trie. */\nvoid trieInsert(Trie* obj, char* word) {\n    \n}\n\n/** Returns if the word is in the trie. */\nbool trieSearch(Trie* obj, char* word) {\n    \n}\n\n/** Returns if there is any word in the trie that starts with the given prefix. */\nbool trieStartsWith(Trie* obj, char* prefix) {\n    \n}\n\nvoid trieFree(Trie* obj) {\n    \n}\n\n/**\n * Your Trie struct will be instantiated and called as such:\n * struct Trie* obj = trieCreate();\n * trieInsert(obj, word);\n * bool param_2 = trieSearch(obj, word);\n * bool param_3 = trieStartsWith(obj, prefix);\n * trieFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Trie {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    public void Insert(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    public bool StartsWith(string prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.Insert(word);\r\n * bool param_2 = obj.Search(word);\r\n * bool param_3 = obj.StartsWith(prefix);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar Trie = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a word into the trie. \r\n * @param {string} word\r\n * @return {void}\r\n */\r\nTrie.prototype.insert = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if the word is in the trie. \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nTrie.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if there is any word in the trie that starts with the given prefix. \r\n * @param {string} prefix\r\n * @return {boolean}\r\n */\r\nTrie.prototype.startsWith = function(prefix) {\r\n    \r\n};\r\n\r\n/** \r\n * Your Trie object will be instantiated and called as such:\r\n * var obj = Object.create(Trie).createNew()\r\n * obj.insert(word)\r\n * var param_2 = obj.search(word)\r\n * var param_3 = obj.startsWith(prefix)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Trie\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a word into the trie.\r\n    :type word: String\r\n    :rtype: Void\r\n=end\r\n    def insert(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if the word is in the trie.\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if there is any word in the trie that starts with the given prefix.\r\n    :type prefix: String\r\n    :rtype: Boolean\r\n=end\r\n    def starts_with(prefix)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie.new()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.starts_with(prefix)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Trie struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() Trie {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a word into the trie. */\r\nfunc (this *Trie) Insert(word string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if the word is in the trie. */\r\nfunc (this *Trie) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/** Returns if there is any word in the trie that starts with the given prefix. */\r\nfunc (this *Trie) StartsWith(prefix string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Insert(word);\r\n * param_2 := obj.Search(word);\r\n * param_3 := obj.StartsWith(prefix);\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class Trie() {\n    \n    /** Inserts a word into the trie. */\n    def insert(String word) {\n\n    }\n    \n    /** Returns if the word is in the trie. */\n    def search(String word) : Boolean = {\n\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    def startsWith(String prefix) : Boolean = {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie();\n * obj.insert(word);\n * Boolean param_2 = obj.search(word);\n * Boolean param_3 = obj.startsWith(prefix);\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#applications\">Applications</a><ul>\n<li><a href=\"#1-autocomplete\">1. Autocomplete</a></li>\n<li><a href=\"#2-spell-checker\">2. Spell checker</a></li>\n<li><a href=\"#3-ip-routing-longest-prefix-matching\">3. IP routing (Longest prefix matching)</a></li>\n<li><a href=\"#4-t9-predictive-text\">4. T9 predictive text</a></li>\n<li><a href=\"#5-solving-word-games\">5. Solving word games</a></li>\n</ul>\n</li>\n<li><a href=\"#trie-node-structure\">Trie node structure</a></li>\n<li><a href=\"#insertion-of-a-key-to-a-trie\">Insertion of a key to a trie</a></li>\n<li><a href=\"#search-for-a-key-in-a-trie\">Search for a key in a trie</a></li>\n<li><a href=\"#search-for-a-key-prefix-in-a-trie\">Search for a key prefix in a trie</a></li>\n</ul>\n</li>\n<li><a href=\"#practice-problems\">Practice Problems</a></li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for intermediate level users. It introduces the following ideas:\nThe data structure Trie (Prefix tree) and most common operations with it.</p>\n<h2 id=\"solution\">Solution</h2>\n<h4 id=\"applications\">Applications</h4>\n<p>Trie (we pronounce \"try\") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.\nThere are various applications of this very efficient data structure such as :</p>\n<h5 id=\"1-autocomplete\">1. <a href=\"https://en.wikipedia.org/wiki/Autocomplete\">Autocomplete</a></h5>\n<p align=\"center\"><img alt=\"Google Suggest\" src=\"https://leetcode.com/media/original_images/208_GoogleSuggest.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 1. Google Suggest in action.</em></p>\n<h5 id=\"2-spell-checker\">2. <a href=\"https://en.wikipedia.org/wiki/Spell_checker\">Spell checker</a></h5>\n<p align=\"center\"><img alt=\"Spell Checker\" src=\"https://leetcode.com/media/original_images/208_SpellCheck.png\" width=\"400px\" /></p>\n<p align=\"center\"><em>Figure 2. A spell checker used in word processor.</em></p>\n<h5 id=\"3-ip-routing-longest-prefix-matching\">3. <a href=\"https://en.wikipedia.org/wiki/Longest_prefix_match\">IP routing (Longest prefix matching)</a></h5>\n<p align=\"center\"><img alt=\"IP Routing\" src=\"https://leetcode.com/media/original_images/208_IPRouting.gif\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 3. Longest prefix matching algorithm uses Tries in Internet Protocol (IP) routing to select an entry from a forwarding table.</em></p>\n<h5 id=\"4-t9-predictive-text\">4. <a href=\"https://en.wikipedia.org/wiki/T9_(predictive_text)\">T9 predictive text</a></h5>\n<p align=\"center\"><img alt=\"T9 Predictive Text\" src=\"https://leetcode.com/media/original_images/208_T9.jpg\" /></p>\n<p align=\"center\"><em>Figure 4. T9 which stands for Text on 9 keys, was used on phones to input texts during the late 1990s.</em></p>\n<h5 id=\"5-solving-word-games\">5. <a href=\"https://en.wikipedia.org/wiki/Boggle\">Solving word games</a></h5>\n<p align=\"center\"><img alt=\"Boggle\" src=\"https://leetcode.com/media/original_images/208_Boggle.png\" width=\"350px\" /></p>\n<p align=\"center\"><em>Figure 5. Tries is used to solve Boggle efficiently by pruning the search space.</em></p>\n<p>There are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie?\nAlthough hash table has <script type=\"math/tex; mode=display\">O(1)</script> time complexity for looking for a key, it is not efficient in the following operations :</p>\n<ul>\n<li>Finding all keys with a common prefix.</li>\n<li>Enumerating a dataset of strings in lexicographical order.</li>\n</ul>\n<p>Another reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to <script type=\"math/tex; mode=display\">O(n)</script>, where <script type=\"math/tex; mode=display\">n</script> is the number of keys inserted.\nTrie could use less space compared to Hash Table when storing many keys with the same prefix.\nIn this case using trie has only <script type=\"math/tex; mode=display\">O(m)</script> time complexity, where <script type=\"math/tex; mode=display\">m</script> is the key length.\nSearching for a key in a balanced tree costs  <script type=\"math/tex; mode=display\">O(m \\log n)</script> time complexity.</p>\n<h4 id=\"trie-node-structure\">Trie node structure</h4>\n<p>Trie is a rooted tree. Its nodes have the following fields:</p>\n<ul>\n<li>Maximum of <script type=\"math/tex; mode=display\">R</script> links to its children, where each link corresponds to one of <script type=\"math/tex; mode=display\">R</script> character values from dataset alphabet.\nIn this article we assume that <script type=\"math/tex; mode=display\">R</script> is 26, the number of lowercase latin letters.</li>\n<li>Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.</li>\n</ul>\n<p align=\"center\"><img alt=\"Representation of a key in trie\" src=\"https://leetcode.com/media/original_images/208_Node.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 6. Representation of a key \"leet\" in trie.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">TrieNode</span> <span class=\"o\">{</span>\n\n    <span class=\"c1\">// R links to node children</span>\n    <span class=\"kd\">private</span> <span class=\"n\">TrieNode</span><span class=\"o\">[]</span> <span class=\"n\">links</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">isEnd</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">TrieNode</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">links</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TrieNode</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsKey</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">links</span><span class=\"o\">[</span><span class=\"n\">ch</span> <span class=\"o\">-</span><span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TrieNode</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">links</span><span class=\"o\">[</span><span class=\"n\">ch</span> <span class=\"o\">-</span><span class=\"sc\">&#39;a&#39;</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"o\">,</span> <span class=\"n\">TrieNode</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">links</span><span class=\"o\">[</span><span class=\"n\">ch</span> <span class=\"o\">-</span><span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setEnd</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">isEnd</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isEnd</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">isEnd</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Two of the most common operations in a trie are insertion of a key and search for a key.</p>\n<h4 id=\"insertion-of-a-key-to-a-trie\">Insertion of a key to a trie</h4>\n<p>We insert a key by searching into the trie. We start from the root and search a link, which corresponds to the first key character. There are two cases :</p>\n<ul>\n<li>A link exists. Then we move down the tree following the link to the next child level. The algorithm continues with searching for the next key character.</li>\n<li>A link does not exist. Then we create a new node and link it with the parent\'s link matching the current key character.\nWe repeat this step until we encounter the last character of the key, then we mark the current node as an end node and the algorithm finishes.</li>\n</ul>\n<p align=\"center\"><img alt=\"Insertion of keys into a trie\" src=\"https://leetcode.com/media/original_images/208_TrieInsert.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 7. Insertion of keys into a trie.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Trie</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">TrieNode</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Trie</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TrieNode</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Inserts a word into the trie.</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">TrieNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">char</span> <span class=\"n\">currentChar</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">currentChar</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">currentChar</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">TrieNode</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">currentChar</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">setEnd</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(m)</script>, where m is the key length.</li>\n</ul>\n<p>In each iteration of the algorithm, we either examine or create a node in the trie till we reach the end of the key. This takes only <script type=\"math/tex; mode=display\">m</script> operations.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script>.</li>\n</ul>\n<p>In the worst case newly inserted key doesn\'t share a prefix with the the keys already inserted in the trie. We have to add <script type=\"math/tex; mode=display\">m</script>\nnew nodes, which takes us  <script type=\"math/tex; mode=display\">O(m)</script> space.</p>\n<h4 id=\"search-for-a-key-in-a-trie\">Search for a key in a trie</h4>\n<p>Each key is represented in the trie as a path from the root to the internal node or leaf.\nWe start from the root with the first key character. We examine the current node for a link corresponding to the key character. There are two cases :</p>\n<ul>\n<li>A link exist. We move to the next node in the path following this link, and proceed searching for the next key character.</li>\n<li>\n<p>A link does not exist. If there are no available key characters and current node is marked as <code>isEnd</code> we return true. Otherwise there are possible two cases in each of them we return false :</p>\n<ul>\n<li>There are key characters left, but it is impossible to follow the key path in the trie, and the key is missing.</li>\n<li>No key characters left, but current node is not marked as <code>isEnd</code>. Therefore the search key is only a prefix of another key in the trie.</li>\n</ul>\n</li>\n</ul>\n<p align=\"center\"><img alt=\"Search of a key in a trie\" src=\"https://leetcode.com/media/original_images/208_TrieSearchKey.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 8. Search for a key in a trie.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Trie</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"c1\">// search a prefix or whole key in trie and</span>\n    <span class=\"c1\">// returns the node where search ends</span>\n    <span class=\"kd\">private</span> <span class=\"n\">TrieNode</span> <span class=\"nf\">searchPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">TrieNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n           <span class=\"kt\">char</span> <span class=\"n\">curLetter</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n           <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">curLetter</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n               <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">curLetter</span><span class=\"o\">);</span>\n           <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n               <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n           <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Returns if the word is in the trie.</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"n\">TrieNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">searchPrefix</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">);</span>\n       <span class=\"k\">return</span> <span class=\"n\">node</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">isEnd</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m)</script>\nIn each step of the algorithm we search for the next key character. In the worst case the algorithm performs <script type=\"math/tex; mode=display\">m</script> operations.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>\n</p>\n</li>\n</ul>\n<h4 id=\"search-for-a-key-prefix-in-a-trie\">Search for a key prefix in a trie</h4>\n<p>The approach is very similar to the one we used for searching a key in a trie. We traverse the trie from the root, till there are no characters left in key prefix or it is impossible to continue the path in the trie with the current key character. The only difference with the mentioned above <code>search for a key</code> algorithm is that when we come to an end of the key prefix, we always return true. We don\'t need to consider the <code>isEnd</code> mark of the current trie node, because we are searching for a prefix of a key, not for a whole key.</p>\n<p align=\"center\"><img alt=\"Search of a key prefix in a trie\" src=\"https://leetcode.com/media/original_images/208_TrieSearchPrefix.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 9. Search for a key prefix in a trie.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Trie</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"c1\">// Returns if there is any word in the trie</span>\n    <span class=\"c1\">// that starts with the given prefix.</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">startsWith</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">prefix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">TrieNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">searchPrefix</span><span class=\"o\">(</span><span class=\"n\">prefix</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m)</script>\n</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>\n</p>\n</li>\n</ul>\n<h2 id=\"practice-problems\">Practice Problems</h2>\n<p>Here are some wonderful problems for you to practice which uses the Trie data structure.</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/add-and-search-word-data-structure-design/\">Add and Search Word - Data structure design</a> - Pretty much a direct application of Trie.</li>\n<li><a href=\"https://leetcode.com/problems/word-search-ii/\">Word Search II</a> - Similar to Boggle.</li>\n</ol>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(87,'Reverse Pairs',3,'Binary Indexed Tree,Segment Tree,Binary Search Tree,Divide and Conquer',0,0,'<p></p><p>Given an array <code>nums</code>, we call <code>(i, j)</code> an <b><i>important reverse pair</i></b> if <code>i &lt; j</code> and <code>nums[i] &gt; 2*nums[j]</code>.</p><p>You need to return the number of important reverse pairs in the given array.</p><p><b>Example1:</b>\n</p><pre>\n<b>Input</b>: [1,3,2,3,1]\n<b>Output</b>: 2\n</pre><p><b>Example2:</b>\n</p><pre>\n<b>Input</b>: [2,4,3,5,1]\n<b>Output</b>: 3\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the given array will not exceed <code>50,000</code>.</li>\n<li>All the numbers in the input array are in the range of 32-bit integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int reversePairs(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int reversePairs(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reversePairs(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int reversePairs(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ReversePairs(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar reversePairs = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef reverse_pairs(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func reversePairs(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reversePairs(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reversePairs(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-binary-search-tree-accepted\">Approach #2 Binary Search Tree [Accepted]</a></li>\n<li><a href=\"#approach-3-bit-accepted\">Approach #3 BIT [Accepted]</a></li>\n<li><a href=\"#approach-4-modified-merge-sort-accepted\">Approach #4 Modified Merge Sort [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do as directed in the question. We can simply check all the pairs if they are important reverse pairs or not.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">\\text{size} - 1</script>\n<ul>\n<li>Iterate over <script type=\"math/tex; mode=display\">j</script> from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">i - 1</script>\n<ul>\n<li>If <script type=\"math/tex; mode=display\">\\text{nums[j]} > 2 * \\text{nums[i]}</script>, increment <script type=\"math/tex; mode=display\">\\text{count}</script>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">reversePairs</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2LL</span><span class=\"p\">)</span>\n                <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>\n<ul>\n<li>We iterate over all the possible pairs wherein (<script type=\"math/tex; mode=display\">i<j</script>) in the array which is <script type=\"math/tex; mode=display\">O(n^2)</script>\n</li>\n</ul>\n</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script> only constant extra space is required for <script type=\"math/tex; mode=display\">n</script>, <script type=\"math/tex; mode=display\">count</script> etc.</li>\n</ul>\n<p><strong>Trivia</strong></p>\n<p>The above code can be expressed as one-liner in Python:</p>\n<p><em>Python</em></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">reversePairs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)])</span>\n</pre></div>\n\n\n<p>Herein, we iterate over all the pairs and store the boolean values for <script type=\"math/tex; mode=display\">\\text{nums[i]}>2*\\text{nums[j]}</script>. Finally, we count the number of <script type=\"math/tex; mode=display\">\\text{true}</script> in the array and return the result.</p>\n<hr />\n<h4 id=\"approach-2-binary-search-tree-accepted\">Approach #2 Binary Search Tree [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>In Approach #1, for each element <script type=\"math/tex; mode=display\">i</script>, we searched the subarray <script type=\"math/tex; mode=display\">[0,i)</script> for elements such that their value is greater than <script type=\"math/tex; mode=display\">2*\\text{nums[i]}</script>. In the previous approach, the search is linear. However, we need to make the process efficient. Maybe, memoization can help, but since, we need to compare the elements, we cannot find a linear DP solution.</p>\n<p>Observe that the indices of the elements in subarray <script type=\"math/tex; mode=display\">[0,i)</script> don\'t matter as we only require the count. So, we can sort the elements and perform binary search on the subarray. But, since the subarray keeps growing as we iterate to the next element, we need a data structure to store the previous result as well as to allow efficient searching(preferably <script type=\"math/tex; mode=display\">O(log(n))</script>) - Binary Search Tree(BST) could be a good bet.   </p>\n<p><em>Refreshing BST</em></p>\n<p>BST is a rooted binary tree, wherein each node is associated with a value and has 2 distinguishable sub-trees namely <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> subtree. The left subtree contains only the nodes with lower values than the parent\'s value, while the right subtree conatins only the nodes with greater values than the parent\'s value.</p>\n<p><em>Voila!</em></p>\n<p>This is exactly what is required. So, if we store our elements in BST, then we can search the larger elements thus eliminating the search on smaller elements altogether.</p>\n<p><strong>Algorithm</strong></p>\n<p>Define the <script type=\"math/tex; mode=display\">\\text{Node}</script> of BST that stores the <script type=\"math/tex; mode=display\">\\text{val}</script> and pointers to the <script type=\"math/tex; mode=display\">\\text{left}</script> and <script type=\"math/tex; mode=display\">\\text{right}</script>. We also need a count of elements(say <script type=\"math/tex; mode=display\">\\text{count_ge}</script>) in the subtree rooted at the current node that are greater than or equal to the current node\'s <script type=\"math/tex; mode=display\">\\text{val}</script>. <script type=\"math/tex; mode=display\">\\text{count_ge}</script> is initialized to 1 for each node and <script type=\"math/tex; mode=display\">\\text{left}</script>, <script type=\"math/tex; mode=display\">\\text{right}</script> pointers are set to <script type=\"math/tex; mode=display\">\\text{NULL}</script>.</p>\n<p>We define the <script type=\"math/tex; mode=display\">\\text{insert}</script> routine that recursively adds the given <script type=\"math/tex; mode=display\">\\text{val}</script> as an appropriate leaf node based on comparisons with the <script type=\"math/tex; mode=display\">Node.val</script>. Each time, the given <script type=\"math/tex; mode=display\">val</script> is smaller than <script type=\"math/tex; mode=display\">Node.val</script>, we increment the <script type=\"math/tex; mode=display\">\\text{count_ge}</script> and move the <script type=\"math/tex; mode=display\">val</script> to the right subtree. While, if the <script type=\"math/tex; mode=display\">val</script> is equal to the current <script type=\"math/tex; mode=display\">Node</script>, we simply increment the <script type=\"math/tex; mode=display\">\\text{count_ge}</script> and exit. While, we move to the left subtree in case <script type=\"math/tex; mode=display\">(\\text{val}<\\text{Node.val})</script>.</p>\n<p>We also require the <script type=\"math/tex; mode=display\">search</script> routine that gives the count of number of elements greater than or equal to the <script type=\"math/tex; mode=display\">\\text{target}</script>. In the <script type=\"math/tex; mode=display\">\\text{search}</script> routine, if the <script type=\"math/tex; mode=display\">head</script> is NULL, return 0. Otherwise, if <script type=\"math/tex; mode=display\">\\text{target}==\\text{head.val}</script>, we know the count of values greater than or equal to the <script type=\"math/tex; mode=display\">\\text{target}</script>, hence simply return <script type=\"math/tex; mode=display\">\\text{head.count_ge}</script>. In case, <script type=\"math/tex; mode=display\">\\text{target}<\\text{head.val}</script>, the ans is calculated by adding <script type=\"math/tex; mode=display\">\\text{Node.count_ge}</script> and recursively calling the <script type=\"math/tex; mode=display\">\\text{search}</script> routine with <script type=\"math/tex; mode=display\">\\text{head.left}</script>. And if <script type=\"math/tex; mode=display\">\\text{target}>\\text{head.val}</script>, ans is obtained by recursively calling the <script type=\"math/tex; mode=display\">\\text{search}</script> routine with <script type=\"math/tex; mode=display\">\\text{head.right}</script>.</p>\n<p>Now, we can get to our main logic:</p>\n<ul>\n<li>Iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">(size-1)</script> of <script type=\"math/tex; mode=display\">\\text{nums}</script> :<ul>\n<li>Search the existing BST for <script type=\"math/tex; mode=display\">\\text{nums[i]} * 2 + 1</script> and add the result to <script type=\"math/tex; mode=display\">\\text{count}</script>\n</li>\n<li>Insert <script type=\"math/tex; mode=display\">\\text{nums[i]}</script> to the BST, hence updating the <script type=\"math/tex; mode=display\">\\text{count_ge}</script> of the previous nodes</li>\n</ul>\n</li>\n</ul>\n<p>The algorithm can be better understood using the example below:\n!?!../Documents/493_reverse_pairs.json:1000,662!?!</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Node</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">right</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count_ge</span><span class=\"p\">;</span>\n    <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">count_ge</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">count_ge</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">&lt;</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">count_ge</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">==</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">count_ge</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">&lt;</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">count_ge</span> <span class=\"o\">+</span> <span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">reversePairs</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2LL</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>\n<ul>\n<li>The best case complexity for BST is <script type=\"math/tex; mode=display\">O(log(n))</script> for search as well as insertion, wherein, the tree formed is complete binary tree</li>\n<li>Whereas, in case like [1,2,3,4,5,6,7,8,...], insertion as well as search for an element becomes <script type=\"math/tex; mode=display\">O(n)</script> in time, since, the tree is skewed in only one direction, and hence, is no better than the array</li>\n<li>So, in worst case, for searching and insertion over n items, the complexity is <script type=\"math/tex; mode=display\">O(n*n)</script>\n</li>\n</ul>\n</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> extra space for storing the BST in <script type=\"math/tex; mode=display\">\\text{Node}</script> class.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-bit-accepted\">Approach #3 BIT [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>The problem with BST is that the tree can be skewed hence, making it <script type=\"math/tex; mode=display\">O(n^2)</script> in complexity. So, need a data structure that remains balanced. We could either use a Red-black or AVL tree to make a balanced BST, but the implementation would be an overkill for the solution. We can use BIT (Binary Indexed Tree, also called Fenwick Tree) to ensure that the complexity is <script type=\"math/tex; mode=display\">O(nlog(n))</script> with only 12-15 lines of code.</p>\n<p><em>BIT Overview:</em></p>\n<p>Fenwick Tree or BIT provides a way to represent an array of numbers in an array(can be visualized as tree), allowing prefix/suffix sums to be calculated efficiently(<script type=\"math/tex; mode=display\">O(log(n))</script>). BIT allows to update an element in <script type=\"math/tex; mode=display\">O(log(n))</script> time.</p>\n<p>We recommend having a look at BIT from the following links before getting into details:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=CWDQJGaN1gY\">https://www.youtube.com/watch?v=CWDQJGaN1gY</a></li>\n<li><a href=\"https://www.topcoder.com/community/data-science/data-science-tutorials/binary-indexed-trees/\">https://www.topcoder.com/community/data-science/data-science-tutorials/binary-indexed-trees/</a></li>\n</ul>\n<p>So, BIT is very useful to accumulate information from front/back and hence, we can use it in the same way we used BST to get the count of elements that are greater than or equal to <script type=\"math/tex; mode=display\">2 * \\text{nums[i]} + 1</script> in the existing tree and then adding the current element to the tree.</p>\n<p><strong>Algorithm</strong></p>\n<p>First, lets review the BIT <script type=\"math/tex; mode=display\">\\text{query}</script> and <script type=\"math/tex; mode=display\">\\text{update}</script> routines of BIT. According to the convention, <script type=\"math/tex; mode=display\">\\text{query}</script> routine goes from <script type=\"math/tex; mode=display\">\\text{index}</script> to <script type=\"math/tex; mode=display\">0</script>, i.e., <script type=\"math/tex; mode=display\">\\text{BIT[i]}</script> gives the sum for the range <script type=\"math/tex; mode=display\">[0,index]</script>, and <script type=\"math/tex; mode=display\">\\text{update}</script> updates the values from current <script type=\"math/tex; mode=display\">\\text{index}</script> to the end of array. But, since, we require to find the numbers greater than the given index, as and when we update an index, we update all the ancestors of the node in the tree, and for <script type=\"math/tex; mode=display\">\\text{search}</script>, we go from the node to the end.   </p>\n<p>The modified <script type=\"math/tex; mode=display\">\\text{update}</script> algorithm is:</p>\n<div class=\"codehilite\"><pre><span></span>update(BIT,index, val):\n  while(index&lt;0):\n    BIT[index]+=val\n    index-=(index&amp;(-index))\n</pre></div>\n\n\n<p>Herein, we find get the next index using: <script type=\"math/tex; mode=display\">\\text{index-=index&(-index)}</script>, which is essentially subtracting the rightmost 1 from the <script type=\"math/tex; mode=display\">\\text{index}</script> binary representation. We update the previous indices since, if an element is greater than the index</p>\n<p>And the modified <script type=\"math/tex; mode=display\">\\text{query}</script> algorithm is:</p>\n<div class=\"codehilite\"><pre><span></span>query(BIT,index):\n  sum=0\n  while(index&lt;BIT.size):\n    sum+=BIT[index]\n    index+=(index&amp;(-index))\n</pre></div>\n\n\n<p>Herein, we find get the next index using: <script type=\"math/tex; mode=display\">\\text{index+=index&(-index)}</script>. This gives the suffix sum from <script type=\"math/tex; mode=display\">index</script> to the end.</p>\n<p>So, the main idea is to count the number of elements greater than <script type=\"math/tex; mode=display\">2*\\text{nums[i]}</script> in range <script type=\"math/tex; mode=display\">[0,i)</script> as we iterate from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">\\text{size-1}</script>. The steps are as follows:</p>\n<ul>\n<li>Create a copy of <script type=\"math/tex; mode=display\">\\text{nums}</script>, say <script type=\"math/tex; mode=display\">\\text{nums_copy}</script> ans sort <script type=\"math/tex; mode=display\">\\text{nums_copy}</script>. This array is actually used for creating the Binary indexed tree</li>\n<li>Initialize <script type=\"math/tex; mode=display\">\\text{count}=0</script> and <script type=\"math/tex; mode=display\">\\text{BIT}</script> array of size <script type=\"math/tex; mode=display\">\\text{size(nums)} + 1</script> to store the BIT</li>\n<li>Iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">\\text{size(nums)}-1</script> :<ul>\n<li>Search the index of element not less than <script type=\"math/tex; mode=display\">2*\\text{nums[i]}+1</script> in <script type=\"math/tex; mode=display\">\\text{nums_copy}</script> array. <script type=\"math/tex; mode=display\">\\text{query}</script> the obtained index+1 in the <script type=\"math/tex; mode=display\">\\text{BIT}</script>, and add the result to <script type=\"math/tex; mode=display\">\\text{count}</script>\n</li>\n<li>Search for the index of element not less than <script type=\"math/tex; mode=display\">nums[i]</script> in <script type=\"math/tex; mode=display\">\\text{nums_copy}</script>. We need to <script type=\"math/tex; mode=display\">\\text{update}</script> the BIT for this index by 1. This essentially means that 1 is added to this index(or number of elements greater than this index is incremented). The effect of adding <script type=\"math/tex; mode=display\">1</script> to the index is passed to the ancestors as shown in <script type=\"math/tex; mode=display\">\\text{update}</script> algorithm</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">BIT</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">BIT</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n        <span class=\"n\">index</span> <span class=\"o\">-=</span> <span class=\"n\">index</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">index</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">BIT</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"n\">BIT</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">BIT</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n        <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"n\">index</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">index</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">reversePairs</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">nums_copy</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">);</span>\n\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">BITS</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">BITS</span><span class=\"p\">,</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"mi\">2LL</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">BITS</span><span class=\"p\">,</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">nums_copy</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(nlog(n))</script>\n<ul>\n<li>In <script type=\"math/tex; mode=display\">\\text{query}</script> and <script type=\"math/tex; mode=display\">\\text{update}</script> operations, we see that the loop iterates at most the number of bits in <script type=\"math/tex; mode=display\">\\text{index}</script> which can be at most <script type=\"math/tex; mode=display\">n</script>. Hence, the complexity of both the operations is <script type=\"math/tex; mode=display\">O(log(n))</script>(Number of bits in <script type=\"math/tex; mode=display\">n</script> is <script type=\"math/tex; mode=display\">log(n)</script>)</li>\n<li>The in-built operation <script type=\"math/tex; mode=display\">\\text{lower_bound}</script> is binary search hence <script type=\"math/tex; mode=display\">O(log(n))</script>\n</li>\n<li>We perform the operations for <script type=\"math/tex; mode=display\">n</script> elements, hence the total complexity is <script type=\"math/tex; mode=display\">O(nlog(n))</script>\n</li>\n</ul>\n</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Additional space for <script type=\"math/tex; mode=display\">\\text{BITS}</script> array</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-modified-merge-sort-accepted\">Approach #4 Modified Merge Sort [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>In BIT and BST, we iterate over the array, dividing the array into 3 sections: already visited and hence added to the tree, current node and section to be visited. Another approach could be divide the problem into smaller subproblems, solving them and combining these problems to get the final result - Divide and conquer. We see that the problem has a great resemblance to the merge sort routine. The question is to find the inversions such that <script type=\"math/tex; mode=display\">\\text{nums[i]}>2 * \\text{nums[j]}</script> and <script type=\"math/tex; mode=display\">i<j</script>. So, we can easily modify the merge sort to count the inversions as required.</p>\n<p><em>Mergesort</em></p>\n<p>Mergesort is a divide-and-conquer based sorting technique that operates in <script type=\"math/tex; mode=display\">O(nlog(n))</script> time. The basic idea to divide the array into several sub-arrays until each sub-array is single element long and merging these sublists recursively that results in the final sorted array.</p>\n<p><strong>Algorithm</strong></p>\n<p>We define <script type=\"math/tex; mode=display\">\\text{mergesort_and_count}</script> routine that takes parameters an array say <script type=\"math/tex; mode=display\">A</script> and <script type=\"math/tex; mode=display\">\\text{start}</script> and <script type=\"math/tex; mode=display\">\\text{end}</script> indices:</p>\n<ul>\n<li>If <script type=\"math/tex; mode=display\">\\text{start}</script>&gt;=<script type=\"math/tex; mode=display\">\\text{end}</script> this implies that elements can no longer be broken further and hence we return 0</li>\n<li>Otherwise, set <script type=\"math/tex; mode=display\">\\text{mid}=(\\text{start} + \\text{end})/2</script>\n</li>\n<li>Store <script type=\"math/tex; mode=display\">count</script> by recursively calling <script type=\"math/tex; mode=display\">\\text{mergesort_and_count}</script> on range <script type=\"math/tex; mode=display\">\\text{[start,mid]}</script> and <script type=\"math/tex; mode=display\">\\text{[mid+1,end]}</script> and adding the results. This is the divide step on our routine, breaking it into the 2 ranges, and finding the results for each range separately</li>\n<li>Now, we that we have separately calculated the results for ranges <script type=\"math/tex; mode=display\">\\text{[start,mid]}</script> and <script type=\"math/tex; mode=display\">\\text{[mid+1,end]}</script>, but we still have to count the elements in <script type=\"math/tex; mode=display\">\\text{[start,mid]}</script> that are greater than 2 * elements in <script type=\"math/tex; mode=display\">\\text{[mid+1,end]}</script>. Count all such elements and add the result to <script type=\"math/tex; mode=display\">\\text{count}</script>\n</li>\n<li>Finally, <script type=\"math/tex; mode=display\">\\text{merge}</script> the array from <script type=\"math/tex; mode=display\">\\text{start}</script> to <script type=\"math/tex; mode=display\">\\text{end}</script>\n<ul>\n<li>Make 2 array : <script type=\"math/tex; mode=display\">L</script> from elements in range <script type=\"math/tex; mode=display\">\\text{[start,mid]}</script> and <script type=\"math/tex; mode=display\">R</script> from elements in range <script type=\"math/tex; mode=display\">\\text{R[mid+1,end]}</script>\n</li>\n<li>Keep pointers <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> to <script type=\"math/tex; mode=display\">L</script> and <script type=\"math/tex; mode=display\">R</script> respectively both initialized to start to the arrays</li>\n<li>Iterate over <script type=\"math/tex; mode=display\">k</script> from <script type=\"math/tex; mode=display\">\\text{start}</script> to <script type=\"math/tex; mode=display\">\\text{end}</script> and set <script type=\"math/tex; mode=display\">\\text{A[k]}</script> to the smaller of <script type=\"math/tex; mode=display\">\\text{L[i]}</script> or <script type=\"math/tex; mode=display\">\\text{R[j]}</script> and increment the respective index</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">n2</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">n2</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]))</span>\n            <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">];</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">mergesort_and_count</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">mergesort_and_count</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">mergesort_and_count</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2LL</span><span class=\"p\">)</span>\n                <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">reversePairs</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">mergesort_and_count</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(nlog(n))</script>\n<ul>\n<li>In each step we divide the array into 2 sub-arrays, and hence, the maximum times we need to divide is equal to <script type=\"math/tex; mode=display\">O(log(n))</script>\n</li>\n<li>Additional <script type=\"math/tex; mode=display\">O(n)</script> work needs to be done to count the inversions and to merge the 2 sub-arrays after sorting. Hence total time complexity is <script type=\"math/tex; mode=display\">O(n * log(n))</script>\n</li>\n</ul>\n</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Additional space for storing <script type=\"math/tex; mode=display\">L</script> and <script type=\"math/tex; mode=display\">R</script> arrays</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/abhinavbansal0\">@abhinavbansal0</a>.</p>\n<p>Shoutout to <a href=\"https://discuss.leetcode.com/user/fun4leetcode\">@FUN4LEETCODE</a> for the brilliant post!</p>',NULL,1,'none','none','none'),(88,'Poor Pigs',1,'',0,0,'<p></p><p>\nThere are 1000 buckets, one and only one of them contains poison, the rest are filled with water. They all look the same. If a pig drinks that poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket contains the poison within one hour. \n</p><p>\nAnswer this question, and write an algorithm for the follow-up general case.\n</p><p>\n<b>\nFollow-up:\n</b>\n</p><p>\nIf there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the \"poison\" bucket within p minutes? There is exact one bucket with poison.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        """\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int poorPigs(int buckets, int minutesToDie, int minutesToTest) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int PoorPigs(int buckets, int minutesToDie, int minutesToTest) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} buckets\n * @param {number} minutesToDie\n * @param {number} minutesToTest\n * @return {number}\n */\nvar poorPigs = function(buckets, minutesToDie, minutesToTest) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} buckets\n# @param {Integer} minutes_to_die\n# @param {Integer} minutes_to_test\n# @return {Integer}\ndef poor_pigs(buckets, minutes_to_die, minutes_to_test)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func poorPigs(_ buckets: Int, _ minutesToDie: Int, _ minutesToTest: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func poorPigs(buckets int, minutesToDie int, minutesToTest int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def poorPigs(buckets: Int, minutesToDie: Int, minutesToTest: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(89,'Maximum Product of Word Lengths',2,'Bit Manipulation',0,0,'<p></p><p>\n    Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters.\n    You may assume that each word will contain only lower case letters.\n    If no such two words exist, return 0.\n</p><p>\n<b>Example 1:</b><br/>\n</p><p>\n    Given <code>[\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"]</code><br/>\n    Return <code>16</code><br/>\n    The two words can be <code>\"abcw\", \"xtfn\"</code>.\n</p><p>\n<b>Example 2:</b><br/>\n</p><p>\n    Given <code>[\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]</code><br/>\n    Return <code>4</code><br/>\n    The two words can be <code>\"ab\", \"cd\"</code>.\n</p><p>\n<b>Example 3:</b><br/>\n</p><p>\n    Given <code>[\"a\", \"aa\", \"aaa\", \"aaaa\"]</code><br/>\n    Return <code>0</code><br/>\n    No such pair of words.    \n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProduct(vector<string>& words) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProduct(String[] words) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProduct(self, words):\r\n        """\r\n        :type words: List[str]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProduct(char** words, int wordsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProduct(string[] words) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} words\r\n * @return {number}\r\n */\r\nvar maxProduct = function(words) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\r\n# @return {Integer}\r\ndef max_product(words)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxProduct(_ words: [String]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProduct(words []string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProduct(words: Array[String]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(90,'Pow(x, n)',2,'Binary Search,Math',0,0,'<p></p><p>Implement pow(<i>x</i>, <i>n</i>).\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    double myPow(double x, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def myPow(self, x, n):\r\n        """\r\n        :type x: float\r\n        :type n: int\r\n        :rtype: float\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"double myPow(double x, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public double MyPow(double x, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} x\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar myPow = function(x, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Float} x\r\n# @param {Integer} n\r\n# @return {Float}\r\ndef my_pow(x, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func myPow(_ x: Double, _ n: Int) -> Double {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func myPow(x float64, n int) float64 {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(91,'Print Binary Tree',2,'Tree',0,0,'<p></p><p>Print a binary tree in an m*n 2D string array following these rules: </p><ol>\n<li>The row number <code>m</code> should be equal to the height of the given binary tree.</li>\n<li>The column number <code>n</code> should always be an odd number.</li>\n<li>The root node\'s value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (<b>left-bottom part and right-bottom part</b>). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don\'t need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don\'t need to leave space for both of them. </li>\n<li>Each unused space should contain an empty string <code>\"\"</code>.</li>\n<li>Print the subtrees following the same rules.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\n     1\n    /\n   2\n<b>Output:</b>\n[[\"\", \"1\", \"\"],\n [\"2\", \"\", \"\"]]\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>\n     1\n    / \\\n   2   3\n    \\\n     4\n<b>Output:</b>\n[[\"\", \"\", \"\", \"1\", \"\", \"\", \"\"],\n [\"\", \"2\", \"\", \"\", \"\", \"3\", \"\"],\n [\"\", \"\", \"4\", \"\", \"\", \"\", \"\"]]\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b>\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \n<b>Output:</b>\n\n[[\"\",  \"\",  \"\", \"\",  \"\", \"\", \"\", \"1\", \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\n [\"\",  \"\",  \"\", \"2\", \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"5\", \"\", \"\", \"\"]\n [\"\",  \"3\", \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\n [\"4\", \"\",  \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]]\n</pre><p><b>Note:</b>\nThe height of binary tree is in the range of [1, 10].\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<string>> printTree(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<String>> printTree(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def printTree(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def printTree(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** printTree(struct TreeNode* root, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<IList<string>> PrintTree(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {string[][]}\r\n */\r\nvar printTree = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {String[][]}\r\ndef print_tree(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func printTree(_ root: TreeNode?) -> [[String]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc printTree(root *TreeNode) [][]string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def printTree(root: TreeNode): List[List[String]] = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-recursive-solutionaccepted\">Approach #1 Recursive Solution[Accepted]</a></li>\n<li><a href=\"#approach-2-using-queuebfsaccepted\">Approach #2 Using queue(BFS)[Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-recursive-solutionaccepted\">Approach #1 Recursive Solution[Accepted]</h4>\n<p>We start by initializing a <script type=\"math/tex; mode=display\">res</script> array with the dimensions being <script type=\"math/tex; mode=display\">height</script>x<script type=\"math/tex; mode=display\">2^{height}-1</script>. Here, <script type=\"math/tex; mode=display\">height</script> refers to the number of levels in the given tree. In order to fill this <script type=\"math/tex; mode=display\">res</script> array with the required elements, initially, we fill the complete array with <code>\"\"</code> .  After this we make use of a recursive function <code>fill(res, root, i, l, r)</code> which fills the <script type=\"math/tex; mode=display\">res</script> array such that the current element has to be filled in <script type=\"math/tex; mode=display\">i^{th}</script> row, and the column being the middle of the indices <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script>, where <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> refer to the left and the right boundaries of the columns in which the current element can be filled.</p>\n<p>In every recursive call, we do as follows:</p>\n<ol>\n<li>\n<p>If we\'ve reached the end of the tree, i.e. if root==null, return.</p>\n</li>\n<li>\n<p>Determine the column in which the current element(<script type=\"math/tex; mode=display\">root</script>) needs to be filled, which is the middle of <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script>, given by say, <script type=\"math/tex; mode=display\">j</script>. The row number is same as <script type=\"math/tex; mode=display\">i</script>. Put the current element at <script type=\"math/tex; mode=display\">res[i][j]</script>.</p>\n</li>\n<li>\n<p>Make the recursive call for the left child of the <script type=\"math/tex; mode=display\">root</script> using <code>fill(res, root.left, i + 1, l, (l + r) / 2)</code>.</p>\n</li>\n<li>\n<p>Make the recursive call for the right child of the <script type=\"math/tex; mode=display\">root</script> using <code>fill(res, root.right, i + 1, (l + r + 1) / 2, r)</code>.</p>\n</li>\n</ol>\n<p>Note, that in the last two recursive calls, we update the row number(level of the tree). This ensures that the child nodes fit into the correct row. We also update the column boundaries appropriately based on the <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> values.</p>\n<p>Further, to determine the <script type=\"math/tex; mode=display\">height</script> also, we make use of recursive funtion <code>getHeight(root)</code>, which returns the height of the tree starting from the <script type=\"math/tex; mode=display\">root</script> node. We traverse into all the branches possible in the tree recursively and find the depth of the longest branch.</p>\n<p>At the end, we convert the <script type=\"math/tex; mode=display\">res</script> array into the required list format, before returning the results.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">printTree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[][]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[</span><span class=\"n\">height</span><span class=\"o\">][(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">:</span><span class=\"n\">res</span><span class=\"o\">)</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">:</span><span class=\"n\">res</span><span class=\"o\">)</span>\n            <span class=\"n\">ans</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">fill</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[][]</span> <span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n        <span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n        <span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getHeight</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">),</span> <span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(h*2^h)</script>. We need to fill the <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">h</script>x<script type=\"math/tex; mode=display\">2^h - 1</script>. Here, <script type=\"math/tex; mode=display\">h</script> refers to the height of the given tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(h*2^h)</script>.  <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">h</script>x<script type=\"math/tex; mode=display\">2^h - 1</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-queuebfsaccepted\">Approach #2 Using queue(BFS)[Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can also solve the problem by making use of Breadth First Search\'s idea. For this, we make use of a class <script type=\"math/tex; mode=display\">Params</script> which stores the parameters of a <script type=\"math/tex; mode=display\">node</script> of  the tree, including its value, its level in the tree(<script type=\"math/tex; mode=display\">i</script>), and the left(<script type=\"math/tex; mode=display\">l</script>) and right(<script type=\"math/tex; mode=display\">r</script>) boundaries of the columns in which this element can be filled in the result to be returned.</p>\n<p>We start by initializing a <script type=\"math/tex; mode=display\">res</script> array as in the previous approach. After this, we add the parametrized <script type=\"math/tex; mode=display\">root</script> of the tree into a <script type=\"math/tex; mode=display\">queue</script>. After this, we do the following at every step.</p>\n<ol>\n<li>\n<p>Remove an element, $$p$,  from the front of the <script type=\"math/tex; mode=display\">queue</script>. </p>\n</li>\n<li>\n<p>Add this element at its correct position in the <script type=\"math/tex; mode=display\">res</script> array given by <script type=\"math/tex; mode=display\">res[p.i][(p.l + p.r) / 2]</script>. Here, the values <script type=\"math/tex; mode=display\">i</script>, <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> refer to the column/level number, and the left and right boundaries permissible for putting the current node into <script type=\"math/tex; mode=display\">res</script>. These are obtained from the node\'s parameters, which have been associated with it before putting it into the <script type=\"math/tex; mode=display\">queue</script>.</p>\n</li>\n<li>\n<p>If the left child of <script type=\"math/tex; mode=display\">p</script> exists, put it at the back of the <script type=\"math/tex; mode=display\">queue</script>, in a parametized form, by appropriately updating the level as the next level and the boundaries permissible as well.</p>\n</li>\n<li>\n<p>If the right child of <script type=\"math/tex; mode=display\">p</script> exists, put it at the back of the <script type=\"math/tex; mode=display\">queue</script>, in a parametized form, by appropriately updating the level as the next level and the boundaries permissible as well.</p>\n</li>\n<li>\n<p>Continue steps 1. to 4. till the <script type=\"math/tex; mode=display\">queue</script> becomes empty. </p>\n</li>\n</ol>\n<p>At the end, we again convert the <script type=\"math/tex; mode=display\">res</script> array into the required list format, before returning the results.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span>\n<span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">class</span> <span class=\"nc\">Params</span> <span class=\"o\">{</span>\n        <span class=\"n\">Params</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ii</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ll</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">rr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ii</span><span class=\"o\">;</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">ll</span><span class=\"o\">;</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rr</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">printTree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">getHeight</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[][]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[</span><span class=\"n\">height</span><span class=\"o\">][(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"o\">)</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">fill</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"o\">)</span>\n            <span class=\"n\">ans</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">fill</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[][]</span> <span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">Params</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">();</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Params</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">));</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">Params</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n            <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">][(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">l</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Params</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">l</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">));</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Params</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">l</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">r</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getHeight</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">();</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">height</span><span class=\"o\">++;</span>\n            <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">();</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">TreeNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">height</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(h*2^h)</script>. We need to fill the <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">h</script>x<script type=\"math/tex; mode=display\">2^h - 1</script>. Here, <script type=\"math/tex; mode=display\">h</script> refers to the height of the given tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(h*2^h)</script>.  <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">h</script>x<script type=\"math/tex; mode=display\">2^h - 1</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(92,'Sort Colors',2,'Array,Two Pointers,Sort',0,0,'<p></p><p>\nGiven an array with <i>n</i> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.\n</p><p>\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n</p><p>\n<b>Note:</b><br/>\nYou are not suppose to use the library\'s sort function for this problem.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show follow up.</a></p><div class=\"spoilers\">\n<p><b>Follow up:</b><br/>\nA rather straight forward solution is a two-pass algorithm using counting sort.<br/>\nFirst, iterate the array counting number of 0\'s, 1\'s, and 2\'s, then overwrite array with total number of 0\'s, then 1\'s and followed by 2\'s.</p>\n<p>Could you come up with an one-pass algorithm using only constant space?<br/>\n</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void sortColors(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void sortColors(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def sortColors(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void sortColors(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void SortColors(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */\r\nvar sortColors = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Void} Do not return anything, modify nums in-place instead.\r\ndef sort_colors(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func sortColors(_ nums: inout [Int]) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func sortColors(nums []int)  {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def sortColors(nums: Array[Int]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(93,'Contiguous Array',2,'Hash Table',0,0,'<p></p><p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. </p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [0,1]\n<b>Output:</b> 2\n<b>Explanation:</b> [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [0,1,0]\n<b>Output:</b> 2\n<b>Explanation:</b> [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n</pre><p><b>Note:</b>\nThe length of the given binary array will not exceed 50,000.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMaxLength(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findMaxLength(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMaxLength(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int FindMaxLength(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_length(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findMaxLength(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMaxLength(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMaxLength(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-extra-array-accepted\">Approach #2 Using Extra Array [Accepted]</a></li>\n<li><a href=\"#approach-3-using-hashmap-accepted\">Approach #3 Using HashMap [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The brute force approach is really simple. We consider every possible subarray within the given array and count the number of zeros and ones in each subarray. Then, we find out the maximum size subarray with equal no. of zeros and ones out of them.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">start</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">zeroes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span> <span class=\"n\">end</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">end</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">end</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">zeroes</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">ones</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">zeroes</span> <span class=\"o\">==</span> <span class=\"n\">ones</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxlen</span><span class=\"o\">,</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We consider every possible subarray by traversing over the complete array for every start point possible.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Only two variables <script type=\"math/tex; mode=display\">zeroes</script> and <script type=\"math/tex; mode=display\">ones</script> are required.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-extra-array-accepted\">Approach #2 Using Extra Array [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we make use of a <script type=\"math/tex; mode=display\">count</script> variable, which is used to store the relative number of ones and zeros encountered so far while traversing the array. The <script type=\"math/tex; mode=display\">count</script> variable is incremented by one for every <script type=\"math/tex; mode=display\">\\text{1}</script> encountered and the same is decremented by one for every <script type=\"math/tex; mode=display\">\\text{0}</script> encountered.</p>\n<p>We start traversing the array from the beginning. If at any moment, the <script type=\"math/tex; mode=display\">count</script> becomes zero, it implies that we\'ve encountered equal number of zeros and ones from the beginning till the current index of the array(<script type=\"math/tex; mode=display\">i</script>). Not only this, another point to be noted is that  if we encounter the same <script type=\"math/tex; mode=display\">count</script> twice while traversing the array, it means that the number of zeros and ones are equal between the indices corresponding to the equal <script type=\"math/tex; mode=display\">count</script> values. The following figure illustrates the observation for the sequence <code>[0 0 1 0 0 0 1 1]</code>:</p>\n<p><img alt=\"Contiguous_Array\" src=\"../Figures/535_Contiguous_Array.PNG\" /></p>\n<p>In the above figure, the subarrays between (A,B), (B,C) and (A,C) (lying between indices corresponing to <script type=\"math/tex; mode=display\">count = 2</script>) have equal number of zeros and ones.</p>\n<p>Another point to be noted is that the largest subarray is the one between the points (A, C). Thus, if we keep a track of the indices corresponding to the same <script type=\"math/tex; mode=display\">count</script> values that lie farthest apart, we can determine the size of the largest subarray with equal no. of zeros and ones easily.</p>\n<p>Now, the <script type=\"math/tex; mode=display\">count</script> values can range between <script type=\"math/tex; mode=display\">\\text{-n}</script> to <script type=\"math/tex; mode=display\">\\text{+n}</script>, with the extreme points corresponding to the complete array being filled with all 0\'s and all 1\'s respectively. Thus, we make use of an array <script type=\"math/tex; mode=display\">arr</script>(of size <script type=\"math/tex; mode=display\">\\text{2n+1}</script>to keep a track of the various <script type=\"math/tex; mode=display\">count</script>\'s encountered so far. We make an entry containing the current element\'s index (<script type=\"math/tex; mode=display\">i</script>) in the <script type=\"math/tex; mode=display\">arr</script> for a new <script type=\"math/tex; mode=display\">count</script> encountered everytime. Whenever, we come across the same <script type=\"math/tex; mode=display\">count</script> value later while traversing the array, we determine the length of the subarray lying between the indices corresponding to the same <script type=\"math/tex; mode=display\">count</script> values.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxlen</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The complete array is traversed only once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">arr</script> array of size <script type=\"math/tex; mode=display\">\\text{2n+1}</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-hashmap-accepted\">Approach #3 Using HashMap [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach relies on the same premise as the previous approach. But, we need not use an array of size <script type=\"math/tex; mode=display\">\\text{2n+1}</script>, since it isn\'t necessary that we\'ll encounter all the <script type=\"math/tex; mode=display\">count</script> values possible. Thus, we make use of a HashMap <script type=\"math/tex; mode=display\">map</script> to store the entries in the form of <script type=\"math/tex; mode=display\">(index, count)</script>. We make an entry for a <script type=\"math/tex; mode=display\">count</script> in the <script type=\"math/tex; mode=display\">map</script> whenever the <script type=\"math/tex; mode=display\">count</script> is encountered first, and later on use the correspoding index to find the length of the largest subarray with equal no. of zeros and ones when the same <script type=\"math/tex; mode=display\">count</script> is encountered again.</p>\n<p>The following animation depicts the process:\n<!--<img alt=\"Contiguous_Array\" src=\"../Figures/525_Contiguous_Array.gif\" />-->\n!?!../Documents/525_Contiguous_Array.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxlen</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The entire array is traversed only once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Maximum size of the HashMap <script type=\"math/tex; mode=display\">map</script> will be <script type=\"math/tex; mode=display\">\\text{n}</script>, if all the elements are either 1 or 0.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(94,'Peeking Iterator',2,'Design',0,0,'<p></p><p>Given an Iterator class interface with methods: <code>next()</code> and <code>hasNext()</code>, design and implement a PeekingIterator that support the <code>peek()</code> operation -- it essentially peek() at the element that will be returned by the next call to next().</p><hr/><p>Here is an example. Assume that the iterator is initialized to the beginning of the list: <code>[1, 2, 3]</code>.</p><p>Call <code>next()</code> gets you 1, the first element in the list.</p><p>Now you call <code>peek()</code> and it returns 2, the next element. Calling <code>next()</code> after that <i><b>still</b></i> return 2.</p><p>You call <code>next()</code> the final time and it returns 3, the last element. Calling <code>hasNext()</code> after that should return false.</p><p>\n<b>Follow up</b>: How would you extend your design to be generic and work with all types, not just integer?</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/porker2008\">@porker2008</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"// Below is the interface for Iterator, which is already defined for you.\r\n// **DO NOT** modify the interface for Iterator.\r\nclass Iterator {\r\n    struct Data;\r\n\tData* data;\r\npublic:\r\n\tIterator(const vector<int>& nums);\r\n\tIterator(const Iterator& iter);\r\n\tvirtual ~Iterator();\r\n\t// Returns the next element in the iteration.\r\n\tint next();\r\n\t// Returns true if the iteration has more elements.\r\n\tbool hasNext() const;\r\n};\r\n\r\n\r\nclass PeekingIterator : public Iterator {\r\npublic:\r\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\r\n\t    // Initialize any member here.\r\n\t    // **DO NOT** save a copy of nums and manipulate it directly.\r\n\t    // You should only use the Iterator interface methods.\r\n\t    \r\n\t}\r\n\r\n    // Returns the next element in the iteration without advancing the iterator.\r\n\tint peek() {\r\n        \r\n\t}\r\n\r\n\t// hasNext() and next() should behave the same as in the Iterator interface.\r\n\t// Override them if needed.\r\n\tint next() {\r\n\t    \r\n\t}\r\n\r\n\tbool hasNext() const {\r\n\t    \r\n\t}\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"// Java Iterator interface reference:\r\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\r\nclass PeekingIterator implements Iterator<Integer> {\r\n\r\n\tpublic PeekingIterator(Iterator<Integer> iterator) {\r\n\t    // initialize any member here.\r\n\t    \r\n\t}\r\n\r\n    // Returns the next element in the iteration without advancing the iterator.\r\n\tpublic Integer peek() {\r\n        \r\n\t}\r\n\r\n\t// hasNext() and next() should behave the same as in the Iterator interface.\r\n\t// Override them if needed.\r\n\t@Override\r\n\tpublic Integer next() {\r\n\t    \r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean hasNext() {\r\n\t    \r\n\t}\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Below is the interface for Iterator, which is already defined for you.\r\n#\r\n# class Iterator(object):\r\n#     def __init__(self, nums):\r\n#         """\r\n#         Initializes an iterator object to the beginning of a list.\r\n#         :type nums: List[int]\r\n#         """\r\n#\r\n#     def hasNext(self):\r\n#         """\r\n#         Returns true if the iteration has more elements.\r\n#         :rtype: bool\r\n#         """\r\n#\r\n#     def next(self):\r\n#         """\r\n#         Returns the next element in the iteration.\r\n#         :rtype: int\r\n#         """\r\n\r\nclass PeekingIterator(object):\r\n    def __init__(self, iterator):\r\n        """\r\n        Initialize your data structure here.\r\n        :type iterator: Iterator\r\n        """\r\n        \r\n\r\n    def peek(self):\r\n        """\r\n        Returns the next element in the iteration without advancing the iterator.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def next(self):\r\n        """\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def hasNext(self):\r\n        """\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n# Your PeekingIterator object will be instantiated and called as such:\r\n# iter = PeekingIterator(Iterator(nums))\r\n# while iter.hasNext():\r\n#     val = iter.peek()   # Get the next element but not advance the iterator.\r\n#     iter.next()         # Should return the same value as [val].\" }]',NULL,NULL,1,'none','none','none'),(95,'Not Boring Movies',1,'',0,0,'<p>X city opened a new cinema, many people would like to go to this cinema.\nThe cinema also gives out a poster indicating the movies’ ratings and descriptions. </p><p></p>\n \nPlease write a SQL query to output movies with an odd numbered ID and a description that is not \'boring\'. Order the result by rating.\n<p></p><p>\nFor example, table <code>cinema</code>:\n</p><pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n</pre>\nFor the example above, the output should be:\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-mod-function-accepted\">Approach: Using MOD() function [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-mod-function-accepted\">Approach: Using <code>MOD()</code> function [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can use the <code>mod(id,2)=1</code> to determine the odd id, and then add a <code>description != \'boring\'</code> should address this problem.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"o\">*</span>\n<span class=\"k\">from</span> <span class=\"n\">cinema</span>\n<span class=\"k\">where</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">description</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;boring&#39;</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">rating</span> <span class=\"k\">DESC</span>\n<span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(96,'Second Highest Salary',1,'',0,0,'<p></p><p>\nWrite a SQL query to get the second highest salary from the <code>Employee</code> table.\n</p><pre>\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre><p>For example, given the above Employee table, the query should return <code>200</code> as the second highest salary. If there is no second highest salary, then the query should return <code>null</code>.</p><pre>\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-sub-query-and-limit-clause-accepted\">Approach: Using sub-query and LIMIT clause [Accepted]</a></li>\n<li><a href=\"#approach-using-ifnull-and-limit-clause-accepted\">Approach: Using IFNULL and LIMIT clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-sub-query-and-limit-clause-accepted\">Approach: Using sub-query and <code>LIMIT</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Sort the distinct salary in descend order and then utilize the <a href=\"https://dev.mysql.com/doc/refman/5.7/en/select.html\"><code>LIMIT</code></a> clause to get the second highest salary.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span>\n    <span class=\"n\">Salary</span> <span class=\"k\">AS</span> <span class=\"n\">SecondHighestSalary</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">Employee</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">Salary</span> <span class=\"k\">DESC</span>\n<span class=\"k\">LIMIT</span> <span class=\"mi\">1</span> <span class=\"k\">OFFSET</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>However, this solution will be judged as \'Wrong Answer\' if there is no such second highest salary since there might be only one record in this table. To overcome this issue, we can take this as a temp table.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span>\n            <span class=\"n\">Salary</span>\n        <span class=\"k\">FROM</span>\n            <span class=\"n\">Employee</span>\n        <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">Salary</span> <span class=\"k\">DESC</span>\n        <span class=\"k\">LIMIT</span> <span class=\"mi\">1</span> <span class=\"k\">OFFSET</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">SecondHighestSalary</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<h4 id=\"approach-using-ifnull-and-limit-clause-accepted\">Approach: Using <code>IFNULL</code> and <code>LIMIT</code> clause [Accepted]</h4>\n<p>Another way to solve the \'NULL\' problem is to use <code>IFNULL</code> funtion as below.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">IFNULL</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span> <span class=\"n\">Salary</span>\n       <span class=\"k\">FROM</span> <span class=\"n\">Employee</span>\n       <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">Salary</span> <span class=\"k\">DESC</span>\n        <span class=\"k\">LIMIT</span> <span class=\"mi\">1</span> <span class=\"k\">OFFSET</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"k\">NULL</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">SecondHighestSalary</span>\n</pre></div>',NULL,1,'none','none','none'),(97,'Course Schedule',2,'Depth-first Search,Breadth-first Search,Graph,Topological Sort',0,0,'<p></p><p>\nThere are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n - 1</code>.</p><p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p><p>\nGiven the total number of courses and a list of prerequisite <b>pairs</b>, is it possible for you to finish all courses?\n</p><p>For example:</p><pre>2, [[1,0]]</pre><p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</p><pre>2, [[1,0],[0,1]]</pre><p>There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</p><p><b>Note:</b><br/>\n</p><ol>\n<li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ol><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more hints.</a></p><div class=\"spoilers\"><b>Hints:</b>\n<ol>\n<li>This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.</li>\n<li><a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.</li>\n<li>Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>.</li>\n</ol>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canFinish(self, numCourses, prerequisites):\r\n        """\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canFinish(int numCourses, int** prerequisites, int prerequisitesRowSize, int prerequisitesColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanFinish(int numCourses, int[,] prerequisites) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} numCourses\r\n * @param {number[][]} prerequisites\r\n * @return {boolean}\r\n */\r\nvar canFinish = function(numCourses, prerequisites) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num_courses\r\n# @param {Integer[][]} prerequisites\r\n# @return {Boolean}\r\ndef can_finish(num_courses, prerequisites)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canFinish(numCourses int, prerequisites [][]int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(98,'Circular Array Loop',2,'',0,0,'<p></p><p>\nYou are given an array of positive and negative integers. If a number n at an index is positive, then move forward n steps. Conversely, if it\'s negative (-n), move backward n steps. Assume the first element of the array is forward next to the last element, and the last element is backward next to the first element. Determine if there is a loop in this array. A loop starts and ends at a particular index with more than 1 element along the loop. The loop must be \"forward\" or \"backward\'.\n</p><p><b>Example 1:</b>\n\nGiven the array [2, -1, 1, 2, 2], there is a loop, from index 0 -&gt; 2 -&gt; 3 -&gt; 0.\n</p><p><b>Example 2:</b>\n\nGiven the array [-1, 2], there is no loop.\n</p><p><b>Note:</b>\n\nThe given array is guaranteed to contain no element \"0\".\n</p><p>\nCan you do it in <b>O(n)</b> time complexity and <b>O(1)</b> space complexity?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    bool circularArrayLoop(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean circularArrayLoop(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def circularArrayLoop(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool circularArrayLoop(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public bool CircularArrayLoop(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar circularArrayLoop = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {Boolean}\ndef circular_array_loop(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func circularArrayLoop(_ nums: [Int]) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func circularArrayLoop(nums []int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def circularArrayLoop(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(99,'Remove Duplicate Letters',3,'Stack,Greedy',0,0,'<p></p><p>\nGiven a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n</p><p>\n<b>Example:</b><br/>\n</p><p>\nGiven <code>\"bcabc\"</code><br/>\nReturn <code>\"abc\"</code>\n</p><p>\nGiven <code>\"cbacdcbc\"</code><br/>\nReturn <code>\"acdb\"</code>\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string removeDuplicateLetters(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String removeDuplicateLetters(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def removeDuplicateLetters(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* removeDuplicateLetters(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string RemoveDuplicateLetters(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar removeDuplicateLetters = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef remove_duplicate_letters(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func removeDuplicateLetters(_ s: String) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeDuplicateLetters(s string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeDuplicateLetters(s: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(100,'Maximum Binary Tree',2,'Tree',0,0,'<p></p><p>\nGiven an integer array with no duplicates. A maximum tree building on this array is defined as follow:\n</p><ol>\n<li>The root is the maximum number in the array. </li>\n<li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li>\n<li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.</li>\n</ol><p>\nConstruct the maximum tree by the given array and output the root node of this tree.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [3,2,1,6,0,5]\n<b>Output:</b> return the tree root node representing the following tree:\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The size of the given array will be in the range [1,1000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def constructMaximumBinaryTree(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: TreeNode\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def constructMaximumBinaryTree(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: TreeNode\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* constructMaximumBinaryTree(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConstructMaximumBinaryTree(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar constructMaximumBinaryTree = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer[]} nums\n# @return {TreeNode}\ndef construct_maximum_binary_tree(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func constructMaximumBinaryTree(_ nums: [Int]) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def constructMaximumBinaryTree(nums: Array[Int]): TreeNode = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-recursive-solutionaccepted\">Approach #1 Recursive Solution[Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-recursive-solutionaccepted\">Approach #1 Recursive Solution[Accepted]</h4>\n<p>The current solution is very simple. We make use of a function <code>construct(nums, l, r)</code>, which returns the maximum binary tree consisting of numbers within the indices <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> in the given <script type=\"math/tex; mode=display\">nums</script> array(excluding the <script type=\"math/tex; mode=display\">r^{th}</script> element).</p>\n<p>The algorithm consists of the following steps:</p>\n<ol>\n<li>\n<p>Start with the function call <code>construct(nums, 0, n)</code>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in the given <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Find the index, <script type=\"math/tex; mode=display\">max_i</script>, of the largest element in the current range of indices <script type=\"math/tex; mode=display\">(l:r-1)</script>. Make this largest element, $<script type=\"math/tex; mode=display\">nums[max_i]</script> as the local root node.</p>\n</li>\n<li>\n<p>Determine the left child using <code>construct(nums, l, max_i)</code>. Doing this recursively finds the largest element in the subarray left to the current largest element.</p>\n</li>\n<li>\n<p>Similarly, determine the right child using <code>construct(nums, max_i + 1, r)</code>.</p>\n</li>\n<li>\n<p>Return the root node to the calling function.</p>\n</li>\n</ol>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">constructMaximumBinaryTree</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">construct</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">construct</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">]);</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">construct</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">max_i</span><span class=\"o\">);</span>\n        <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">construct</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">max_i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">max</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_i</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. The function <code>construct</code> is called <script type=\"math/tex; mode=display\">n</script> times. At each level of the recursive tree, we traverse over all the <script type=\"math/tex; mode=display\">n</script> elements to find the maximum element.  In the average case, there will be a <script type=\"math/tex; mode=display\">log(n)</script> levels leading to a complexity of <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. In the worst case, the depth of the recursive tree can grow upto <script type=\"math/tex; mode=display\">n</script>, which happens in the case of a sorted <script type=\"math/tex; mode=display\">nums</script> array, giving a complexity of <script type=\"math/tex; mode=display\">O(n^2)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The size of the <script type=\"math/tex; mode=display\">set</script> can grow upto <script type=\"math/tex; mode=display\">n</script> in the worst case. In the average case, the size will be <script type=\"math/tex; mode=display\">log(n)</script> for <script type=\"math/tex; mode=display\">n</script> elements in <script type=\"math/tex; mode=display\">nums</script>, giving an average case complexity of <script type=\"math/tex; mode=display\">O(log(n))</script>\n</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(101,'Group Anagrams',2,'Hash Table,String',0,0,'<p></p><p>Given an array of strings, group anagrams together.\n</p><p>For example, given: <code>[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]</code>, <br/>\nReturn:\n</p><pre>\n[\n  [\"ate\", \"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]</pre><p><b>Note:</b> All inputs will be in lower-case.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def groupAnagrams(self, strs):\r\n        """\r\n        :type strs: List[str]\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** groupAnagrams(char** strs, int strsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} strs\r\n * @return {string[][]}\r\n */\r\nvar groupAnagrams = function(strs) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} strs\r\n# @return {String[][]}\r\ndef group_anagrams(strs)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func groupAnagrams(strs []string) [][]string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(102,'Search a 2D Matrix',2,'Array,Binary Search',0,0,'<p></p><p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following properties:</p><p>\n</p><ul>\n<li>Integers in each row are sorted from left to right.</li>\n<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul><p>\nFor example,</p><p>\nConsider the following matrix:\n</p><pre>\n[\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\n</pre><p>Given <b>target</b> = <code>3</code>, return <code>true</code>.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def searchMatrix(self, matrix, target):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :type target: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool searchMatrix(int** matrix, int matrixRowSize, int matrixColSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool SearchMatrix(int[,] matrix, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @param {number} target\r\n * @return {boolean}\r\n */\r\nvar searchMatrix = function(matrix, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @param {Integer} target\r\n# @return {Boolean}\r\ndef search_matrix(matrix, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchMatrix(matrix [][]int, target int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(103,'Longest Word in Dictionary through Deleting',2,'Two Pointers,Sort',0,0,'<p></p><p>\nGiven a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n\n<b>Output:</b> \n\"apple\"\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\n\n<b>Output:</b> \n\"a\"\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>All the strings in the input will only contain lower-case letters.</li>\n<li>The size of the dictionary won\'t exceed 1,000.</li>\n<li>The length of all the strings in the input won\'t exceed 1,000.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    string findLongestWord(string s, vector<string>& d) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String findLongestWord(String s, List<String> d) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findLongestWord(self, s, d):\n        """\n        :type s: str\n        :type d: List[str]\n        :rtype: str\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* findLongestWord(char* s, char** d, int dSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string FindLongestWord(string s, IList<string> d) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} s\n * @param {string[]} d\n * @return {string}\n */\nvar findLongestWord = function(s, d) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\n# @param {String[]} d\n# @return {String}\ndef find_longest_word(s, d)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findLongestWord(_ s: String, _ d: [String]) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findLongestWord(s string, d []string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findLongestWord(s: String, d: List[String]): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-iterative-brute-force-time-limit-exceeded\">Approach #2 Iterative Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-sorting-and-checking-subsequence-accepted\">Approach #3 Sorting and checking Subsequence [Accepted]</a></li>\n<li><a href=\"#approach-4-without-sorting-accepted\">Approach #4 Without Sorting [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is as follows. We create a list of all the possible strings that can be formed by deleting one or more characters from the given string <script type=\"math/tex; mode=display\">s</script>. In order to do so, we make use of a recursive function <code>generate(s, str, i, l)</code> which creates a string by adding and by removing the current character(<script type=\"math/tex; mode=display\">i^{th}</script>) from the string <script type=\"math/tex; mode=display\">s</script> to the string <script type=\"math/tex; mode=display\">str</script> formed till the index <script type=\"math/tex; mode=display\">i</script>. Thus, it adds the <script type=\"math/tex; mode=display\">i^{th}</script> character to <script type=\"math/tex; mode=display\">str</script> and calls itself as <code>generate(s, str + s.charAt(i), i + 1, l)</code>. It also omits the <script type=\"math/tex; mode=display\">i^{th}</script> character to <script type=\"math/tex; mode=display\">str</script> and calls itself as <code>generate(s, str, i + 1, l)</code>.</p>\n<p>Thus, at the end the list <script type=\"math/tex; mode=display\">l</script> contains all the required strings that can be formed using <script type=\"math/tex; mode=display\">s</script>. Then, we look for the strings formed in <script type=\"math/tex; mode=display\">l</script> into the dictionary available to see if a match is available. Further, in case of a match, we check for the length of the matched string to maximize the length and we also take care to consider the lexicographically smallest string in case of length match as well.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">findLongestWord</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">generate</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">))</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">max_str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">max_str</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                    <span class=\"n\">max_str</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">generate</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">);</span>\n        <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">generate</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">str</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n            <span class=\"n\">generate</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. <code>generate</code> calls itself <script type=\"math/tex; mode=display\">2^n</script> times. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of string <script type=\"math/tex; mode=display\">s</script>. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. List <script type=\"math/tex; mode=display\">l</script> contains <script type=\"math/tex; mode=display\">2^n</script> strings.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-iterative-brute-force-time-limit-exceeded\">Approach #2 Iterative Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of using recursive <code>generate</code> to create the list of possible strings that can be formed using <script type=\"math/tex; mode=display\">s</script> by performing delete operations, we can also do the same process iteratively. To do so, we use the concept of binary number generation. </p>\n<p>We can treat the given string <script type=\"math/tex; mode=display\">s</script> along with a binary represenation corresponding to the indices of <script type=\"math/tex; mode=display\">s</script>. The rule is that the character at the position <script type=\"math/tex; mode=display\">i</script> has to be added to the newly formed string <script type=\"math/tex; mode=display\">str</script> only if there is a boolean 1 at the corresponding index in the binary representation of a number currently considered.</p>\n<p>We know a total of <script type=\"math/tex; mode=display\">2^n</script> such binary numbers are possible if there are <script type=\"math/tex; mode=display\">n</script> positions to be filled(<script type=\"math/tex; mode=display\">n</script> also corresponds to the number of characters in <script type=\"math/tex; mode=display\">s</script>). Thus, we consider all the numbers from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">2^n</script> in their binary representation in a serial order and generate all the strings possible using the above rule.</p>\n<p>The figure below shows an example of the strings generated for the given string <script type=\"math/tex; mode=display\">s</script>:\"sea\".</p>\n<p><img alt=\"Longest_Word\" src=\"../Figures/524_Longest_Word_Binary.PNG\" /></p>\n<p>A problem with this method is that the maximum length of the string can be 32 only, since we make use of an integer and perform the shift operations on it to generate the binary numbers.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">findLongestWord</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(((</span><span class=\"n\">i</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">String</span> <span class=\"n\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">))</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">max_str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">max_str</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                    <span class=\"n\">max_str</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. <script type=\"math/tex; mode=display\">2^n</script> strings are generated. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. List <script type=\"math/tex; mode=display\">l</script> contains <script type=\"math/tex; mode=display\">2^n</script> strings.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-sorting-and-checking-subsequence-accepted\">Approach #3 Sorting and checking Subsequence [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The matching condition in the given problem requires that we need to consider the matching string in the dictionary with the longest length and in case of same length, the string which is smallest lexicographically. To ease the searching process, we can sort the given dictionary\'s strings based on the same criteria, such that the more favorable string appears earlier in the sorted dictionary.</p>\n<p>Now, instead of performing the deletions in <script type=\"math/tex; mode=display\">s</script>, we can directly check if any of the words given in the dictionary(say <script type=\"math/tex; mode=display\">x</script>) is a subsequence of the given string <script type=\"math/tex; mode=display\">s</script>, starting from the beginning of the dictionary. This is because, if <script type=\"math/tex; mode=display\">x</script> is a subsequence of <script type=\"math/tex; mode=display\">s</script>, we can obtain <script type=\"math/tex; mode=display\">x</script> by performing delete operations on <script type=\"math/tex; mode=display\">s</script>. </p>\n<p>If <script type=\"math/tex; mode=display\">x</script> is a subsequence of <script type=\"math/tex; mode=display\">s</script> every character of <script type=\"math/tex; mode=display\">x</script> will be present in <script type=\"math/tex; mode=display\">s</script>. The following figure shows the way the subsequence check is done for one example:</p>\n<p>!?!../Documents/524_Longest_Word.json:1000,563!?!</p>\n<p>As soon as we find any such <script type=\"math/tex; mode=display\">x</script>, we can stop the search immediately since we\'ve already processed <script type=\"math/tex; mode=display\">d</script> to our advantage.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSubsequence</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n        <span class=\"k\">return</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">findLongestWord</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">Comparator</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compare</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">?</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isSubsequence</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*x*logn + n*x)</script>. Here <script type=\"math/tex; mode=display\">n</script> refers to the number of strings in list <script type=\"math/tex; mode=display\">d</script> and <script type=\"math/tex; mode=display\">x</script> refers to average string length. Sorting takes <script type=\"math/tex; mode=display\">O(nlogn)</script> and <code>isSubsequence</code> takes <script type=\"math/tex; mode=display\">O(x)</script> to check whether a string is a subsequence of another string or not.  </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(logn)</script>. Sorting takes <script type=\"math/tex; mode=display\">O(logn)</script> space in average case.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-without-sorting-accepted\">Approach #4 Without Sorting [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Since sorting the dictionary could lead to a huge amount of extra effort, we can skip the sorting and directly look for the strings <script type=\"math/tex; mode=display\">x</script> in the unsorted dictionary <script type=\"math/tex; mode=display\">d</script> such that <script type=\"math/tex; mode=display\">x</script> is a subsequence in <script type=\"math/tex; mode=display\">s</script>. If such a string <script type=\"math/tex; mode=display\">x</script> is found, we compare it with the other matching strings found till now based on the required length and lexicographic criteria. Thus, after considering every string in <script type=\"math/tex; mode=display\">d</script>, we can obtain the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSubsequence</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span>\n                <span class=\"n\">j</span><span class=\"o\">++;</span>\n        <span class=\"k\">return</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">findLongestWord</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isSubsequence</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">max_str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">max_str</span><span class=\"o\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                    <span class=\"n\">max_str</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*x)</script>. One iteration over all strings is required. Here <script type=\"math/tex; mode=display\">n</script> refers to the number of strings in list <script type=\"math/tex; mode=display\">d</script> and <script type=\"math/tex; mode=display\">x</script> refers to average string length.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(x)</script>. <script type=\"math/tex; mode=display\">max\\_str</script> variable is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(104,'Merge Two Binary Trees',1,'Tree',0,0,'<p></p><p>\nGiven two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. \n</p><p>\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \n	Tree 1                     Tree 2                  \n          1                         2                             \n         / \\                       / \\                            \n        3   2                     1   3                        \n       /                           \\   \\                      \n      5                             4   7                  \n<b>Output:</b> \nMerged tree:\n	     3\n	    / \\\n	   4   5\n	  / \\   \\ \n	 5   4   7\n</pre><p><b>Note:</b>\nThe merging process must start from the root nodes of both trees.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def mergeTrees(self, t1, t2):\r\n        """\r\n        :type t1: TreeNode\r\n        :type t2: TreeNode\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def mergeTrees(self, t1, t2):\r\n        """\r\n        :type t1: TreeNode\r\n        :type t2: TreeNode\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} t1\r\n * @param {TreeNode} t2\r\n * @return {TreeNode}\r\n */\r\nvar mergeTrees = function(t1, t2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} t1\r\n# @param {TreeNode} t2\r\n# @return {TreeNode}\r\ndef merge_trees(t1, t2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func mergeTrees(_ t1: TreeNode?, _ t2: TreeNode?) -> TreeNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def mergeTrees(t1: TreeNode, t2: TreeNode): TreeNode = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</a></li>\n<li><a href=\"#approach-2-iterative-method-accepted\">Approach #2 Iterative Method [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</h4>\n<p>We can traverse both the given trees in a preorder fashion. At every step, we check if the current node exists(isn\'t null) for both the trees. If so, we add the values in the current nodes of both the trees and update the value in the current node of the first tree to reflect this sum obtained. At every step, we also call the original function <code>mergeTrees()</code> with the left children and then with the right children of the current nodes of the two trees. If at any step, one of these children happens to be null, we return the child of the other tree(representing the corresponding child subtree) to be added as a child subtree to the calling parent node in the first tree. At the end, the first tree will represent the required resultant merged binary tree.</p>\n<p>The following animation illustrates the process.</p>\n<p>!?!../Documents/617_Merge_Trees_Recursion.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">mergeTrees</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">t2</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">t1</span><span class=\"o\">;</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">+=</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">mergeTrees</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">mergeTrees</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">t1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m)</script>. A total of <script type=\"math/tex; mode=display\">m</script> nodes need to be traversed. Here, <script type=\"math/tex; mode=display\">m</script> represents the minimum number of nodes from the two given trees.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">m</script> in the case of a skewed tree. In average case, depth will be <script type=\"math/tex; mode=display\">O(logm)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-iterative-method-accepted\">Approach #2 Iterative Method [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the current approach, we again traverse the two trees, but this time we make use of a <script type=\"math/tex; mode=display\">stack</script> to do so instead of making use of recursion. Each entry in the <script type=\"math/tex; mode=display\">stack</script> strores data in the form <script type=\"math/tex; mode=display\">[node_{tree1}, node_{tree2}]</script>. Here, <script type=\"math/tex; mode=display\">node_{tree1}</script> and <script type=\"math/tex; mode=display\">node_{tree2}</script> are the nodes of the first tree and the second tree respectively.</p>\n<p>We start off by pushing the root nodes of both the trees onto the <script type=\"math/tex; mode=display\">stack</script>. Then, at every step, we remove a node pair from the top of the stack. For every node pair removed, we add the values corresponding to the two nodes and update the value of the corresponding node in the first tree. Then, if the left child of the first tree exists, we push the left child(pair) of both the trees onto the stack. If the left child of the first tree doesn\'t exist, we append the left child(subtree) of the second tree to the current node of the first tree. We do the same for the right child pair as well. </p>\n<p>If, at any step, both the current nodes are null, we continue with popping the next nodes from the <script type=\"math/tex; mode=display\">stack</script>.</p>\n<p>The following animation depicts the process.</p>\n<p>!?!../Documents/617_Merge_Trees_Stack.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">mergeTrees</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">t2</span><span class=\"o\">;</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span><span class=\"o\">[]</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">});</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">TreeNode</span><span class=\"o\">[]</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">continue</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">val</span> <span class=\"o\">+=</span> <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">val</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">left</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">left</span><span class=\"o\">});</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">TreeNode</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">right</span><span class=\"o\">});</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">t1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse over a total of <script type=\"math/tex; mode=display\">n</script> nodes. Here, <script type=\"math/tex; mode=display\">n</script> refers to the smaller of the number of nodes in the two trees.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of stack can grow upto <script type=\"math/tex; mode=display\">n</script> in case of a skewed tree.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(105,'132 Pattern',2,'Stack',0,0,'<p></p><p>\nGiven a sequence of n integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, a 132 pattern is a subsequence a<sub><b>i</b></sub>, a<sub><b>j</b></sub>, a<sub><b>k</b></sub> such\nthat <b>i</b> &lt; <b>j</b> &lt; <b>k</b> and a<sub><b>i</b></sub> &lt; a<sub><b>k</b></sub> &lt; a<sub><b>j</b></sub>. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p><p><b>Note:</b> n will be less than 15,000.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1, 2, 3, 4]\n\n<b>Output:</b> False\n\n<b>Explanation:</b> There is no 132 pattern in the sequence.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [3, 1, 4, 2]\n\n<b>Output:</b> True\n\n<b>Explanation:</b> There is a 132 pattern in the sequence: [1, 4, 2].\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> [-1, 3, 2, 0]\n\n<b>Output:</b> True\n\n<b>Explanation:</b> There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool find132pattern(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean find132pattern(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def find132pattern(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool find132pattern(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool Find132pattern(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar find132pattern = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef find132pattern(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func find132pattern(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func find132pattern(nums []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def find132pattern(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-3-searching-intervals-accepted\">Approach #3 Searching Intervals [Accepted]</a></li>\n<li><a href=\"#approach-4-using-stack-accepted\">Approach #4 Using Stack [Accepted]:</a></li>\n<li><a href=\"#approach-5-using-binary-search-accepted\">Approach #5 Using Binary Search [Accepted]:</a></li>\n<li><a href=\"#approach-6-using-array-as-a-stackaccepted\">Approach #6 Using Array as a stack[Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest solution is to consider every triplet <script type=\"math/tex; mode=display\">(i, j, k)</script> and check if the corresponding numbers satisfy the 132 criteria. If any such triplet is found, we can return a True value. If no such triplet is found, we need to return a False value.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find132pattern</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">])</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. Three loops are used to consider every possible triplet. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can improve the last approach to some extent, if we make use of some observations. We can note that for a particular number <script type=\"math/tex; mode=display\">nums[j]</script> chosen as 2nd element in the 132 pattern, if we don\'t consider <script type=\"math/tex; mode=display\">nums[k]</script>(the 3rd element) for the time being, our job is to find out the first element, <script type=\"math/tex; mode=display\">nums[i]</script>(<script type=\"math/tex; mode=display\">i<j</script>) which is lesser than <script type=\"math/tex; mode=display\">nums[j]</script>. </p>\n<p>Now, assume that we have somehow found a <script type=\"math/tex; mode=display\">nums[i],nums[j]</script> pair. Our task now reduces to finding out a <script type=\"math/tex; mode=display\">nums[k]</script>(<script type=\"math/tex; mode=display\">Kk>j>i)</script>, which falls in the range <script type=\"math/tex; mode=display\">(nums[i], nums[j])</script>. Now, to maximize the likelihood of a <script type=\"math/tex; mode=display\">nums[k]</script> falling in this range, we need to increase this range as much as possible. </p>\n<p>Since, we started off by fixing a <script type=\"math/tex; mode=display\">nums[j]</script>, the only option in our hand is to choose a minimum value of <script type=\"math/tex; mode=display\">nums[i]</script> given a particular <script type=\"math/tex; mode=display\">nums[j]</script>. Once, this pair <script type=\"math/tex; mode=display\">nums[i],nums[j]</script>, has been found out, we simply need to traverse beyond the index <script type=\"math/tex; mode=display\">j</script> to find if a <script type=\"math/tex; mode=display\">nums[k]</script> exists for this pair satisfying the 132 criteria.</p>\n<p>Based on the above observations, while traversing over the <script type=\"math/tex; mode=display\">nums</script> array choosing various values of <script type=\"math/tex; mode=display\">nums[j]</script>, we simultaneously keep a track of the minimum element found so far(excluding <script type=\"math/tex; mode=display\">nums[j]</script>). This minimum element always serves as the <script type=\"math/tex; mode=display\">nums[i]</script> for the current <script type=\"math/tex; mode=display\">nums[j]</script>. Thus, we only need to traverse beyond the <script type=\"math/tex; mode=display\">j^{th}</script> index to check the <script type=\"math/tex; mode=display\">nums[k]</script>\'s to determine if any of them satisfies the 132 criteria.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find132pattern</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min_i</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">min_i</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min_i</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">min_i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">])</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Two loops are used to find the <script type=\"math/tex; mode=display\">nums[j],nums[k]</script> pairs. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-searching-intervals-accepted\">Approach #3 Searching Intervals [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>As discussed in the last approach, once we\'ve fixed a <script type=\"math/tex; mode=display\">nums[i],nums[j]</script> pair, we just need to determine a <script type=\"math/tex; mode=display\">nums[k]</script> which falls in the range <script type=\"math/tex; mode=display\">(nums[i],nums[j])</script>. Further, to maximize the likelihood of any arbitrary <script type=\"math/tex; mode=display\">nums[k]</script> falling in this range, we need to try to keep this range as much as possible. But, in the last approach, we tried to work only on <script type=\"math/tex; mode=display\">nums[i]</script>. But, it\'ll be a better choice, if we can somehow work out on <script type=\"math/tex; mode=display\">nums[j]</script> as well.</p>\n<p>To do so, we can look at the given <script type=\"math/tex; mode=display\">nums</script> array in the form of a graph, as shown below:</p>\n<p align=\"center\"><img alt=\"Graph\" src=\"../Figures/456/456_132_Pattern.PNG\" /></p>\n<p>From the above graph, which consists of rising and falling slopes, we know, the best qualifiers to act as the <script type=\"math/tex; mode=display\">nums[i],nums[j]</script> pair,  as discussed above, to maximize the range <script type=\"math/tex; mode=display\">nums[i], nums[j]</script>, at any instant, while traversing the <script type=\"math/tex; mode=display\">nums</script> array, will be the points at the endpoints of a local rising slope. Thus, once we\'ve found such points, we can traverse over the <script type=\"math/tex; mode=display\">nums</script> array to find a <script type=\"math/tex; mode=display\">nums[k]</script> satisfying the given 132 criteria. </p>\n<p>To find these points at the ends of a local rising slope, we can traverse over the given <script type=\"math/tex; mode=display\">nums</script> array. While traversing, we can keep a track of the minimum point found after the last peak(<script type=\"math/tex; mode=display\">nums[s]</script>). </p>\n<p>Now, whenever we encounter a falling slope, say, at index <script type=\"math/tex; mode=display\">i</script>, we know, that <script type=\"math/tex; mode=display\">nums[i-1]</script> was the endpoint of the last rising slope found. Thus, we can scan over the <script type=\"math/tex; mode=display\">k</script> indices(k&gt;i), to find a 132 pattern.</p>\n<p>But, instead of traversing over <script type=\"math/tex; mode=display\">nums</script> to find a <script type=\"math/tex; mode=display\">k</script> satisfying the 132 pattern for every such rising slope, we can store this range <script type=\"math/tex; mode=display\">(nums[s], nums[i-1])</script>(acting as <script type=\"math/tex; mode=display\">(nums[i], nums[j])</script>) in, say an <script type=\"math/tex; mode=display\">intervals</script> array. </p>\n<p>While traversing over the <script type=\"math/tex; mode=display\">nums</script> array to check the rising/falling slopes, whenever we find any rising slope, we can keep adding the endpoint pairs to this <script type=\"math/tex; mode=display\">intervals</script> array. At the same time, we can also check if the current element falls in any of the ranges found so far. If so, this element satisfies the 132 criteria for that range. </p>\n<p>If no such element is found till the end, we need to return a False value.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find132pattern</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">&gt;</span> <span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                    <span class=\"n\">intervals</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]});</span>\n                <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">intervals</span><span class=\"o\">)</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We traverse over the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> once to find the slopes. But for every element, we also need to traverse over the <script type=\"math/tex; mode=display\">intervals</script> to check if any element falls in any range found so far. This array can contain atmost <script type=\"math/tex; mode=display\">(n/2)</script> pairs, in the case of an alternate increasing-decreasing sequence(worst case e.g.<code>[5 6 4 7 3 8 2 9]</code>). </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">intervals</script> array can contain atmost <script type=\"math/tex; mode=display\">n/2</script> pairs, in the worst case(alternate increasing-decreasing sequence).</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-stack-accepted\">Approach #4 Using Stack [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In Approach 2, we found out <script type=\"math/tex; mode=display\">nums[i]</script> corresponding to a particular <script type=\"math/tex; mode=display\">nums[j]</script> directly without having to consider every pair possible in <script type=\"math/tex; mode=display\">nums</script> to find this <script type=\"math/tex; mode=display\">nums[i],nums[j]</script> pair. If we do some preprocessing, we can make the process of finding a <script type=\"math/tex; mode=display\">nums[k]</script> corresponding to this <script type=\"math/tex; mode=display\">nums[i],nums[j]</script> pair also easy.</p>\n<p>The preprocessing required is to just find the best <script type=\"math/tex; mode=display\">nums[i]</script> value corresponding to every <script type=\"math/tex; mode=display\">nums[j]</script> value. This is done in the same manner as in the second approach i.e. we find the minimum element found till the <script type=\"math/tex; mode=display\">j^{th}</script> element which acts as the <script type=\"math/tex; mode=display\">nums[i]</script> for the current <script type=\"math/tex; mode=display\">nums[j]</script>. We maintain thes values in a <script type=\"math/tex; mode=display\">min</script> array. Thus, <script type=\"math/tex; mode=display\">min[j]</script> now refers to the best <script type=\"math/tex; mode=display\">nums[i]</script> value for a particular <script type=\"math/tex; mode=display\">nums[j]</script>. </p>\n<p>Now, we traverse back from the end of the <script type=\"math/tex; mode=display\">nums</script> array to find the <script type=\"math/tex; mode=display\">nums[k]</script>\'s. Suppose, we keep a track of the <script type=\"math/tex; mode=display\">nums[k]</script> values which can potentially satisfy the 132 criteria for the current <script type=\"math/tex; mode=display\">nums[j]</script>. We know, one of the conditions to be satisfied by such a <script type=\"math/tex; mode=display\">nums[k]</script> is that it must be greater than <script type=\"math/tex; mode=display\">nums[i]</script>. Or in other words, we can also say that it must be greater than <script type=\"math/tex; mode=display\">min[j]</script> for a particular <script type=\"math/tex; mode=display\">nums[j]</script> chosen. </p>\n<p>Once it is ensured that the elements left for competing for the <script type=\"math/tex; mode=display\">nums[k]</script> are all greater than <script type=\"math/tex; mode=display\">min[j]</script>(or <script type=\"math/tex; mode=display\">nums[i]</script>), our only task is to ensure that it should be lesser than <script type=\"math/tex; mode=display\">nums[j]</script>. Now, the best element from among the competitors, for satisfying this condition will be the minimum one from out of these elements. </p>\n<p>If this element, <script type=\"math/tex; mode=display\">nums[min]</script> satisfies <script type=\"math/tex; mode=display\">nums[min] < nums[j]</script>, we\'ve found a 132 pattern. If not, no other element will satisfy this criteria, since they are all greater than or equal to <script type=\"math/tex; mode=display\">nums[min]</script>$ and thus greater than or equal to <script type=\"math/tex; mode=display\">nums[j]</script> as well.</p>\n<p>To keep a track of these potential <script type=\"math/tex; mode=display\">nums[k]</script> values for a particular <script type=\"math/tex; mode=display\">nums[i],nums[j]</script> considered currently, we maintain a <script type=\"math/tex; mode=display\">stack</script> on which these potential <script type=\"math/tex; mode=display\">nums[k]</script>\'s satisfying the 132 criteria lie in a descending order(minimum element on the top). We need not sort these elements on the <script type=\"math/tex; mode=display\">stack</script>, but they\'ll be sorted automatically as we\'ll discuss along with the process.</p>\n<p>After creating a <script type=\"math/tex; mode=display\">min</script> array, we start traversing the <script type=\"math/tex; mode=display\">nums[j]</script> array in a backward manner. Let\'s say, we are currently at the <script type=\"math/tex; mode=display\">j^{th}</script> element and let\'s also assume that the <script type=\"math/tex; mode=display\">stack</script> is sorted right now. Now, firstly, we check if <script type=\"math/tex; mode=display\">nums[j] > min[j]</script>. If not, we continue with the <script type=\"math/tex; mode=display\">(j-1)^{th}</script> element and the <script type=\"math/tex; mode=display\">stack</script> remains sorted. If not, we keep on popping the elements from the top of the <script type=\"math/tex; mode=display\">stack</script> till we find an element, <script type=\"math/tex; mode=display\">stack[top]</script> such that, <script type=\"math/tex; mode=display\">stack[top] > min[j]</script>(or <script type=\"math/tex; mode=display\">stack[top] > nums[i]</script>). </p>\n<p>Once the popping is done, we\'re sure that all the elements pending on the <script type=\"math/tex; mode=display\">stack</script> are greater than <script type=\"math/tex; mode=display\">nums[i]</script> and are thus, the potential candidates for <script type=\"math/tex; mode=display\">nums[k]</script> satisfying the 132 criteria. We can also note that the elements which have been popped from the <script type=\"math/tex; mode=display\">stack</script>, all satisfy <script type=\"math/tex; mode=display\">stack[top] &leq; min[j]</script>. </p>\n<p>Since, in the <script type=\"math/tex; mode=display\">min</script> array, <script type=\"math/tex; mode=display\">min[p] &leq; min[q]</script>, for every <script type=\"math/tex; mode=display\">p > q</script>, these popped elements also satisfy <script type=\"math/tex; mode=display\">stack[top] &leq; min[k]</script>, for all <script type=\"math/tex; mode=display\">0 &leq; k < j</script>. Thus, they are not the potential <script type=\"math/tex; mode=display\">nums[k]</script> candidates for even the preceding elements. Even after  doing the popping, the <script type=\"math/tex; mode=display\">stack</script> remains sorted.</p>\n<p>After the popping is done, we\'ve got the minimum element from amongst all the potential <script type=\"math/tex; mode=display\">nums[k]</script>\'s on the top of the <script type=\"math/tex; mode=display\">stack</script>(as per the assumption). We can check if it is greater than <script type=\"math/tex; mode=display\">nums[j]</script> to satisfy the 132 criteria(we\'ve already checked <script type=\"math/tex; mode=display\">stack[top] > nums[i]</script>). If this element satisfies the 132 criteria, we can return a True value. If not, we know that for the current <script type=\"math/tex; mode=display\">j</script>, <script type=\"math/tex; mode=display\">nums[j] > min[j]</script>. Thus, the element <script type=\"math/tex; mode=display\">nums[j]</script> could be a potential <script type=\"math/tex; mode=display\">nums[k]</script> value, for the preceding <script type=\"math/tex; mode=display\">nums[i]\'s</script>. </p>\n<p>Thus, we push it over the <script type=\"math/tex; mode=display\">stack</script>. We can note that, we need to push this element <script type=\"math/tex; mode=display\">nums[j]</script> on the <script type=\"math/tex; mode=display\">stack</script> only when it didn\'t satisfy <script type=\"math/tex; mode=display\">stack[top]<nums[j]</script>. Thus, <script type=\"math/tex; mode=display\">nums[j] &leq; stack[top]</script>. Thus, even after pushing this element on the <script type=\"math/tex; mode=display\">stack</script>, the <script type=\"math/tex; mode=display\">stack</script> remains sorted. Thus, we\'ve seen by induction, that the <script type=\"math/tex; mode=display\">stack</script> always remains sorted.</p>\n<p>Also, note that in case <script type=\"math/tex; mode=display\">nums[j] &leq; min[j]</script>, we don\'t push <script type=\"math/tex; mode=display\">nums[j]</script> onto the <script type=\"math/tex; mode=display\">stack</script>. This is because this <script type=\"math/tex; mode=display\">nums[j]</script> isn\'t greater than even the minimum element lying towards its left and thus can\'t act as <script type=\"math/tex; mode=display\">nums[k]</script> in the future.</p>\n<p>If no element is found satisfying the 132 criteria till reaching the first element, we return a False value.</p>\n<p>The following animation better illustrates the process.</p>\n<p>!?!../Documents/456_132_Pattern.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find132pattern</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n                    <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We travesre over the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> once to fill the <script type=\"math/tex; mode=display\">min</script> array. After this, we traverse over <script type=\"math/tex; mode=display\">nums</script> to find the <script type=\"math/tex; mode=display\">nums[k]</script>. During this process, we also push and pop the elements on the <script type=\"math/tex; mode=display\">stack</script>. But, we can note that atmost <script type=\"math/tex; mode=display\">n</script> elements can be pushed and popped off the <script type=\"math/tex; mode=display\">stack</script> in total. Thus, the second traversal requires only <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The <script type=\"math/tex; mode=display\">stack</script> can grow upto a maximum depth of <script type=\"math/tex; mode=display\">n</script>. Furhter, <script type=\"math/tex; mode=display\">min</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-using-binary-search-accepted\">Approach #5 Using Binary Search [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we\'ve made use of a separate <script type=\"math/tex; mode=display\">stack</script> to push and pop the <script type=\"math/tex; mode=display\">nums[k]</script>\'s. But, we can also note that when we reach the index <script type=\"math/tex; mode=display\">j</script> while scanning backwards for finding <script type=\"math/tex; mode=display\">nums[k]</script>, the <script type=\"math/tex; mode=display\">stack</script> can contain atmost <script type=\"math/tex; mode=display\">n-j-1</script> elements. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in <script type=\"math/tex; mode=display\">nums</script> array. </p>\n<p>We can also note that this is the same number of elements which lie beyond the <script type=\"math/tex; mode=display\">j^{th}</script> index in <script type=\"math/tex; mode=display\">nums</script> array. We also know that these elements lying beyond the <script type=\"math/tex; mode=display\">j^{th}</script> index won\'t be needed in the future ever again. Thus, we can make use of this space in <script type=\"math/tex; mode=display\">nums</script> array instead of using a separate <script type=\"math/tex; mode=display\">stack</script>. The rest of the process can be carried on in the same manner as discussed in the last approach.</p>\n<p>We can try to go for another optimization here. Since, we\'ve got an array for storing the potential <script type=\"math/tex; mode=display\">nums[k]</script> values now, we need not do the popping process for a <script type=\"math/tex; mode=display\">min[j]</script> to find an element just larger than <script type=\"math/tex; mode=display\">min[j]</script> from amongst these potential values. </p>\n<p>Instead, we can make use of Binary Search to directly find an element, which is just larger than <script type=\"math/tex; mode=display\">min[j]</script> in the required interval, if it exists. If such an element is found, we can compare it with <script type=\"math/tex; mode=display\">nums[j]</script> to check the 132 criteria. Otherwise, we continue the process as in the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find132pattern</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">binarySearch</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">nums</span><span class=\"o\">[--</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. Filling <script type=\"math/tex; mode=display\">min</script> array requires <script type=\"math/tex; mode=display\">O(n)</script> time. The second traversal is done over the whole <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script>. For every current <script type=\"math/tex; mode=display\">nums[j]</script> we need to do the Binary Search, which requires <script type=\"math/tex; mode=display\">O\\big(log(n)\\big)</script>. In the worst case, this Binary Search will be done for all the <script type=\"math/tex; mode=display\">n</script> elements, and the required element won\'t be found in any case, leading to a complexity of <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">min</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-6-using-array-as-a-stackaccepted\">Approach #6 Using Array as a stack[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we\'ve seen that in the worst case, the required element won\'t be found for all the <script type=\"math/tex; mode=display\">n</script> elements and thus Binary Search is done at every step increasing the time complexity. </p>\n<p>To remove this problem, we can follow the same steps as in Approach 4 i.e. We can remove those elements(update the index <script type=\"math/tex; mode=display\">k</script>) which aren\'t greater than <script type=\"math/tex; mode=display\">nums[i]</script>(<script type=\"math/tex; mode=display\">min[j]</script>). Thus, in case no element is larger than <script type=\"math/tex; mode=display\">min[j]</script> the index <script type=\"math/tex; mode=display\">k</script> reaches the last element. </p>\n<p>Now, at every step, only <script type=\"math/tex; mode=display\">nums[j]</script> will be added and removed from consideration in the next step, improving the time complexity in the worst case. The rest of the method remains the same as in Approach 4.</p>\n<p>This approach is inspired by <a href=\"https://leetcode.com/fun4leetcode/\">@fun4leetcode</a></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find132pattern</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n                    <span class=\"n\">k</span><span class=\"o\">++;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">nums</span><span class=\"o\">[--</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We travesre over the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> once to fill the <script type=\"math/tex; mode=display\">min</script> array. After this, we traverse over <script type=\"math/tex; mode=display\">nums</script> to find the <script type=\"math/tex; mode=display\">nums[k]</script>. Atmost <script type=\"math/tex; mode=display\">n</script> elements can be put in and out of the <script type=\"math/tex; mode=display\">nums</script> array in total. Thus, the second traversal requires only <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">min</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(106,'Reverse Linked List',1,'Linked List',0,0,'<p></p><p>Reverse a singly linked list.</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show more hints.</a></p><div class=\"spoilers\"><b>Hint:</b>\n<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* reverseList(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def reverseList(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* reverseList(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode ReverseList(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar reverseList = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef reverse_list(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func reverseList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseList(head: ListNode): ListNode = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-iterative-accepted\">Approach #1 (Iterative) [Accepted]</a></li>\n<li><a href=\"#approach-2-recursive-accepted\">Approach #2 (Recursive) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-iterative-accepted\">Approach #1 (Iterative) [Accepted]</h4>\n<p>Assume that we have linked list <code>1 → 2 → 3 → Ø</code>, we would like to change it to <code>Ø ← 1 ← 2 ← 3</code>.</p>\n<p>While you are traversing the list, change the current node\'s next pointer to point to its previous element. Since a node does not have reference to its previous node, you must store its previous element beforehand. You also need another pointer to store the next node before changing the reference. Do not forget to return the new head reference at the end!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">reverseList</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ListNode</span> <span class=\"n\">nextTemp</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"n\">curr</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">;</span>\n        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">;</span>\n        <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">nextTemp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">prev</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nAssume that <script type=\"math/tex; mode=display\">n</script> is the list\'s length, the time complexity is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursive-accepted\">Approach #2 (Recursive) [Accepted]</h4>\n<p>The recursive version is slightly trickier and the key is to work backwards. Assume that the rest of the list had already been reversed, now how do I reverse the front part? Let\'s assume the list is: n<sub>1</sub> → … → n<sub>k-1</sub> → n<sub>k</sub> → n<sub>k+1</sub> → … → n<sub>m</sub> → Ø</p>\n<p>Assume from node n<sub>k+1</sub> to n<sub>m</sub> had been reversed and you are at node n<sub>k</sub>.</p>\n<p>n<sub>1</sub> → … → n<sub>k-1</sub> → <b>n<sub>k</sub></b> → n<sub>k+1</sub> ← … ← n<sub>m</sub></p>\n<p>We want n<sub>k+1</sub>’s next node to point to n<sub>k</sub>.</p>\n<p>So,</p>\n<p>n<sub>k</sub>.next.next = n<sub>k</sub>;</p>\n<p>Be very careful that n<sub>1</sub>\'s next must point to Ø. If you forget about this, your linked list has a cycle in it. This bug could be caught if you test your code with a linked list of size 2.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">reverseList</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">reverseList</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">);</span>\n    <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nAssume that <script type=\"math/tex; mode=display\">n</script> is the list\'s length, the time complexity is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nThe extra space comes from implicit stack space due to recursion. The recursion could go up to <script type=\"math/tex; mode=display\">n</script> levels deep.</p>\n</li>\n</ul>',NULL,1,'none','none','none'),(107,'Combine Two Tables',1,'',0,0,'<p></p><p>\nTable: <code>Person</code></p><pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId is the primary key column for this table.\n</pre><p>\nTable: <code>Address</code></p><pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId is the primary key column for this table.\n</pre><br/><p>\nWrite a SQL query for a report that provides the following information for \neach person in the Person table, regardless if there is an address for each \nof those people:\n</p><pre>\nFirstName, LastName, City, State\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-outer-join-accepted\">Approach: Using outer join [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-outer-join-accepted\">Approach: Using <code>outer join</code> [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Since the <em>PersonId</em> in table <strong>Address</strong> is the foreign key of table <strong>Person</strong>, we can join this two table to get the address information of a person.</p>\n<p>Considering there might not be an address information for every person, we should use <code>outer join</code> instead of the default <code>inner join</code>.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">FirstName</span><span class=\"p\">,</span> <span class=\"n\">LastName</span><span class=\"p\">,</span> <span class=\"n\">City</span><span class=\"p\">,</span> <span class=\"k\">State</span>\n<span class=\"k\">from</span> <span class=\"n\">Person</span> <span class=\"k\">left</span> <span class=\"k\">join</span> <span class=\"n\">Address</span>\n<span class=\"k\">on</span> <span class=\"n\">Person</span><span class=\"p\">.</span><span class=\"n\">PersonId</span> <span class=\"o\">=</span> <span class=\"n\">Address</span><span class=\"p\">.</span><span class=\"n\">PersonId</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: Using <code>where</code> clause to filter the records will fail if there is no address information for a person because it will not display the name information.</p>\n</blockquote>',NULL,1,'none','none','none'),(108,'Count of Smaller Numbers After Self',3,'Divide and Conquer,Binary Indexed Tree,Segment Tree,Binary Search Tree',0,0,'<p></p><p>\nYou are given an integer array <i>nums</i> and you have to return a new <i>counts</i> array.\nThe <i>counts</i> array has the property where <code>counts[i]</code> is \nthe number of smaller elements to the right of <code>nums[i]</code>.\n</p><p><b>Example:</b></p><pre>\nGiven <i>nums</i> = [5, 2, 6, 1]\n\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre><p>\nReturn the array <code>[2, 1, 1, 0]</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> countSmaller(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countSmaller(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* countSmaller(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> CountSmaller(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar countSmaller = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef count_smaller(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func countSmaller(_ nums: [Int]) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countSmaller(nums []int) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countSmaller(nums: Array[Int]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(109,'UTF-8 Validation',2,'Bit Manipulation',0,0,'<p></p><p>A character in UTF8 can be from <b>1 to 4 bytes</b> long, subjected to the following rules:</p><ol>\n<li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li>\n<li>For n-bytes character, the first n-bits are all one\'s, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.</li>\n</ol><p>This is how the UTF-8 encoding would work:</p><pre><code>   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre><p>\nGiven an array of integers representing the data, return whether it is a valid utf-8 encoding.\n</p><p>\n<b>Note:</b><br/>\nThe input is an array of integers. Only the <b>least significant 8 bits</b> of each integer is used to store the data. This means each integer represents only 1 byte of data.\n</p><p>\n<b>Example 1:</b>\n</p><pre>\ndata = [197, 130, 1], which represents the octet sequence: <b>11000101 10000010 00000001</b>.\n\nReturn <b>true</b>.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n</pre><p>\n<b>Example 2:</b>\n</p><pre>\ndata = [235, 140, 4], which represented the octet sequence: <b>11101011 10001100 00000100</b>.\n\nReturn <b>false</b>.\nThe first 3 bits are all one\'s and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that\'s correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool validUtf8(vector<int>& data) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean validUtf8(int[] data) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def validUtf8(self, data):\r\n        """\r\n        :type data: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool validUtf8(int* data, int dataSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool ValidUtf8(int[] data) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} data\r\n * @return {boolean}\r\n */\r\nvar validUtf8 = function(data) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} data\r\n# @return {Boolean}\r\ndef valid_utf8(data)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func validUtf8(_ data: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func validUtf8(data []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def validUtf8(data: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(110,'Two Sum IV - Input is a BST',1,'Tree',0,0,'<p></p><p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n<b>Output:</b> True\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n<b>Output:</b> False\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool findTarget(TreeNode* root, int k) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findTarget(self, root, k):\n        """\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def findTarget(self, root, k):\n        """\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool findTarget(struct TreeNode* root, int k) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool FindTarget(TreeNode root, int k) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {boolean}\n */\nvar findTarget = function(root, k) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} k\n# @return {Boolean}\ndef find_target(root, k)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func findTarget(_ root: TreeNode?, _ k: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findTarget(root *TreeNode, k int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findTarget(root: TreeNode, k: Int): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-hashsetaccepted\">Approach #1 Using HashSet[Accepted]</a></li>\n<li><a href=\"#approach-2-using-bfs-and-hashset-accepted\">Approach #2 Using BFS and HashSet [Accepted]</a></li>\n<li><a href=\"#approach-3-using-bst-accepted\">Approach #3 Using BST [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-hashsetaccepted\">Approach #1 Using HashSet[Accepted]</h4>\n<p>The simplest solution will be to traverse over the whole tree and consider every possible pair of nodes to determine if they can form the required sum <script type=\"math/tex; mode=display\">k</script>. But, we can improve the process if we look at a little catch here.</p>\n<p>If the sum of two elements <script type=\"math/tex; mode=display\">x + y</script> equals <script type=\"math/tex; mode=display\">k</script>, and we already know that <script type=\"math/tex; mode=display\">x</script> exists in the given tree, we only need to check if an element <script type=\"math/tex; mode=display\">y</script> exists in the given tree, such that <script type=\"math/tex; mode=display\">y = k - x</script>. Based on this simple catch, we can traverse the tree in both the directions(left child and right child) at every step. We keep a track of the elements which have been found so far during the tree traversal, by putting them into a <script type=\"math/tex; mode=display\">set</script>. </p>\n<p>For every current node with a value of <script type=\"math/tex; mode=display\">p</script>, we check if <script type=\"math/tex; mode=display\">k-p</script> already exists in the array. If so, we can conclude that the sum <script type=\"math/tex; mode=display\">k</script> can be formed by using the two elements from the given tree. Otherwise, we put this value <script type=\"math/tex; mode=display\">p</script> into the <script type=\"math/tex; mode=display\">set</script>.</p>\n<p>If even after the whole tree\'s traversal, no such element <script type=\"math/tex; mode=display\">p</script> can be found, the sum <script type=\"math/tex; mode=display\">k</script> can\'t be formed by using any two elements.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">findTarget</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Set</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">find</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Set</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The entire tree is traversed only once in the worst case. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of nodes in the given tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The size of the <script type=\"math/tex; mode=display\">set</script> can grow upto <script type=\"math/tex; mode=display\">n</script> in the worst case.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-bfs-and-hashset-accepted\">Approach #2 Using BFS and HashSet [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, the idea of using the <script type=\"math/tex; mode=display\">set</script> is the same as in the last approach. But, we can carry on the traversal in a Breadth First Search manner, which is a very common traversal method used in Trees. The way BFS is used can be summarized as given below. We start by putting the root node into a <script type=\"math/tex; mode=display\">queue</script>. We also maintain a <script type=\"math/tex; mode=display\">set</script> similar to the last approach. Then, at every step, we do as follows:</p>\n<ol>\n<li>\n<p>Remove an element, <script type=\"math/tex; mode=display\">p</script>,  from the front of the <script type=\"math/tex; mode=display\">queue</script>. </p>\n</li>\n<li>\n<p>Check if the element <script type=\"math/tex; mode=display\">k-p</script> already exists in the <script type=\"math/tex; mode=display\">set</script>. If so, return True.</p>\n</li>\n<li>\n<p>Otherwise, add this element, <script type=\"math/tex; mode=display\">p</script> to the <script type=\"math/tex; mode=display\">set</script>. Further, add the right and the left child nodes of the current node to the back of the <script type=\"math/tex; mode=display\">queue</script>.</p>\n</li>\n<li>\n<p>Continue steps 1. to 3. till the <script type=\"math/tex; mode=display\">queue</script> becomes empty. </p>\n</li>\n<li>\n<p>Return false if the <script type=\"math/tex; mode=display\">queue</script> becomes empty.</p>\n</li>\n</ol>\n<p>By following this process, we traverse the tree on a level by level basis. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">findTarget</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Set</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">();</span>\n        <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">();</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">TreeNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">))</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We need to traverse over the whole tree once in the worst case.  Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of nodes in the given tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The size of the <script type=\"math/tex; mode=display\">set</script> can grow atmost upto <script type=\"math/tex; mode=display\">n</script>. </p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-bst-accepted\">Approach #3 Using BST [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we make use of the fact that the given tree is a Binary  Search Tree. Now, we know that the inorder traversal of a BST gives the nodes in ascending order. Thus, we do the inorder traversal of the given tree and put the results in a <script type=\"math/tex; mode=display\">list</script> which contains the nodes sorted in ascending order.</p>\n<p>Once this is done, we make use of two pointers <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> pointing to the beginning and the end of the sorted <script type=\"math/tex; mode=display\">list</script>. Then, we do as follows:</p>\n<ol>\n<li>\n<p>Check if the sum of the elements pointed by <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> is equal to the required sum <script type=\"math/tex; mode=display\">k</script>. If so, return a True immediately.</p>\n</li>\n<li>\n<p>Otherwise, if the sum of the current two elements is lesser than the required sum <script type=\"math/tex; mode=display\">k</script>, update <script type=\"math/tex; mode=display\">l</script> to point to the next element. This is done, because, we need to increase the sum of the current elements, which can only be done by increasing the smaller number.</p>\n</li>\n<li>\n<p>Otherwise, if the sum of the current two elements is larger than the required sum <script type=\"math/tex; mode=display\">k</script>, update <script type=\"math/tex; mode=display\">r</script> to point to the previous element. This is done, because, we need to decrease the sum of the current elements, which can only be done by reducing the larger number. </p>\n</li>\n<li>\n<p>Continue steps 1. to 3. till the left pointer <script type=\"math/tex; mode=display\">l</script> crosses the right pointer <script type=\"math/tex; mode=display\">r</script>.</p>\n</li>\n<li>\n<p>If the two pointers cross each other, return a False value.</p>\n</li>\n</ol>\n<p>Note that we need not increase the larger number or reduce the smaller number in any case. This happens because, in case, a number larger than the current <script type=\"math/tex; mode=display\">list[r]</script> is needed to form the required sum <script type=\"math/tex; mode=display\">k</script>, the right pointer could not have been reduced in the first place. The similar argument holds true for not reducing the smaller number as well.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">findTarget</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">();</span>\n        <span class=\"n\">inorder</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">inorder</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"n\">inorder</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n        <span class=\"n\">inorder</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We need to traverse over the whole tree once to do the inorder traversal.  Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of nodes in the given tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The sorted <script type=\"math/tex; mode=display\">list</script> will contain <script type=\"math/tex; mode=display\">n</script> elements.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(111,'Set Matrix Zeroes',2,'Array',0,0,'<p></p><p>\nGiven a <i>m</i> x <i>n</i> matrix, if an element is 0, set its entire row and column to 0. Do it in place.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show follow up.</a></p><div class=\"spoilers\"><b>Follow up:</b>\n<p>\nDid you use extra space?<br/>\nA straight forward solution using O(<i>m</i><i>n</i>) space is probably a bad idea.<br/>\nA simple improvement uses O(<i>m</i> + <i>n</i>) space, but still not the best solution.<br/>\nCould you devise a constant space solution?\n</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void setZeroes(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void setZeroes(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def setZeroes(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: void Do not return anything, modify matrix in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void setZeroes(int** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void SetZeroes(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {void} Do not return anything, modify matrix in-place instead.\r\n */\r\nvar setZeroes = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Void} Do not return anything, modify matrix in-place instead.\r\ndef set_zeroes(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func setZeroes(_ matrix: inout [[Int]]) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func setZeroes(matrix [][]int)  {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(112,'Rotate Image',2,'Array',0,0,'<p></p><p>You are given an <i>n</i> x <i>n</i> 2D matrix representing an image.</p><p>Rotate the image by 90 degrees (clockwise).</p><p>Follow up:<br/>\nCould you do this in-place?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void rotate(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void rotate(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def rotate(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: void Do not return anything, modify matrix in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void rotate(int** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void Rotate(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {void} Do not return anything, modify matrix in-place instead.\r\n */\r\nvar rotate = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Void} Do not return anything, modify matrix in-place instead.\r\ndef rotate(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func rotate(_ matrix: inout [[Int]]) {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func rotate(matrix [][]int)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(113,'Kth Smallest Element in a BST',2,'Binary Search,Tree',0,0,'<p></p><p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <b>k</b>th smallest element in it.</p><p><b>Note: </b><br/>\nYou may assume k is always valid, 1 ? k ? BST\'s total elements.</p><p><b>Follow up:</b><br/>\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int kthSmallest(TreeNode* root, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def kthSmallest(self, root, k):\r\n        """\r\n        :type root: TreeNode\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint kthSmallest(struct TreeNode* root, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int KthSmallest(TreeNode root, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar kthSmallest = function(root, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef kth_smallest(root, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func kthSmallest(_ root: TreeNode?, _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc kthSmallest(root *TreeNode, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def kthSmallest(root: TreeNode, k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none');
INSERT INTO `problems` VALUES (114,'Permutation in String',2,'Two Pointers',0,0,'<p>Given two strings <b>s1</b> and <b>s2</b>, write a function to return true if <b>s2</b> contains the permutation of <b>s1</b>. In other words, one of the first string\'s permutations is the <b>substring</b> of the second string.\n\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>s1 = \"ab\" s2 = \"eidbaooo\"\n<b>Output:</b>True\n<b>Explanation:</b> s2 contains one permutation of s1 (\"ba\").\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>s1= \"ab\" s2 = \"eidboaoo\"\n<b>Output:</b> False\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The input strings only contain lower case letters.</li>\n<li>The length of both given strings is in range [1, 10,000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool checkInclusion(string s1, string s2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean checkInclusion(String s1, String s2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def checkInclusion(self, s1, s2):\r\n        """\r\n        :type s1: str\r\n        :type s2: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool checkInclusion(char* s1, char* s2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CheckInclusion(string s1, string s2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s1\r\n * @param {string} s2\r\n * @return {boolean}\r\n */\r\nvar checkInclusion = function(s1, s2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s1\r\n# @param {String} s2\r\n# @return {Boolean}\r\ndef check_inclusion(s1, s2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func checkInclusion(_ s1: String, _ s2: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkInclusion(s1 string, s2 string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def checkInclusion(s1: String, s2: String): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-sorting-time-limit-exceeded\">Approach #2 Using sorting [Time Limit Exceeded]:</a></li>\n<li><a href=\"#approach-3-using-hashmap-time-limit-exceeded\">Approach #3 Using Hashmap [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-4-using-array-accepted\">Approach #4 Using Array [Accepted]</a></li>\n<li><a href=\"#approach-5-sliding-window-accepted\">Approach #5 Sliding Window  [Accepted]:</a></li>\n<li><a href=\"#approach-6-optimized-sliding-window-accepted\">Approach #6 Optimized Sliding Window [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The simplest method is to generate all the permutations of the short string  and to check if the generated permutation is a substring of the longer string.</p>\n<p>In order to generate all the possible pairings, we make use of a function <code>permute(string_1, string_2, current_index)</code>. This function creates all the possible permutations of the short string <script type=\"math/tex; mode=display\">s1</script>.</p>\n<p>To do so, permute takes the index of the current element <script type=\"math/tex; mode=display\">current_index</script> as one of the arguments. Then, it swaps the current element with every other element in the array, lying towards its right, so as to generate a new ordering of the array elements. After the swapping has been done, it makes another call to permute but this time with the index of the next element in the array. While returning back, we reverse the swapping done in the current function call.</p>\n<p>Thus, when we reach the end of the array, a new ordering of the array\'s elements is generated. The following animation depicts the process of generating the permutations.</p>\n<p>!?!../Documents/561_Array.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkInclusion</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">flag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i0</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i0</span> <span class=\"o\">==</span> <span class=\"n\">i1</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i0</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i0</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i1</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">s1</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i1</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">s2</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">s3</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">permute</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n!)</script>. We match all the permutations of the short string <script type=\"math/tex; mode=display\">s1</script>, of length <script type=\"math/tex; mode=display\">s1</script>, with <script type=\"math/tex; mode=display\">s2</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">s1</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. The depth of the recursion tree is <script type=\"math/tex; mode=display\">n</script>(<script type=\"math/tex; mode=display\">n</script> refers to the length of the short string <script type=\"math/tex; mode=display\">s1</script>). Every node of the recursion tree contains a string of max. length <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-sorting-time-limit-exceeded\">Approach #2 Using sorting [Time Limit Exceeded]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is that one string will be a permutation of another string only if both of them contain the same characters the same number of times. One string <script type=\"math/tex; mode=display\">x</script> is a permutation of other string <script type=\"math/tex; mode=display\">y</script> only if <script type=\"math/tex; mode=display\">sorted(x)=sorted(y)</script>. </p>\n<p>In order to check this, we can sort the two strings and compare them.  We sort the short string <script type=\"math/tex; mode=display\">s1</script> and all the substrings of <script type=\"math/tex; mode=display\">s2</script>, sort them and compare them with the sorted <script type=\"math/tex; mode=display\">s1</script> string. If the two match completely, <script type=\"math/tex; mode=display\">s1</script>\'s permutation is a substring of <script type=\"math/tex; mode=display\">s2</script>, otherwise not.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkInclusion</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">sort</span><span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()))))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">sort</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(l_1log(l_1)+(l_2-l_1)l_1log(l_1)\\big)</script>. where <script type=\"math/tex; mode=display\">l_1</script> is the length of string <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> is the length of string <script type=\"math/tex; mode=display\">l_2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(l_1)</script>. <script type=\"math/tex; mode=display\">t</script> array is used .</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-hashmap-time-limit-exceeded\">Approach #3 Using Hashmap [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>As discussed above, one string will be a permutation of another string only if both of them contain the same charaters with the same frequency. We can consider every possible substring in the long string <script type=\"math/tex; mode=display\">s2</script> of the same length as that of <script type=\"math/tex; mode=display\">s1</script> and check the frequency of occurence of the characters appearing in the two. If the frequencies of every letter match exactly, then only <script type=\"math/tex; mode=display\">s1</script>\'s permutation can be a substring of <script type=\"math/tex; mode=display\">s2</script>. </p>\n<p>In order to implement this approach, instead of sorting and then comparing the elements for equality, we make use of a hashmap <script type=\"math/tex; mode=display\">s1map</script> which stores the frequency of occurence of all the characters in the short string <script type=\"math/tex; mode=display\">s1</script>. We consider every possible substring of <script type=\"math/tex; mode=display\">s2</script> of the same length as that of <script type=\"math/tex; mode=display\">s1</script>, find its corresponding hashmap as well, namely <script type=\"math/tex; mode=display\">s2map</script>. Thus, the substrings considered can be viewed as a window of length as that of <script type=\"math/tex; mode=display\">s1</script> iterating over <script type=\"math/tex; mode=display\">s2</script>. If the two hashmaps obtained are identical for any such window, we can conclude that <script type=\"math/tex; mode=display\">s1</script>\'s permutation is a substring of <script type=\"math/tex; mode=display\">s2</script>, otherwise not.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkInclusion</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Character</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">s1map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">s1map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">s1map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Character</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">s2map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">s2map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">s2map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matches</span><span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"n\">s2map</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">matches</span><span class=\"o\">(</span><span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Character</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Character</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">s2map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"n\">s1map</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">s2map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l_1+26*l_1*(l_2-l_1))</script>. hashmap contains atmost 26 keys. where <script type=\"math/tex; mode=display\">l_1</script> is the length of string <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> is the length of string <script type=\"math/tex; mode=display\">l_2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. hashmap contains atmost 26 key-value pairs.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-array-accepted\">Approach #4 Using Array [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of making use of a special HashMap datastructure just to store the frequency of occurence of characters, we can use a simpler array data structure to store the frequencies. Given strings contains only lowercase alphabets (\'a\' to \'z\'). So we need to take an array of size 26.The rest of the process remains the same as the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkInclusion</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s1map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s2map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matches</span><span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"n\">s2map</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">matches</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s2map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">26</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l_1+26*l_1*(l_2-l_1))</script>,  where <script type=\"math/tex; mode=display\">l_1</script> is the length of string <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> is the length of string <script type=\"math/tex; mode=display\">l_2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. <script type=\"math/tex; mode=display\">s1map</script> and <script type=\"math/tex; mode=display\">s2map</script> of size 26 is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-sliding-window-accepted\">Approach #5 Sliding Window  [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of generating the hashmap afresh for every window considered in <script type=\"math/tex; mode=display\">s2</script>, we can create the hashmap just once for the first window in <script type=\"math/tex; mode=display\">s2</script>. Then, later on when we slide the window, we know that we add one preceding character and add a new succeeding character to the new window considered. Thus, we can update the hashmap by just updating the indices associated with those two characters only. Again, for every updated hashmap, we compare all the elements of the hashmap for equality to get the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkInclusion</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s1map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s2map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n            <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matches</span><span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"n\">s2map</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n            <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">matches</span><span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"n\">s2map</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">matches</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s1map</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s2map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">26</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l_1+26*(l_2-l_1))</script>,  where <script type=\"math/tex; mode=display\">l_1</script> is the length of string <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> is the length of string <script type=\"math/tex; mode=display\">l_2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-6-optimized-sliding-window-accepted\">Approach #6 Optimized Sliding Window [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>The last approach can be optimized, if instead of comparing all the elements of the hashmaps for every updated <script type=\"math/tex; mode=display\">s2map</script> corresponding to every window of <script type=\"math/tex; mode=display\">s2</script> considered, we keep a track of the number of elements which were already matching in the earlier hashmap and update just the count of matching elements when we shift the window towards the right.</p>\n<p>To do so, we maintain a <script type=\"math/tex; mode=display\">count</script> variable, which stores the number of characters(out of the 26 alphabets), which have the same frequency of occurence in <script type=\"math/tex; mode=display\">s1</script> and the current window in <script type=\"math/tex; mode=display\">s2</script>. When we slide the window, if the deduction of the last element and the addition of the new element leads to a new frequency match of any of the characters, we increment the <script type=\"math/tex; mode=display\">count</script> by 1. If not, we keep the <script type=\"math/tex; mode=display\">count</script> intact. But, if a character whose frequency was the same earlier(prior to addition and removal) is added, it now leads to a frequency mismatch which is taken into account by decrementing the same <script type=\"math/tex; mode=display\">count</script> variable. If, after the shifting of the window, the <script type=\"math/tex; mode=display\">count</script> evaluates to 26, it means all the characters match in frequency totally. So, we return a True in that case immediately.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkInclusion</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s1map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">s2map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n            <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">26</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">26</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]++;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"n\">count</span><span class=\"o\">--;</span>\n            <span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]--;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">])</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s2map</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">s1map</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"n\">count</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">26</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l_1+(l_2-l_1))</script>. where <script type=\"math/tex; mode=display\">l_1</script> is the length of string <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> is the length of string <script type=\"math/tex; mode=display\">l_2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(115,'Assign Cookies',1,'Greedy',0,0,'<p></p><p>\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor g<sub>i</sub>, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s<sub>j</sub>. If s<sub>j</sub> &gt;= g<sub>i</sub>, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n</p><p><b>Note:</b><br/>\nYou may assume the greed factor is always positive. <br/>\nYou cannot assign more than one cookie to one child.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3], [1,1]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2], [1,2,3]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findContentChildren(vector<int>& g, vector<int>& s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findContentChildren(self, g, s):\r\n        """\r\n        :type g: List[int]\r\n        :type s: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findContentChildren(int* g, int gSize, int* s, int sSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindContentChildren(int[] g, int[] s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} g\r\n * @param {number[]} s\r\n * @return {number}\r\n */\r\nvar findContentChildren = function(g, s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} g\r\n# @param {Integer[]} s\r\n# @return {Integer}\r\ndef find_content_children(g, s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findContentChildren(_ g: [Int], _ s: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findContentChildren(g []int, s []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findContentChildren(g: Array[Int], s: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(116,'Isomorphic Strings',1,'Hash Table',0,0,'<p></p><p>Given two strings <b><i>s</i></b> and <b><i>t</i></b>, determine if they are isomorphic.</p><p>Two strings are isomorphic if the characters in <b><i>s</i></b> can be replaced to get <b><i>t</i></b>.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p><p>For example,<br/>\nGiven <code>\"egg\"</code>, <code>\"add\"</code>, return true.</p><p>Given <code>\"foo\"</code>, <code>\"bar\"</code>, return false.</p><p>Given <code>\"paper\"</code>, <code>\"title\"</code>, return true.</p><p><b>Note:</b><br/>\nYou may assume both <b><i>s</i></b> and <b><i>t</i></b> have the same length.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isIsomorphic(string s, string t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isIsomorphic(String s, String t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isIsomorphic(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isIsomorphic(char* s, char* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsIsomorphic(string s, string t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {boolean}\r\n */\r\nvar isIsomorphic = function(s, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} t\r\n# @return {Boolean}\r\ndef is_isomorphic(s, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isIsomorphic(_ s: String, _ t: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isIsomorphic(s string, t string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isIsomorphic(s: String, t: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(117,'Super Ugly Number',2,'Math,Heap',0,0,'<p></p><p>\n    Write a program to find the n<sup>th</sup> super ugly number.\n</p><p>\n    Super ugly numbers are positive numbers whose all prime factors are in the given prime list\n    <code>primes</code> of size <code>k</code>. For example, <code>[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]\n</code> is the sequence of the first 12 super ugly numbers given <code>primes</code>\n    = <code>[2, 7, 13, 19]</code> of size 4.\n</p><p>\n<b>Note:</b><br/>\n    (1) <code>1</code> is a super ugly number for any given <code>primes</code>.<br/>\n    (2) The given numbers in <code>primes</code> are in ascending order.<br/>\n    (3) 0 &lt; <code>k</code> ≤ 100, 0 &lt; <code>n</code> ≤ 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000.<br/>\n    (4) The n<sup>th</sup> super ugly number is guaranteed to fit in a 32-bit signed integer.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int nthSuperUglyNumber(int n, vector<int>& primes) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def nthSuperUglyNumber(self, n, primes):\r\n        """\r\n        :type n: int\r\n        :type primes: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int nthSuperUglyNumber(int n, int* primes, int primesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NthSuperUglyNumber(int n, int[] primes) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {number[]} primes\r\n * @return {number}\r\n */\r\nvar nthSuperUglyNumber = function(n, primes) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {Integer[]} primes\r\n# @return {Integer}\r\ndef nth_super_ugly_number(n, primes)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func nthSuperUglyNumber(_ n: Int, _ primes: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nthSuperUglyNumber(n int, primes []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nthSuperUglyNumber(n: Int, primes: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(118,'Is Subsequence',2,'Binary Search,Dynamic Programming,Greedy',0,0,'<p></p><p>\nGiven a string <b>s</b> and a string <b>t</b>, check if <b>s</b> is subsequence of <b>t</b>.\n</p><p>\nYou may assume that there is only lower case English letters in both <b>s</b> and <b>t</b>. <b>t</b> is potentially a very long (length ~= 500,000) string, and <b>s</b> is a short string (&lt;=100).\n</p><p>\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).\n</p><p><b>Example 1:</b><br/>\n<b>s</b> = <code>\"abc\"</code>, <b>t</b> = <code>\"ahbgdc\"</code>\n</p><p>\nReturn <code>true</code>.\n</p><p><b>Example 2:</b><br/>\n<b>s</b> = <code>\"axc\"</code>, <b>t</b> = <code>\"ahbgdc\"</code>\n</p><p>\nReturn <code>false</code>.\n</p><p><b>Follow up:</b><br/>\nIf there are lots of incoming S, say S1, S2, ... , Sk where k &gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isSubsequence(string s, string t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isSubsequence(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isSubsequence(char* s, char* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsSubsequence(string s, string t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {boolean}\r\n */\r\nvar isSubsequence = function(s, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} t\r\n# @return {Boolean}\r\ndef is_subsequence(s, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isSubsequence(_ s: String, _ t: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isSubsequence(s string, t string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(119,'Binary Tree Level Order Traversal',2,'Tree,Breadth-first Search',0,0,'<p></p><p>Given a binary tree, return the <i>level order</i> traversal of its nodes\' values. (ie, from left to right, level by level).</p><p>\nFor example:<br/>\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br/>\n</p><pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre><p>\nreturn its level order traversal as:<br/>\n</p><pre>\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> levelOrder(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def levelOrder(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[List[int]]\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** levelOrder(struct TreeNode* root, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<IList<int>> LevelOrder(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[][]}\r\n */\r\nvar levelOrder = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[][]}\r\ndef level_order(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func levelOrder(_ root: TreeNode?) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc levelOrder(root *TreeNode) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def levelOrder(root: TreeNode): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(120,'Edit Distance',3,'Dynamic Programming,String',0,0,'<p></p><p>\nGiven two words <i>word1</i> and <i>word2</i>, find the minimum number of steps required to convert <i>word1</i> to <i>word2</i>. (each operation is counted as 1 step.)\n</p><p>\nYou have the following 3 operations permitted on a word:\n</p><p>\na) Insert a character<br/>\nb) Delete a character<br/>\nc) Replace a character<br/>\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minDistance(string word1, string word2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minDistance(String word1, String word2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minDistance(self, word1, word2):\r\n        """\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minDistance(char* word1, char* word2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinDistance(string word1, string word2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} word1\r\n * @param {string} word2\r\n * @return {number}\r\n */\r\nvar minDistance = function(word1, word2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} word1\r\n# @param {String} word2\r\n# @return {Integer}\r\ndef min_distance(word1, word2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minDistance(word1 string, word2 string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(121,'Permutations II',2,'Backtracking',0,0,'<p></p><p>\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\n</p><p>\nFor example,<br/>\n<code>[1,1,2]</code> have the following unique permutations:<br/>\n</p><pre>\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def permuteUnique(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** permuteUnique(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> PermuteUnique(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar permuteUnique = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef permute_unique(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func permuteUnique(nums []int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(122,'Majority Element II',2,'Array',0,0,'<p></p><p>Given an integer array of size <i>n</i>, find all elements that appear more than <code>⌊ n/3 ⌋</code> times. The algorithm should run in linear time and in O(1) space.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> majorityElement(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def majorityElement(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* majorityElement(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> MajorityElement(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar majorityElement = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef majority_element(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func majorityElement(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func majorityElement(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def majorityElement(nums: Array[Int]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(123,'4Sum II',2,'Binary Search,Hash Table',0,0,'<p></p><p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -2<sup>28</sup> to 2<sup>28</sup> - 1 and the result is guaranteed to be at most 2<sup>31</sup> - 1.</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b>\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nThe two tuples are:\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def fourSumCount(self, A, B, C, D):\r\n        """\r\n        :type A: List[int]\r\n        :type B: List[int]\r\n        :type C: List[int]\r\n        :type D: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int fourSumCount(int* A, int ASize, int* B, int BSize, int* C, int CSize, int* D, int DSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FourSumCount(int[] A, int[] B, int[] C, int[] D) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} A\r\n * @param {number[]} B\r\n * @param {number[]} C\r\n * @param {number[]} D\r\n * @return {number}\r\n */\r\nvar fourSumCount = function(A, B, C, D) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} a\r\n# @param {Integer[]} b\r\n# @param {Integer[]} c\r\n# @param {Integer[]} d\r\n# @return {Integer}\r\ndef four_sum_count(a, b, c, d)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func fourSumCount(_ A: [Int], _ B: [Int], _ C: [Int], _ D: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fourSumCount(A []int, B []int, C []int, D []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def fourSumCount(A: Array[Int], B: Array[Int], C: Array[Int], D: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(124,'Perfect Rectangle',3,'',0,0,'<p></p><p>\nGiven N axis-aligned rectangles where N &gt; 0, determine if they all together form an exact cover of a rectangular region.\n</p><p>\nEach rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).\n</p><div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_perfect.gif\"/></div><p><b>Example 1:</b>\n</p><pre>\nrectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\nReturn true. All 5 rectangles together form an exact cover of a rectangular region.\n</pre><div style=\"clear:both\"></div><div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_separated.gif\"/></div><p><b>Example 2:</b>\n</p><pre>\nrectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\nReturn false. Because there is a gap between the two rectangular regions.\n</pre><div style=\"clear:both\"></div><div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_hole.gif\"/></div><p><b>Example 3:</b>\n</p><pre>\nrectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\nReturn false. Because there is a gap in the top center.\n</pre><div style=\"clear:both\"></div><div style=\"float:right\"><img src=\"https://leetcode.com/static/images/problemset/rectangle_intersect.gif\"/></div><p><b>Example 4:</b>\n</p><pre>\nrectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\nReturn false. Because two of the rectangles overlap with each other.\n</pre><div style=\"clear:both\"></div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isRectangleCover(int[][] rectangles) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isRectangleCover(self, rectangles):\r\n        """\r\n        :type rectangles: List[List[int]]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isRectangleCover(int** rectangles, int rectanglesRowSize, int rectanglesColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsRectangleCover(int[,] rectangles) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} rectangles\r\n * @return {boolean}\r\n */\r\nvar isRectangleCover = function(rectangles) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} rectangles\r\n# @return {Boolean}\r\ndef is_rectangle_cover(rectangles)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isRectangleCover(_ rectangles: [[Int]]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isRectangleCover(rectangles [][]int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isRectangleCover(rectangles: Array[Array[Int]]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(125,'Count Primes',1,'Hash Table,Math',0,0,'<p></p><p><b>Description:</b></p><p>Count the number of prime numbers less than a non-negative number, <b><i>n</i></b>.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int countPrimes(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countPrimes(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countPrimes(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countPrimes(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CountPrimes(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar countPrimes = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef count_primes(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countPrimes(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countPrimes(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countPrimes(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(126,'Design Twitter',2,'Hash Table,Heap,Design',0,0,'<p></p><p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user\'s news feed. Your design should support the following methods:</p><p>\n</p><ol>\n<li><b>postTweet(userId, tweetId)</b>: Compose a new tweet.</li>\n<li><b>getNewsFeed(userId)</b>: Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</li>\n<li><b>follow(followerId, followeeId)</b>: Follower follows a followee.</li>\n<li><b>unfollow(followerId, followeeId)</b>: Follower unfollows a followee.</li>\n</ol><p><b>Example:</b>\n</p><pre>\nTwitter twitter = new Twitter();\n\n// User 1 posts a new tweet (id = 5).\ntwitter.postTweet(1, 5);\n\n// User 1\'s news feed should return a list with 1 tweet id -&gt; [5].\ntwitter.getNewsFeed(1);\n\n// User 1 follows user 2.\ntwitter.follow(1, 2);\n\n// User 2 posts a new tweet (id = 6).\ntwitter.postTweet(2, 6);\n\n// User 1\'s news feed should return a list with 2 tweet ids -&gt; [6, 5].\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.getNewsFeed(1);\n\n// User 1 unfollows user 2.\ntwitter.unfollow(1, 2);\n\n// User 1\'s news feed should return a list with 1 tweet id -&gt; [5],\n// since user 1 is no longer following user 2.\ntwitter.getNewsFeed(1);\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Twitter {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    Twitter() {\r\n        \r\n    }\r\n    \r\n    /** Compose a new tweet. */\r\n    void postTweet(int userId, int tweetId) {\r\n        \r\n    }\r\n    \r\n    /** Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\r\n    vector<int> getNewsFeed(int userId) {\r\n        \r\n    }\r\n    \r\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\r\n    void follow(int followerId, int followeeId) {\r\n        \r\n    }\r\n    \r\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\r\n    void unfollow(int followerId, int followeeId) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Twitter object will be instantiated and called as such:\r\n * Twitter obj = new Twitter();\r\n * obj.postTweet(userId,tweetId);\r\n * vector<int> param_2 = obj.getNewsFeed(userId);\r\n * obj.follow(followerId,followeeId);\r\n * obj.unfollow(followerId,followeeId);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public List<Integer> getNewsFeed(int userId) {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void follow(int followerId, int followeeId) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void unfollow(int followerId, int followeeId) {\n        \n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List<Integer> param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Twitter(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def postTweet(self, userId, tweetId):\r\n        """\r\n        Compose a new tweet.\r\n        :type userId: int\r\n        :type tweetId: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def getNewsFeed(self, userId):\r\n        """\r\n        Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\r\n        :type userId: int\r\n        :rtype: List[int]\r\n        """\r\n        \r\n\r\n    def follow(self, followerId, followeeId):\r\n        """\r\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\r\n        :type followerId: int\r\n        :type followeeId: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def unfollow(self, followerId, followeeId):\r\n        """\r\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\r\n        :type followerId: int\r\n        :type followeeId: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n\r\n# Your Twitter object will be instantiated and called as such:\r\n# obj = Twitter()\r\n# obj.postTweet(userId,tweetId)\r\n# param_2 = obj.getNewsFeed(userId)\r\n# obj.follow(followerId,followeeId)\r\n# obj.unfollow(followerId,followeeId)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} Twitter;\n\n/** Initialize your data structure here. */\nTwitter* twitterCreate() {\n    \n}\n\n/** Compose a new tweet. */\nvoid twitterPostTweet(Twitter* obj, int userId, int tweetId) {\n    \n}\n\n/** Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\nint* twitterGetNewsFeed(Twitter* obj, int userId, int *returnSize) {\n    \n}\n\n/** Follower follows a followee. If the operation is invalid, it should be a no-op. */\nvoid twitterFollow(Twitter* obj, int followerId, int followeeId) {\n    \n}\n\n/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\nvoid twitterUnfollow(Twitter* obj, int followerId, int followeeId) {\n    \n}\n\nvoid twitterFree(Twitter* obj) {\n    \n}\n\n/**\n * Your Twitter struct will be instantiated and called as such:\n * struct Twitter* obj = twitterCreate();\n * twitterPostTweet(obj, userId, tweetId);\n * int* param_2 = twitterGetNewsFeed(obj, userId);\n * twitterFollow(obj, followerId, followeeId);\n * twitterUnfollow(obj, followerId, followeeId);\n * twitterFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Twitter {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Twitter() {\r\n        \r\n    }\r\n    \r\n    /** Compose a new tweet. */\r\n    public void PostTweet(int userId, int tweetId) {\r\n        \r\n    }\r\n    \r\n    /** Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\r\n    public IList<int> GetNewsFeed(int userId) {\r\n        \r\n    }\r\n    \r\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\r\n    public void Follow(int followerId, int followeeId) {\r\n        \r\n    }\r\n    \r\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\r\n    public void Unfollow(int followerId, int followeeId) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Twitter object will be instantiated and called as such:\r\n * Twitter obj = new Twitter();\r\n * obj.PostTweet(userId,tweetId);\r\n * IList<int> param_2 = obj.GetNewsFeed(userId);\r\n * obj.Follow(followerId,followeeId);\r\n * obj.Unfollow(followerId,followeeId);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar Twitter = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Compose a new tweet. \r\n * @param {number} userId \r\n * @param {number} tweetId\r\n * @return {void}\r\n */\r\nTwitter.prototype.postTweet = function(userId, tweetId) {\r\n    \r\n};\r\n\r\n/**\r\n * Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. \r\n * @param {number} userId\r\n * @return {number[]}\r\n */\r\nTwitter.prototype.getNewsFeed = function(userId) {\r\n    \r\n};\r\n\r\n/**\r\n * Follower follows a followee. If the operation is invalid, it should be a no-op. \r\n * @param {number} followerId \r\n * @param {number} followeeId\r\n * @return {void}\r\n */\r\nTwitter.prototype.follow = function(followerId, followeeId) {\r\n    \r\n};\r\n\r\n/**\r\n * Follower unfollows a followee. If the operation is invalid, it should be a no-op. \r\n * @param {number} followerId \r\n * @param {number} followeeId\r\n * @return {void}\r\n */\r\nTwitter.prototype.unfollow = function(followerId, followeeId) {\r\n    \r\n};\r\n\r\n/** \r\n * Your Twitter object will be instantiated and called as such:\r\n * var obj = Object.create(Twitter).createNew()\r\n * obj.postTweet(userId,tweetId)\r\n * var param_2 = obj.getNewsFeed(userId)\r\n * obj.follow(followerId,followeeId)\r\n * obj.unfollow(followerId,followeeId)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Twitter\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Compose a new tweet.\r\n    :type userId: Integer\r\n    :type tweetId: Integer\r\n    :rtype: Void\r\n=end\r\n    def post_tweet(userId, tweetId)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\r\n    :type userId: Integer\r\n    :rtype: Integer[]\r\n=end\r\n    def get_news_feed(userId)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Follower follows a followee. If the operation is invalid, it should be a no-op.\r\n    :type followerId: Integer\r\n    :type followeeId: Integer\r\n    :rtype: Void\r\n=end\r\n    def follow(followerId, followeeId)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Follower unfollows a followee. If the operation is invalid, it should be a no-op.\r\n    :type followerId: Integer\r\n    :type followeeId: Integer\r\n    :rtype: Void\r\n=end\r\n    def unfollow(followerId, followeeId)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Twitter object will be instantiated and called as such:\r\n# obj = Twitter.new()\r\n# obj.post_tweet(userId,tweetId)\r\n# param_2 = obj.get_news_feed(userId)\r\n# obj.follow(followerId,followeeId)\r\n# obj.unfollow(followerId,followeeId)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Twitter struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() Twitter {\r\n    \r\n}\r\n\r\n\r\n/** Compose a new tweet. */\r\nfunc (this *Twitter) PostTweet(userId int, tweetId int)  {\r\n    \r\n}\r\n\r\n\r\n/** Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\r\nfunc (this *Twitter) GetNewsFeed(userId int) []int {\r\n    \r\n}\r\n\r\n\r\n/** Follower follows a followee. If the operation is invalid, it should be a no-op. */\r\nfunc (this *Twitter) Follow(followerId int, followeeId int)  {\r\n    \r\n}\r\n\r\n\r\n/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\r\nfunc (this *Twitter) Unfollow(followerId int, followeeId int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Twitter object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.PostTweet(userId,tweetId);\r\n * param_2 := obj.GetNewsFeed(userId);\r\n * obj.Follow(followerId,followeeId);\r\n * obj.Unfollow(followerId,followeeId);\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class Twitter() {\n    \n    /** Compose a new tweet. */\n    def postTweet(int userId, int tweetId) {\n\n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    def getNewsFeed(int userId) : List[Int] = {\n\n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    def follow(int followerId, int followeeId) {\n\n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    def unfollow(int followerId, int followeeId) {\n\n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List[Int] param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */\" }]',NULL,NULL,1,'none','none','none'),(127,'Word Ladder II',3,'Array,Backtracking,Breadth-first Search,String',0,0,'<p></p><p>\nGiven two words (<i>beginWord</i> and <i>endWord</i>), and a dictionary\'s word list, find all shortest transformation sequence(s) from <i>beginWord</i> to <i>endWord</i>, such that:\n</p><ol>\n<li>Only one letter can be changed at a time</li>\n<li>Each transformed word must exist in the word list. Note that <i>beginWord</i> is <i>not</i> a transformed word.</li>\n</ol><p>\nFor example,\n</p><p>\nGiven:<br/>\n<i>beginWord</i> = <code>\"hit\"</code><br/>\n<i>endWord</i> = <code>\"cog\"</code><br/>\n<i>wordList</i> = <code>[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]</code><br/>\n</p><p>\nReturn<br/>\n</p><pre>\n  [\n    [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n    [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n  ]\n</pre><p>\n<b>Note:</b><br/>\n</p><ul>\n<li>Return an empty list if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume <i>beginWord</i> and <i>endWord</i> are non-empty and are not the same.</li>\n</ul><p>\n<b><font color=\"red\">UPDATE (2017/1/20):</font></b><br/>\nThe <i>wordList</i> parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findLadders(self, beginWord, endWord, wordList):\r\n        """\r\n        :type beginWord: str\r\n        :type endWord: str\r\n        :type wordList: List[str]\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** findLadders(char* beginWord, char* endWord, char** wordList, int wordListSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<string>> FindLadders(string beginWord, string endWord, IList<string> wordList) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} beginWord\r\n * @param {string} endWord\r\n * @param {string[]} wordList\r\n * @return {string[][]}\r\n */\r\nvar findLadders = function(beginWord, endWord, wordList) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} begin_word\r\n# @param {String} end_word\r\n# @param {String[]} word_list\r\n# @return {String[][]}\r\ndef find_ladders(begin_word, end_word, word_list)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findLadders(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> [[String]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findLadders(beginWord string, endWord string, wordList []string) [][]string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findLadders(beginWord: String, endWord: String, wordList: List[String]): List[List[String]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(128,'Symmetric Tree',1,'Tree,Depth-first Search,Breadth-first Search',0,0,'<p></p><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p><p>\nFor example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:\n</p><pre>\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre><p>\nBut the following <code>[1,2,2,null,3,null,3]</code>  is not:<br/>\n</p><pre>\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre><p>\n<b>Note:</b><br/>\nBonus points if you could solve it both recursively and iteratively.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isSymmetric(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isSymmetric(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isSymmetric(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsSymmetric(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {boolean}\r\n */\r\nvar isSymmetric = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Boolean}\r\ndef is_symmetric(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSymmetric(_ root: TreeNode?) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc isSymmetric(root *TreeNode) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSymmetric(root: TreeNode): Boolean = {\n        \n    }\n}\" }]','<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-recursive-accepted\">Approach #1 (Recursive) [Accepted]</h4>\n<p>A tree is symmetric if the left subtree is a mirror reflection of the right subtree.</p>\n<p align=\"center\"><img alt=\"Push an element in stack\" src=\"https://leetcode.com/media/original_images/101_Symmetric.png\" width=\"200px\" /></p>\n<p>Therefore, the question is: when are two trees a mirror reflection of each other?</p>\n<p>Two trees are a mirror reflection of each other if:</p>\n<ol>\n<li>Their two roots have the same value.</li>\n<li>The right subtree of each tree is a mirror reflection of the left subtree of the other tree.</li>\n</ol>\n<p align=\"center\"><img alt=\"Push an element in stack\" src=\"https://leetcode.com/media/original_images/101_Symmetric_Mirror.png\" width=\"400px\" /></p>\n<p>This is like a person looking at a mirror. The reflection in the mirror has the same head, but the reflection\'s right arm corresponds to the actual person\'s left arm, and vice versa.</p>\n<p>The explanation above translates naturally to a recursive function as follows.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSymmetric</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">isMirror</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isMirror</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t1</span><span class=\"o\">,</span> <span class=\"n\">TreeNode</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">t2</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">t2</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">==</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">)</span>\n        <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isMirror</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)</span>\n        <span class=\"o\">&amp;&amp;</span> <span class=\"n\">isMirror</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Because we traverse the entire input tree once, the total run time is <script type=\"math/tex; mode=display\">O(n)</script>, where <script type=\"math/tex; mode=display\">n</script> is the total number of nodes in the tree.</p>\n<p>The number of recursive calls is bound by the height of the tree. In the worst case, the tree is linear and the height is in <script type=\"math/tex; mode=display\">O(n)</script>. Therefore, space complexity due to recursive calls on the stack is <script type=\"math/tex; mode=display\">O(n)</script> in the worst case.</p>\n<hr />\n<h4 id=\"approach-2-iterative-accepted\">Approach #2 (Iterative) [Accepted]</h4>\n<p>Instead of recursion, we can also use iteration with the aid of a queue. Each two consecutive nodes in the queue should be equal, and their subtrees a mirror of each other. Initially, the queue contains <code>root</code> and <code>root</code>. Then the algorithm works similarly to BFS, with some key differences. Each time, two nodes are extracted and their values compared. Then, the right and left children of the two nodes are inserted in the queue in opposite order. The algorithm is done when either the queue is empty, or we detect that the tree is not symmetric (i.e. we pull out two consecutive nodes from the queue that are unequal).</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSymmetric</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n    <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">t2</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">continue</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">t2</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">!=</span> <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Because we traverse the entire input tree once, the total run time is <script type=\"math/tex; mode=display\">O(n)</script>, where <script type=\"math/tex; mode=display\">n</script> is the total number of nodes in the tree.</p>\n<p>There is additional space required for the search queue. In the worst case, we have to insert <script type=\"math/tex; mode=display\">O(n)</script> nodes in the queue. Therefore, space complexity is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n<p>Analysis written by: @noran.</p>',NULL,1,'none','none','none'),(129,'Remove Duplicates from Sorted Array',1,'Array,Two Pointers',0,0,'<p></p><p>\nGiven a sorted array, remove the duplicates in place such that each element appear only <i>once</i> and return the new length.</p><p>\nDo not allocate extra space for another array, you must do this in place with constant memory.\n</p><p>\nFor example,<br/>\nGiven input array <i>nums</i> = <code>[1,1,2]</code>,\n</p><p>\nYour function should return length = <code>2</code>, with the first two elements of <i>nums</i> being <code>1</code> and <code>2</code> respectively. It doesn\'t matter what you leave beyond the new length.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int removeDuplicates(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def removeDuplicates(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int removeDuplicates(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int RemoveDuplicates(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar removeDuplicates = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef remove_duplicates(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeDuplicates(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-two-pointers-accepted\">Approach #1 (Two Pointers) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-two-pointers-accepted\">Approach #1 (Two Pointers) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Since the array is already sorted, we can keep two pointers <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script>, where <script type=\"math/tex; mode=display\">i</script> is the slow-runner while <script type=\"math/tex; mode=display\">j</script> is the fast-runner. As long as <script type=\"math/tex; mode=display\">nums[i] = nums[j]</script>, we increment <script type=\"math/tex; mode=display\">j</script> to skip the duplicate.</p>\n<p>When we encounter <script type=\"math/tex; mode=display\">nums[j] \\neq nums[i]</script>, the duplicate run has ended so we must copy its value to <script type=\"math/tex; mode=display\">nums[i + 1]</script>. <script type=\"math/tex; mode=display\">i</script> is then incremented and we repeat the same process again until <script type=\"math/tex; mode=display\">j</script> reaches the end of array.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">removeDuplicates</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complextiy : <script type=\"math/tex; mode=display\">O(n)</script>.\nAssume that <script type=\"math/tex; mode=display\">n</script> is the length of array. Each of <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> traverses at most <script type=\"math/tex; mode=display\">n</script> steps.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>',NULL,1,'none','none','none'),(130,'Burst Balloons',3,'Dynamic Programming,Divide and Conquer',0,0,'<p></p><p>\n    Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a\n    number on it represented by array <code>nums</code>.\n\n    You are asked to burst all the balloons. If the you burst\n    balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code>\n    and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code>\n    then becomes adjacent.\n</p><p>\n    Find the maximum coins you can collect by bursting the balloons wisely.\n</p><p>\n<b>Note:</b> <br/>\n    (1) You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.<br/>\n    (2) 0 ≤ <code>n</code> ≤ 500, 0 ≤ <code>nums[i]</code> ≤ 100\n</p><p>\n<b>Example:</b>\n</p><p>\n    Given <code>[3, 1, 5, 8]</code>\n</p><p>\n    Return <code>167</code>\n</p><pre>\n    nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\n   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxCoins(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxCoins(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxCoins(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxCoins(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxCoins(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxCoins = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_coins(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxCoins(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxCoins(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxCoins(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(131,'Longest Repeating Character Replacement',2,'',0,0,'<p></p><p>Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most <i>k</i> times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.</p><p><b>Note:</b><br/>\nBoth the string\'s length and <i>k</i> will not exceed 10<sup>4</sup>.\n</p><p>\n<b>Example 1:</b>\n</p><pre>\n<b>Input:</b>\ns = \"ABAB\", k = 2\n\n<b>Output:</b>\n4\n\n<b>Explanation:</b>\nReplace the two \'A\'s with two \'B\'s or vice versa.\n</pre><p>\n<b>Example 2:</b>\n</p><pre>\n<b>Input:</b>\ns = \"AABABBA\", k = 1\n\n<b>Output:</b>\n4\n\n<b>Explanation:</b>\nReplace the one \'A\' in the middle with \'B\' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int characterReplacement(string s, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int characterReplacement(String s, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def characterReplacement(self, s, k):\r\n        """\r\n        :type s: str\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int characterReplacement(char* s, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CharacterReplacement(string s, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar characterReplacement = function(s, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef character_replacement(s, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func characterReplacement(_ s: String, _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func characterReplacement(s string, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def characterReplacement(s: String, k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(132,'Simplify Path',2,'Stack,String',0,0,'<p></p><p>Given an absolute path for a file (Unix-style), simplify it.</p><p>For example,<br/>\n<b>path</b> = <code>\"/home/\"</code>, =&gt; <code>\"/home\"</code><br/>\n<b>path</b> = <code>\"/a/./b/../../c/\"</code>, =&gt; <code>\"/c\"</code><br/>\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show corner cases.</a></p><div class=\"spoilers\"><b>Corner Cases:</b>\n<p>\n</p><ul>\n<li>Did you consider the case where <b>path</b> = <code>\"/../\"</code>?<br/>\nIn this case, you should return <code>\"/\"</code>.</li>\n<li>Another corner case is the path might contain multiple slashes <code>\'/\'</code> together, such as <code>\"/home//foo/\"</code>.<br/>\nIn this case, you should ignore redundant slashes and return <code>\"/home/foo\"</code>.</li>\n</ul></div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string simplifyPath(string path) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def simplifyPath(self, path):\r\n        """\r\n        :type path: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* simplifyPath(char* path) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string SimplifyPath(string path) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} path\r\n * @return {string}\r\n */\r\nvar simplifyPath = function(path) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} path\r\n# @return {String}\r\ndef simplify_path(path)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func simplifyPath(_ path: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func simplifyPath(path string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(133,'Permutations',2,'Backtracking',0,0,'<p></p><p>\nGiven a collection of <b>distinct</b> numbers, return all possible permutations.\n</p><p>\nFor example,<br/>\n<code>[1,2,3]</code> have the following permutations:<br/>\n</p><pre>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> permute(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def permute(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** permute(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> Permute(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar permute = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef permute(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func permute(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func permute(nums []int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(134,'Summary Ranges',2,'Array',0,0,'<p></p><p>\nGiven a sorted integer array without duplicates, return the summary of its ranges.</p><p>\nFor example, given <code>[0,1,2,4,5,7]</code>, return <code>[\"0-&gt;2\",\"4-&gt;5\",\"7\"].</code>\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> summaryRanges(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> summaryRanges(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def summaryRanges(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** summaryRanges(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> SummaryRanges(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {string[]}\r\n */\r\nvar summaryRanges = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {String[]}\r\ndef summary_ranges(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func summaryRanges(_ nums: [Int]) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func summaryRanges(nums []int) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def summaryRanges(nums: Array[Int]): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(135,'Reverse Nodes in k-Group',3,'Linked List',0,0,'<p></p><p>\nGiven a linked list, reverse the nodes of a linked list <i>k</i> at a time and return its modified list.\n</p><p>\n<i>k</i> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <i>k</i> then left-out nodes in the end should remain as it is.</p><p>You may not alter the values in the nodes, only nodes itself may be changed.</p><p>Only constant memory is allowed.</p><p>\nFor example,<br/>\nGiven this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>\n</p><p>\nFor <i>k</i> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code>\n</p><p>\nFor <i>k</i> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code>\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* reverseKGroup(ListNode* head, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def reverseKGroup(self, head, k):\r\n        """\r\n        :type head: ListNode\r\n        :type k: int\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* reverseKGroup(struct ListNode* head, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode ReverseKGroup(ListNode head, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} k\r\n * @return {ListNode}\r\n */\r\nvar reverseKGroup = function(head, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @param {Integer} k\r\n# @return {ListNode}\r\ndef reverse_k_group(head, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func reverseKGroup(_ head: ListNode?, _ k: Int) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(136,'Russian Doll Envelopes',3,'Binary Search,Dynamic Programming',0,0,'<p></p><p>You have a number of envelopes with widths and heights given as a pair of integers <code>(w, h)</code>. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p><p>\nWhat is the maximum number of envelopes can you Russian doll? (put one inside other)\n</p><p><b>Example:</b><br/>\nGiven envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>, the maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxEnvelopes(vector<pair<int, int>>& envelopes) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxEnvelopes(self, envelopes):\r\n        """\r\n        :type envelopes: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxEnvelopes(int** envelopes, int envelopesRowSize, int envelopesColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxEnvelopes(int[,] envelopes) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} envelopes\r\n * @return {number}\r\n */\r\nvar maxEnvelopes = function(envelopes) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} envelopes\r\n# @return {Integer}\r\ndef max_envelopes(envelopes)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxEnvelopes(_ envelopes: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxEnvelopes(envelopes [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxEnvelopes(envelopes: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(137,'Remove Linked List Elements',1,'Linked List',0,0,'<p></p><p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p><p>\n<b>Example</b><br/>\n<i><b>Given:</b></i> 1 --&gt; 2 --&gt; 6 --&gt; 3 --&gt; 4 --&gt; 5 --&gt; 6,  <b><i>val</i></b> = 6<br/>\n<i><b>Return:</b></i> 1 --&gt; 2 --&gt; 3 --&gt; 4 --&gt; 5\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* removeElements(ListNode* head, int val) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def removeElements(self, head, val):\r\n        """\r\n        :type head: ListNode\r\n        :type val: int\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* removeElements(struct ListNode* head, int val) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode RemoveElements(ListNode head, int val) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} val\r\n * @return {ListNode}\r\n */\r\nvar removeElements = function(head, val) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @param {Integer} val\r\n# @return {ListNode}\r\ndef remove_elements(head, val)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func removeElements(_ head: ListNode?, _ val: Int) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc removeElements(head *ListNode, val int) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeElements(head: ListNode, val: Int): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(138,'Same Tree',1,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven two binary trees, write a function to check if they are equal or not.\n</p><p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isSameTree(TreeNode* p, TreeNode* q) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isSameTree(self, p, q):\r\n        """\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isSameTree(struct TreeNode* p, struct TreeNode* q) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsSameTree(TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} p\r\n * @param {TreeNode} q\r\n * @return {boolean}\r\n */\r\nvar isSameTree = function(p, q) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} p\r\n# @param {TreeNode} q\r\n# @return {Boolean}\r\ndef is_same_tree(p, q)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(139,'Valid Palindrome',1,'Two Pointers,String',0,0,'<p></p><p>\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n</p><p>\nFor example,<br/>\n<code>\"A man, a plan, a canal: Panama\"</code> is a palindrome.<br/>\n<code>\"race a car\"</code> is <i>not</i> a palindrome.\n</p><p>\n<b>Note:</b><br/>\nHave you consider that the string might be empty? This is a good question to ask during an interview.</p><p>\nFor the purpose of this problem, we define empty string as valid palindrome.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isPalindrome(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isPalindrome(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPalindrome(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsPalindrome(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Boolean}\r\ndef is_palindrome(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPalindrome(s string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(140,'Minimum Moves to Equal Array Elements',1,'Math',0,0,'<p></p><p>Given a <b>non-empty</b> integer array of size <i>n</i>, find the minimum number of moves required to make all array elements equal, where a move is incrementing <i>n</i> - 1 elements by 1.</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b>\n[1,2,3]\n\n<b>Output:</b>\n3\n\n<b>Explanation:</b>\nOnly three moves are needed (remember each move increments two elements):\n\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minMoves(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minMoves(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minMoves(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minMoves(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinMoves(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar minMoves = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef min_moves(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minMoves(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minMoves(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minMoves(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(141,'Elimination Game',2,'',0,0,'<p></p><p>\nThere is a list of sorted integers from 1 to <i>n</i>. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p><p>Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.</p><p>We keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p><p>Find the last number that remains starting with a list of length <i>n</i>.</p><p><b>Example:</b>\n</p><pre>\nInput:\nn = 9,\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\n2 <u>4</u> 6 <u>8</u>\n<u>2</u> 6\n6\n\nOutput:\n6\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int lastRemaining(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int lastRemaining(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def lastRemaining(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int lastRemaining(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LastRemaining(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar lastRemaining = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef last_remaining(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func lastRemaining(_ n: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lastRemaining(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def lastRemaining(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(142,'Minimum Height Trees',2,'Breadth-first Search,Graph',0,0,'<p></p><p>\n    For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs).\n    Given such a graph, write a function to find all the MHTs and return a list of their root labels.\n</p><p>\n<b>Format</b><br/>\n    The graph contains <code>n</code> nodes which are labeled from <code>0</code> to <code>n - 1</code>.\n    You will be given the number <code>n</code> and a list of undirected <code>edges</code> (each edge is a pair of labels).\n</p><p> \nYou can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are\n    undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in\n    <code>edges</code>.\n</p><p>\n<b>Example 1:</b>\n</p><p>\n    Given <code>n = 4</code>, <code>edges = [[1, 0], [1, 2], [1, 3]]</code>\n</p><pre>\n        0\n        |\n        1\n       / \\\n      2   3\n</pre><p>\n    return <code> [1]</code>\n</p><p>\n<b>Example 2:</b>\n</p><p>\n    Given <code>n = 6</code>, <code>edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code>\n</p><pre>\n     0  1  2\n      \\ | /\n        3\n        |\n        4\n        |\n        5\n</pre><p>\n    return <code> [3, 4]</code>\n</p><p>\n<b>Note</b>:\n</p><p>\n    (1) According to the <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">definition\n    of tree on Wikipedia</a>: “a tree is an undirected graph in which any two vertices are connected by\n    <i>exactly</i> one path. In other words, any connected graph without simple cycles is a tree.”\n</p><p>\n    (2) The height of a rooted tree is the number of edges on the longest downward path between the root and a\n    leaf.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMinHeightTrees(self, n, edges):\r\n        """\r\n        :type n: int\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findMinHeightTrees(int n, int** edges, int edgesRowSize, int edgesColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> FindMinHeightTrees(int n, int[,] edges) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {number[][]} edges\r\n * @return {number[]}\r\n */\r\nvar findMinHeightTrees = function(n, edges) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {Integer[][]} edges\r\n# @return {Integer[]}\r\ndef find_min_height_trees(n, edges)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMinHeightTrees(_ n: Int, _ edges: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMinHeightTrees(n int, edges [][]int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMinHeightTrees(n: Int, edges: Array[Array[Int]]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(143,'Reconstruct Original Digits from English',2,'Math',0,0,'<p></p><p>Given a <b>non-empty</b> string containing an out-of-order English representation of digits <code>0-9</code>, output the digits in ascending order.</p><p><b>Note:</b><br/>\n</p><ol>\n<li>Input contains only lowercase English letters.</li>\n<li>Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as \"abc\" or \"zerone\" are not permitted.</li>\n<li>Input length is less than 50,000.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\nInput: \"owoztneoer\"\n\nOutput: \"012\"\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\nInput: \"fviefuro\"\n\nOutput: \"45\"\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string originalDigits(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String originalDigits(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def originalDigits(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* originalDigits(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string OriginalDigits(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar originalDigits = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef original_digits(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func originalDigits(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func originalDigits(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def originalDigits(s: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(144,'Jump Game II',3,'Array,Greedy',0,0,'<p></p><p>\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n</p><p>\nEach element in the array represents your maximum jump length at that position. \n</p><p>\nYour goal is to reach the last index in the minimum number of jumps.\n</p><p>\nFor example:<br/>\nGiven array A = <code>[2,3,1,1,4]</code>\n</p><p>\nThe minimum number of jumps to reach the last index is <code>2</code>. (Jump <code>1</code> step from index 0 to 1, then <code>3</code> steps to the last index.)\n</p><p>\n<b>Note:</b><br/>\nYou can assume that you can always reach the last index.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int jump(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int jump(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def jump(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int jump(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Jump(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar jump = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef jump(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func jump(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func jump(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def jump(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(145,'Climbing Stairs',1,'Dynamic Programming',0,0,'<p></p><p>You are climbing a stair case. It takes <i>n</i> steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n</p><p><b>Note:</b> Given <i>n</i> will be a positive integer.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int climbStairs(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def climbStairs(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int climbStairs(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ClimbStairs(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar climbStairs = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef climb_stairs(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func climbStairs(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func climbStairs(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-recursion-with-memorization-accepted\">Approach #2 Recursion with memorization [Accepted]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-4-fibonacci-number-accepted\">Approach #4 Fibonacci Number [Accepted]:</a></li>\n<li><a href=\"#approach-5-binets-method-accepted\">Approach #5 Binets Method [Accepted]:</a></li>\n<li><a href=\"#approach-6-fibonacci-formula-accepted\">Approach #6 Fibonacci Formula [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>You are climbing a stair case. It takes n steps to reach to the top.</p>\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this brute force approach we take all possible step combinations i.e. 1 and 2, at every step. At every step we are calling the function <script type=\"math/tex; mode=display\">climbStairs</script> for step <script type=\"math/tex; mode=display\">1</script> and <script type=\"math/tex; mode=display\">2</script>, and return the sum of returned values of both functions.</p>\n<p>\n<script type=\"math/tex; mode=display\">climbStairs(i,n)=(i + 1, n) + climbStairs(i + 2, n)</script>, where <script type=\"math/tex; mode=display\">i</script> defines the current step and <script type=\"math/tex; mode=display\">n</script> defines the destination step.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">climb_Stairs</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climb_Stairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">climb_Stairs</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">climb_Stairs</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. Size of recursion tree will be <script type=\"math/tex; mode=display\">2^n</script>.</p>\n<p>Recursion tree for n=5 would be like this:</p>\n<p><img alt=\"Climbing_Stairs\" src=\"../Figures/70_Climbing_Stairs_rt.jpg\" /></p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursion-with-memorization-accepted\">Approach #2 Recursion with memorization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the previous approach we are redundantly calculating the result for every step. Instead, we can store the result at each step in <script type=\"math/tex; mode=display\">memo</script> array and directly returning the result from the memo array whenever that function is called again.</p>\n<p>In this way we are pruning recursion tree with the help of <script type=\"math/tex; mode=display\">memo</script> array and reducing the size of recursion tree upto <script type=\"math/tex; mode=display\">n</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">memo</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">return</span> <span class=\"n\">climb_Stairs</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climb_Stairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">memo</span><span class=\"o\">[])</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">climb_Stairs</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">climb_Stairs</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Size of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>As we can see this problem can be broken into subproblems, and it contains the optimal substructure property i.e. its optimal solution can be constructed efficiently from optimal solutions of its subproblems, we can use dynamic programming to solve this problem.</p>\n<p>One can reach <script type=\"math/tex; mode=display\">i^{th}</script> step in one of the two ways:</p>\n<ol>\n<li>\n<p>Taking a single step from <script type=\"math/tex; mode=display\">(i-1)^{th}</script> step.</p>\n</li>\n<li>\n<p>Taking a step of <script type=\"math/tex; mode=display\">2</script> from <script type=\"math/tex; mode=display\">(i-2)^{th}</script> step.</p>\n</li>\n</ol>\n<p>So, the total number of ways to reach <script type=\"math/tex; mode=display\">i^{th}</script> is equal to sum of ways of reaching <script type=\"math/tex; mode=display\">(i-1)^{th}</script> step and ways of reaching <script type=\"math/tex; mode=display\">(i-2)^{th}</script> step.</p>\n<p>Let <script type=\"math/tex; mode=display\">dp[i]</script> denotes the number of ways to reach on <script type=\"math/tex; mode=display\">i^{th}</script> step.</p>\n<p>\n<script type=\"math/tex; mode=display\">dp[i]=dp[i-1]+dp[i-2]</script>\n</p>\n<p>Example:</p>\n<!--![Climbing_Stairs](../Figures/70_Climbing_Stairs.gif)-->\n\n<p>!?!../Documents/70_Climbing_Stairs.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single loop upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-fibonacci-number-accepted\">Approach #4 Fibonacci Number [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the above approach we have used <script type=\"math/tex; mode=display\">dp</script> array where <script type=\"math/tex; mode=display\">dp[i]=dp[i-1]+dp[i-2]</script>. It can be easily analysed that <script type=\"math/tex; mode=display\">dp[i]</script> is nothing but <script type=\"math/tex; mode=display\">i^{th}</script> fibonacci number.</p>\n<p>\n<script type=\"math/tex; mode=display\">Fib(n)=Fib(n-1)+Fib(n-2)</script>\n</p>\n<p>Now we just have to find <script type=\"math/tex; mode=display\">n^{th}</script> number of the fibonacci series having <script type=\"math/tex; mode=display\">1</script> and <script type=\"math/tex; mode=display\">2</script> their first and second term respectively i.e. <script type=\"math/tex; mode=display\">Fib(1)=1</script> and <script type=\"math/tex; mode=display\">Fib(2)=2</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">third</span> <span class=\"o\">=</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span><span class=\"o\">;</span>\n            <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">second</span><span class=\"o\">;</span>\n            <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">third</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">second</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single loop upto <script type=\"math/tex; mode=display\">n</script> is required to calculate <script type=\"math/tex; mode=display\">n^{th}</script> fibonacci number.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-binets-method-accepted\">Approach #5 Binets Method [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>This is an interesting solution which uses matrix multiplication to obtain the <script type=\"math/tex; mode=display\">n^{th}</script> Fibonacci Number. The matrix takes the following form:</p>\n<p>\n<script type=\"math/tex; mode=display\">\\left[ {\\begin{array}{cc} F_{n+1} & F_n \\\\  F_n & F_{n-1}     \\end{array} } \\right] = \\left[ {\\begin{array}{cc} 1 & 1 \\\\  1 & 0     \\end{array} } \\right]</script>.</p>\n<p>Let\'s say <script type=\"math/tex; mode=display\">Q=\\left[ {\\begin{array}{cc} F_{n+1} & F_n \\\\  F_n & F_{n-1}     \\end{array} } \\right]</script>\n</p>\n<p>As per the method, the <script type=\"math/tex; mode=display\">n^{th}</script> Fibonacci Number is given by <script type=\"math/tex; mode=display\">Q^{n-1}[0,0]</script>\n</p>\n<p>Let\'s look at the proof of this method.</p>\n<p>We can prove this method using Mathematical Induction. We know, this matrix gives the correct result for the <script type=\"math/tex; mode=display\">3^{rd}</script> term(base case). Since <script type=\"math/tex; mode=display\">Q^2 = \\left[ {\\begin{array}{cc} 2 & 1 \\\\  1 & 1     \\end{array} } \\right]</script>. This proves that the base case holds.</p>\n<p>Assume that this method holds for finding the <script type=\"math/tex; mode=display\">n^{th}</script> Fibonacci Number i.e. <script type=\"math/tex; mode=display\">F_n=Q^{n-1}[0,0]</script>, where <script type=\"math/tex; mode=display\">Q^{n-1}=\\left[ {\\begin{array}{cc} F_{n} & F_{n-1} \\\\  F_{n-1} & F_{n-2}     \\end{array} } \\right]</script>.</p>\n<p>Now, we need to prove that with the above two conditions holding true, the method is valid for finding the <script type=\"math/tex; mode=display\">(n+1)^{th}</script> Fibonacci Number i.e. <script type=\"math/tex; mode=display\">F_{n+1}=Q^{n}[0,0]</script>\n</p>\n<p>Proof: <script type=\"math/tex; mode=display\">Q^{n} = \\left[ {\\begin{array}{cc} F_{n} & F_{n-1} \\\\  F_{n-1} & F_{n-2}     \\end{array} } \\right]\\left[ {\\begin{array}{cc} 1 & 1 \\\\  1 & 0     \\end{array} } \\right]</script>.\n <script type=\"math/tex; mode=display\">Q^{n} = \\left[ {\\begin{array}{cc} F_{n}+F_{n-1} & F_n \\\\  F_{n-1}+F_{n-2} & F_{n-1}    \\end{array} } \\right]</script>\n<script type=\"math/tex; mode=display\">Q^{n} = \\left[ {\\begin{array}{cc} F_{n+1} & F_n \\\\  F_n & F_{n-1}     \\end{array} } \\right]</script>\n</p>\n<p>Thus, <script type=\"math/tex; mode=display\">F_{n+1}=Q^{n}[0,0]</script>. This completes the proof of this method.</p>\n<p>The only variation we need to do for our problem is that we need to modify the initial terms to 2 and 1 instead of 1 and 0 in the Fibonacci series. Or, another way is to use the same initial <script type=\"math/tex; mode=display\">Q</script> matrix and use <script type=\"math/tex; mode=display\">result = Q^{n}[0,0]</script> to get the final result. This happens because the initial terms we have to use are the 2nd and 3rd terms of the otherwise normal Fibonacci Series.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"o\">{{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}};</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pow</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">pow</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"o\">{{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}};</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">multiply</span><span class=\"o\">(</span><span class=\"n\">ret</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">n</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">multiply</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">multiply</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">][</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(log(n))</script>. Traversing on <script type=\"math/tex; mode=display\">log(n)</script> bits.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<p>Proof of Time Complexity:</p>\n<p>Let\'s say there is a  matrix <script type=\"math/tex; mode=display\">M</script> to be raised to  power <script type=\"math/tex; mode=display\">n</script>. Suppose, <script type=\"math/tex; mode=display\">n</script> is the power of 2. Thus, <script type=\"math/tex; mode=display\">n = 2^i</script>, <script type=\"math/tex; mode=display\">i\\in\\mathbb{N}</script>, where <script type=\"math/tex; mode=display\">\\mathbb{N}</script> represents the set of natural numbers(including 0). We can represent  in the form of a tree:</p>\n<p><img alt=\"Climbing Stairs\" src=\"../Figures/70_Climbing_Stairs.PNG\" /></p>\n<p>Meaning that:</p>\n<p>\n<script type=\"math/tex; mode=display\">M^n = M^{n/2}.M^{n/2} = .... = \\prod_{1}^{n} M^{1}</script>\n</p>\n<p>So, to calculate  <script type=\"math/tex; mode=display\">M^{n}</script> matrix, we should calculate <script type=\"math/tex; mode=display\">M^{n/2}</script>  matrix and multiply it by itself. To calculate <script type=\"math/tex; mode=display\">M^{n/2}</script> we would have to do the same with <script type=\"math/tex; mode=display\">M^{n/4}</script> and so on.</p>\n<p>Obviously, the tree height is <script type=\"math/tex; mode=display\">log_{2}n</script>.</p>\n<p>Let’s estimate <script type=\"math/tex; mode=display\">M^{n}</script> calculation time. <script type=\"math/tex; mode=display\">M</script> matrix is of the same size in any power . Therefore, we can perform the multiplication of two matrices in any power in <script type=\"math/tex; mode=display\">O(1)</script>. We should perform <script type=\"math/tex; mode=display\">log_2{n}</script> of such multiplications. So, <script type=\"math/tex; mode=display\">M^{n}</script> calculation complexity is <script type=\"math/tex; mode=display\">O(log_{2}n)</script>.</p>\n<p>In case, the number <script type=\"math/tex; mode=display\">n</script> is not a power of two, we can break it in terms of powers of 2 using its binary representation</p>\n<p>\n<script type=\"math/tex; mode=display\">n= \\sum_{p\\in P} 2^{p}</script>, where <script type=\"math/tex; mode=display\">P\\subset\\mathbb{N}</script>.</p>\n<p>Thus, we can obtain the final result using:</p>\n<p>\n<script type=\"math/tex; mode=display\">M^{n} = \\prod_{p\\in P} M^{2^{p}}</script>\n</p>\n<p>This is the method we\'ve used in our implementation. Again, the complexity remains <script type=\"math/tex; mode=display\">O(log_{2}n)</script> as we have limited the number of multiplications to <script type=\"math/tex; mode=display\">O(log_{2}n)</script>.</p>\n<hr />\n<h4 id=\"approach-6-fibonacci-formula-accepted\">Approach #6 Fibonacci Formula [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can find <script type=\"math/tex; mode=display\">n^{th}</script> fibonacci number using this formula:</p>\n<p>\n<script type=\"math/tex; mode=display\">F_n = 1/\\sqrt{5}\\left[ \\left(\\frac{1+\\sqrt{5}}{2}\\right)^{n} - \\left(\\frac{1-\\sqrt{5}}{2}\\right)^{n} \\right]</script>\n</p>\n<p>For the given problem, the Fibonacci sequence is defined by <script type=\"math/tex; mode=display\">F_0 = 1</script>, <script type=\"math/tex; mode=display\">F_1= 1</script>,  <script type=\"math/tex; mode=display\">F_1= 2</script>, <script type=\"math/tex; mode=display\">F_{n+2}= F_{n+1} + F_n</script>. A standard method of trying to solve such recursion formulas is assume <script type=\"math/tex; mode=display\">F_n</script> of the form <script type=\"math/tex; mode=display\">F_n= a^n</script>. Then, of course, <script type=\"math/tex; mode=display\">F_{n+1} = a^{n+1}</script> and <script type=\"math/tex; mode=display\">F_{n+2}= a^{n+2}</script> so the equation becomes <script type=\"math/tex; mode=display\">a^{n+2}= a^{n+1}+ a^n</script>. If we divide the entire equation by an we arrive at <script type=\"math/tex; mode=display\">a^2= a + 1</script> or the quadratic equation</p>\n<p>\n<script type=\"math/tex; mode=display\">a^2 - a- 1= 0</script>.</p>\n<p>Solving this by the quadratic formula, we get:</p>\n<p>\n<script type=\"math/tex; mode=display\">a=1/\\sqrt{5}\\left(\\left(\\frac{1\\pm \\sqrt{5}}{2}\\right)\\right)</script>.</p>\n<p>The general solution, thus takes the form:</p>\n<p>\n<script type=\"math/tex; mode=display\">F_n = A\\left(\\frac{1+\\sqrt{5}}{2}\\right)^{n} + B\\left(\\frac{1-\\sqrt{5}}{2}\\right)^{n}</script>\n</p>\n<p>For <script type=\"math/tex; mode=display\">n=0</script>, we get <script type=\"math/tex; mode=display\">A + B = 1</script>\n</p>\n<p>For <script type=\"math/tex; mode=display\">n=1</script>, we get <script type=\"math/tex; mode=display\">A\\left(\\frac{1+\\sqrt{5}}{2}\\right) + B\\left(\\frac{1-\\sqrt{5}}{2}\\right) = 1</script>\n</p>\n<p>Solving the above equations, we get:</p>\n<p>\n<script type=\"math/tex; mode=display\">A = \\left(\\frac{1+\\sqrt{5}}{2\\sqrt{5}}\\right), B = \\left(\\frac{1-\\sqrt{5}}{2\\sqrt{5}}\\right)</script>\n</p>\n<p>Putting these values of <script type=\"math/tex; mode=display\">A</script> and <script type=\"math/tex; mode=display\">B</script> in the above general solution equation, we get:</p>\n<p>\n<script type=\"math/tex; mode=display\">F_n = 1/\\sqrt{5}\\left( \\left(\\frac{1+\\sqrt{5}}{2}\\right)^{n+1} - \\left(\\frac{1-\\sqrt{5}}{2}\\right)^{n+1} \\right)</script>\n</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">climbStairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">double</span> <span class=\"n\">sqrt5</span><span class=\"o\">=</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">sqrt</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">);</span>\n        <span class=\"kt\">double</span> <span class=\"n\">fibn</span><span class=\"o\">=</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">pow</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">sqrt5</span><span class=\"o\">)/</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">)-</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">pow</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">sqrt5</span><span class=\"o\">)/</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)(</span><span class=\"n\">fibn</span><span class=\"o\">/</span><span class=\"n\">sqrt5</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(log(n))</script>. <script type=\"math/tex; mode=display\">pow</script> method takes <script type=\"math/tex; mode=display\">log(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(146,'Basic Calculator II',2,'String',0,0,'<p></p><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string contains only <b>non-negative</b> integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> operators and empty spaces <code> </code>. The integer division should truncate toward zero.</p><p>You may assume that the given expression is always valid.</p><p>Some examples:<br/>\n</p><pre>\n\"3+2*2\" = 7\n\" 3/2 \" = 1\n\" 3+5 / 2 \" = 5\n</pre><p>\n<b>Note:</b> <b>Do not</b> use the <code>eval</code> built-in library function.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int calculate(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int calculate(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def calculate(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int calculate(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Calculate(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar calculate = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef calculate(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func calculate(_ s: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func calculate(s string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(147,'Swap Nodes in Pairs',2,'Linked List',0,0,'<p></p><p>\nGiven a linked list, swap every two adjacent nodes and return its head.\n</p><p>\nFor example,<br/>\nGiven <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.\n</p><p>\nYour algorithm should use only constant space. You may <b>not</b> modify the values in the list, only nodes itself can be changed.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* swapPairs(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def swapPairs(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* swapPairs(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode SwapPairs(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar swapPairs = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef swap_pairs(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func swapPairs(_ head: ListNode?) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc swapPairs(head *ListNode) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def swapPairs(head: ListNode): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(148,'Happy Number',1,'Hash Table,Math',0,0,'<p></p><p>Write an algorithm to determine if a number is \"happy\".</p><p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p><p><b>Example: </b>19 is a happy number</p><ul style=\"list-style: none;\">\n<li>1<sup>2</sup> + 9<sup>2</sup> = 82</li>\n<li>8<sup>2</sup> + 2<sup>2</sup> = 68</li>\n<li>6<sup>2</sup> + 8<sup>2</sup> = 100</li>\n<li>1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1</li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> and <a href=\"https://leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isHappy(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isHappy(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isHappy(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isHappy(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsHappy(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar isHappy = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Boolean}\r\ndef is_happy(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isHappy(_ n: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isHappy(n int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isHappy(n: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(150,'Binary Tree Maximum Path Sum',3,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree, find the maximum path sum.\n</p><p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <b>at least one node</b> and does not need to go through the root.</p><p>\nFor example:<br/>\nGiven the below binary tree,\n</p><pre>\n       1\n      / \\\n     2   3\n</pre><p>\nReturn <code>6</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int maxPathSum(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def maxPathSum(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint maxPathSum(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int MaxPathSum(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar maxPathSum = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef max_path_sum(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func maxPathSum(_ root: TreeNode?) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc maxPathSum(root *TreeNode) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def maxPathSum(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(151,'Binary Tree Postorder Traversal',3,'Tree,Stack',0,0,'<p></p><p>Given a binary tree, return the <i>postorder</i> traversal of its nodes\' values.</p><p>\nFor example:<br/>\nGiven binary tree <code>{1,#,2,3}</code>,<br/>\n</p><pre>\n   1\n    \\\n     2\n    /\n   3\n</pre><p>\nreturn <code>[3,2,1]</code>.\n</p><p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> postorderTraversal(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def postorderTraversal(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* postorderTraversal(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> PostorderTraversal(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar postorderTraversal = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef postorder_traversal(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func postorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc postorderTraversal(root *TreeNode) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def postorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(152,'Minimum Number of Arrows to Burst Balloons',2,'Greedy',0,0,'<p></p><p>There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it\'s horizontal, y-coordinates don\'t matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 10<sup>4</sup> balloons.</p><p>An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with x<sub>start</sub> and x<sub>end</sub> bursts by an arrow shot at x if x<sub>start</sub> ≤ x ≤ x<sub>end</sub>. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons. </p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b>\n[[10,16], [2,8], [1,6], [7,12]]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nOne way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMinArrowShots(vector<pair<int, int>>& points) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMinArrowShots(int[][] points) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMinArrowShots(self, points):\r\n        """\r\n        :type points: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMinArrowShots(int** points, int pointsRowSize, int pointsColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMinArrowShots(int[,] points) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} points\r\n * @return {number}\r\n */\r\nvar findMinArrowShots = function(points) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} points\r\n# @return {Integer}\r\ndef find_min_arrow_shots(points)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMinArrowShots(_ points: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMinArrowShots(points [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMinArrowShots(points: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(153,'Find the Difference',1,'Hash Table,Bit Manipulation',0,0,'<p></p><p>\nGiven two strings <b><i>s</i></b> and <b><i>t</i></b> which consist of only lowercase letters.</p><p>String <b><i>t</i></b> is generated by random shuffling string <b><i>s</i></b> and then add one more letter at a random position.</p><p>Find the letter that was added in <b><i>t</i></b>.</p><p><b>Example:</b>\n</p><pre>\nInput:\ns = \"abcd\"\nt = \"abcde\"\n\nOutput:\ne\n\nExplanation:\n\'e\' is the letter that was added.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    char findTheDifference(string s, string t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public char findTheDifference(String s, String t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findTheDifference(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findTheDifference(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char findTheDifference(char* s, char* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public char FindTheDifference(string s, string t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {character}\r\n */\r\nvar findTheDifference = function(s, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} t\r\n# @return {Character}\r\ndef find_the_difference(s, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findTheDifference(_ s: String, _ t: String) -> Character {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findTheDifference(s string, t string) byte {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findTheDifference(s: String, t: String): Char = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(154,'Best Time to Buy and Sell Stock with Cooldown',2,'Dynamic Programming',0,0,'<p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like\n(ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p><ul>\n<li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>\n<li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>\n</ul><p><b>Example:</b><br/></p><pre>\nprices = [1, 2, 3, 0, 2]\nmaxProfit = 3\ntransactions = [buy, sell, cooldown, buy, sell]\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProfit(vector<int>& prices) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProfit(self, prices):\r\n        """\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProfit(int* prices, int pricesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProfit(int[] prices) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(prices) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(prices)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxProfit(_ prices: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(155,'Maximum XOR of Two Numbers in an Array',2,'Bit Manipulation,Trie',0,0,'<p></p><p>Given a <b>non-empty</b> array of numbers, a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, … , a<sub>n-1</sub>, where 0 ≤ a<sub>i</sub> &lt; 2<sup>31</sup>.</p><p>Find the maximum result of a<sub>i</sub> XOR a<sub>j</sub>, where 0 ≤ <i>i</i>, <i>j</i> &lt; <i>n</i>.</p><p>Could you do this in O(<i>n</i>) runtime?</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b> [3, 10, 5, 25, 2, 8]\n\n<b>Output:</b> 28\n\n<b>Explanation:</b> The maximum result is <b>5</b> ^ <b>25</b> = 28.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMaximumXOR(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMaximumXOR(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMaximumXOR(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMaximumXOR(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMaximumXOR(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findMaximumXOR = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_maximum_xor(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMaximumXOR(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMaximumXOR(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMaximumXOR(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(156,'Construct the Rectangle',1,'',0,0,'<p></p><p>\nFor a web developer, it is very important to know how to design a web page\'s size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p><pre>\n1. The area of the rectangular web page you designed must equal to the given target area.\n<br/>2. The width W should not be larger than the length L, which means L &gt;= W.\n<br/>3. The difference between length L and width W should be as small as possible.\n</pre>\nYou need to output the length L and the width W of the web page you designed in sequence.\n\n\n\n<p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> 4\n<b>Output:</b> [2, 2]\n<b>Explanation:</b> The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The given area won\'t exceed 10,000,000 and is a positive integer</li>\n<li>The web page\'s width and length you designed must be positive integers.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> constructRectangle(int area) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] constructRectangle(int area) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def constructRectangle(self, area):\r\n        """\r\n        :type area: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* constructRectangle(int area, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] ConstructRectangle(int area) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} area\r\n * @return {number[]}\r\n */\r\nvar constructRectangle = function(area) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} area\r\n# @return {Integer[]}\r\ndef construct_rectangle(area)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func constructRectangle(_ area: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func constructRectangle(area int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def constructRectangle(area: Int): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(157,'Sqrt(x)',1,'Binary Search,Math',0,0,'<p></p><p>Implement <code>int sqrt(int x)</code>.</p><p>Compute and return the square root of <i>x</i>.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int mySqrt(int x) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def mySqrt(self, x):\r\n        """\r\n        :type x: int\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int mySqrt(int x) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MySqrt(int x) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} x\r\n * @return {number}\r\n */\r\nvar mySqrt = function(x) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} x\r\n# @return {Integer}\r\ndef my_sqrt(x)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func mySqrt(_ x: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func mySqrt(x int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(158,'Wildcard Matching',3,'Dynamic Programming,Backtracking,Greedy,String',0,0,'<p></p><p>Implement wildcard pattern matching with support for <code>\'?\'</code> and <code>\'*\'</code>.</p><pre>\n\'?\' Matches any single character.\n\'*\' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the <b>entire</b> input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") ? false\nisMatch(\"aa\",\"aa\") ? true\nisMatch(\"aaa\",\"aa\") ? false\nisMatch(\"aa\", \"*\") ? true\nisMatch(\"aa\", \"a*\") ? true\nisMatch(\"ab\", \"?*\") ? true\nisMatch(\"aab\", \"c*a*b\") ? false\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isMatch(string s, string p) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isMatch(self, s, p):\r\n        """\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def isMatch(self, s, p):\r\n        """\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isMatch(char* s, char* p) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsMatch(string s, string p) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} p\r\n * @return {boolean}\r\n */\r\nvar isMatch = function(s, p) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} p\r\n# @return {Boolean}\r\ndef is_match(s, p)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isMatch(_ s: String, _ p: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(159,'Invert Binary Tree',1,'Tree',0,0,'<p>Invert a binary tree.\n</p><pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\nto\n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre><b>Trivia:</b><br/>\nThis problem was inspired by <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">this original tweet</a> by <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell</a>:\n<blockquote>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</blockquote>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* invertTree(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def invertTree(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* invertTree(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode InvertTree(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode}\r\n */\r\nvar invertTree = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {TreeNode}\r\ndef invert_tree(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func invertTree(_ root: TreeNode?) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc invertTree(root *TreeNode) *TreeNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def invertTree(root: TreeNode): TreeNode = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-recursive-accepted\">Approach #1 (Recursive) [Accepted]</a></li>\n<li><a href=\"#approach-2-iterative-accepted\">Approach #2 (Iterative) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-recursive-accepted\">Approach #1 (Recursive) [Accepted]</h4>\n<p>This is a classic tree problem that is best-suited for a recursive approach.</p>\n<p><strong>Algorithm</strong></p>\n<p>The inverse of an empty tree is the empty tree. The inverse of a tree with root <script type=\"math/tex; mode=display\">r</script>, and subtrees <script type=\"math/tex; mode=display\">\\mbox{right}</script> and <script type=\"math/tex; mode=display\">\\mbox{left}</script>, is a tree with root <script type=\"math/tex; mode=display\">r</script>, whose right subtree is the inverse of <script type=\"math/tex; mode=display\">\\mbox{left}</script>, and whose left subtree is the inverse of <script type=\"math/tex; mode=display\">\\mbox{right}</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">invertTree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">TreeNode</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">invertTree</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n    <span class=\"n\">TreeNode</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">invertTree</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Since each node in the tree is visited only once, the time complexity is <script type=\"math/tex; mode=display\">O(n)</script>, where <script type=\"math/tex; mode=display\">n</script> is the number of nodes in the tree. We cannot do better than that, since at the very least we have to visit each node to invert it.</p>\n<p>Because of recursion, <script type=\"math/tex; mode=display\">O(h)</script> function calls will be placed on the stack in the worst case, where <script type=\"math/tex; mode=display\">h</script> is the height of the tree. Because <script type=\"math/tex; mode=display\">h\\in O(n)</script>, the space complexity is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n<hr />\n<h4 id=\"approach-2-iterative-accepted\">Approach #2 (Iterative) [Accepted]</h4>\n<p>Alternatively, we can solve the problem iteratively, in a manner similar to breadth-first search.</p>\n<p><strong>Algorithm</strong></p>\n<p>The idea is that we need to swap the left and right child of all nodes in the tree. So we create a queue to store nodes whose left and right child have not been swapped yet. Initially, only the root is in the queue. As long as the queue is not empty, remove the next node from the queue, swap its children, and add the children to the queue. Null nodes are not added to the queue. Eventually, the queue will be empty and all the children swapped, and we return the original root.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">TreeNode</span> <span class=\"nf\">invertTree</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"n\">TreeNode</span><span class=\"o\">&gt;();</span>\n    <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n        <span class=\"n\">TreeNode</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n        <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Since each node in the tree is visited / added to the queue only once, the time complexity is <script type=\"math/tex; mode=display\">O(n)</script>, where <script type=\"math/tex; mode=display\">n</script> is the number of nodes in the tree.</p>\n<p>Space complexity is <script type=\"math/tex; mode=display\">O(n)</script>, since in the worst case, the queue will contain all nodes in one level of the binary tree. For a full binary tree, the leaf level has <script type=\"math/tex; mode=display\">\\lceil \\frac{n}{2}\\rceil=O(n)</script> leaves.</p>\n<p>Analysis written by: @noran</p>',NULL,1,'none','none','none'),(160,'Merge k Sorted Lists',3,'Divide and Conquer,Linked List,Heap',0,0,'<p></p><p>\nMerge <i>k</i> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def mergeKLists(self, lists):\r\n        """\r\n        :type lists: List[ListNode]\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode MergeKLists(ListNode[] lists) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode[]} lists\r\n * @return {ListNode}\r\n */\r\nvar mergeKLists = function(lists) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode[]} lists\r\n# @return {ListNode}\r\ndef merge_k_lists(lists)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc mergeKLists(lists []*ListNode) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(161,'Validate Binary Search Tree',2,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree, determine if it is a valid binary search tree (BST).\n</p><p>\nAssume a BST is defined as follows:\n</p><ul>\n<li>The left subtree of a node contains only nodes with keys <b>less than</b> the node\'s key.</li>\n<li>The right subtree of a node contains only nodes with keys <b>greater than</b> the node\'s key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul><p><b>Example 1:</b><br/>\n</p><pre>\n    2\n   / \\\n  1   3\n</pre>\nBinary tree <code>[2,1,3]</code>, return true.\n\n\n<p><b>Example 2:</b><br/>\n</p><pre>\n    1\n   / \\\n  2   3\n</pre>\nBinary tree <code>[1,2,3]</code>, return false.\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isValidBST(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isValidBST(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isValidBST(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsValidBST(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {boolean}\r\n */\r\nvar isValidBST = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Boolean}\r\ndef is_valid_bst(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isValidBST(_ root: TreeNode?) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc isValidBST(root *TreeNode) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isValidBST(root: TreeNode): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(162,'Bitwise AND of Numbers Range',2,'Bit Manipulation',0,0,'<p></p><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p><p>\nFor example, given the range [5, 7], you should return 4.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/amrsaqr\">@amrsaqr</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int rangeBitwiseAnd(int m, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int rangeBitwiseAnd(int m, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def rangeBitwiseAnd(self, m, n):\r\n        """\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int rangeBitwiseAnd(int m, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int RangeBitwiseAnd(int m, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar rangeBitwiseAnd = function(m, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef range_bitwise_and(m, n)\r\n    \r\nend\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func rangeBitwiseAnd(m int, n int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def rangeBitwiseAnd(m: Int, n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(163,'Sort Characters By Frequency',2,'Hash Table,Heap',0,0,'<p></p><p>Given a string, sort it in decreasing order based on the frequency of characters.</p><p><b>Example 1:</b>\n</p><pre>\n<b>Input:</b>\n\"tree\"\n\n<b>Output:</b>\n\"eert\"\n\n<b>Explanation:</b>\n\'e\' appears twice while \'r\' and \'t\' both appear once.\nSo \'e\' must appear before both \'r\' and \'t\'. Therefore \"eetr\" is also a valid answer.\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>Input:</b>\n\"cccaaa\"\n\n<b>Output:</b>\n\"cccaaa\"\n\n<b>Explanation:</b>\nBoth \'c\' and \'a\' appear three times, so \"aaaccc\" is also a valid answer.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n</pre><p><b>Example 3:</b>\n</p><pre>\n<b>Input:</b>\n\"Aabb\"\n\n<b>Output:</b>\n\"bbAa\"\n\n<b>Explanation:</b>\n\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that \'A\' and \'a\' are treated as two different characters.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string frequencySort(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String frequencySort(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def frequencySort(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* frequencySort(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string FrequencySort(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar frequencySort = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef frequency_sort(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func frequencySort(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func frequencySort(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def frequencySort(s: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(164,'Range Sum Query - Mutable',2,'Segment Tree,Binary Indexed Tree',0,0,'<p></p><p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> ≤ <i>j</i>), inclusive.</p>\n\nThe <i>update(i, val)</i> function modifies <i>nums</i> by updating the element at index <i>i</i> to <i>val</i>.\n\n<p><b>Example:</b><br/>\n</p><pre>\nGiven nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The array is only modifiable by the <i>update</i> function.</li>\n<li>You may assume the number of calls to <i>update</i> and <i>sumRange</i> function is distributed evenly.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class NumArray {\r\npublic:\r\n    NumArray(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    void update(int i, int val) {\r\n        \r\n    }\r\n    \r\n    int sumRange(int i, int j) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * obj.update(i,val);\r\n * int param_2 = obj.sumRange(i,j);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public void update(int i, int val) {\n        \n    }\n    \n    public int sumRange(int i, int j) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.update(i,val);\n * int param_2 = obj.sumRange(i,j);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class NumArray(object):\r\n\r\n    def __init__(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        """\r\n        \r\n\r\n    def update(self, i, val):\r\n        """\r\n        :type i: int\r\n        :type val: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        """\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# obj.update(i,val)\r\n# param_2 = obj.sumRange(i,j)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} NumArray;\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n\nvoid numArrayUpdate(NumArray* obj, int i, int val) {\n    \n}\n\nint numArraySumRange(NumArray* obj, int i, int j) {\n    \n}\n\nvoid numArrayFree(NumArray* obj) {\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * struct NumArray* obj = numArrayCreate(nums, numsSize);\n * numArrayUpdate(obj, i, val);\n * int param_2 = numArraySumRange(obj, i, j);\n * numArrayFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public void Update(int i, int val) {\r\n        \r\n    }\r\n    \r\n    public int SumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * obj.Update(i,val);\r\n * int param_2 = obj.SumRange(i,j);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n */\r\nvar NumArray = function(nums) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nNumArray.prototype.update = function(i, val) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} j\r\n * @return {number}\r\n */\r\nNumArray.prototype.sumRange = function(i, j) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = Object.create(NumArray).createNew(nums)\r\n * obj.update(i,val)\r\n * var param_2 = obj.sumRange(i,j)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class NumArray\r\n\r\n=begin\r\n    :type nums: Integer[]\r\n=end\r\n    def initialize(nums)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def update(i, val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type j: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_range(i, j)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray.new(nums)\r\n# obj.update(i,val)\r\n# param_2 = obj.sum_range(i,j)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type NumArray struct {\n    \n}\n\n\nfunc Constructor(nums []int) NumArray {\n    \n}\n\n\nfunc (this *NumArray) Update(i int, val int)  {\n    \n}\n\n\nfunc (this *NumArray) SumRange(i int, j int) int {\n    \n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * obj.Update(i,val);\n * param_2 := obj.SumRange(i,j);\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class NumArray(var _nums: Array[Int]) {\n    \n    def update(int i, int val) {\n\n    }\n    \n    def sumRange(int i, int j) : Int = {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums);\n * obj.update(i,val);\n * Int param_2 = obj.sumRange(i,j);\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-naive-time-limit-exceeded\">Approach #1 (Naive) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-sqrt-decomposition-accepted\">Approach #2 (Sqrt decomposition) [Accepted]</a></li>\n<li><a href=\"#approach-3-segment-tree-accepted\">Approach #3 (Segment tree) [Accepted]</a><ul>\n<li><a href=\"#1-build-segment-tree\">1. Build segment tree</a></li>\n<li><a href=\"#2-update-segment-tree\">2. Update segment tree</a></li>\n<li><a href=\"#3-range-sum-query\">3. Range Sum Query</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#further-thoughts\">Further Thoughts</a></li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for intermediate level readers. It introduces the following concepts:\nRange sum query, Sqrt decomposition, Segment tree.</p>\n<h2 id=\"solution\">Solution</h2>\n<h4 id=\"approach-1-naive-time-limit-exceeded\">Approach #1 (Naive) [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>A trivial solution for Range Sum Query - <code>RSQ(i, j)</code> is to iterate the array from index <script type=\"math/tex; mode=display\">i</script> to <script type=\"math/tex; mode=display\">j</script> and sum each element.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">l</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">data</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">update</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// Time Limit Exceeded</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script> - range sum query, <script type=\"math/tex; mode=display\">O(1)</script> - update query</p>\n<p>For range sum query we access each element from the array for constant time and in the worst case we access <script type=\"math/tex; mode=display\">n</script> elements. Therefore time complexity is <script type=\"math/tex; mode=display\">O(n)</script>. Time complexity of update query is <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<h4 id=\"approach-2-sqrt-decomposition-accepted\">Approach #2 (Sqrt decomposition) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>The idea is to  split the array in blocks with length of <script type=\"math/tex; mode=display\">\\sqrt{n}</script>. Then we calculate the sum of each block and store it in auxiliary memory <code>b</code>.\nTo query <code>RSQ(i, j)</code>, we will add the sums of all the blocks lying inside and those that partially overlap with range <script type=\"math/tex; mode=display\">[i \\ldots j]</script>.</p>\n<p><strong>Algorithm</strong></p>\n<p align=\"center\"><img alt=\"Range sum query using SQRT decomposition\" src=\"https://leetcode.com/media/original_images/307_RSQ_Sqrt.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 1. Range sum query using SQRT decomposition.</em></p>\n<p>In the example above, the array <code>nums</code>\'s length is <code>9</code>, which is split into blocks of size <script type=\"math/tex; mode=display\">\\sqrt{9}</script>. To get <code>RSQ(1, 7)</code> we add <code>b[1]</code>.  It stores the sum of <code>range [3, 5]</code> and partially sums from <code>block 0</code>  and <code>block 2</code>, which are overlapping boundary blocks.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n<span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">nums</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n    <span class=\"kt\">double</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">sqrt</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">ceil</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">/</span><span class=\"n\">l</span><span class=\"o\">);</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span> <span class=\"o\">[</span><span class=\"n\">len</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n        <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">len</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">startBlock</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">endBlock</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">/</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">startBlock</span> <span class=\"o\">==</span> <span class=\"n\">endBlock</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"o\">(</span><span class=\"n\">startBlock</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">len</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">startBlock</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">endBlock</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">endBlock</span> <span class=\"o\">*</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b_l</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n    <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">b_l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">b_l</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n    <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// Accepted</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script> - preprocessing, <script type=\"math/tex; mode=display\">O(\\sqrt{n})</script> - range sum query, <script type=\"math/tex; mode=display\">O(1)</script> - update query</p>\n<p>For range sum query in the worst-case scenario we have to sum approximately <script type=\"math/tex; mode=display\">3 \\sqrt{n}</script> elements. In this case the range includes <script type=\"math/tex; mode=display\">\\sqrt{n} - 2</script> blocks, which total sum costs <script type=\"math/tex; mode=display\">\\sqrt{n} - 2</script> operations. In addition to this we have to add the sum of the two boundary blocks. This takes another <script type=\"math/tex; mode=display\">2 (\\sqrt{n} - 1)</script> operations. The total amount of operations is around <script type=\"math/tex; mode=display\">3 \\sqrt{n}</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(\\sqrt{n})</script>.</p>\n<p>We need additional <script type=\"math/tex; mode=display\">\\sqrt{n}</script> memory to store all block sums.</p>\n</li>\n</ul>\n<h4 id=\"approach-3-segment-tree-accepted\">Approach #3 (Segment tree) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Segment tree is a very flexible data structure, because it is used to solve numerous range query problems like finding minimum, maximum, sum, greatest common divisor, least common denominator in array in logarithmic time.</p>\n<p align=\"center\"><img alt=\"Illustration of Segment tree\" src=\"https://leetcode.com/media/original_images/307_RSQ_SegmentTree.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 2. Illustration of Segment tree.</em></p>\n<p>The segment tree for array <script type=\"math/tex; mode=display\">a[0, 1, \\ldots ,n-1]</script> is a binary tree in which each node contains <strong>aggregate</strong> information (min, max, sum, etc.) for a subrange <script type=\"math/tex; mode=display\">[i \\ldots j]</script> of the array, as its left and right child hold information for range <script type=\"math/tex; mode=display\">[i \\ldots \\frac{i+j}{2}]</script> and <script type=\"math/tex; mode=display\">[\\frac{i + j}{2} + 1, j]</script>.</p>\n<p>Segment tree could be implemented using either an array or a tree. For an array implementation, if the element at index <script type=\"math/tex; mode=display\">i</script> is not a leaf, its left and right child are stored at index <script type=\"math/tex; mode=display\">2i</script> and <script type=\"math/tex; mode=display\">2i + 1</script> respectively.</p>\n<p>In the example above (Figure 2), every leaf node contains the initial array elements <code>{2,4,5,7,8,9}</code>. The internal nodes contain the sum of the corresponding elements in range - <code>(11)</code> for the elements from index 0 to index 2. The root <code>(35)</code> being the sum  of its children <code>(6)</code>;<code>(29)</code>, holds the total sum of the entire array.</p>\n<p>Segment Tree can be broken down to the three following steps:</p>\n<ol>\n<li>Pre-processing step which builds the segment tree from a given array.</li>\n<li>Update the segment tree when an element is modified.</li>\n<li>Calculate the Range Sum Query using the segment tree.</li>\n</ol>\n<h5 id=\"1-build-segment-tree\">1. Build segment tree</h5>\n<p>We will use a very effective bottom-up approach to build segment tree. We already know from the above that if some node <script type=\"math/tex; mode=display\">p</script> holds the sum of <script type=\"math/tex; mode=display\">[i \\ldots j]</script> range, its left and right children hold the sum for range <script type=\"math/tex; mode=display\">[i \\ldots \\frac{i + j}{2}]</script> and <script type=\"math/tex; mode=display\">[\\frac{i + j}{2} + 1, j]</script> respectively.</p>\n<p>Therefore to find the sum of node <script type=\"math/tex; mode=display\">p</script>, we need to calculate the sum of its right and left child in advance.</p>\n<p>We begin from the leaves, initialize them with input array elements <script type=\"math/tex; mode=display\">a[0, 1, \\ldots, n-1]</script>. Then we move upward to the higher level to calculate the parents\' sum till we get to the root of the segment tree.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">tree</span><span class=\"o\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"nf\">NumArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">];</span>\n        <span class=\"n\">buildTree</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">buildTree</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>  <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++,</span>  <span class=\"n\">j</span><span class=\"o\">++)</span>\n        <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>\n</p>\n<p>Time complexity is  <script type=\"math/tex; mode=display\">O(n)</script>, because we calculate the sum of one node during each iteration of the for loop. There are approximately <script type=\"math/tex; mode=display\">2n</script> nodes in a segment tree.</p>\n<p>This could be proved in the following way: Segmented tree for array with <script type=\"math/tex; mode=display\">n</script> elements has <script type=\"math/tex; mode=display\">n</script> leaves (the array elements itself). The number of nodes in each level is half the number in the level below.</p>\n<p>So if we sum the number by level we will get:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nn + n/2  + n/4 + n/8 + \\ldots + 1 \\approx 2n\n</script>\n</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n<p>We used <script type=\"math/tex; mode=display\">2n</script> extra space to store the segment tree.</p>\n</li>\n</ul>\n<h5 id=\"2-update-segment-tree\">2. Update segment tree</h5>\n<p>When we update the array at some index <script type=\"math/tex; mode=display\">i</script> we need to rebuild the segment tree, because there are tree nodes which contain the sum of the modified element. Again we will use a bottom-up approach. We update the leaf node that stores <script type=\"math/tex; mode=display\">a[i]</script>. From there we will follow the path up to the root updating the value of each parent as a sum of its children values.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">pos</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">pos</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">pos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">pos</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// parent is updated after child is updated</span>\n        <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">pos</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">right</span><span class=\"o\">];</span>\n        <span class=\"n\">pos</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(\\log n)</script>.</p>\n<p>Algorithm  has <script type=\"math/tex; mode=display\">O(\\log n)</script> time complexity, because there are a few tree nodes with range that include  <script type=\"math/tex; mode=display\">i</script>th array element, one on each level. There are <script type=\"math/tex; mode=display\">\\log(n)</script>  levels.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<h5 id=\"3-range-sum-query\">3. Range Sum Query</h5>\n<p>We can find range sum query  <script type=\"math/tex; mode=display\">[L, R]</script> using segment tree in the following way:</p>\n<p>Algorithm hold loop invariant:</p>\n<p>\n<script type=\"math/tex; mode=display\">l \\le r</script> and sum of <script type=\"math/tex; mode=display\">[L \\ldots l]</script> and <script type=\"math/tex; mode=display\">[r \\ldots R]</script> has been calculated, where <script type=\"math/tex; mode=display\">l</script> and <script type=\"math/tex; mode=display\">r</script> are the left and right boundary of calculated sum.\nInitially we set <script type=\"math/tex; mode=display\">l</script> with left leaf <script type=\"math/tex; mode=display\">L</script> and <script type=\"math/tex; mode=display\">r</script> with right leaf <script type=\"math/tex; mode=display\">R</script>.\nRange <script type=\"math/tex; mode=display\">[l, r]</script> shrinks on each iteration till range borders meets after approximately <script type=\"math/tex; mode=display\">\\log n</script> iterations of the algorithm</p>\n<ul>\n<li>Loop till <script type=\"math/tex; mode=display\">l \\le r</script>\n<ul>\n<li>Check if <script type=\"math/tex; mode=display\">l</script> is right child of its parent <script type=\"math/tex; mode=display\">P</script>\n<ul>\n<li>\n<script type=\"math/tex; mode=display\">l</script> is right child of <script type=\"math/tex; mode=display\">P</script>. Then <script type=\"math/tex; mode=display\">P</script> contains sum of range of <script type=\"math/tex; mode=display\">l</script> and another  child which is outside the range <script type=\"math/tex; mode=display\">[l, r]</script> and we don\'t need parent <script type=\"math/tex; mode=display\">P</script> sum. Add <script type=\"math/tex; mode=display\">l</script> to <script type=\"math/tex; mode=display\">sum</script> without its parent <script type=\"math/tex; mode=display\">P</script> and set <script type=\"math/tex; mode=display\">l</script> to point to the right of <script type=\"math/tex; mode=display\">P</script> on the upper level.</li>\n<li>\n<script type=\"math/tex; mode=display\">l</script> is not right child of <script type=\"math/tex; mode=display\">P</script>. Then parent <script type=\"math/tex; mode=display\">P</script> contains sum of range which lies in <script type=\"math/tex; mode=display\">[l, r]</script>. Add <script type=\"math/tex; mode=display\">P</script> to <script type=\"math/tex; mode=display\">sum</script> and set <script type=\"math/tex; mode=display\">l</script> to point to the parent of <script type=\"math/tex; mode=display\">P</script>\n</li>\n</ul>\n</li>\n<li>Check if <script type=\"math/tex; mode=display\">r</script> is left child of its parent <script type=\"math/tex; mode=display\">P</script>\n<ul>\n<li>\n<script type=\"math/tex; mode=display\">r</script> is left child of <script type=\"math/tex; mode=display\">P</script>. Then <script type=\"math/tex; mode=display\">P</script> contains sum of range of <script type=\"math/tex; mode=display\">r</script> and another  child which is outside the range <script type=\"math/tex; mode=display\">[l, r]</script> and we don\'t need parent <script type=\"math/tex; mode=display\">P</script> sum. Add <script type=\"math/tex; mode=display\">r</script>  to <script type=\"math/tex; mode=display\">sum</script> without its parent <script type=\"math/tex; mode=display\">P</script> and set <script type=\"math/tex; mode=display\">r</script> to point to the left of <script type=\"math/tex; mode=display\">P</script> on the upper level.</li>\n<li>\n<script type=\"math/tex; mode=display\">r</script> is not left child of <script type=\"math/tex; mode=display\">P</script>. Then parent <script type=\"math/tex; mode=display\">P</script> contains sum of range which lies in <script type=\"math/tex; mode=display\">[l, r]</script>. Add <script type=\"math/tex; mode=display\">P</script> to <script type=\"math/tex; mode=display\">sum</script> and set <script type=\"math/tex; mode=display\">r</script> to point to the parent of <script type=\"math/tex; mode=display\">P</script>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// get leaf with value &#39;l&#39;</span>\n    <span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"c1\">// get leaf with value &#39;r&#39;</span>\n    <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">l</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n           <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n           <span class=\"n\">l</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n           <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">tree</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">];</span>\n           <span class=\"n\">r</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">l</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"n\">r</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(\\log n)</script>\n</p>\n<p>Time complexity is <script type=\"math/tex; mode=display\">O(\\log n)</script> because on each iteration of the algorithm we move one level up, either to the parent of the  current node or to the next sibling of parent to the left or right direction till the two boundaries meet. In the worst-case scenario this happens at the root after <script type=\"math/tex; mode=display\">\\log n</script> iterations of the algorithm.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<h2 id=\"further-thoughts\">Further Thoughts</h2>\n<p>The iterative version of Segment Trees was introduced in this article. A more intuitive, recursive version of Segment Trees to solve this problem is discussed <a href=\"https://leetcode.com/articles/recursive-approach-segment-trees-range-sum-queries-lazy-propagation/\">here</a>. The concept of Lazy Propagation is also introduced there.</p>\n<p>There is an alternative solution of the problem using Binary Indexed Tree. It is faster and simpler to code.\nYou can find it <a href=\"https://leetcode.com/discuss/74222/java-using-binary-indexed-tree-with-clear-explanation\">here</a>.</p>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(165,'Best Time to Buy and Sell Stock III',3,'Array,Dynamic Programming',0,0,'<p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p><p>Design an algorithm to find the maximum profit. You may complete at most <i>two</i> transactions.</p><p><b>Note:</b><br/>\nYou may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProfit(vector<int>& prices) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProfit(self, prices):\r\n        """\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProfit(int* prices, int pricesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProfit(int[] prices) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(prices) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(prices)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(166,'Longest Absolute File Path',2,'',0,0,'<p></p><p>Suppose we abstract our file system by a string in the following manner:</p><p>The string <code>\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"</code> represents:</p><pre>dir\n    subdir1\n    subdir2\n        file.ext\n</pre><p>The directory <code>dir</code> contains an empty sub-directory <code>subdir1</code> and a sub-directory <code>subdir2</code> containing a file <code>file.ext</code>.</p><p>The string <code>\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"</code> represents:</p><pre>dir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        subsubdir2\n            file2.ext\n</pre><p>The directory <code>dir</code> contains two sub-directories <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and an empty second-level sub-directory <code>subsubdir1</code>. <code>subdir2</code> contains a second-level sub-directory <code>subsubdir2</code> containing a file <code>file2.ext</code>.</p><p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is <code>\"dir/subdir2/subsubdir2/file2.ext\"</code>, and its length is <code>32</code> (not including the double quotes).</p><p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return <code>0</code>.</p><p><b>Note:</b><br/>\n</p><ul>\n<li>The name of a file contains at least a <code>.</code> and an extension.</li>\n<li>The name of a directory or sub-directory will not contain a <code>.</code>.</li>\n</ul><p>Time complexity required: <code>O(n)</code> where <code>n</code> is the size of the input string.</p><p>Notice that <code>a/aa/aaa/file1.txt</code> is not the longest file path, if there is another path <code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int lengthLongestPath(string input) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int lengthLongestPath(String input) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def lengthLongestPath(self, input):\r\n        """\r\n        :type input: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int lengthLongestPath(char* input) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LengthLongestPath(string input) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} input\r\n * @return {number}\r\n */\r\nvar lengthLongestPath = function(input) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} input\r\n# @return {Integer}\r\ndef length_longest_path(input)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func lengthLongestPath(_ input: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthLongestPath(input string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def lengthLongestPath(input: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(167,'Increasing Subsequences',2,'Depth-first Search',0,0,'<p></p><p>\nGiven an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .\n</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> [4, 6, 7, 7]\n<b>Output:</b> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the given array will not exceed 15.</li>\n<li>The range of integer in the given array is [-100,100].</li>\n<li>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findSubsequences(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** findSubsequences(int* nums, int numsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> FindSubsequences(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar findSubsequences = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef find_subsequences(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findSubsequences(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findSubsequences(nums []int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findSubsequences(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(168,'Strong Password Checker',3,'',0,0,'<p></p><p>A password is considered strong if below conditions are all met:</p><ol>\n<li> It has at least 6 characters and at most 20 characters. </li>\n<li> It must contain at least one lowercase letter, at least one uppercase letter, and at least one digit. </li>\n<li> It must NOT contain three repeating characters in a row (\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met). </li>\n</ol><p>Write a function strongPasswordChecker(s), that takes a string s as input, and return the <b>MINIMUM</b> change required to make s a strong password. If s is already strong, return 0.</p><p>Insertion, deletion or replace of any one character are all considered as one change.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int strongPasswordChecker(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int strongPasswordChecker(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def strongPasswordChecker(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int strongPasswordChecker(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int StrongPasswordChecker(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar strongPasswordChecker = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef strong_password_checker(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func strongPasswordChecker(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func strongPasswordChecker(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def strongPasswordChecker(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(169,'Text Justification',3,'String',0,0,'<p></p><p>\nGiven an array of words and a length <i>L</i>, format the text such that each line has exactly <i>L</i> characters and is fully (left and right) justified.\n</p><p>\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>\' \'</code> when necessary so that each line has exactly <i>L</i> characters.\n</p><p>\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n</p><p>\nFor the last line of text, it should be left justified and no extra space is inserted between words.\n</p><p>\nFor example,<br/>\n<b>words</b>: <code>[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]</code><br/>\n<b>L</b>: <code>16</code>.\n</p><p>\nReturn the formatted lines as:<br/>\n</p><pre>\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n</pre><p>\n<b>Note:</b> Each word is guaranteed not to exceed <i>L</i> in length.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show corner cases.</a></p><div class=\"spoilers\"><b>Corner Cases:</b>\n<p>\n</p><ul>\n<li>A line other than the last line might contain only one word. What should you do in this case?<br/>\nIn this case, that line should be left-justified.</li>\n</ul></div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def fullJustify(self, words, maxWidth):\r\n        """\r\n        :type words: List[str]\r\n        :type maxWidth: int\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** fullJustify(char** words, int wordsSize, int maxWidth, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> FullJustify(string[] words, int maxWidth) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} words\r\n * @param {number} maxWidth\r\n * @return {string[]}\r\n */\r\nvar fullJustify = function(words, maxWidth) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\r\n# @param {Integer} max_width\r\n# @return {String[]}\r\ndef full_justify(words, max_width)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fullJustify(words []string, maxWidth int) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(170,'Generate Parentheses',2,'Backtracking,String',0,0,'<p></p><p>\nGiven <i>n</i> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n</p><p>\nFor example, given <i>n</i> = 3, a solution set is:\n</p><pre>\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> generateParenthesis(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def generateParenthesis(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** generateParenthesis(int n, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> GenerateParenthesis(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {string[]}\r\n */\r\nvar generateParenthesis = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {String[]}\r\ndef generate_parenthesis(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func generateParenthesis(_ n: Int) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func generateParenthesis(n int) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(171,'Interleaving String',3,'Dynamic Programming,String',0,0,'<p></p><p>\nGiven <i>s1</i>, <i>s2</i>, <i>s3</i>, find whether <i>s3</i> is formed by the interleaving of <i>s1</i> and <i>s2</i>.\n</p><p>\nFor example,<br/>\nGiven:<br/>\n<i>s1</i> = <code>\"aabcc\"</code>,<br/>\n<i>s2</i> = <code>\"dbbca\"</code>,\n</p><p>\nWhen <i>s3</i> = <code>\"aadbbcbcac\"</code>, return true.<br/>\nWhen <i>s3</i> = <code>\"aadbbbaccc\"</code>, return false.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isInterleave(string s1, string s2, string s3) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isInterleave(self, s1, s2, s3):\r\n        """\r\n        :type s1: str\r\n        :type s2: str\r\n        :type s3: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isInterleave(char* s1, char* s2, char* s3) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsInterleave(string s1, string s2, string s3) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s1\r\n * @param {string} s2\r\n * @param {string} s3\r\n * @return {boolean}\r\n */\r\nvar isInterleave = function(s1, s2, s3) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s1\r\n# @param {String} s2\r\n# @param {String} s3\r\n# @return {Boolean}\r\ndef is_interleave(s1, s2, s3)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isInterleave(_ s1: String, _ s2: String, _ s3: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isInterleave(s1 string, s2 string, s3 string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-recursion-with-memoization-accepted\">Approach #2 Recursion with memoization [Accepted]</a></li>\n<li><a href=\"#approach-3-using-2-d-dynamic-programming-accepted\">Approach #3 Using 2-d Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-4-using-1-d-dynamic-programming-accepted\">Approach #4 Using 1-d Dynamic Programming [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We need to determine whether a given string can be formed by interleaving the other two strings.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The most basic idea is to find every string possible by all interleavings of the two given strings(<script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>).\nIn order to implement this method, we are using recursion. We start by taking the current character of the\nfirst string(<script type=\"math/tex; mode=display\">s1</script>) and then appending all possible interleavings of the remaining portion of the first string(<script type=\"math/tex; mode=display\">s1</script>) and the second string(<script type=\"math/tex; mode=display\">s2</script>)\nand comparing each result formed with the required interleaved string(<script type=\"math/tex; mode=display\">s3</script>). Similarly, we choose one character from the second\nstring(<script type=\"math/tex; mode=display\">s2</script>) and form all the interleavings with the remaining portion of <script type=\"math/tex; mode=display\">s2</script> and <script type=\"math/tex; mode=display\">s1</script> to check if the required string <script type=\"math/tex; mode=display\">s1</script> can be formed.</p>\n<p>For implementing the recursive function, we make the function call recursively as\n<script type=\"math/tex; mode=display\">is_Interleave(s1,i+1,s2,j,res+s1.charAt(i),s3)</script> in which we have chosen the current character from <script type=\"math/tex; mode=display\">s1</script> and then make another function call <script type=\"math/tex; mode=display\">is_Interleave(s1,i,s2,j+1,res+s2.charAt(j),s3)</script>, in which the current character of <script type=\"math/tex; mode=display\">s2</script> is chosen. Here, <script type=\"math/tex; mode=display\">res</script> refers to that portion(interleaved) of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> which has already been processed. If anyone of these calls return the result as <script type=\"math/tex; mode=display\">True</script>, it means that atleast one interleaving gives the required result <script type=\"math/tex; mode=display\">s3</script>. The recursive calls end when both the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> have been fully processed.</p>\n<p>Let\'s look at a small example to see how the execution proceeds.</p>\n<div class=\"codehilite\"><pre><span></span>s1=&quot;abc&quot;\ns2=&quot;bcd&quot;\ns3=&quot;abcbdc&quot;\n</pre></div>\n\n\n<p>Firstly we choose \'a\' of s1 as the processed part i.e. res and call the recursive function considering the new strings as s1=\"bc\",\ns2=\"bcd\", s3=\"abcbdc\". When this function returns a result, we again call the recursive function but with the new strings as s1=\"abc\", s2=\"cd\", s3=\"abcbdc\"</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">res</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">s3</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">==</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">ans</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"n\">ans</span><span class=\"o\">|=</span><span class=\"n\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">s2</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">res</span><span class=\"o\">+</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span><span class=\"n\">s3</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span>\n            <span class=\"n\">ans</span><span class=\"o\">|=</span><span class=\"n\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">s2</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">res</span><span class=\"o\">+</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">),</span><span class=\"n\">s3</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInterleave</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">s2</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">,</span><span class=\"n\">s3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^(m+n))</script>. <script type=\"math/tex; mode=display\">m</script> is the length of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">n</script> is the length of <script type=\"math/tex; mode=display\">s2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m+n)</script>. The size of stack for recursive calls can go upto <script type=\"math/tex; mode=display\">m+n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursion-with-memoization-accepted\">Approach #2 Recursion with memoization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the recursive approach discussed above, we are considering every possible string formed by interleaving the two given\nstrings. But, there will be cases encountered in which, the same portion of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> would have been processed already\nbut in different orders(permutations). But irrespective of the order of processing, if the resultant string formed till now\nis matching with the required string(<script type=\"math/tex; mode=display\">s3</script>), the final result is dependent only on the remaining portions of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>, but\nnot on the already processed portion. Thus, the recursive approach leads to redundant computations.</p>\n<p>This redundancy can be removed by making use of memoization along with recursion. For this, we maitain 3 pointers <script type=\"math/tex; mode=display\">i, j, k</script>\n which correspond to the index of the current character of <script type=\"math/tex; mode=display\">s1, s2, s3</script> respectively. Also, we maintain a 2-d memo array to keep a track of the substrings processed so far. <script type=\"math/tex; mode=display\">memo[i][j]</script> stores a 1/0 or -1 depending on\n whether the current portion of strings i.e. upto <script type=\"math/tex; mode=display\">i^{th}</script> index for <script type=\"math/tex; mode=display\">s1</script> and upto <script type=\"math/tex; mode=display\">j^{th}</script> index for s2 has already been evaluated. Again, we start by selecting the current character of <script type=\"math/tex; mode=display\">s1</script>(pointed by $$i$). If it matches the current character\n of <script type=\"math/tex; mode=display\">s3</script>(pointed by <script type=\"math/tex; mode=display\">k</script>), we include it in the processed string and call the same function recurively as:\n <script type=\"math/tex; mode=display\">is\\_Interleave(s1, i+1, s2, j, s3, k+1,memo)</script>\n</p>\n<p>Thus, here we have called the function by incrementing the pointers <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">k</script> since the portion of strings upto those indices\n has already been processed. Similarly, we choose one character from the second string and continue. The recursive function\n ends when either of the two strings <script type=\"math/tex; mode=display\">s1</script> or <script type=\"math/tex; mode=display\">s2</script> has been fully processed. If, let\'s say, the string <script type=\"math/tex; mode=display\">s1</script> has been fully processed,\n we directly compare the remaining portion of <script type=\"math/tex; mode=display\">s2</script> with the remaining portion of <script type=\"math/tex; mode=display\">s3</script>. When the backtrack occurs from the recursive\n calls, we store the value returned by the recursive functions in the memoization array memo appropriatelys so that when it is encountered the next time, the recursive function won\'t be called, but the memoization array itself will return the previous generated result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">).</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"kc\">true</span> <span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">)</span>\n                <span class=\"o\">||</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInterleave</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">memo</span><span class=\"o\">[][]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">is_Interleave</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">s3</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^(m+n))</script>. <script type=\"math/tex; mode=display\">m</script> is the length of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">n</script> is the length of <script type=\"math/tex; mode=display\">s2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m+n)</script>. The size of stack for recursive calls can go upto <script type=\"math/tex; mode=display\">m+n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-2-d-dynamic-programming-accepted\">Approach #3 Using 2-d Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The recursive approach discussed in above solution included a character from one of the strings <script type=\"math/tex; mode=display\">s1</script> or <script type=\"math/tex; mode=display\">s2</script> in the resultant\ninterleaved string and called a recursive function to check whether the remaining portions of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> can be interleaved\nto form the remaining portion of <script type=\"math/tex; mode=display\">s3</script>. In the current approach, we\n look at the same problem the other way around. Here, we include one character from <script type=\"math/tex; mode=display\">s1</script> or <script type=\"math/tex; mode=display\">s2</script> and check whether the\n resultant string formed so far by one particular interleaving of the the current prefix of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> form a prefix of <script type=\"math/tex; mode=display\">s3</script>.</p>\n<p>Thus, this approach relies on the fact that the in order to determine whether a substring\n of <script type=\"math/tex; mode=display\">s3</script>(upto index <script type=\"math/tex; mode=display\">k</script>), can be formed by interleaving strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> upto indices <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> respectively, solely depends\n on the characters of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> upto indices <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> only and not on the characters coming afterwards.</p>\n<p>To implement this method, we\'ll make use of a 2-d boolean array <script type=\"math/tex; mode=display\">dp</script>. In this array <script type=\"math/tex; mode=display\">dp[i][j]</script> implies if it is possible to\n obtain a substring of length <script type=\"math/tex; mode=display\">(i+j+2)</script> which is a prefix of <script type=\"math/tex; mode=display\">s3</script> by some interleaving of prefixes of strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> having\n lengths <script type=\"math/tex; mode=display\">(i+1)</script> and <script type=\"math/tex; mode=display\">(j+1)</script> respectively. For filling in the entry of <script type=\"math/tex; mode=display\">dp[i][j]</script>, we need to consider two cases:</p>\n<ol>\n<li>\n<p>The character\n just included i.e. either at <script type=\"math/tex; mode=display\">i^{th}</script> index of <script type=\"math/tex; mode=display\">s1</script> or at <script type=\"math/tex; mode=display\">j^{th}</script> index of <script type=\"math/tex; mode=display\">s2</script> doesn\'t match the character at <script type=\"math/tex; mode=display\">k^{th}</script> index of <script type=\"math/tex; mode=display\">s3</script>, where <script type=\"math/tex; mode=display\">k=i+j+1</script>.\n In this case, the resultant string formed using some interleaving of prefixes of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> can never result in a prefix of length <script type=\"math/tex; mode=display\">k+1</script> in <script type=\"math/tex; mode=display\">s3</script>. Thus, we enter <script type=\"math/tex; mode=display\">False</script> at the character <script type=\"math/tex; mode=display\">dp[i][j]</script>.</p>\n</li>\n<li>\n<p>The character\n just included i.e. either at <script type=\"math/tex; mode=display\">i^{th}</script> index of <script type=\"math/tex; mode=display\">s1</script> or at <script type=\"math/tex; mode=display\">j^{th}</script> index of <script type=\"math/tex; mode=display\">s2</script>  matches the character at <script type=\"math/tex; mode=display\">k^{th}</script> index of <script type=\"math/tex; mode=display\">s3</script>, where <script type=\"math/tex; mode=display\">k=i+j+1</script>.\nNow, if the character just included(say <script type=\"math/tex; mode=display\">x</script>) which matches the character at <script type=\"math/tex; mode=display\">k^{th}</script> index of <script type=\"math/tex; mode=display\">s3</script>, is the character at <script type=\"math/tex; mode=display\">i^{th}</script> index of <script type=\"math/tex; mode=display\">s1</script>, we need to keep <script type=\"math/tex; mode=display\">x</script> at the last position in the resultant interleaved string formed so far. Thus, in order to use string <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> upto indices <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> to form a resultant string of length <script type=\"math/tex; mode=display\">(i+j+2)</script> which is a prefix of <script type=\"math/tex; mode=display\">s3</script>, we need to ensure that the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> upto indices <script type=\"math/tex; mode=display\">(i-1)</script> and <script type=\"math/tex; mode=display\">j</script> respectively obey the same property.</p>\n</li>\n</ol>\n<p>Similarly, if we just included the <script type=\"math/tex; mode=display\">j^{th}</script> character of <script type=\"math/tex; mode=display\">s2</script>, which matches with the <script type=\"math/tex; mode=display\">k^{th}</script> character of <script type=\"math/tex; mode=display\">s3</script>, we need to ensure that the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> upto indices <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">(j-1)</script> also obey the same\nproperty to enter a <script type=\"math/tex; mode=display\">true</script> at <script type=\"math/tex; mode=display\">dp[i][j]</script>.</p>\n<p>This can be made clear with the following example:</p>\n<div class=\"codehilite\"><pre><span></span>s1=&quot;aabcc&quot;\ns2=&quot;dbbca&quot;\ns3=&quot;aadbbcbcac&quot;\n</pre></div>\n\n\n<!--![97_Interleaving](../Figures/97_Interleaving.gif)-->\n\n<p>!?!../Documents/97_Interleaving.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInterleave</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">dp</span><span class=\"o\">[][]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. dp array of size <script type=\"math/tex; mode=display\">m*n</script> is filled.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. 2-d DP of size <script type=\"math/tex; mode=display\">(m+1)*(n+1)</script> is required. <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> are the lengths of strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> repectively.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-1-d-dynamic-programming-accepted\">Approach #4 Using 1-d Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is the same as the previous approach except that we have used only 1-d <script type=\"math/tex; mode=display\">dp</script> array to store the results of the\n prefixes of the strings processed so far. Instead of maintaining a 2-d array, we can maintain a 1-d array only and update the\n array\'s element <script type=\"math/tex; mode=display\">dp[i]</script> when needed using <script type=\"math/tex; mode=display\">dp[i-1]</script> and the previous value of <script type=\"math/tex; mode=display\">dp[i]</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInterleave</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">dp</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. dp array of size <script type=\"math/tex; mode=display\">n</script> is filled <script type=\"math/tex; mode=display\">m</script> times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">n</script> is the length of the string <script type=\"math/tex; mode=display\">s1</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(172,'Multiply Strings',2,'Math,String',0,0,'<p></p><p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>.</p><p><b>Note:</b>\n</p><ol>\n<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>\n<li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>\n<li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>\n<li>You <b>must not use any built-in BigInteger library</b> or <b>convert the inputs to integer</b> directly.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string multiply(string num1, string num2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String multiply(String num1, String num2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def multiply(self, num1, num2):\r\n        """\r\n        :type num1: str\r\n        :type num2: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* multiply(char* num1, char* num2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string Multiply(string num1, string num2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} num1\r\n * @param {string} num2\r\n * @return {string}\r\n */\r\nvar multiply = function(num1, num2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num1\r\n# @param {String} num2\r\n# @return {String}\r\ndef multiply(num1, num2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func multiply(_ num1: String, _ num2: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func multiply(num1 string, num2 string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def multiply(num1: String, num2: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(173,'Implement Stack using Queues',1,'Stack,Design',0,0,'<p></p><p>\nImplement the following operations of a stack using queues.\n</p><ul>\n<li>\npush(x) -- Push element x onto stack.\n</li>\n<li>\npop() -- Removes the element on top of the stack.\n</li>\n<li>\ntop() -- Get the top element.\n</li>\n<li>\nempty() -- Return whether the stack is empty.\n</li>\n</ul><b>Notes:</b><br/><ul>\n<li>You must use <i>only</i> standard operations of a queue -- which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\n<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\n<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MyStack {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyStack() {\r\n        \r\n    }\r\n    \r\n    /** Push element x onto stack. */\r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element on top of the stack and returns that element. */\r\n    int pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the top element. */\r\n    int top() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the stack is empty. */\r\n    bool empty() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * MyStack obj = new MyStack();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.top();\r\n * bool param_4 = obj.empty();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MyStack {\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n        \n    }\n    \n    /** Push element x onto stack. */\n    public void push(int x) {\n        \n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    public int pop() {\n        \n    }\n    \n    /** Get the top element. */\n    public int top() {\n        \n    }\n    \n    /** Returns whether the stack is empty. */\n    public boolean empty() {\n        \n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MyStack(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def push(self, x):\r\n        """\r\n        Push element x onto stack.\r\n        :type x: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def pop(self):\r\n        """\r\n        Removes the element on top of the stack and returns that element.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def top(self):\r\n        """\r\n        Get the top element.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def empty(self):\r\n        """\r\n        Returns whether the stack is empty.\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n\r\n# Your MyStack object will be instantiated and called as such:\r\n# obj = MyStack()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.empty()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} MyStack;\n\n/** Initialize your data structure here. */\nMyStack* myStackCreate(int maxSize) {\n    \n}\n\n/** Push element x onto stack. */\nvoid myStackPush(MyStack* obj, int x) {\n    \n}\n\n/** Removes the element on top of the stack and returns that element. */\nint myStackPop(MyStack* obj) {\n    \n}\n\n/** Get the top element. */\nint myStackTop(MyStack* obj) {\n    \n}\n\n/** Returns whether the stack is empty. */\nbool myStackEmpty(MyStack* obj) {\n    \n}\n\nvoid myStackFree(MyStack* obj) {\n    \n}\n\n/**\n * Your MyStack struct will be instantiated and called as such:\n * struct MyStack* obj = myStackCreate(maxSize);\n * myStackPush(obj, x);\n * int param_2 = myStackPop(obj);\n * int param_3 = myStackTop(obj);\n * bool param_4 = myStackEmpty(obj);\n * myStackFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MyStack {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyStack() {\r\n        \r\n    }\r\n    \r\n    /** Push element x onto stack. */\r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element on top of the stack and returns that element. */\r\n    public int Pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the top element. */\r\n    public int Top() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the stack is empty. */\r\n    public bool Empty() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * MyStack obj = new MyStack();\r\n * obj.Push(x);\r\n * int param_2 = obj.Pop();\r\n * int param_3 = obj.Top();\r\n * bool param_4 = obj.Empty();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyStack = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Push element x onto stack. \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMyStack.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes the element on top of the stack and returns that element.\r\n * @return {number}\r\n */\r\nMyStack.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the top element.\r\n * @return {number}\r\n */\r\nMyStack.prototype.top = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Returns whether the stack is empty.\r\n * @return {boolean}\r\n */\r\nMyStack.prototype.empty = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyStack object will be instantiated and called as such:\r\n * var obj = Object.create(MyStack).createNew()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.top()\r\n * var param_4 = obj.empty()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MyStack\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Push element x onto stack.\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes the element on top of the stack and returns that element.\r\n    :rtype: Integer\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the top element.\r\n    :rtype: Integer\r\n=end\r\n    def top()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns whether the stack is empty.\r\n    :rtype: Boolean\r\n=end\r\n    def empty()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyStack object will be instantiated and called as such:\r\n# obj = MyStack.new()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.empty()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MyStack struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyStack {\r\n    \r\n}\r\n\r\n\r\n/** Push element x onto stack. */\r\nfunc (this *MyStack) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\n/** Removes the element on top of the stack and returns that element. */\r\nfunc (this *MyStack) Pop() int {\r\n    \r\n}\r\n\r\n\r\n/** Get the top element. */\r\nfunc (this *MyStack) Top() int {\r\n    \r\n}\r\n\r\n\r\n/** Returns whether the stack is empty. */\r\nfunc (this *MyStack) Empty() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * param_2 := obj.Pop();\r\n * param_3 := obj.Top();\r\n * param_4 := obj.Empty();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class MyStack() {\n    \n    /** Push element x onto stack. */\n    def push(int x) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    def pop() : Int = {\n\n    }\n    \n    /** Get the top element. */\n    def top() : Int = {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    def empty() : Boolean = {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack();\n * obj.push(x);\n * Int param_2 = obj.pop();\n * Int param_3 = obj.top();\n * Boolean param_4 = obj.empty();\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-two-queues-push-o1-pop-on\">Approach #1 (Two Queues, push - O(1), pop O(n) )</a></li>\n<li><a href=\"#approach-2-two-queues-push-on-pop-o1\">Approach #2 (Two Queues, push - O(n), pop O(1) )</a></li>\n<li><a href=\"#approach-3-one-queue-push-on-pop-o1\">Approach #3 (One Queue, push - O(n), pop O(1) )</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for beginners. It introduces the following ideas:\nStack, Queue.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-two-queues-push-o1-pop-on\">Approach #1 (Two Queues, push - <script type=\"math/tex; mode=display\">O(1)</script>, pop <script type=\"math/tex; mode=display\">O(n)</script> )</h4>\n<p><strong>Intuition</strong></p>\n<p>Stack is <strong>LIFO</strong> (last in - first out) data structure, in which elements are added and removed from the same end, called <code>top</code>.\nIn general stack is implemented using array or linked list, but in the current article we will review a different approach for implementing stack using queues. In contrast queue is <strong>FIFO</strong> (first in - first out) data structure, in which elements are added only from the one side - <code>rear</code> and removed from the other - <code>front</code>. In order to implement stack using queues, we need to maintain two queues <code>q1</code> and <code>q2</code>. Also we will keep top stack element in a constant memory.</p>\n<p><strong>Algorithm</strong></p>\n<p><strong>Push</strong></p>\n<p>The new element is always added to the rear of queue <code>q1</code> and it is kept as <code>top</code> stack element</p>\n<p align=\"center\"><img alt=\"Push an element in stack\" src=\"https://leetcode.com/media/original_images/225_stack_using_queues_pushA.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 1. Push an element in stack</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"kd\">private</span> <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">top</span><span class=\"o\">;</span>\n\n<span class=\"c1\">// Push element x onto stack.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n    <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Queue is implemented as linked list and <code>add</code> operation has <script type=\"math/tex; mode=display\">O(1)</script> time complexity.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>\n</p>\n</li>\n</ul>\n<p><strong>Pop</strong></p>\n<p>We need to remove the element from the top of the stack. This is the last inserted element in <code>q1</code>.\nBecause queue is FIFO (first in - first out) data structure, the last inserted element could be removed only after all elements, except it, have been removed. For this reason we need to maintain additional queue <code>q2</code>, which will serve as a temporary storage to enqueue the removed elements from q1. The last inserted element in <code>q2</code> is kept as top. Then the algorithm removes the last element in <code>q1</code>. We swap <code>q1</code> with <code>q2</code> to avoid copying all elements from <code>q2</code> to <code>q1</code>.</p>\n<p align=\"center\"><img alt=\"Pop an element from stack\" src=\"https://leetcode.com/media/original_images/225_stack_using_queues_popA.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 2. Pop an element from stack</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Removes the element on top of the stack.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n        <span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">top</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n    <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">;</span>\n    <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">q2</span><span class=\"o\">;</span>\n    <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The algorithm  dequeues n elements from <code>q1</code> and enqueues <script type=\"math/tex; mode=display\">n - 1</script> elements to <code>q2</code>, where <script type=\"math/tex; mode=display\">n</script> is the stack size. This gives <script type=\"math/tex; mode=display\">2n - 1</script> operations.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-two-queues-push-on-pop-o1\">Approach #2 (Two Queues, push - <script type=\"math/tex; mode=display\">O(n)</script>, pop <script type=\"math/tex; mode=display\">O(1)</script> )</h4>\n<p><strong>Algorithm</strong></p>\n<p><strong>Push</strong></p>\n<p>The algorithm inserts each new element to queue <code>q2</code> and keep it as the <code>top</code> element. In case queue <code>q1</code> is not empty (there are elements in the stack), we remove all elements from <code>q1</code> and add them to <code>q2</code>. In this way the new inserted element (<code>top</code> element in the stack) will be always positioned at the front of <code>q2</code>. We swap <code>q1</code> with <code>q2</code> to avoid copying all elements from <code>q2</code> to <code>q1</code>.</p>\n<p align=\"center\"><img alt=\"Push an element in stack\" src=\"https://leetcode.com/media/original_images/225_stack_using_queues_pushB.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 3. Push an element in stack</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n    <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>                \n        <span class=\"n\">q2</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">Queue</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">;</span>\n    <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">q2</span><span class=\"o\">;</span>\n    <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The algorithm  removes n elements from <code>q1</code> and inserts <script type=\"math/tex; mode=display\">n + 1</script> elements to <code>q2</code>, where n is the stack size. This gives <script type=\"math/tex; mode=display\">2n + 1</script> operations. The operations <code>add</code> and <code>remove</code> in linked lists has <script type=\"math/tex; mode=display\">O(1)</script> complexity.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<p><strong>Pop</strong></p>\n<p>The algorithm dequeues an element from  queue <code>q1</code> and keeps front element of <code>q1</code> as <code>top</code>.</p>\n<p align=\"center\"><img alt=\"Pop an element from stack\" src=\"https://leetcode.com/media/original_images/225_stack_using_queues_popB.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 4. Pop an element from stack</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Removes the element on top of the stack.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p>In both approaches <code>empty</code> and <code>top</code> operations have the same implementation.</p>\n<p><strong>Empty</strong></p>\n<p>Queue <code>q1</code> always contains all stack elements, so the algorithm checks <code>q1</code> size to return if the stack is empty.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Return whether the stack is empty.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">empty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p><strong>Top</strong></p>\n<p>The <code>top</code> element is kept in constant memory and is modified each time when we push or pop an element.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Get the top element.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">top</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">top</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\n The <code>top</code> element has been calculated in advance and only returned in <code>top</code> operation.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<hr />\n<h4 id=\"approach-3-one-queue-push-on-pop-o1\">Approach #3 (One Queue, push - <script type=\"math/tex; mode=display\">O(n)</script>, pop <script type=\"math/tex; mode=display\">O(1)</script> )</h4>\n<p>The mentioned above two approaches have one weakness, they use two queues. This could be optimized as we use only one queue, instead of two.</p>\n<p><strong>Algorithm</strong></p>\n<p><strong>Push</strong></p>\n<p>When we push an element into a queue, it will be stored at back of the queue due to queue\'s properties.\nBut we need to implement a stack, where last inserted element should be in the front of the queue, not at the back. To achieve this we can invert the order of queue elements when pushing a new element.</p>\n<p align=\"center\"><img alt=\"Push an element in stack\" src=\"https://leetcode.com/media/original_images/225_stack_using_queues_pushC.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 5. Push an element in stack</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span><span class=\"o\">&lt;&gt;();</span>\n\n<span class=\"c1\">// Push element x onto stack.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">sz</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">());</span>\n        <span class=\"n\">sz</span><span class=\"o\">--;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The algorithm  removes n elements and inserts <script type=\"math/tex; mode=display\">n + 1</script> elements to <code>q1</code> , where n is the stack size. This gives <script type=\"math/tex; mode=display\">2n + 1</script> operations. The operations <code>add</code> and <code>remove</code> in linked lists has <script type=\"math/tex; mode=display\">O(1)</script> complexity.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<p><strong>Pop</strong></p>\n<p>The last inserted element is always stored at the front of <code>q1</code> and we can pop it for constant time.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Removes the element on top of the stack.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p><strong>Empty</strong></p>\n<p>Queue <code>q1</code> contains all stack elements, so the algorithm checks if <code>q1</code> is empty.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Return whether the stack is empty.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">empty</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p><strong>Top</strong></p>\n<p>The <code>top</code> element is always positioned at the front of <code>q1</code>. Algorithm return it.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Get the top element.</span>\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">top</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(174,'Move Zeroes',1,'Array,Two Pointers',0,0,'<p></p><p>\nGiven an array <code>nums</code>, write a function to move all <code>0</code>\'s to the end of it while maintaining the relative order of the non-zero elements.\n</p><p>\nFor example, given <code>nums  = [0, 1, 0, 3, 12]</code>, after calling your function, <code>nums</code> should be <code>[1, 3, 12, 0, 0]</code>.\n</p><p>\n<b>Note</b>:<br/>\n</p><ol>\n<li>You must do this <b>in-place</b> without making a copy of the array.</li>\n<li>Minimize the total number of operations.</li>\n</ol><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void moveZeroes(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void moveZeroes(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def moveZeroes(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def moveZeroes(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void moveZeroes(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void MoveZeroes(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */\r\nvar moveZeroes = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Void} Do not return anything, modify nums in-place instead.\r\ndef move_zeroes(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func moveZeroes(_ nums: inout [Int]) {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func moveZeroes(nums []int)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def moveZeroes(nums: Array[Int]): Unit = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-space-sub-optimal-accepted\">Approach #1 (Space Sub-Optimal) [Accepted]</a></li>\n<li><a href=\"#approach-2-space-optimal-operation-sub-optimal-accepted\">Approach #2 (Space Optimal, Operation Sub-Optimal) [Accepted]</a></li>\n<li><a href=\"#approach-3-optimal-accepted\">Approach #3 (Optimal) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<p>This question comes under a broad category of \"Array Transformation\". This category is the meat of tech interviews. Mostly because arrays are such a simple and easy to use data structure. Traversal or representation doesn\'t require any boilerplate code and most of your code will look like the Pseudocode itself.</p>\n<p>The 2 requirements of the question are:</p>\n<ol>\n<li>\n<p>Move all the 0\'s to the end of array.</p>\n</li>\n<li>\n<p>All the non-zero elements must retain their original order.</p>\n</li>\n</ol>\n<p>It\'s good to realize here that both the requirements are mutually exclusive, i.e., you can solve the individual sub-problems and then combine them for the final solution.</p>\n<h4 id=\"approach-1-space-sub-optimal-accepted\">Approach #1 (Space Sub-Optimal) [Accepted]</h4>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">moveZeroes</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// Count the zeroes</span>\n    <span class=\"kt\">int</span> <span class=\"n\">numZeroes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">numZeroes</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Make all the non-zero elements retain their original order.</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Move all zeroes to the end</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">numZeroes</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ans</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Combine the result</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Space Complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Since we are creating the \"ans\" array to store results.</p>\n<p>Time Complexity: <script type=\"math/tex; mode=display\">O(n)</script>. However, the total number of operations are sub-optimal. We can achieve the same result in less number of operations.</p>\n<p>If asked in an interview, the above solution would be a good start. You can explain the interviewer(not code) the above and build your base for the next Optimal Solution.</p>\n<hr />\n<h4 id=\"approach-2-space-optimal-operation-sub-optimal-accepted\">Approach #2 (Space Optimal, Operation Sub-Optimal) [Accepted]</h4>\n<p>This approach works the same way as above, i.e. , first fulfills one requirement and then another. The catch? It does it in a clever way. The above problem can also be stated in alternate way, \" Bring all the non 0 elements to the front of array keeping their relative order same\".</p>\n<p>This is a 2 pointer approach. The fast pointer which is denoted by variable \"cur\" does the job of processing new elements. If the newly found element is not a 0, we record it just after the last found non-0 element. The position of last found non-0 element is denoted by the slow pointer \"lastNonZeroFoundAt\" variable. As we keep finding new non-0 elements, we just overwrite them at the \"lastNonZeroFoundAt + 1\" \'th index. This overwrite will not result in any loss of data because we already processed what was there(if it were non-0,it already is now written at it\'s corresponding index,or if it were 0 it will be handled later in time).</p>\n<p>After the \"cur\" index reaches the end of array, we now know that all the non-0 elements have been moved to beginning of array in their original order. Now comes the time to fulfil other requirement, \"Move all 0\'s to the end\". We now simply need to fill all the indexes after the \"lastNonZeroFoundAt\" index with 0.</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">moveZeroes</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lastNonZeroFoundAt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// If the current element is not 0, then we need to</span>\n    <span class=\"c1\">// append it just in front of last non 0 element we found. </span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">lastNonZeroFoundAt</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// After we have finished processing new elements,</span>\n    <span class=\"c1\">// all the non-zero elements are already at beginning of array.</span>\n    <span class=\"c1\">// We just need to fill remaining array with 0&#39;s.</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">lastNonZeroFoundAt</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Space Complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Only constant space is used.</p>\n<p>Time Complexity: <script type=\"math/tex; mode=display\">O(n)</script>. However, the total number of operations are still sub-optimal. The total operations (array writes) that code does is <script type=\"math/tex; mode=display\">n</script> (Total number of elements).</p>\n<hr />\n<h4 id=\"approach-3-optimal-accepted\">Approach #3 (Optimal) [Accepted]</h4>\n<p>The total number of operations of the previous approach is sub-optimal. For example, the array which has all (except last) leading zeroes: [0, 0, 0, ..., 0, 1].How many write operations to the array? For the previous approach, it writes 0\'s <script type=\"math/tex; mode=display\">n-1</script> times, which is not necessary. We could have instead written just once. How?\n..... \nBy only fixing the non-0 element,i.e., 1.</p>\n<p>The optimal approach is again a subtle extension of above solution. A simple realization is if the current element is non-0, its\' correct position can at best be it\'s current position or a position earlier. If it\'s the latter one, the current position will be eventually occupied by a non-0 ,or a 0, which lies at a index greater than \'cur\' index. We fill the current position by 0 right away,so that unlike the previous solution, we don\'t need to come back here in next iteration.</p>\n<p>In other words, the code will maintain the following invariant:</p>\n<blockquote>\n<ol>\n<li>\n<p>All elements before the slow pointer (lastNonZeroFoundAt) are non-zeroes.</p>\n</li>\n<li>\n<p>All elements between the current and slow pointer are zeroes.</p>\n</li>\n</ol>\n</blockquote>\n<p>Therefore, when we encounter a non-zero element, we need to swap elements pointed by current and slow pointer, then advance both pointers. If it\'s zero element, we just advance current pointer.</p>\n<p>With this invariant in-place, it\'s easy to see that the algorithm will work.</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">moveZeroes</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">lastNonZeroFoundAt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">cur</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">cur</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">lastNonZeroFoundAt</span><span class=\"o\">++</span><span class=\"p\">],</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Space Complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Only constant space is used.</p>\n<p>Time Complexity: <script type=\"math/tex; mode=display\">O(n)</script>. However, the total number of operations are optimal. The total operations (array writes) that code does is Number of non-0 elements.This gives us a much better best-case (when most of the elements are 0) complexity than last solution. However, the worst-case (when all elements are non-0) complexity for both the algorithms is same.</p>\n<p>Analysis written by: @spandan.pathak</p>',NULL,1,'none','none','none'),(175,'Continuous Subarray Sum',2,'Dynamic Programming,Math',0,0,'<p></p><p>\nGiven a list of <b>non-negative</b> numbers and a target <b>integer</b> k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of <b>k</b>, that is, sums up to n*k where n is also an <b>integer</b>.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [23, 2, 4, 6, 7],  k=6\n<b>Output:</b> True\n<b>Explanation:</b> Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [23, 2, 6, 4, 7],  k=6\n<b>Output:</b> True\n<b>Explanation:</b> Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the array won\'t exceed 10,000.</li>\n<li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool checkSubarraySum(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def checkSubarraySum(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool checkSubarraySum(int* nums, int numsSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CheckSubarraySum(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {boolean}\r\n */\r\nvar checkSubarraySum = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Boolean}\r\ndef check_subarray_sum(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func checkSubarraySum(_ nums: [Int], _ k: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkSubarraySum(nums []int, k int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def checkSubarraySum(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(176,'Delete Node in a BST',2,'Tree',0,0,'<p></p><p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p><p>Basically, the deletion can be divided into two stages:\n</p><ol>\n<li>Search for a node to remove.</li>\n<li>If the node is found, delete the node.</li>\n</ol><p><b>Note:</b> Time complexity should be O(height of tree).</p><p><b>Example:</b>\n</p><pre>\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nGiven key to delete is 3. So we find the node with value 3 and delete it.\n\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\nAnother valid answer is [5,2,6,null,4,null,7].\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* deleteNode(TreeNode* root, int key) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def deleteNode(self, root, key):\r\n        """\r\n        :type root: TreeNode\r\n        :type key: int\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* deleteNode(struct TreeNode* root, int key) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode DeleteNode(TreeNode root, int key) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} key\r\n * @return {TreeNode}\r\n */\r\nvar deleteNode = function(root, key) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} key\r\n# @return {TreeNode}\r\ndef delete_node(root, key)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func deleteNode(_ root: TreeNode?, _ key: Int) -> TreeNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc deleteNode(root *TreeNode, key int) *TreeNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def deleteNode(root: TreeNode, key: Int): TreeNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(177,'Number of Islands',2,'Depth-first Search,Breadth-first Search,Union Find',0,0,'<p></p><p>Given a 2d grid map of <code>\'1\'</code>s (land) and <code>\'0\'</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p><i><b>Example 1:</b></i></p><pre>11110<br/>11010<br/>11000<br/>00000</pre><p>Answer: 1</p><p><i><b>Example 2:</b></i></p><pre>11000<br/>11000<br/>00100<br/>00011</pre><p>Answer: 3</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numIslands(vector<vector<char>>& grid) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numIslands(self, grid):\r\n        """\r\n        :type grid: List[List[str]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numIslands(char** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumIslands(char[,] grid) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} grid\r\n * @return {number}\r\n */\r\nvar numIslands = function(grid) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} grid\r\n# @return {Integer}\r\ndef num_islands(grid)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numIslands(_ grid: [[Character]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numIslands(grid [][]byte) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numIslands(grid: Array[Array[Char]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(178,'Best Time to Buy and Sell Stock II',1,'Array,Greedy',0,0,'<p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProfit(vector<int>& prices) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProfit(self, prices):\r\n        """\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProfit(int* prices, int pricesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProfit(int[] prices) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(prices) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(prices)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxProfit(_ prices: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-peak-valley-approach-accepted\">Approach #2 (Peak Valley Approach) [Accepted]</a></li>\n<li><a href=\"#approach-3-simple-one-pass-accepted\">Approach #3 (Simple One Pass) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We have to determine the maximum profit that can be obtained by making the transactions (no limit on the number of transactions done). For this we need to find out those sets of buying and selling prices which together lead to the maximization of profit.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>In this case, we simply calculate the profit corresponding to all the possible sets of transactions and find out the maximum profit out of them.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">prices</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">prices</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">calculate</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">prices</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&gt;=</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">;</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">start</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">profit</span> <span class=\"o\">=</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">prices</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">profit</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxprofit</span><span class=\"o\">)</span>\n                        <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"n\">profit</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">maxprofit</span> <span class=\"o\">&gt;</span> <span class=\"n\">max</span><span class=\"o\">)</span>\n                <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">maxprofit</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n^n)</script>. Recursive function is called <script type=\"math/tex; mode=display\">n^n</script> times.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Depth of recursion is <script type=\"math/tex; mode=display\">n</script>.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-peak-valley-approach-accepted\">Approach #2 (Peak Valley Approach) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Say the given array is:</p>\n<p>[7, 1, 5, 3, 6, 4].</p>\n<p>If we plot the numbers of the given array on a graph, we get:</p>\n<p align=\"center\"><img alt=\"Profit Graph\" src=\"https://leetcode.com/media/original_images/122_maxprofit_1.PNG\" width=\"539px\" /></p>\n<p>If we analyze the graph, we notice that the points of interest are the consecutive valleys and peaks.</p>\n<p>Mathematically speaking:\n<script type=\"math/tex; mode=display\">\nTotal Profit= \\sum_{i}(height(peak_i)-height(valley_i))\n</script>\n</p>\n<p>The key point is we need to consider every peak immediately following a valley to maximize the profit. In case we skip one of the peaks (trying to obtain more profit), we will end up losing the profit over one of the transactions leading to an overall lesser profit.</p>\n<p>For example, in the above case, if we skip <script type=\"math/tex; mode=display\">peak_i</script> and <script type=\"math/tex; mode=display\">valley_j</script> trying to obtain more profit by considering points with more difference in heights, the net profit obtained will always be lesser than the one obtained by including them, since <script type=\"math/tex; mode=display\">C</script> will always be lesser than <script type=\"math/tex; mode=display\">A+B</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">prices</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">valley</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">peak</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"n\">valley</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"n\">peak</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"n\">maxprofit</span> <span class=\"o\">+=</span> <span class=\"n\">peak</span> <span class=\"o\">-</span> <span class=\"n\">valley</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxprofit</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single pass.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space required.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-simple-one-pass-accepted\">Approach #3 (Simple One Pass) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This solution follows the logic used in Approach 2 itself, but with only a slight variation. In this case, instead of looking for every peak following a valley, we can simply go on crawling over the slope and keep on adding the profit obtained from every consecutive transaction. In the end,we will be using the peaks and valleys effectively, but we need not track the costs corresponding to the peaks and valleys along with the maximum profit, but we can directly keep on adding the difference between the consecutive numbers of the array if the second number is larger than the first one, and at the total sum we obtain will be the maximum profit. This approach will simplify the solution.\nThis can be made clearer by taking this example:</p>\n<p>[1, 7, 2, 3, 6, 7, 6, 7]</p>\n<p>The graph corresponding to this array is:</p>\n<p align=\"center\"><img alt=\"Profit Graph\" src=\"https://leetcode.com/media/original_images/122_maxprofit_2.PNG\" width=\"539px\" /></p>\n<p>From the above graph, we can observe that the sum <script type=\"math/tex; mode=display\">A+B+C</script> is equal to the difference <script type=\"math/tex; mode=display\">D</script> corresponding to the difference between the heights of the consecutive peak and valley.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">prices</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">maxprofit</span> <span class=\"o\">+=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxprofit</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single pass.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script>. Constant space needed.</p>\n</li>\n</ul>\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(179,'Zuma Game',3,'Depth-first Search',0,0,'<p></p><p>Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.</p><p>\nEach time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.</p><p>\nFind the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.\n</p><pre>\n<p><b>Examples:</b><br/>\n<b>Input:</b> \"WRRBBW\", \"RB\"\n<b>Output:</b> -1\n<b>Explanation:</b> WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW\n\n<b>Input:</b> \"WWRRBBWW\", \"WRBRW\"\n<b>Output:</b> 2\n<b>Explanation:</b> WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n\n<b>Input:</b>\"G\", \"GGGGG\"\n<b>Output:</b> 2\n<b>Explanation:</b> G -&gt; G[G] -&gt; GG[G] -&gt; empty \n\n<b>Input:</b> \"RBYYBBRRB\", \"YRBGB\"\n<b>Output:</b> 3\n<b>Explanation:</b> RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</p></pre><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume that the initial row of balls on the table won’t have any 3 or more consecutive balls with the same color.</li>\n<li>The number of balls on the table won\'t exceed 20, and the string represents these balls is called \"board\" in the input.</li>\n<li>The number of balls in your hand won\'t exceed 5, and the string represents these balls is called \"hand\" in the input.</li>\n<li>Both input strings will be non-empty and only contain characters \'R\',\'Y\',\'B\',\'G\',\'W\'.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMinStep(string board, string hand) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMinStep(String board, String hand) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMinStep(self, board, hand):\r\n        """\r\n        :type board: str\r\n        :type hand: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMinStep(char* board, char* hand) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMinStep(string board, string hand) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} board\r\n * @param {string} hand\r\n * @return {number}\r\n */\r\nvar findMinStep = function(board, hand) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} board\r\n# @param {String} hand\r\n# @return {Integer}\r\ndef find_min_step(board, hand)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMinStep(_ board: String, _ hand: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMinStep(board string, hand string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMinStep(board: String, hand: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(180,'Valid Triangle Number',2,'Array',0,0,'<p>Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\n\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [2,2,3,4]\n<b>Output:</b> 3\n<b>Explanation:</b>\nValid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the given array won\'t exceed 1000.</li>\n<li>The integers in the given array are in the range of [0, 1000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int triangleNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int triangleNumber(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def triangleNumber(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def triangleNumber(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int triangleNumber(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int TriangleNumber(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar triangleNumber = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef triangle_number(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func triangleNumber(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func triangleNumber(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def triangleNumber(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-binary-search-accepted\">Approach #2 Using Binary Search [Accepted]</a></li>\n<li><a href=\"#approach-3-linear-scan-accepted\">Approach #3 Linear Scan [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The condition for the triplets <script type=\"math/tex; mode=display\">(a, b, c)</script> representing the lengths of the sides of a triangle, to form a valid triangle, is that the sum of any two sides should always be greater than the third side alone. i.e. <script type=\"math/tex; mode=display\">a + b > c</script>, <script type=\"math/tex; mode=display\">b + c > a</script>, <script type=\"math/tex; mode=display\">a + c > b</script>. </p>\n<p>The simplest method to check this is to consider every possible triplet in the given <script type=\"math/tex; mode=display\">nums</script> array and checking if the triplet satisfies the three inequalities mentioned above. Thus, we can keep a track of the <script type=\"math/tex; mode=display\">count</script> of the number of triplets satisfying these inequalities. When all the triplets have been considered, the <script type=\"math/tex; mode=display\">count</script> gives the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">triangleNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                        <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"n\">I</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. Three nested loops are there to check every triplet.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-binary-search-accepted\">Approach #2 Using Binary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>If we sort the given <script type=\"math/tex; mode=display\">nums</script> array once, we can solve the given problem in a better way. This is because, if we consider a triplet <script type=\"math/tex; mode=display\">(a, b, c)</script> such that <script type=\"math/tex; mode=display\">a &leq; b &leq; c</script>, we need not check all the three inequalities for checking the validity of the triangle formed by them. But, only one condition <script type=\"math/tex; mode=display\">a + b > c</script> would suffice. This happens because <script type=\"math/tex; mode=display\">c &geq; b</script> and <script type=\"math/tex; mode=display\">c &geq; a</script>. Thus, adding any number to <script type=\"math/tex; mode=display\">c</script> will always produce a sum which is greater than either <script type=\"math/tex; mode=display\">a</script> or <script type=\"math/tex; mode=display\">b</script> considered alone. Thus, the inequalities <script type=\"math/tex; mode=display\">c + a > b</script> and <script type=\"math/tex; mode=display\">c + b > a</script> are satisfied implicitly by virtue of the  property <script type=\"math/tex; mode=display\">a < b < c</script>.</p>\n<p>From this, we get the idea that we can sort the given <script type=\"math/tex; mode=display\">nums</script> array. Then, for every pair <script type=\"math/tex; mode=display\">(nums[i], nums[j])</script> considered starting from the beginning of the array, such that <script type=\"math/tex; mode=display\">j > i</script>(leading to <script type=\"math/tex; mode=display\">nums[j] &geq; nums[i]</script>), we can find out the count of elements <script type=\"math/tex; mode=display\">nums[k]</script>(<script type=\"math/tex; mode=display\">k > j</script>), which satisfy the inequality <script type=\"math/tex; mode=display\">nums[k] > nums[i] + nums[j]</script>. We can do so for every pair <script type=\"math/tex; mode=display\">(i, j)</script> considered and get the required result.</p>\n<p>We can also observe that, since we\'ve sorted the <script type=\"math/tex; mode=display\">nums</script> array, as we traverse towards the right for choosing the index <script type=\"math/tex; mode=display\">k</script>(for number <script type=\"math/tex; mode=display\">nums[k]</script>), the value of <script type=\"math/tex; mode=display\">nums[k]</script> could increase or remain the same(doesn\'t decrease relative to the previous value). Thus, there will exist a right limit on the value of index <script type=\"math/tex; mode=display\">k</script>, such that the elements satisfy <script type=\"math/tex; mode=display\">nums[k] > nums[i] + nums[j]</script>. Any elements beyond this value of <script type=\"math/tex; mode=display\">k</script> won\'t satisfy this inequality as well, which is obvious.</p>\n<p>Thus, if we are able to find this right limit value of <script type=\"math/tex; mode=display\">k</script>(indicating the element just greater than <script type=\"math/tex; mode=display\">nums[i] + nums[j]</script>), we can conclude that all the elements in <script type=\"math/tex; mode=display\">nums</script> array in the range <script type=\"math/tex; mode=display\">(j+1, k-1)</script>(both included) satisfy the required inequality. Thus, the <script type=\"math/tex; mode=display\">count</script> of elements satisfying the inequality will be given by <script type=\"math/tex; mode=display\">(k-1) - (j+1) + 1 = k - j - 1</script>.</p>\n<p>Since the <script type=\"math/tex; mode=display\">nums</script> array has been sorted now, we can make use of Binary Search to find this right limit of <script type=\"math/tex; mode=display\">k</script>. The following animation shows how Binary Search can be used to find the right limit for a simple example.</p>\n<p>!?!../Documents/Valid_Triangle_Binary.json:1000,563!?!</p>\n<p>Another point to be observed is that once we find a right limit index <script type=\"math/tex; mode=display\">k_{(i,j)}</script> for a particular pair <script type=\"math/tex; mode=display\">(i, j)</script> chosen, when we choose a higher value of <script type=\"math/tex; mode=display\">j</script> for the same value of <script type=\"math/tex; mode=display\">i</script>, we need not start searching for the right limit <script type=\"math/tex; mode=display\">k_{(i,j+1)}</script> from the index <script type=\"math/tex; mode=display\">j+2</script>. Instead, we can start off from the index <script type=\"math/tex; mode=display\">k_{(i,j)}</script> directly where we left off for the last <script type=\"math/tex; mode=display\">j</script> chosen. </p>\n<p>This holds correct because when we choose a higher value of <script type=\"math/tex; mode=display\">j</script>(higher or equal <script type=\"math/tex; mode=display\">nums[j]</script> than the previous one), all the <script type=\"math/tex; mode=display\">nums[k]</script>, such that <script type=\"math/tex; mode=display\">k < k_{(i,j)}</script> will obviously satisfy <script type=\"math/tex; mode=display\">nums[i] + nums[j] > nums[k]</script> for the new value of <script type=\"math/tex; mode=display\">j</script> chosen.</p>\n<p>By taking advantage of this observation, we can limit the range of Binary Search for <script type=\"math/tex; mode=display\">k</script> to shorter values for increasing values of <script type=\"math/tex; mode=display\">j</script> considered while choosing the pairs <script type=\"math/tex; mode=display\">(i, j)</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">binarySearch</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nums</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"n\">l</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">triangleNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">binarySearch</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2logn)</script>. In worst case inner loop will take <script type=\"math/tex; mode=display\">nlogn</script> (binary search applied <script type=\"math/tex; mode=display\">n</script> times).</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(logn)</script>. Sorting takes <script type=\"math/tex; mode=display\">O(logn)</script> space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-linear-scan-accepted\">Approach #3 Linear Scan [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>As discussed in the last approach, once we sort the given <script type=\"math/tex; mode=display\">nums</script> array, we need to find the right limit of the index <script type=\"math/tex; mode=display\">k</script> for a pair of indices <script type=\"math/tex; mode=display\">(i, j)</script> chosen to find the <script type=\"math/tex; mode=display\">count</script> of elements satisfying <script type=\"math/tex; mode=display\">nums[i] + nums[j] > nums[k]</script> for the triplet <script type=\"math/tex; mode=display\">(nums[i], nums[j], nums[k])</script> to form a valid triangle. </p>\n<p>We can find this right limit by simply traversing the index <script type=\"math/tex; mode=display\">k</script>\'s values starting from the index <script type=\"math/tex; mode=display\">k=j+1</script> for a pair <script type=\"math/tex; mode=display\">(i, j)</script> chosen and stopping at the first value of <script type=\"math/tex; mode=display\">k</script> not satisfying the above inequality. Again, the <script type=\"math/tex; mode=display\">count</script> of elements <script type=\"math/tex; mode=display\">nums[k]</script> satisfying <script type=\"math/tex; mode=display\">nums[i] + nums[j] > nums[k]</script> for the pair of indices <script type=\"math/tex; mode=display\">(i, j)</script> chosen is given by <script type=\"math/tex; mode=display\">k - j - 1</script> as discussed in the last approach.</p>\n<p>Further, as discussed in the last approach, when we choose a higher value of index <script type=\"math/tex; mode=display\">j</script> for a particular <script type=\"math/tex; mode=display\">i</script> chosen, we need not start from the index <script type=\"math/tex; mode=display\">j + 1</script>. Instead, we can start off directly from the value of <script type=\"math/tex; mode=display\">k</script> where we left for the last index <script type=\"math/tex; mode=display\">j</script>. This helps to save redundant computations.</p>\n<p>The following animation depicts the process:</p>\n<p>!?!../Documents/Valid_Triangle_Linear.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">triangleNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">])</span>\n                    <span class=\"n\">k</span><span class=\"o\">++;</span>\n                <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Loop of <script type=\"math/tex; mode=display\">k</script> and <script type=\"math/tex; mode=display\">j</script> will be executed <script type=\"math/tex; mode=display\">O(n^2)</script> times in total, because, we do not reinitialize the value of <script type=\"math/tex; mode=display\">k</script> for a new value of <script type=\"math/tex; mode=display\">j</script> chosen(for the same <script type=\"math/tex; mode=display\">i</script>). Thus the complexity will be O(n^2+n^2)=O(n^2).</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(logn)</script>. Sorting takes O(logn) space.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(181,'Battleships in a Board',2,'',0,0,'<p>Given an 2D board, count how many battleships are in it. The battleships are represented with <code>\'X\'</code>s, empty slots are represented with <code>\'.\'</code>s. You may assume the following rules:\n\n</p><ul>\n<li>You receive a valid board, made of only battleships or empty slots.</li>\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.</li>\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\n</ul><p><b>Example:</b><br/>\n</p><pre>X..X\n...X\n...X\n</pre>\nIn the above board there are 2 battleships.\n\n<p><b>Invalid Example:</b><br/>\n</p><pre>...X\nXXXX\n...X\n</pre>\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n<p></p><p><b>Follow up:</b><br/>Could you do it in <b>one-pass</b>, using only <b>O(1) extra memory</b> and <b>without modifying</b> the value of the board?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int countBattleships(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countBattleships(char[][] board) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countBattleships(self, board):\r\n        """\r\n        :type board: List[List[str]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countBattleships(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CountBattleships(char[,] board) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @return {number}\r\n */\r\nvar countBattleships = function(board) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @return {Integer}\r\ndef count_battleships(board)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countBattleships(_ board: [[Character]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countBattleships(board [][]byte) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countBattleships(board: Array[Array[Char]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(182,'First Unique Character in a String',1,'',0,0,'<p></p><p>\nGiven a string, find the first non-repeating character in it and return it\'s index. If it doesn\'t exist, return -1.\n</p><p><b>Examples:</b>\n</p><pre>\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\",\nreturn 2.\n</pre><p>\n<b>Note:</b> You may assume the string contain only lowercase letters.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int firstUniqChar(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int firstUniqChar(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def firstUniqChar(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int firstUniqChar(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FirstUniqChar(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar firstUniqChar = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef first_uniq_char(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func firstUniqChar(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func firstUniqChar(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def firstUniqChar(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(183,'Add Binary',1,'Math,String',0,0,'<p></p><p>\nGiven two binary strings, return their sum (also a binary string).\n</p><p>\nFor example,<br/>\na = <code>\"11\"</code><br/>\nb = <code>\"1\"</code><br/>\nReturn <code>\"100\"</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string addBinary(string a, string b) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def addBinary(self, a, b):\r\n        """\r\n        :type a: str\r\n        :type b: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* addBinary(char* a, char* b) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string AddBinary(string a, string b) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} a\r\n * @param {string} b\r\n * @return {string}\r\n */\r\nvar addBinary = function(a, b) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} a\r\n# @param {String} b\r\n# @return {String}\r\ndef add_binary(a, b)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func addBinary(a string, b string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(184,'Merge Two Sorted Lists',1,'Linked List',0,0,'<p></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def mergeTwoLists(self, l1, l2):\r\n        """\r\n        :type l1: ListNode\r\n        :type l2: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} l1\r\n * @param {ListNode} l2\r\n * @return {ListNode}\r\n */\r\nvar mergeTwoLists = function(l1, l2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} l1\r\n# @param {ListNode} l2\r\n# @return {ListNode}\r\ndef merge_two_lists(l1, l2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(185,'Basic Calculator',3,'Stack,Math',0,0,'<p></p><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <b>non-negative</b> integers and empty spaces <code> </code>.</p><p>You may assume that the given expression is always valid.</p><p>Some examples:<br/>\n</p><pre>\n\"1 + 1\" = 2\n\" 2-1 + 2 \" = 3\n\"(1+(4+5+2)-3)+(6+8)\" = 23\n</pre><p>\n<b>Note:</b> <b>Do not</b> use the <code>eval</code> built-in library function.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int calculate(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int calculate(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def calculate(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int calculate(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Calculate(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar calculate = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef calculate(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func calculate(_ s: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func calculate(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(186,'Unique Binary Search Trees',2,'Tree,Dynamic Programming',0,0,'<p></p><p>Given <i>n</i>, how many structurally unique <b>BST\'s</b> (binary search trees) that store values 1...<i>n</i>?</p><p>\nFor example,<br/>\nGiven <i>n</i> = 3, there are a total of 5 unique BST\'s.\n\n</p><pre>\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numTrees(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numTrees(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numTrees(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numTrees(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumTrees(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar numTrees = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef num_trees(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numTrees(n int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(187,'Dungeon Game',3,'Binary Search,Dynamic Programming',0,0,'<p><style>\ntable.dungeon, .dungeon th, .dungeon td {\n  border:3px solid black;\n}\n\n .dungeon th, .dungeon td {\n    text-align: center;\n    height: 70px;\n    width: 70px;\n}\n</style>\n</p><p>The demons had captured the princess (<b>P</b>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<b>K</b>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess. </p><p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately. </p><p>Some of the rooms are guarded by demons, so the knight loses health (<i>negative</i> integers) upon entering these rooms; \nother rooms are either empty (<i>0\'s</i>) or contain magic orbs that increase the knight\'s health (<i>positive</i> integers).</p><p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. </p><br/><p><b>Write a function to determine the knight\'s minimum initial health so that he is able to rescue the princess.</b></p><p>For example, given the dungeon below, the initial health of the knight must be at least <b>7</b> if he follows the optimal path <code>RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN</code>.</p><table class=\"dungeon\">\n<tr>\n<td>-2 (K)</td>\n<td>-3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-5</td>\n<td>-10</td>\n<td>1</td>\n</tr>\n<tr>\n<td>10</td>\n<td>30</td>\n<td>-5 (P)</td>\n</tr>\n</table>-2K   -3  3\n-5   -10   1\n10 30   5P<br/><p><b>Notes:</b>\n</p><ul>\n<li>The knight\'s health has no upper bound.</li>\n<li>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.  </li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/stellari\">@stellari</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int calculateMinimumHP(vector<vector<int>>& dungeon) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int calculateMinimumHP(int[][] dungeon) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def calculateMinimumHP(self, dungeon):\r\n        """\r\n        :type dungeon: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int calculateMinimumHP(int** dungeon, int dungeonRowSize, int dungeonColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CalculateMinimumHP(int[,] dungeon) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} dungeon\r\n * @return {number}\r\n */\r\nvar calculateMinimumHP = function(dungeon) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} dungeon\r\n# @return {Integer}\r\ndef calculate_minimum_hp(dungeon)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func calculateMinimumHP(_ dungeon: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func calculateMinimumHP(dungeon [][]int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def calculateMinimumHP(dungeon: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(188,'Trapping Rain Water',3,'Array,Stack,Two Pointers',0,0,'<p></p><p>\nGiven <i>n</i> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. \n</p><p>\nFor example, <br/>\nGiven <code>[0,1,0,2,1,0,1,3,2,1,2,1]</code>, return <code>6</code>.\n</p><p>\n<img src=\"http://www.leetcode.com/static/images/problemset/rainwatertrap.png\"/><br/>\n</p><p style=\"font-size: 11px\">The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <b>Thanks Marcos</b> for contributing this image!</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int trap(vector<int>& height) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int trap(int[] height) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def trap(self, height):\r\n        """\r\n        :type height: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int trap(int* height, int heightSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Trap(int[] height) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} height\r\n * @return {number}\r\n */\r\nvar trap = function(height) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} height\r\n# @return {Integer}\r\ndef trap(height)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func trap(_ height: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func trap(height []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute force [Accepted]</a></li>\n<li><a href=\"#approach-2-dynamic-programming-accepted\">Approach #2 Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-3-using-stacks-accepted\">Approach #3 Using stacks [Accepted]</a></li>\n<li><a href=\"#approach-4-using-2-pointers-accepted\">Approach #4 Using 2 pointers [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute force [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Initialize <script type=\"math/tex; mode=display\">ans=0</script>\n</li>\n<li>Iterate the array from left to right:</li>\n<li>Initialize <script type=\"math/tex; mode=display\">\\text{max_left}=0</script> and <script type=\"math/tex; mode=display\">\\text{max_right}=0</script>\n</li>\n<li>Iterate from the current element to the beginning of array updating:\n      <script type=\"math/tex; mode=display\">\\text{max_left}=\\max(\\text{max_left},\\text{height}[j])</script>\n</li>\n<li>Iterate from the current element to the end of array updating:\n      <script type=\"math/tex; mode=display\">\\text{max_right}=\\max(\\text{max_right},\\text{height}[j])</script>\n</li>\n<li>Add <script type=\"math/tex; mode=display\">\\min(\\text{max_left},\\text{max_right}) - \\text{height}[i]</script> to <script type=\"math/tex; mode=display\">\\text{ans}</script>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">trap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max_left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">max_right</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//Search the left part for max bar size</span>\n            <span class=\"n\">max_left</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">max_left</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">//Search the right part for max bar size</span>\n            <span class=\"n\">max_right</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">max_right</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">max_left</span><span class=\"p\">,</span> <span class=\"n\">max_right</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>. For each element of array, we iterate the left and right parts.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script> extra space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-dynamic-programming-accepted\">Approach #2 Dynamic Programming [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.</p>\n<p>The concept is illustrated as shown:</p>\n<p align=\"center\"><img alt=\"Dynamic programming\" src=\"../Figures/42/trapping_rain_water.png\" width=\"500px\" /></p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Find maximum height of bar from the left end upto an index i in the array <script type=\"math/tex; mode=display\">\\text{left_max}</script>.</li>\n<li>Find maximum height of bar from the right end upto an index i in the array <script type=\"math/tex; mode=display\">\\text{right_max}</script>.</li>\n<li>Iterate over the <script type=\"math/tex; mode=display\">\\text{height}</script> array and update ans:</li>\n<li>Add <script type=\"math/tex; mode=display\">\\min(\\text{max_left}[i],\\text{max_right}[i]) - \\text{height}[i]</script> to <script type=\"math/tex; mode=display\">ans</script>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">trap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">height</span> <span class=\"o\">==</span> <span class=\"n\">null</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">left_max</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">),</span> <span class=\"n\">right_max</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">);</span>\n    <span class=\"n\">left_max</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">left_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">left_max</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">right_max</span><span class=\"p\">[</span><span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">right_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">right_max</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">left_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">right_max</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n<li>We store the maximum heights upto a point using 2 iterations of O(n) each.</li>\n<li>\n<p>We finally update <script type=\"math/tex; mode=display\">\\text{ans}</script> using the stored values in O(n).</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> extra space.</p>\n</li>\n<li>Additional <script type=\"math/tex; mode=display\">O(n)</script> space for <script type=\"math/tex; mode=display\">\\text{left_max}</script> and <script type=\"math/tex; mode=display\">\\text{right_max}</script> arrays than in Approach #1.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-stacks-accepted\">Approach #3 Using stacks [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Instead of storing the largest bar upto an index as in Approach #2, we can use stack to keep track of the bars that are bounded by longer bars and hence, may store water. Using the stack, we can do the calculations in only one iteration.</p>\n<p>We keep a stack and iterate over the array. We add the index of the bar to the stack if bar is smaller than or equal to the bar at top of stack, which means that the current bar is bounded by the previous bar in the stack. If we found a bar longer than that at the top, we are sure that the bar at the top of the stack is bounded by the current bar and a previous bar in the stack, hence, we can pop it and add resulting trapped water to <script type=\"math/tex; mode=display\">\\text{ans}</script>.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Use stack to store the indices of the bars.</li>\n<li>Iterate the array:<ul>\n<li>While stack is not empty and <script type=\"math/tex; mode=display\">\\text{height}[current]>\\text{height}[st.top()]</script>\n<ul>\n<li>It means that the stack element can be popped. Pop the top element as <script type=\"math/tex; mode=display\">\\text{top}</script>.</li>\n<li>Find the distance between the current element and the element at top of stack, which is to be filled.\n<script type=\"math/tex; mode=display\">\\text{distance} = \\text{current} - \\text{st.top}() - 1</script>\n</li>\n<li>Find the bounded height\n<script type=\"math/tex; mode=display\">\\text{bounded_height} = \\min(\\text{height[current]}, \\text{height[st.top()]}) - \\text{height[top]}</script>\n</li>\n<li>Add resulting trapped water to answer\n<script type=\"math/tex; mode=display\">\\text{ans} += \\text{distance} * \\text{bounded_height}</script>\n</li>\n</ul>\n</li>\n<li>Push current index to top of the stack</li>\n<li>Move <script type=\"math/tex; mode=display\">\\text{current}</script> to the next position</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">trap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">st</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">current</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">current</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()])</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span>\n            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">current</span> <span class=\"o\">-</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">bounded_height</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">current</span><span class=\"p\">],</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()])</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">top</span><span class=\"p\">];</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"n\">distance</span> <span class=\"o\">*</span> <span class=\"n\">bounded_height</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"o\">++</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n)</script>.<ul>\n<li>Single iteration of <script type=\"math/tex; mode=display\">O(n)</script> in which each bar can be touched at most twice(due to  insertion and deletion from stack) and insertion and deletion from stack takes <script type=\"math/tex; mode=display\">O(1)</script> time.</li>\n</ul>\n</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Stack can take upto <script type=\"math/tex; mode=display\">O(n)</script> space in case of stairs-like or flat structure.</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-2-pointers-accepted\">Approach #4 Using 2 pointers [Accepted]</h4>\n<p><strong>Intuition</strong>\nAs in Approach #2, instead of computing the left and right parts seperately, we may think of some way to do it in one iteration.\nFrom the figure in dynamic programming approach, notice that as long as <script type=\"math/tex; mode=display\">\\text{right_max}[i]>\\text{left_max}[i]</script>(from element 0 to 6), the water trapped depends upon the left_max, and similar is the case when <script type=\"math/tex; mode=display\">\\text{left_max}[i]>\\text{right_max}[i]</script>(from element 8 to 11).\nSo, we can say that if there is a larger bar at one end(say right), we are assured that the water trapped would be dependant on height of bar in current direction(from left to right). As soon as we find the bar at other end(right) is smaller, we start iterating in opposite direction(from right to left).\nWe must maintain <script type=\"math/tex; mode=display\">\\text{left_max}</script> and <script type=\"math/tex; mode=display\">\\text{right_max}</script> during the iteration, but now we can do it in one iteration using 2 pointers, switching between the two.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Initialize <script type=\"math/tex; mode=display\">\\text{left}</script> pointer to 0 and <script type=\"math/tex; mode=display\">\\text{right}</script> pointer to size-1</li>\n<li>While <script type=\"math/tex; mode=display\">\\text{left}< \\text{right}</script>, do:<ul>\n<li>If <script type=\"math/tex; mode=display\">\\text{height[left]}</script> is smaller than <script type=\"math/tex; mode=display\">\\text{height[right]}</script>\n<ul>\n<li>If <script type=\"math/tex; mode=display\">\\text{height[left]}>=\\text{left_max}</script>, update <script type=\"math/tex; mode=display\">\\text{left_max}</script>\n</li>\n<li>Else add <script type=\"math/tex; mode=display\">\\text{left_max}-\\text{height[left]}</script> to <script type=\"math/tex; mode=display\">\\text{ans}</script>\n</li>\n<li>Add 1 to <script type=\"math/tex; mode=display\">\\text{left}</script>.</li>\n</ul>\n</li>\n<li>Else<ul>\n<li>If <script type=\"math/tex; mode=display\">\\text{height[right]}>=\\text{right_max}</script>, update <script type=\"math/tex; mode=display\">\\text{right_max}</script>\n</li>\n<li>Else add <script type=\"math/tex; mode=display\">\\text{right_max}-\\text{height[right]}</script> to <script type=\"math/tex; mode=display\">\\text{ans}</script>\n</li>\n<li>Subtract 1 from <script type=\"math/tex; mode=display\">\\text{right}</script>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Refer the example for better understanding:\n!?!../Documents/42_trapping_rain_water.json:1000,662!?!</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">trap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">left_max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">right_max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n            <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">left_max</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">left_max</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">])</span> <span class=\"o\">:</span> <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">left_max</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]);</span>\n            <span class=\"o\">++</span><span class=\"n\">left</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">right_max</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">right_max</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">])</span> <span class=\"o\">:</span> <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">right_max</span> <span class=\"o\">-</span> <span class=\"n\">height</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]);</span>\n            <span class=\"o\">--</span><span class=\"n\">right</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Single iteration of <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(1)</script> extra space. Only constant space required for <script type=\"math/tex; mode=display\">\\text{left}</script>, <script type=\"math/tex; mode=display\">\\text{right}</script>, <script type=\"math/tex; mode=display\">\\text{left_max}</script> and <script type=\"math/tex; mode=display\">\\text{right_max}</script>.</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/abhinavbansal0\">@abhinavbansal0</a>.</p>',NULL,1,'none','none','none'),(189,'Expression Add Operators',3,'Divide and Conquer',0,0,'<p></p><p>\nGiven a string that contains only digits <code>0-9</code> and a target value, return all possibilities to add <b>binary</b> operators (not unary) <code>+</code>, <code>-</code>, or <code>*</code> between the digits so they evaluate to the target value.\n</p><p>\nExamples: <br/>\n</p><pre>\"123\", 6 -&gt; [\"1+2+3\", \"1*2*3\"] \n\"232\", 8 -&gt; [\"2*3+2\", \"2+3*2\"]\n\"105\", 5 -&gt; [\"1*0+5\",\"10-5\"]\n\"00\", 0 -&gt; [\"0+0\", \"0-0\", \"0*0\"]\n\"3456237490\", 9191 -&gt; []\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/davidtan1890\">@davidtan1890</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> addOperators(string num, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> addOperators(String num, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def addOperators(self, num, target):\r\n        """\r\n        :type num: str\r\n        :type target: int\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** addOperators(char* num, int target, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> AddOperators(string num, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} num\r\n * @param {number} target\r\n * @return {string[]}\r\n */\r\nvar addOperators = function(num, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num\r\n# @param {Integer} target\r\n# @return {String[]}\r\ndef add_operators(num, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func addOperators(_ num: String, _ target: Int) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func addOperators(num string, target int) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def addOperators(num: String, target: Int): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(190,'Binary Tree Right Side View',2,'Tree,Depth-first Search,Breadth-first Search',0,0,'<p></p><p>Given a binary tree, imagine yourself standing on the <i>right</i> side of it, return the values of the nodes you can see ordered from top to bottom.</p><p>\nFor example:<br/>\nGiven the following binary tree,<br/>\n</p><pre>\n   1            \n\n<p>\nYou should return <code>[1, 3, 4]</code>.\n</p>\n\n<p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/amrsaqr\">@amrsaqr</a> for adding this problem and creating all test cases.</p>\n      </pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> rightSideView(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def rightSideView(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* rightSideView(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> RightSideView(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar rightSideView = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef right_side_view(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func rightSideView(_ root: TreeNode?) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def rightSideView(root: TreeNode): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(191,'Serialize and Deserialize BST',2,'Tree',0,0,'<p></p><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. </p><p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p>\n<b>The encoded string should be as compact as possible.</b>\n</p><p>\n<b>Note:</b> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes a tree to a single string.\r\n    string serialize(TreeNode* root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    TreeNode* deserialize(string data) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.deserialize(codec.serialize(root));\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public String serialize(TreeNode root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(String data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Codec:\r\n\r\n    def serialize(self, root):\r\n        """Encodes a tree to a single string.\r\n        \r\n        :type root: TreeNode\r\n        :rtype: str\r\n        """\r\n        \r\n\r\n    def deserialize(self, data):\r\n        """Decodes your encoded data to tree.\r\n        \r\n        :type data: str\r\n        :rtype: TreeNode\r\n        """\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.deserialize(codec.serialize(root))\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/** Encodes a tree to a single string. */\r\nchar* serialize(struct TreeNode* root) {\r\n    \r\n}\r\n\r\n/** Decodes your encoded data to tree. */\r\nstruct TreeNode* deserialize(char* data) {\r\n    \r\n}\r\n\r\n// Your functions will be called as such:\r\n// char* data = serialize(root);\r\n// deserialize(data);\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public string serialize(TreeNode root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(string data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n\r\n/**\r\n * Encodes a tree to a single string.\r\n *\r\n * @param {TreeNode} root\r\n * @return {string}\r\n */\r\nvar serialize = function(root) {\r\n    \r\n};\r\n\r\n/**\r\n * Decodes your encoded data to tree.\r\n *\r\n * @param {string} data\r\n * @return {TreeNode}\r\n */\r\nvar deserialize = function(data) {\r\n    \r\n};\r\n\r\n/**\r\n * Your functions will be called as such:\r\n * deserialize(serialize(root));\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# Encodes a tree to a single string.\r\n#\r\n# @param {TreeNode} root\r\n# @return {string}\r\ndef serialize(root)\r\n    \r\nend\r\n\r\n# Decodes your encoded data to tree.\r\n#\r\n# @param {string} data\r\n# @return {TreeNode}\r\ndef deserialize(data)\r\n    \r\nend\r\n\r\n\r\n# Your functions will be called as such:\r\n# deserialize(serialize(data))\" }]',NULL,NULL,1,'none','none','none'),(192,'Longest Uncommon Subsequence II',2,'String',0,0,'<p></p><p>\nGiven a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be <b>any</b> subsequence of the other strings.\n</p><p>\nA <b>subsequence</b> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n</p><p>\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn\'t exist, return -1.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"aba\", \"cdc\", \"eae\"\n<b>Output:</b> 3\n</pre><p><b>Note:</b>\n</p><ol>\n<li>All the given strings\' lengths will not exceed 10.</li>\n<li>The length of the given list will be in the range of [2, 50].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findLUSlength(vector<string>& strs) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findLUSlength(String[] strs) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findLUSlength(self, strs):\r\n        """\r\n        :type strs: List[str]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findLUSlength(char** strs, int strsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindLUSlength(string[] strs) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} strs\r\n * @return {number}\r\n */\r\nvar findLUSlength = function(strs) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} strs\r\n# @return {Integer}\r\ndef find_lu_slength(strs)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findLUSlength(_ strs: [String]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findLUSlength(strs []string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findLUSlength(strs: Array[String]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(193,'Best Time to Buy and Sell Stock',1,'Array,Dynamic Programming',0,0,'<p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p><p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p><b>Example 1:</b><br/>\n</p><pre>\nInput: [7, 1, 5, 3, 6, 4]\nOutput: 5\n\nmax. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\nInput: [7, 6, 4, 3, 1]\nOutput: 0\n\nIn this case, no transaction is done, i.e. max profit = 0.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProfit(vector<int>& prices) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProfit(self, prices):\r\n        """\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProfit(int* prices, int pricesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProfit(int[] prices) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(prices) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(prices)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-one-pass-accepted\">Approach #2 (One Pass) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<p>We need to find out the maximum difference (which will be the maximum profit) between two numbers in the given array. Also, the second number (selling price) must be larger than the first one (buying price).</p>\n<p>In formal terms, we need to find <script type=\"math/tex; mode=display\">\\max(prices[j] - prices[i])</script>, for every <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> such that <script type=\"math/tex; mode=display\">j > i</script>.</p>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</h4>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">prices</span><span class=\"o\">[])</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">profit</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">profit</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxprofit</span><span class=\"o\">)</span>\n                    <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"n\">profit</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxprofit</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Loop runs <script type=\"math/tex; mode=display\">\\frac{n (n-1)}{2}</script> times.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Only two variables - maxprofit and profit are used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-one-pass-accepted\">Approach #2 (One Pass) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Say the given array is:</p>\n<p>[7, 1, 5, 3, 6, 4]</p>\n<p>If we plot the numbers of the given array on a graph, we get:</p>\n<p><img alt=\"Profit Graph\" src=\"https://leetcode.com/media/original_images/121_profit_graph.png\" /></p>\n<p>The points of interest are the peaks and valleys in the given graph. We need to find the largest peak following the smallest valley.\nWe can maintain two variables - minprice and maxprofit corresponding to the smallest valley and maximum profit (maximum difference between selling price and minprice) obtained so far respectively.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxProfit</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">prices</span><span class=\"o\">[])</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minprice</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">prices</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">minprice</span><span class=\"o\">)</span>\n                <span class=\"n\">minprice</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">minprice</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxprofit</span><span class=\"o\">)</span>\n                <span class=\"n\">maxprofit</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">minprice</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxprofit</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only a single pass is needed.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Only two variables are used.</p>\n</li>\n</ul>\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(194,'Reshape the Matrix',1,'Array',0,0,'<p></p><p>In MATLAB, there is a very useful function called \'reshape\', which can reshape a matrix into a new one with different size but keep its original data.\n</p><p>\nYou\'re given a matrix represented by a two-dimensional array, and two <b>positive</b> integers <b>r</b> and <b>c</b> representing the <b>row</b> number and <b>column</b> number of the wanted reshaped matrix, respectively.</p><p>The reshaped matrix need to be filled with all the elements of the original matrix in the same <b>row-traversing</b> order as they were.\n</p><p>\nIf the \'reshape\' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n<b>Output:</b> \n[[1,2,3,4]]\n<b>Explanation:</b><br/>The <b>row-traversing</b> of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n<b>Output:</b> \n[[1,2],\n [3,4]]\n<b>Explanation:</b><br/>There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The height and width of the given matrix is in range [1, 100].</li>\n<li>The given r and c are all positive.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def matrixReshape(self, nums, r, c):\r\n        """\r\n        :type nums: List[List[int]]\r\n        :type r: int\r\n        :type c: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** matrixReshape(int** nums, int numsRowSize, int numsColSize, int r, int c, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[,] MatrixReshape(int[,] nums, int r, int c) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} nums\r\n * @param {number} r\r\n * @param {number} c\r\n * @return {number[][]}\r\n */\r\nvar matrixReshape = function(nums, r, c) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} nums\r\n# @param {Integer} r\r\n# @param {Integer} c\r\n# @return {Integer[][]}\r\ndef matrix_reshape(nums, r, c)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func matrixReshape(_ nums: [[Int]], _ r: Int, _ c: Int) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func matrixReshape(nums [][]int, r int, c int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def matrixReshape(nums: Array[Array[Int]], r: Int, c: Int): Array[Array[Int]] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-queue-accepted\">Approach #1 Using queue [Accepted]</a></li>\n<li><a href=\"#approach-2-without-using-extra-space-accepted\">Approach #2 Without using extra Space [Accepted]</a></li>\n<li><a href=\"#approach-3-using-division-and-modulus-accepted\">Approach #3  Using division and modulus [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-queue-accepted\">Approach #1 Using queue [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The simplest method is to extract all the elements of the given matrix by reading the elements in a row-wise fashion. In this implementation, we use a queue to put the extracted elements. Then, we can take out the elements of the queue formed in a serial order and arrange the elements in the resultant required matrix in a row-by-row order again.</p>\n<p>The formation of the resultant matrix won\'t be possible if the number of elements in the original matrix isn\'t equal to the number of elements in the resultant matrix.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">matrixReshape</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">c</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. We traverse over <script type=\"math/tex; mode=display\">m*n</script> elements twice. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the number of rows and columns of the given matrix respectively.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. The queue formed will be of size <script type=\"math/tex; mode=display\">m*n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-without-using-extra-space-accepted\">Approach #2 Without using extra Space [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of unnecessarily using the queue as in the brute force approach, we can keep putting the numbers in the resultant matrix directly while iterating over the given matrix in a row-by-row order. While putting the numbers in the resultant array, we fix a particular row and keep on incrementing the column numbers only till we reach the end of the required columns indicated by <script type=\"math/tex; mode=display\">c</script>. At this moment, we update the row index by incrementing it and reset the column index to start from 0 again. Thus, we can save the space consumed by the queue for storing the data that just needs to be copied into a new array.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">matrixReshape</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">c</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">rows</span><span class=\"o\">][</span><span class=\"n\">cols</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"n\">cols</span><span class=\"o\">++;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cols</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">rows</span><span class=\"o\">++;</span>\n                    <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. We traverse the entire matrix of size <script type=\"math/tex; mode=display\">m*n</script> once only. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refers to the number of rows and columns in the given matrix.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. The resultant matrix of size <script type=\"math/tex; mode=display\">m*n</script> is used. </p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-division-and-modulus-accepted\">Approach #3  Using division and modulus [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we needed to keep a track of when we reached the end of columns for the resultant matrix and needed to update the current row and column number for putting the extracted elements by checking the current indices every time. Instead of doing these limit checks at every step, we can make use of maths to help ease the situation. </p>\n<p>The idea behind this approach is as follows. Do you know how a 2-D array is stored in the main memory(which is 1-D  in nature)? It is internally represented as a 1-D array only. The element <script type=\"math/tex; mode=display\">nums[i][j]</script> of <script type=\"math/tex; mode=display\">nums</script> array is represented in the form of a one dimensional array by using the index in the form: <script type=\"math/tex; mode=display\">nums[n*i + j]</script>, where <script type=\"math/tex; mode=display\">m</script> is the number of columns in the given matrix. Looking at the same in the reverse order, while putting the elements in the elements in the resultant matrix, we can make use of a <script type=\"math/tex; mode=display\">count</script> variable which gets incremented for every element traversed as if we are putting the elements in a 1-D resultant array. But, to convert the <script type=\"math/tex; mode=display\">count</script> back into 2-D matrix indices with a column count of <script type=\"math/tex; mode=display\">c</script>, we can obtain the indices as <script type=\"math/tex; mode=display\">res[count/c][count\\%c]</script> where <script type=\"math/tex; mode=display\">count/c</script> is the row number and <script type=\"math/tex; mode=display\">count\\%c</script> is the coloumn number. Thus, we can save the extra checking required at each step.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"nf\">matrixReshape</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">c</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">count</span> <span class=\"o\">/</span> <span class=\"n\">c</span><span class=\"o\">][</span><span class=\"n\">count</span> <span class=\"o\">%</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. We traverse the entire matrix of size <script type=\"math/tex; mode=display\">m*n</script> once only. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refers to the number of rows and columns in the given matrix.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. The resultant matrix of size <script type=\"math/tex; mode=display\">m*n</script> is used. </p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(195,'Pacific Atlantic Water Flow',2,'Depth-first Search,Breadth-first Search',0,0,'<p></p><p>Given an <code>m x n</code> matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and the \"Atlantic ocean\" touches the right and bottom edges.</p><p>Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.</p><p>Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.</p><p><b>Note:</b><br/>\n</p><ol>\n<li>The order of returned grid coordinates does not matter.</li>\n<li>Both <i>m</i> and <i>n</i> are less than 150.</li>\n</ol><p><b>Example:</b>\n</p><pre>\nGiven the following 5x5 matrix:\n\n  Pacific ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * Atlantic\n\nReturn:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<int[]> pacificAtlantic(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def pacificAtlantic(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** pacificAtlantic(int** matrix, int matrixRowSize, int matrixColSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int[]> PacificAtlantic(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {number[][]}\r\n */\r\nvar pacificAtlantic = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Integer[][]}\r\ndef pacific_atlantic(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func pacificAtlantic(_ matrix: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func pacificAtlantic(matrix [][]int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def pacificAtlantic(matrix: Array[Array[Int]]): List[Array[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(196,'Find Duplicate File in System',2,'Hash Table,String',0,0,'<p></p><p>Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</p><p>A group of duplicate files consists of at least <b>two</b> files that have exactly the same content.</p><p>A single directory info string in the <b>input</b> list has the following format: </p><p><code>\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"</code><br/></p><p>It means there are <b>n</b> files (<code>f1.txt</code>, <code>f2.txt</code> ... <code>fn.txt</code> with content <code>f1_content</code>, <code>f2_content</code> ... <code>fn_content</code>, respectively) in directory <code>root/d1/d2/.../dm</code>. Note that n &gt;= 1 and m &gt;= 0. If m = 0, it means the directory is just the root directory.</p><p>The <b>output</b> is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format: </p><p><code>\"directory_path/file_name.txt\"</code></p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\n[\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"]\n<b>Output:</b>  \n[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>No order is required for the final output.</li>\n<li>You may assume the directory name, file name and file content only has letters and digits, and the length of file content is in the range of [1,50].</li>\n<li>The number of files given is in the range of [1,20000].</li>\n<li>You may assume no files or directories share the same name in the same directory.</li>\n<li>You may assume each given directory info represents a unique directory. Directory path and file info are separated by a single blank space.</li>\n</ol><b>Follow-up beyond contest:</b><ol>\n<li> Imagine you are given a real file system, how will you search files? DFS or BFS?</li>\n<li> If the file content is very large (GB level), how will you modify your solution?</li>\n<li> If you can only read the file by 1kb each time, how will you modify your solution?</li>\n<li> What is the time complexity of your modified solution? What is the most time-consuming part and memory consuming part of it? How to optimize?</li>\n<li> How to make sure the duplicated files you find are not false positive?</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<string>> findDuplicate(vector<string>& paths) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<String>> findDuplicate(String[] paths) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findDuplicate(self, paths):\r\n        """\r\n        :type paths: List[str]\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findDuplicate(self, paths):\r\n        """\r\n        :type paths: List[str]\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** findDuplicate(char** paths, int pathsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<string>> FindDuplicate(string[] paths) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} paths\r\n * @return {string[][]}\r\n */\r\nvar findDuplicate = function(paths) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} paths\r\n# @return {String[][]}\r\ndef find_duplicate(paths)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findDuplicate(_ paths: [String]) -> [[String]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findDuplicate(paths []string) [][]string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findDuplicate(paths: Array[String]): List[List[String]] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-hashmap-accepted\">Approach #2 Using HashMap [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>For the brute force solution, firstly we obtain the directory paths, the filenames and file contents separately by appropriately splitting the elements of the <script type=\"math/tex; mode=display\">paths</script> list. While doing so, we keep on creating a <script type=\"math/tex; mode=display\">list</script> which contains the full path of every file along with the contents of the file. The <script type=\"math/tex; mode=display\">list</script> contains data in the form <script type=\"math/tex; mode=display\">[ [file_1\\_full\\_path, file_1\\_contents], [file_2\\_full\\_path, file_2\\_contents]..., [file_n\\_full\\_path, file_n\\_contents] ]</script>.</p>\n<p>Once this is done, we iterate over this <script type=\"math/tex; mode=display\">list</script>. For every element <script type=\"math/tex; mode=display\">i</script> chosen from the list, we iterate over the whole <script type=\"math/tex; mode=display\">list</script> to find another element <script type=\"math/tex; mode=display\">j</script> whose file contents are the same as the <script type=\"math/tex; mode=display\">i^{th}</script> element. For every such element found, we put the <script type=\"math/tex; mode=display\">j^{th}</script> element\'s file path in a temporary list <script type=\"math/tex; mode=display\">l</script> and we also mark the <script type=\"math/tex; mode=display\">j^{th}</script> element as visited so that this element isn\'t considered again in the future. Thus, when we reach the end of the array for every <script type=\"math/tex; mode=display\">i^{th}</script> element, we obtain a list of file paths in <script type=\"math/tex; mode=display\">l</script>, which have the same contents as the file corresponding to the <script type=\"math/tex; mode=display\">i^{th}</script> element. If this list isn\'t empty, it indicates that there exists content duplicate to the <script type=\"math/tex; mode=display\">i^{th}</script> element. Thus, we also need to put the <script type=\"math/tex; mode=display\">i^{th}</script> element\'s file path in the <script type=\"math/tex; mode=display\">l</script>. </p>\n<p>At the end of each iteration, we put this list <script type=\"math/tex; mode=display\">l</script> obtained in the resultant list <script type=\"math/tex; mode=display\">res</script> and reset the list <script type=\"math/tex; mode=display\">l</script> for finding the duplicates of the next element.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">findDuplicate</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">paths</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">path</span><span class=\"o\">:</span> <span class=\"n\">paths</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">name_cont</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;\\\\(&quot;</span><span class=\"o\">);</span>\n                <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;)&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n                <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span>\n                    <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n                <span class=\"o\">});</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">boolean</span><span class=\"o\">[]</span> <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()];</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"k\">continue</span><span class=\"o\">;</span>\n            <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n                    <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*x + f^2*s)</script>. Creation of <script type=\"math/tex; mode=display\">list</script> will take <script type=\"math/tex; mode=display\">O(n*x)</script>, where n is the number of directories and x is the average string length. Every file is compared with every other file. Let <script type=\"math/tex; mode=display\">f</script> files are there with average size of <script type=\"math/tex; mode=display\">s</script>, then files comparision will take <script type=\"math/tex; mode=display\">O(f^2*s)</script>, equals can take <script type=\"math/tex; mode=display\">O(s)</script>. Here, Worst case will be when all files are unique.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n*x)</script>. Size of lists <script type=\"math/tex; mode=display\">res</script> and <script type=\"math/tex; mode=display\">list</script> can grow upto <script type=\"math/tex; mode=display\">n*x</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-hashmap-accepted\">Approach #2 Using HashMap [Accepted]</h4>\n<p>In this approach, firstly we obtain the directory paths, the file names and their contents separately by appropriately splitting each string in the given <script type=\"math/tex; mode=display\">paths</script> list. In order to find the files with duplicate contents, we make use of a HashMap <script type=\"math/tex; mode=display\">map</script>, which stores the data in the form <script type=\"math/tex; mode=display\">(contents, list\\_of\\_file\\_paths\\_with\\_this\\_content)</script>. Thus, for every file\'s contents, we check if the same content already exist in the hashmap. If so, we add the current file\'s path to the list of files corresponding to the current contents. Otherwise, we create a new entry in the <script type=\"math/tex; mode=display\">map</script>, with the current contents as the key and the value being a list with only one entry(the current file\'s path).</p>\n<p>At the end, we find out the contents corresponding to which atleast two file paths exist. We obtain the resultant list <script type=\"math/tex; mode=display\">res</script>, which is a list of lists containing these file paths corresponding to the same contents.</p>\n<p>The following animation illustrates the process for a clearer understanding.</p>\n<p>!?!../Documents/609_Find_Duplicate.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">findDuplicate</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">paths</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">path</span><span class=\"o\">:</span> <span class=\"n\">paths</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">name_cont</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;\\\\(&quot;</span><span class=\"o\">);</span>\n                <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;)&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n                <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"o\">());</span>\n                <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">values</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n                <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">name_cont</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">list</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">).</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*x)</script>. <script type=\"math/tex; mode=display\">n</script> strings of average length <script type=\"math/tex; mode=display\">x</script> is parsed.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n*x)</script>. <script type=\"math/tex; mode=display\">map</script> and <script type=\"math/tex; mode=display\">res</script> size grows upto <script type=\"math/tex; mode=display\">n*x</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(197,'Plus One',1,'Array,Math',0,0,'<p></p><p>Given a non-negative integer represented as a <b>non-empty</b> array of digits, plus one to the integer.</p><p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p><p>The digits are stored such that the most significant digit is at the head of the list.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> plusOne(vector<int>& digits) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def plusOne(self, digits):\r\n        """\r\n        :type digits: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] PlusOne(int[] digits) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} digits\r\n * @return {number[]}\r\n */\r\nvar plusOne = function(digits) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} digits\r\n# @return {Integer[]}\r\ndef plus_one(digits)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func plusOne(_ digits: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func plusOne(digits []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(198,'Find Duplicate Subtrees',2,'Tree',0,0,'<p></p><p>\nGiven a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, you only need to return the root node of any <b>one</b> of them. </p><p>\nTwo trees are duplicate if they have the same structure with same node values.\n</p><p><b>Example 1: </b><br/>\n</p><pre>\n        1\n       / \\\n      2   3\n     /   / \\\n    4   2   4\n       /\n      4\n</pre>\nThe following are two duplicate subtrees:\n<pre>\n      2\n     /\n    4\n</pre>\nand\n<pre>\n    4\n</pre>\nTherefore, you need to return above trees\' root in the form of a list.\n\n\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findDuplicateSubtrees(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[TreeNode]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findDuplicateSubtrees(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[TreeNode]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct TreeNode** findDuplicateSubtrees(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<TreeNode> FindDuplicateSubtrees(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode[]}\r\n */\r\nvar findDuplicateSubtrees = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {TreeNode[]}\r\ndef find_duplicate_subtrees(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func findDuplicateSubtrees(_ root: TreeNode?) -> [TreeNode?] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findDuplicateSubtrees(root *TreeNode) []*TreeNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def findDuplicateSubtrees(root: TreeNode): List[TreeNode] = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(199,'Lexicographical Numbers',2,'',0,0,'<p></p><p>\nGiven an integer <i>n</i>, return 1 - <i>n</i> in lexicographical order.\n</p><p>\nFor example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].\n</p><p>\nPlease optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> lexicalOrder(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> lexicalOrder(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def lexicalOrder(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> LexicalOrder(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number[]}\r\n */\r\nvar lexicalOrder = function(n) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(200,'Predict the Winner',2,'Dynamic Programming,Minimax',0,0,'<p></p><p>Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins. </p><p>Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score. </p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1, 5, 2]\n<b>Output:</b> False\n<b>Explanation:</b> Initially, player 1 can choose between 1 and 2. <br/>If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). <br/>So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. <br/>Hence, player 1 will never be the winner and you need to return False.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1, 5, 233, 7]\n<b>Output:</b> True\n<b>Explanation:</b> Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.<br/>Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>1 &lt;= length of the array &lt;= 20. </li>\n<li>Any scores in the given array are non-negative integers and will not exceed 10,000,000.</li>\n<li>If the scores of both players are equal, then player 1 is still the winner.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool PredictTheWinner(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean PredictTheWinner(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def PredictTheWinner(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool PredictTheWinner(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool PredictTheWinner(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar PredictTheWinner = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef predict_the_winner(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func PredictTheWinner(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func PredictTheWinner(nums []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def PredictTheWinner(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</a></li>\n<li><a href=\"#approach-2-similar-approach-accepted\">Approach #2 Similar Approach [Accepted]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]:</a></li>\n<li><a href=\"#approach-4-1-d-dynamic-programming-accepted\">Approach #4 1-D Dynamic Programming [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</h4>\n<p>The idea behind the recursive approach is simple. The two players Player 1 and Player 2 will be taking turns alternately. For the Player 1 to be the winner, we need <script type=\"math/tex; mode=display\">score_{Player\\_1} &geq; score_{Player\\_2}</script>. Or in other terms, <script type=\"math/tex; mode=display\">score_{Player\\_1} - score_{Player\\_2} &geq; 0</script>. </p>\n<p>Thus, for the turn of Player 1, we can add its score obtained to the total score and for Player 2\'s turn, we can substract its score from the total score. At the end, we can check if the total score is greater than or equal to zero(equal score of both players), to predict that Player 1 will be the winner.</p>\n<p>Thus, by making use of a recursive function <code>winner(nums,s,e,turn)</code> which predicts the winner for the <script type=\"math/tex; mode=display\">nums</script> array as the score array with the elements in the range of indices <script type=\"math/tex; mode=display\">[s,e]</script> currently being considered, given a particular player\'s turn, indicated by <script type=\"math/tex; mode=display\">turn=1</script> being Player 1\'s turn and <script type=\"math/tex; mode=display\">turn=-1</script> being the Player 2\'s turn, we can predict the winner of the given problem by making the function call <code>winner(nums,0,n-1,1)</code>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n<p>In every turn, we can either pick up the first(<script type=\"math/tex; mode=display\">nums[s]</script>) or the last(<script type=\"math/tex; mode=display\">nums[e]</script>) element of the current subarray. Since both the players are assumed to be playing smartly and making the best move at every step, both will tend to maximize their scores. Thus, we can make use of the same function <code>winner</code> to determine the maximum score possible for any of the players. </p>\n<p>Now, at every step of the recursive process, we determine the maximum score possible for the current player. It will be the maximum one possible out of the scores obtained by picking the first or the last element of the current subarray. </p>\n<p>To obtain the score possible from the remaining subarray, we can again make use of the same <code>winner</code> function and add the score corresponding to the point picked in the current function call. But, we need to take care of whether to add or subtract this score to the total score available. If it is Player 1\'s turn, we add the current number\'s score to the total score, otherwise, we need to subtract the same. </p>\n<p>Thus, at every step, we need update the search space appropriately based on the element chosen and also invert the <script type=\"math/tex; mode=display\">turn</script>\'s value to indicate the turn change among the players and either add or subtract the current player\'s score from the total score available to determine the end result.</p>\n<p>Further, note that the value returned at every step is given by <script type=\"math/tex; mode=display\">turn *\\text{max}(turn * a, turn * b)</script>. This is equivalent to the statement <script type=\"math/tex; mode=display\">max(a,b)</script> for Player 1\'s turn and <script type=\"math/tex; mode=display\">min(a,b)</script> for Player 2\'s turn. </p>\n<p>This is done because, looking from Player 1\'s perspective, for any move made by Player 1, it tends to leave the remaining subarray in a situation which minimizes the best score possible for Player 2, even if it plays in the best possible manner. But, when the turn passes to Player 1 again, for Player 1 to win, the remaining subarray should be left in a state such that the score obtained from this subarrray is maximum(for Player 1). </p>\n<p>This is a general criteria for any arbitrary two player game and is commonly known as the \n<a href=\"https://en.wikipedia.org/wiki/Minimax\">Min-Max algorithm</a>.</p>\n<p>The following image shows how the scores are passed to determine the end result for a simple example.</p>\n<p align=\"center\"><img alt=\"Recursive_Tree\" src=\"../Figures/486/486_Predict_the_winner_new.PNG\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">PredictTheWinner</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">winner</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">winner</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">turn</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">turn</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">turn</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">winner</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">turn</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">turn</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">winner</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">turn</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">turn</span> <span class=\"o\">*</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">turn</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">turn</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. Size of recursion tree will be <script type=\"math/tex; mode=display\">2^n</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-similar-approach-accepted\">Approach #2 Similar Approach [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can omit the use of <script type=\"math/tex; mode=display\">turn</script> to keep a track of the player for the current turn. To do so, we can make use of a simple observation. If the current turn belongs to, say Player 1, we pick up an element, say <script type=\"math/tex; mode=display\">x</script>, from either end, and give the turn to Player 2. Thus, if we obtain the score for the remaining elements(leaving <script type=\"math/tex; mode=display\">x</script>), this score, now belongs to Player 2. Thus, since Player 2 is competing against Player 1, this score should be subtracted from Player 1\'s current(local) score(<script type=\"math/tex; mode=display\">x</script>) to obtain the effective score of Player 1 at the current instant.</p>\n<p>Similar argument holds true for Player 2\'s turn as well i.e. we can subtract Player 1\'s score for the remaining subarray from Player 2\'s current score to obtain its effective score. By making use of this observation, we can omit the use of <script type=\"math/tex; mode=display\">turn</script> from <code>winner</code> to find the required result by making the slight change discussed above in the <code>winner</code>\'s implementation.</p>\n<p>While returning the result from <code>winner</code> for the current function call, we return the larger of the effective scores possible by choosing either the first or the last element from the currently available subarray. Rest of the process remains the same as the last approach.</p>\n<p>Now, in order to remove the duplicate function calls, we can make use of a 2-D memoization array, <script type=\"math/tex; mode=display\">memo</script>, such that we can store the result obtained for the function call <code>winner</code> for a subarray with starting and ending indices being <script type=\"math/tex; mode=display\">s</script> and <script type=\"math/tex; mode=display\">e</script> ] at <script type=\"math/tex; mode=display\">memo[s][e]</script>. This helps to prune the search space to a great extent.</p>\n<p>This approach is inspired by <a href=\"http://leetcode.com/chidong\">@chidong</a></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">PredictTheWinner</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Integer</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Integer</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">return</span> <span class=\"n\">winner</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">winner</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">][</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">][</span><span class=\"n\">e</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">winner</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">winner</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">][</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">][</span><span class=\"n\">e</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. The entire <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">n</script> is filled only once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">n</script> is used for memoization.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can observe that the effective score for the current player for any given subarray <script type=\"math/tex; mode=display\">nums[x:y]</script> only depends on the elements within the range <script type=\"math/tex; mode=display\">[x,y]</script> in the array <script type=\"math/tex; mode=display\">nums</script>. It mainly depends on whether the element <script type=\"math/tex; mode=display\">nums[x]</script> or <script type=\"math/tex; mode=display\">nums[y]</script> is chosen in the current turn and also on the maximum score possible for the other player from the remaining subarray left after choosing the current element. Thus, it is certain that the current effective score isn\'t dependent on the elements outside the range <script type=\"math/tex; mode=display\">[x,y]</script>. </p>\n<p>Based on the above observation, we can say that if know the maximum effective score possible for the subarray <script type=\"math/tex; mode=display\">nums[x+1,y]</script> and <script type=\"math/tex; mode=display\">nums[x,y-1]</script>, we can easily determine the maximum effective score possible for the subarray <script type=\"math/tex; mode=display\">nums[x,y]</script> as <script type=\"math/tex; mode=display\">\\text{max}(nums[x]-score_{[x+1,y]}, nums[y]-score_{[x,y-1]})</script>. These equations are deduced based on the last approach. </p>\n<p>From this,  we conclude that we can make use of Dynamic Programming to determine the required maximum effective score for the array <script type=\"math/tex; mode=display\">nums</script>. We can make use of a 2-D <script type=\"math/tex; mode=display\">dp</script> array, such that <script type=\"math/tex; mode=display\">dp[i][j]</script> is used to store the maximum effective score possible for the subarray <script type=\"math/tex; mode=display\">nums[i,j]</script>. The <script type=\"math/tex; mode=display\">dp</script> updation equation becomes: </p>\n<p>\n<script type=\"math/tex; mode=display\">dp[i,j] = nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]</script>.</p>\n<p>We can fill in the <script type=\"math/tex; mode=display\">dp</script> array starting from the last row. At the end, the value for <script type=\"math/tex; mode=display\">dp[0][n-1]</script> gives the required result. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n<p>Look at the animation below to clearly understand the <script type=\"math/tex; mode=display\">dp</script> filling process.</p>\n<p>!?!../Documents/486_Predict_the_winner.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">PredictTheWinner</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">s</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">s</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">e</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">e</span><span class=\"o\">];</span>\n                <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">][</span><span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">][</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. <script type=\"math/tex; mode=display\">((n+1)</script>x<script type=\"math/tex; mode=display\">n)/2</script> entries in <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">(n+1)</script>x<script type=\"math/tex; mode=display\">n</script> is filled once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">(n+1)</script>x<script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-1-d-dynamic-programming-accepted\">Approach #4 1-D Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>From the last approach, we see that the <script type=\"math/tex; mode=display\">dp</script> updation equation is: </p>\n<p>\n<script type=\"math/tex; mode=display\">dp[i,j] = nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]</script>. </p>\n<p>Thus, for filling in any entry in <script type=\"math/tex; mode=display\">dp</script> array, only the entries in the next row(same column) and the previous column(same row) are needed.</p>\n<p>Instead of making use of a new row in <script type=\"math/tex; mode=display\">dp</script> array for the current <script type=\"math/tex; mode=display\">dp</script> row\'s updations, we can overwrite the values in the previous row itself and consider the values as belonging to the new row\'s entries, since the older values won\'t be needed ever in the future again. Thus, instead of making use of a 2-D <script type=\"math/tex; mode=display\">dp</script> array, we can make use of a 1-D <script type=\"math/tex; mode=display\">dp</script> array and make the updations appropriately.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">PredictTheWinner</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">s</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">s</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">e</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">];</span>\n                <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. The elements of <script type=\"math/tex; mode=display\">dp</script> array are updated <script type=\"math/tex; mode=display\">1+2+3+...+n</script> times. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. 1-D <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(201,'Unique Binary Search Trees II',2,'Tree,Dynamic Programming',0,0,'<p></p><p>Given an integer <i>n</i>, generate all structurally unique <b>BST\'s</b> (binary search trees) that store values 1...<i>n</i>.</p><p>\nFor example,<br/>\nGiven <i>n</i> = 3, your program should return all 5 unique BST\'s shown below.\n\n</p><pre>\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<TreeNode*> generateTrees(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def generateTrees(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: List[TreeNode]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct TreeNode** generateTrees(int n, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<TreeNode> GenerateTrees(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {number} n\r\n * @return {TreeNode[]}\r\n */\r\nvar generateTrees = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {Integer} n\r\n# @return {TreeNode[]}\r\ndef generate_trees(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func generateTrees(_ n: Int) -> [TreeNode?] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc generateTrees(n int) []*TreeNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def generateTrees(n: Int): List[TreeNode] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(202,'Valid Parentheses',1,'Stack,String',0,0,'<p></p><p>Given a string containing just the characters <code>\'(\'</code>, <code>\')\'</code>, <code>\'{\'</code>, <code>\'}\'</code>, <code>\'[\'</code> and <code>\']\'</code>, determine if the input string is valid.</p><p>The brackets must close in the correct order, <code>\"()\"</code> and <code>\"()[]{}\"</code> are all valid but <code>\"(]\"</code> and <code>\"([)]\"</code> are not.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isValid(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isValid(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isValid(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsValid(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isValid = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Boolean}\r\ndef is_valid(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isValid(_ s: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isValid(s string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(203,'First Missing Positive',3,'Array',0,0,'<p></p><p>\nGiven an unsorted integer array, find the first missing positive integer.\n</p><p>\nFor example,<br/>\nGiven <code>[1,2,0]</code> return <code>3</code>,<br/>\nand <code>[3,4,-1,1]</code> return <code>2</code>.\n</p><p>\nYour algorithm should run in <i>O</i>(<i>n</i>) time and uses constant space.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int firstMissingPositive(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int firstMissingPositive(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def firstMissingPositive(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int firstMissingPositive(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FirstMissingPositive(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar firstMissingPositive = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef first_missing_positive(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func firstMissingPositive(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func firstMissingPositive(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def firstMissingPositive(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(204,'Binary Search Tree Iterator',2,'Tree,Stack,Design',0,0,'<p></p><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p><p>Calling <code>next()</code> will return the next smallest number in the BST.</p><p><b>Note: </b><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree. </p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for binary tree\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass BSTIterator {\r\npublic:\r\n    BSTIterator(TreeNode *root) {\r\n        \r\n    }\r\n\r\n    /** @return whether we have a next smallest number */\r\n    bool hasNext() {\r\n        \r\n    }\r\n\r\n    /** @return the next smallest number */\r\n    int next() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = BSTIterator(root);\r\n * while (i.hasNext()) cout << i.next();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for binary tree\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\n\r\npublic class BSTIterator {\r\n\r\n    public BSTIterator(TreeNode root) {\r\n        \r\n    }\r\n\r\n    /** @return whether we have a next smallest number */\r\n    public boolean hasNext() {\r\n        \r\n    }\r\n\r\n    /** @return the next smallest number */\r\n    public int next() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = new BSTIterator(root);\r\n * while (i.hasNext()) v[f()] = i.next();\r\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a  binary tree node\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass BSTIterator(object):\r\n    def __init__(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        """\r\n        \r\n\r\n    def hasNext(self):\r\n        """\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n    def next(self):\r\n        """\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n# Your BSTIterator will be called like this:\r\n# i, v = BSTIterator(root), []\r\n# while i.hasNext(): v.append(i.next())\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for binary tree\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct BSTIterator {\r\n    \r\n};\r\n\r\nstruct BSTIterator *bstIteratorCreate(struct TreeNode *root) {\r\n    \r\n}\r\n\r\n/** @return whether we have a next smallest number */\r\nbool bstIteratorHasNext(struct BSTIterator *iter) {\r\n    \r\n}\r\n\r\n/** @return the next smallest number */\r\nint bstIteratorNext(struct BSTIterator *iter) {\r\n    \r\n}\r\n\r\n/** Deallocates memory previously allocated for the iterator */\r\nvoid bstIteratorFree(struct BSTIterator *iter) {\r\n    \r\n}\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * struct BSTIterator *i = bstIteratorCreate(root);\r\n * while (bstIteratorHasNext(i)) printf("%d\\n", bstIteratorNext(i));\r\n * bstIteratorFree(i);\r\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for binary tree\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\n\r\npublic class BSTIterator {\r\n\r\n    public BSTIterator(TreeNode root) {\r\n        \r\n    }\r\n\r\n    /** @return whether we have a next smallest number */\r\n    public bool HasNext() {\r\n        \r\n    }\r\n\r\n    /** @return the next smallest number */\r\n    public int Next() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = new BSTIterator(root);\r\n * while (i.HasNext()) v[f()] = i.Next();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for binary tree\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @constructor\r\n * @param {TreeNode} root - root of the binary search tree\r\n */\r\nvar BSTIterator = function(root) {\r\n    \r\n};\r\n\r\n\r\n/**\r\n * @this BSTIterator\r\n * @returns {boolean} - whether we have a next smallest number\r\n */\r\nBSTIterator.prototype.hasNext = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @this BSTIterator\r\n * @returns {number} - the next smallest number\r\n */\r\nBSTIterator.prototype.next = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * var i = new BSTIterator(root), a = [];\r\n * while (i.hasNext()) a.push(i.next());\r\n*/\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\nclass BSTIterator\r\n    # @param {TreeNode} root\r\n    def initialize(root)\r\n        \r\n    end\r\n\r\n    # @return {Boolean}\r\n    def has_next\r\n        \r\n    end\r\n\r\n    # @return {Integer}\r\n    def next\r\n        \r\n    end\r\nend\r\n\r\n# Your BSTIterator will be called like this:\r\n# i, v = BSTIterator.new(root), []\r\n# while i.has_next()\r\n#    v << i.next\r\n# end\" }]',NULL,NULL,1,'none','none','none'),(205,'Rectangle Area',2,'Math',0,0,'<p></p><p>Find the total area covered by two <b>rectilinear</b> rectangles in a <b>2D</b> plane.</p><p>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p><div style=\"width:529px; height:300px; background-color:rgb(235, 235, 235);\">\n<img alt=\"Rectangle Area\" border=\"0\" src=\"/static/images/problemset/rectangle_area.png\"/>\n</div><div style=\"padding-top:23px;\">\n<p>Assume that the total area is never beyond the maximum possible value of <b>int</b>.</p>\n</div><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem, creating the above image and all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def computeArea(self, A, B, C, D, E, F, G, H):\r\n        """\r\n        :type A: int\r\n        :type B: int\r\n        :type C: int\r\n        :type D: int\r\n        :type E: int\r\n        :type F: int\r\n        :type G: int\r\n        :type H: int\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ComputeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} A\r\n * @param {number} B\r\n * @param {number} C\r\n * @param {number} D\r\n * @param {number} E\r\n * @param {number} F\r\n * @param {number} G\r\n * @param {number} H\r\n * @return {number}\r\n */\r\nvar computeArea = function(A, B, C, D, E, F, G, H) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} a\r\n# @param {Integer} b\r\n# @param {Integer} c\r\n# @param {Integer} d\r\n# @param {Integer} e\r\n# @param {Integer} f\r\n# @param {Integer} g\r\n# @param {Integer} h\r\n# @return {Integer}\r\ndef compute_area(a, b, c, d, e, f, g, h)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func computeArea(_ A: Int, _ B: Int, _ C: Int, _ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func computeArea(A int, B int, C int, D int, E int, F int, G int, H int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(206,'Perfect Squares',2,'Dynamic Programming,Breadth-first Search,Math',0,0,'<p></p><p>\nGiven a positive integer <i>n</i>, find the least number of perfect square numbers (for example, <code>1, 4, 9, 16, ...</code>) which sum to <i>n</i>.\n</p><p>\nFor example, given <i>n</i> = <code>12</code>, return <code>3</code> because <code>12 = 4 + 4 + 4</code>; given <i>n</i> = <code>13</code>, return <code>2</code> because <code>13 = 4 + 9</code>.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numSquares(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numSquares(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numSquares(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numSquares(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumSquares(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar numSquares = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef num_squares(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numSquares(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numSquares(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numSquares(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(207,'House Robber',1,'Dynamic Programming',0,0,'<p></p><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <b>without alerting the police</b>.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ifanchu\">@ifanchu</a> for adding this problem and creating all test cases. Also thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding additional test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int rob(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def rob(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int rob(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Rob(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar rob = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef rob(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func rob(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def rob(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(208,'Array Nesting',2,'Array',0,0,'<p></p><p>A zero-indexed array A consisting of N different integers is given. The array contains all integers in the range [0, N - 1]. </p><p>Sets S[K] for 0 &lt;= K &lt; N are defined as follows:</p><p>S[K] = { A[K], A[A[K]], A[A[A[K]]], ... }.</p><p>Sets S[K] are finite for each K and should NOT contain duplicates.</p><p>\nWrite a function that given an array A consisting of N integers, return the size of the largest set S[K] for this array.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> A = [5,4,0,3,1,6,2]\n<b>Output:</b> 4\n<b>Explanation:</b> \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\nOne of the longest S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>N is an integer within the range [1, 20,000].</li>\n<li>The elements of A are all distinct.</li>\n<li>Each element of array A is an integer within the range [0, N-1].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int arrayNesting(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int arrayNesting(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def arrayNesting(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def arrayNesting(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int arrayNesting(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ArrayNesting(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar arrayNesting = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef array_nesting(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func arrayNesting(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func arrayNesting(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def arrayNesting(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-visited-array-accepted\">Approach #2 Using Visited Array [Accepted]</a></li>\n<li><a href=\"#approach-3-without-using-extra-space-accepted\">Approach #3 Without Using Extra Space [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest method is to iterate over all the indices of the given <script type=\"math/tex; mode=display\">nums</script> array. For every index <script type=\"math/tex; mode=display\">i</script> chosen, we find the element <script type=\"math/tex; mode=display\">nums[i]</script> and increment the <script type=\"math/tex; mode=display\">count</script> for a new element added for the current index <script type=\"math/tex; mode=display\">i</script>. Since <script type=\"math/tex; mode=display\">nums[i]</script> has to act as the new index for finding the next element belonging to the set corresponding to the index <script type=\"math/tex; mode=display\">i</script>, the new index is <script type=\"math/tex; mode=display\">j=nums[i]</script>.</p>\n<p>We continue this process of index updation and keep on incrementing the <script type=\"math/tex; mode=display\">count</script> for new elements added to the set corresponding to the index <script type=\"math/tex; mode=display\">i</script>. Now, since all the elements in <script type=\"math/tex; mode=display\">nums</script> lie in the range <script type=\"math/tex; mode=display\">(0,..., N-1)</script>, the new indices generated will never lie outside the array size limits. But, we\'ll always reach a point where the current element becomes equal to the element  <script type=\"math/tex; mode=display\">nums[i]</script> with which we started the nestings in the first place. Thus, after this, the new indices generated will be just the repetitions of the previously generated ones, and thus would not lead to an increase in the size of the current set. Thus, this condition of the current number being equal to the starting number acts as the terminating condition for <script type=\"math/tex; mode=display\">count</script> incrementation for a particular index.</p>\n<p>We do the same process for every index chosen as the starting index. At the end, the maximum value of <script type=\"math/tex; mode=display\">count</script> obtained gives the size of the largest set.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">arrayNesting</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">do</span> <span class=\"o\">{</span>\n                <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. In worst case, for example- <code>[1,2,3,4,5,0]</code>, loop body will be executed <script type=\"math/tex; mode=display\">n^2</script> times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-visited-array-accepted\">Approach #2 Using Visited Array [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we observed that in the worst case, all the elements of the <script type=\"math/tex; mode=display\">nums</script> array are added to the sets corresponding to all the starting indices. But, all these sets correspond to the same set of elements only, leading to redundant calculations.</p>\n<p>We consider a simple example and see how this problem can be resolved. From the figure below, we can see that the elements in the current nesting shown by arrows form a cycle. Thus, the same elements will be added to the current set irrespective of the first element chosen to be added to the set out of these marked elements.</p>\n<p><img alt=\"Array_Nesting\" src=\"../Figures/565/Array_Nesting.PNG\" /></p>\n<p>Thus, when we add an element <script type=\"math/tex; mode=display\">nums[j]</script> to a set corresponding to any of the indices, we mark its position as visited in a <script type=\"math/tex; mode=display\">visited</script> array. This is done so that whenever this index is chosen as the starting index in the future, we do not go for redundant <script type=\"math/tex; mode=display\">count</script> calculations, since we\'ve already considered the elements linked with this index, which will be added to a new(duplicate) set.</p>\n<p>By doing so, we ensure that the duplicate sets aren\'t considered again and again.</p>\n<p>Further, we can also observe that no two elements at indices <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> will lead to a jump to the same index <script type=\"math/tex; mode=display\">k</script>, since it would require <script type=\"math/tex; mode=display\">nums[i] = nums[j] = k</script>, which isn\'t possible since all the elements are distinct. Also, because of the same reasoning, no element outside any cycle could lead to an element inside the cycle. Because of this, the use of <script type=\"math/tex; mode=display\">visited</script> array goes correctly. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">arrayNesting</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">boolean</span><span class=\"o\">[]</span> <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">boolean</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">do</span> <span class=\"o\">{</span>\n                    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">visited</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Every element of the <script type=\"math/tex; mode=display\">nums</script> array will be considered atmost once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">visited</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-without-using-extra-space-accepted\">Approach #3 Without Using Extra Space [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, the <script type=\"math/tex; mode=display\">visited</script> array is used just to keep a track of the elements of the array which have already been visited. Instead of making use of a separate array to keep track of the same, we can mark the visited elements in the original array <script type=\"math/tex; mode=display\">nums</script> itself. Since, the range of the elements can only be between 1 to 20,000, we can put a very large integer value <script type=\"math/tex; mode=display\">\\text{Integer.MAX_VALUE}</script> at the position which has been visited. The rest process of traversals remains the same as in the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">arrayNesting</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n                    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">temp</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Every element of the <script type=\"math/tex; mode=display\">nums</script> array will be considered atmost once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant Space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(209,'Find All Numbers Disappeared in an Array',1,'Array',0,0,'<p></p><p>Given an array of integers where 1 ≤ a[i] ≤ <i>n</i> (<i>n</i> = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, <i>n</i>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<i>n</i>) runtime? You may assume the returned list does not count as extra space.</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b>\n[4,3,2,7,8,2,3,1]\n\n<b>Output:</b>\n[5,6]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findDisappearedNumbers(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findDisappearedNumbers(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> FindDisappearedNumbers(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar findDisappearedNumbers = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef find_disappeared_numbers(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findDisappearedNumbers(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findDisappearedNumbers(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findDisappearedNumbers(nums: Array[Int]): List[Int] = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(210,'Longest Uncommon Subsequence I ',1,'String',0,0,'<p></p><p>\nGiven a group of two strings, you need to find the longest uncommon subsequence of this group of two strings.\nThe longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be <b>any</b> subsequence of the other strings.\n</p><p>\nA <b>subsequence</b> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n</p><p>\nThe input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn\'t exist, return -1.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"aba\", \"cdc\"\n<b>Output:</b> 3\n<b>Explanation:</b> The longest uncommon subsequence is \"aba\" (or \"cdc\"), <br/>because \"aba\" is a subsequence of \"aba\", <br/>but not a subsequence of any other strings in the group of two strings. \n</pre><p><b>Note:</b>\n</p><ol>\n<li>Both strings\' lengths will not exceed 100.</li>\n<li>Only letters from a ~ z will appear in input strings. </li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findLUSlength(string a, string b) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findLUSlength(String a, String b) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findLUSlength(self, a, b):\r\n        """\r\n        :type a: str\r\n        :type b: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findLUSlength(char* a, char* b) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindLUSlength(string a, string b) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} a\r\n * @param {string} b\r\n * @return {number}\r\n */\r\nvar findLUSlength = function(a, b) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} a\r\n# @param {String} b\r\n# @return {Integer}\r\ndef find_lu_slength(a, b)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findLUSlength(_ a: String, _ b: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findLUSlength(a string, b string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findLUSlength(a: String, b: String): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-simple-solutionaccepted\">Approach #2 Simple Solution[Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>In the brute force approach we will generate all the possible <script type=\"math/tex; mode=display\">2^n</script> subsequences of both the strings and store their number of occurences in a hashmap.\nLongest subsequence whose frequency is equal to <script type=\"math/tex; mode=display\">1</script> will be the required subsequence.\nAnd, if it is not found we will return <script type=\"math/tex; mode=display\">-1</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLUSlength</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">String</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(((</span><span class=\"n\">i</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                        <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span>\n                    <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(2^x+2^y)</script>. where <script type=\"math/tex; mode=display\">x</script> and <script type=\"math/tex; mode=display\">y</script> are the lengths of strings <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> respectively . Number of subsequences will be <script type=\"math/tex; mode=display\">2^x+2^y</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(2^x+2^y)</script>. <script type=\"math/tex; mode=display\">2^x+2^y</script> subsequences will be generated.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-simple-solutionaccepted\">Approach #2 Simple Solution[Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Simple analysis of this problem can lead to an easy solution.</p>\n<p>These three cases are possible with string <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script>:-</p>\n<ul>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">a=b</script>. If both the strings are identical, it is obvious that no subsequence will be uncommon. Hence, return -1.</p>\n</li>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">length(a)=length(b)</script> and <script type=\"math/tex; mode=display\">a \\ne b</script>. Example: <script type=\"math/tex; mode=display\">abc</script> and <script type=\"math/tex; mode=display\">abd</script>. In this case we can consider any string i.e. <script type=\"math/tex; mode=display\">abc</script> or <script type=\"math/tex; mode=display\">abd</script> as a required subsequence, as out of these two strings one string will never be a subsequence of other string. Hence, return <script type=\"math/tex; mode=display\">length(a)</script> or <script type=\"math/tex; mode=display\">length(b)</script>.</p>\n</li>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">length(a) \\ne length(b)</script>. Example <script type=\"math/tex; mode=display\">abcd</script> and <script type=\"math/tex; mode=display\">abc</script>. In this case we can consider bigger string as a required subsequence because bigger string can\'t be a subsequence of smaller string. Hence, return <script type=\"math/tex; mode=display\">max(length(a),length(b))</script>.</p>\n</li>\n</ul>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLUSlength</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">(),</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(min(x,y))</script>. where <script type=\"math/tex; mode=display\">x</script> and <script type=\"math/tex; mode=display\">y</script> are the lengths of strings <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> respectively. Here equals method will take <script type=\"math/tex; mode=display\">min(x,y)</script> time .</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space required.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(211,'Triangle',2,'Array,Dynamic Programming',0,0,'<p></p><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p><p>\nFor example, given the following triangle<br/>\n</p><pre>\n[\n     [<font color=\"red\">2</font>],\n    [<font color=\"red\">3</font>,4],\n   [6,<font color=\"red\">5</font>,7],\n  [4,<font color=\"red\">1</font>,8,3]\n]\n</pre><p>\nThe minimum path sum from top to bottom is <code>11</code> (i.e., <font color=\"red\">2</font> + <font color=\"red\">3</font> + <font color=\"red\">5</font> + <font color=\"red\">1</font> = 11).\n</p><p>\n<b>Note:</b><br/>\nBonus point if you are able to do this using only <i>O</i>(<i>n</i>) extra space, where <i>n</i> is the total number of rows in the triangle.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minimumTotal(vector<vector<int>>& triangle) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minimumTotal(self, triangle):\r\n        """\r\n        :type triangle: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minimumTotal(int** triangle, int triangleRowSize, int *triangleColSizes) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinimumTotal(IList<IList<int>> triangle) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} triangle\r\n * @return {number}\r\n */\r\nvar minimumTotal = function(triangle) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} triangle\r\n# @return {Integer}\r\ndef minimum_total(triangle)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minimumTotal(_ triangle: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minimumTotal(triangle [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minimumTotal(triangle: List[List[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(212,'Partition Equal Subset Sum',2,'Dynamic Programming',0,0,'<p></p><p>Given a <b>non-empty</b> array containing <b>only positive integers</b>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n</p><p><b>Note:</b><br/>\n</p><ol>\n<li>Each of the array element will not exceed 100.</li>\n<li>The array size will not exceed 200.</li>\n</ol><p><b>Example 1:</b>\n</p><pre>\nInput: [1, 5, 11, 5]\n\nOutput: true\n\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n</pre><p><b>Example 2:</b>\n</p><pre>\nInput: [1, 2, 3, 5]\n\nOutput: false\n\nExplanation: The array cannot be partitioned into equal sum subsets.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canPartition(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canPartition(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canPartition(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canPartition(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanPartition(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar canPartition = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef can_partition(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canPartition(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canPartition(nums []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(213,'Construct String from Binary Tree',1,'Tree,String',0,0,'<p></p><p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p><p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don\'t affect the one-to-one mapping relationship between the string and the original binary tree.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> Binary tree: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<b>Output:</b> \"1(2(4))(3)\"\n<br/><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br/>but you need to omit all the unnecessary empty parenthesis pairs. <br/>And it will be \"1(2(4))(3)\".\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> Binary tree: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<b>Output:</b> \"1(2()(4))(3)\"\n<br/><b>Explanation:</b> Almost the same as the first example, <br/>except we can\'t omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    string tree2str(TreeNode* t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public String tree2str(TreeNode t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def tree2str(self, t):\r\n        """\r\n        :type t: TreeNode\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def tree2str(self, t):\r\n        """\r\n        :type t: TreeNode\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nchar* tree2str(struct TreeNode* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public string Tree2str(TreeNode t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} t\r\n * @return {string}\r\n */\r\nvar tree2str = function(t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} t\r\n# @return {String}\r\ndef tree2str(t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func tree2str(_ t: TreeNode?) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc tree2str(t *TreeNode) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def tree2str(t: TreeNode): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</a></li>\n<li><a href=\"#approach-2-iterative-method-using-stack-accepted\">Approach #2 Iterative Method Using stack [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</h4>\n<p>This solution is very simple. We simply need to do the preorder traversal of the given Binary Tree. But, along with this, we need to make use of braces at appropriate positions. But, we also need to make sure that we omit the unnecessary braces. To do the preorder traversal, we make use of recursion. We print the current node and call the same given function for the left and the right children of the node in that order(if they exist). For every node encountered, the following cases are possible.</p>\n<p>Case 1: Both the left child and the right child exist for the current node. In this case, we need to put the braces <code>()</code> around both the left child\'s preorder traversal output and the right child\'s preorder traversal output.</p>\n<p>Case 2: None of the left or the right child exist for the current node. In this case, as shown in the figure below, considering empty braces for the null left and right children is redundant. Hence, we need not put braces for any of them.</p>\n<p align=\"center\"><img alt=\"No_child\" src=\"../Figures/606/606_Case2.PNG\" /></p>\n<p>Case 3: Only the left child exists for the current node. As the figure below shows, putting empty braces for the right child in this case is unnecessary while considering the preorder traversal. This is because the right child will always come after the left child in the preorder traversal. Thus, omitting the empty braces for the right child also leads to same mapping between the string and the binary tree.</p>\n<p align=\"center\"><img alt=\"Left_child\" src=\"../Figures/606/606_Case3.PNG\" /></p>\n<p>Case 4: Only the right child exists for the current node. In this case, we need to consider the empty braces for the left child. This is because, during the preorder traversal, the left child needs to be considered first. Thus, to indicate that the child following the current node is a right child we need to put a pair of empty braces for the left child. </p>\n<p align=\"center\"><img alt=\"Right_child\" src=\"../Figures/606/606_Case4.PNG\" /></p>\n<p>Just by taking care of the cases, mentioned above, we can obtain the required output string.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">tree2str</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">+</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">+</span><span class=\"s\">&quot;(&quot;</span><span class=\"o\">+</span><span class=\"n\">tree2str</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)+</span><span class=\"s\">&quot;)&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">+</span><span class=\"s\">&quot;(&quot;</span><span class=\"o\">+</span><span class=\"n\">tree2str</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">)+</span><span class=\"s\">&quot;)(&quot;</span><span class=\"o\">+</span><span class=\"n\">tree2str</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">)+</span><span class=\"s\">&quot;)&quot;</span><span class=\"o\">;</span>   \n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The preorder traversal is done over the <script type=\"math/tex; mode=display\">n</script> nodes of the given Binary Tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script> in case of a skewed tree.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-iterative-method-using-stack-accepted\">Approach #2 Iterative Method Using stack [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In order to solve the given problem, we can also make use of a <script type=\"math/tex; mode=display\">stack</script>. To see how to do it, we\'ll go through the implementation and we\'ll also look at the idea behind each step.</p>\n<p>We make use of a <script type=\"math/tex; mode=display\">stack</script> onto which various nodes of the given tree will be pushed during the process. The node at the top of the <script type=\"math/tex; mode=display\">stack</script> represents the current node to be processed. Whenever a node has been processed once, it is marked as visited. The reasoning behind this will be discussed soon. </p>\n<p>We start off by pushing the root of the binary tree onto the <script type=\"math/tex; mode=display\">stack</script>. Now, the root acts as the current node. For every current node encountered, firstly, we check if it has not been visited already. If not, we add it to the set of visited nodes. </p>\n<p>Since, for the preorder traversal, we know, we need to process the nodes in the order current-left-right. Thus, we add a <code>(</code> followed by the current node to the string <script type=\"math/tex; mode=display\">s</script> to be returned. </p>\n<p>Now, if both the left and the right children of the current node exist, we need to process them in the order left-right. To do so, we need to push them onto the <script type=\"math/tex; mode=display\">stack</script> in the reverse order, so that when they are picked up later on, their order of processing gets corrected.</p>\n<p>Since we\'ve already added <script type=\"math/tex; mode=display\">(current\\_node</script> to the string <script type=\"math/tex; mode=display\">s</script>, if only the right child of the current node exists, as discussed in case 4 in the last approach, we need to put a <code>()</code> in <script type=\"math/tex; mode=display\">s</script> representing the null left node. We need not push anything onto the <script type=\"math/tex; mode=display\">stack</script> for the left node and we can directly add the <code>()</code> to <script type=\"math/tex; mode=display\">s</script> for this. But, we still need to push the right child onto the <script type=\"math/tex; mode=display\">stack</script> for future processing. </p>\n<p>If only the left child exists, we need not consider the right child at all, as discussed in case 3 in the last approach. We can continue the process by just pushing the left child onto the <script type=\"math/tex; mode=display\">stack</script>.</p>\n<p>Now, we need to note that even when a node is being processed, if it has not already been visited, it isn\'t popped off from the <script type=\"math/tex; mode=display\">stack</script>. But, if a node that has already been processed(i.e. its children have been considered already), it is popped off from the <script type=\"math/tex; mode=display\">stack</script> when encountered again. Such a situation will occur for a node only when the preorder traversal of both its left and right sub-trees has been completely done. Thus, we need to add a <code>)</code> to mark the end of the preorder traversal of the current node as well.</p>\n<p>Thus, at the end, we get the required pre-order traversal in the substring <script type=\"math/tex; mode=display\">s(1:n-1)</script>. Here, <script type=\"math/tex; mode=display\">n</script> represents the length of <script type=\"math/tex; mode=display\">s</script>. This is because, we need not put the parentheses(redundant) at the outermost level.</p>\n<p>The following animation better depicts the process.</p>\n<p>!?!../Documents/Construct_Binary_Tree_stack.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">tree2str</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n        <span class=\"n\">Set</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n                <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&quot;)&quot;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">);</span>\n                <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&quot;(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&quot;()&quot;</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">n</script> nodes are pushed and popped in a stack.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">stack</script> size can grow upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(214,'Valid Number',3,'Math,String',0,0,'<p></p><p>Validate if a given string is numeric.</p><p>\nSome examples:<br/>\n<code>\"0\"</code> =&gt; <code>true</code><br/>\n<code>\"   0.1  \"</code> =&gt; <code>true</code><br/>\n<code>\"abc\"</code> =&gt; <code>false</code><br/>\n<code>\"1 a\"</code> =&gt; <code>false</code><br/>\n<code>\"2e10\"</code> =&gt; <code>true</code><br/>\n</p><p><b>Note:</b> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\n</p><p>\n<b><font color=\"red\">Update (2015-02-10):</font></b><br/>\nThe signature of the <code>C++</code> function had been updated. If you still see your function signature accepts a <code>const char *</code> argument, please click the reload button <span class=\"glyphicon glyphicon-refresh\"></span> to reset your code definition.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isNumber(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isNumber(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isNumber(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isNumber(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsNumber(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isNumber = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Boolean}\r\ndef is_number(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isNumber(_ s: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isNumber(s string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isNumber(s: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(215,'Max Consecutive Ones',1,'Array',0,0,'<p></p><p>Given a binary array, find the maximum number of consecutive 1s in this array.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,1,0,1,1,1]\n<b>Output:</b> 3\n<b>Explanation:</b> The first two digits or the last three digits are consecutive 1s.\n    The maximum number of consecutive 1s is 3.\n</pre><p><b>Note:</b>\n</p><ul>\n<li>The input array will only contain <code>0</code> and <code>1</code>.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMaxConsecutiveOnes(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMaxConsecutiveOnes(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMaxConsecutiveOnes(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMaxConsecutiveOnes(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findMaxConsecutiveOnes = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_max_consecutive_ones(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMaxConsecutiveOnes(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMaxConsecutiveOnes(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMaxConsecutiveOnes(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(216,'2 Keys Keyboard',2,'Dynamic Programming',0,0,'<p></p><p>\nInitially on a notepad only one character \'A\' is present. You can perform two operations on this notepad for each step: \n</p><ol>\n<li><code>Copy All</code>: You can copy all the characters present on the notepad (partial copy is not allowed).</li>\n<li><code>Paste</code>: You can paste the characters which are copied <b>last time</b>.</li>\n</ol><p>\nGiven a number <code>n</code>. You have to get <b>exactly</b> <code>n</code> \'A\' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get <code>n</code> \'A\'. \n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 3\n<b>Output:</b> 3\n<b>Explanation:</b>\nIntitally, we have one character \'A\'.\nIn step 1, we use <b>Copy All</b> operation.\nIn step 2, we use <b>Paste</b> operation to get \'AA\'.\nIn step 3, we use <b>Paste</b> operation to get \'AAA\'.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The <code>n</code> will be in the range [1, 1000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minSteps(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minSteps(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minSteps(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def minSteps(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minSteps(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinSteps(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar minSteps = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef min_steps(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func minSteps(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minSteps(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def minSteps(n: Int): Int = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(217,'Mini Parser',2,'Stack,String',0,0,'<p></p><p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p><p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p><p><b>Note:</b>\nYou may assume that the string is well-formed:\n</p><ul>\n<li>String is non-empty.</li>\n<li>String does not contain white spaces.</li>\n<li>String contains only digits <code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code>.</li>\n</ul><p><b>Example 1:</b>\n</p><pre>\nGiven s = \"324\",\n\nYou should return a NestedInteger object which contains a single integer 324.\n</pre><p><b>Example 2:</b>\n</p><pre>\nGiven s = \"[123,[456,[789]]]\",\n\nReturn a NestedInteger object containing a nested list with 2 elements:\n\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * class NestedInteger {\r\n *   public:\r\n *     // Constructor initializes an empty nested list.\r\n *     NestedInteger();\r\n *\r\n *     // Constructor initializes a single integer.\r\n *     NestedInteger(int value);\r\n *\r\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     bool isInteger() const;\r\n *\r\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // The result is undefined if this NestedInteger holds a nested list\r\n *     int getInteger() const;\r\n *\r\n *     // Set this NestedInteger to hold a single integer.\r\n *     void setInteger(int value);\r\n *\r\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\r\n *     void add(const NestedInteger &ni);\r\n *\r\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // The result is undefined if this NestedInteger holds a single integer\r\n *     const vector<NestedInteger> &getList() const;\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    NestedInteger deserialize(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public NestedInteger deserialize(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# """\r\n# This is the interface that allows for creating nested lists.\r\n# You should not implement it, or speculate about its implementation\r\n# """\r\n#class NestedInteger(object):\r\n#    def __init__(self, value=None):\r\n#        """\r\n#        If value is not specified, initializes an empty list.\r\n#        Otherwise initializes a single integer equal to value.\r\n#        """\r\n#\r\n#    def isInteger(self):\r\n#        """\r\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\r\n#        :rtype bool\r\n#        """\r\n#\r\n#    def add(self, elem):\r\n#        """\r\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\r\n#        :rtype void\r\n#        """\r\n#\r\n#    def setInteger(self, value):\r\n#        """\r\n#        Set this NestedInteger to hold a single integer equal to value.\r\n#        :rtype void\r\n#        """\r\n#\r\n#    def getInteger(self):\r\n#        """\r\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\r\n#        Return None if this NestedInteger holds a nested list\r\n#        :rtype int\r\n#        """\r\n#\r\n#    def getList(self):\r\n#        """\r\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\r\n#        Return None if this NestedInteger holds a single integer\r\n#        :rtype List[NestedInteger]\r\n#        """\r\n\r\nclass Solution(object):\r\n    def deserialize(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: NestedInteger\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * *********************************************************************\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * *********************************************************************\r\n *\r\n * // Initializes an empty nested list and return a reference to the nested integer.\r\n * struct NestedInteger *NestedIntegerInit();\r\n *\r\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n * bool NestedIntegerIsInteger(struct NestedInteger *);\r\n *\r\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n * // The result is undefined if this NestedInteger holds a nested list\r\n * int NestedIntegerGetInteger(struct NestedInteger *);\r\n *\r\n * // Set this NestedInteger to hold a single integer.\r\n * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);\r\n *\r\n * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\r\n * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);\r\n *\r\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n * // The result is undefined if this NestedInteger holds a single integer\r\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\r\n *\r\n * // Return the nested list\'s size that this NestedInteger holds, if it holds a nested list\r\n * // The result is undefined if this NestedInteger holds a single integer\r\n * int NestedIntegerGetListSize(struct NestedInteger *);\r\n * };\r\n */\r\nstruct NestedInteger* deserialize(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * interface NestedInteger {\r\n *\r\n *     // Constructor initializes an empty nested list.\r\n *     public NestedInteger();\r\n *\r\n *     // Constructor initializes a single integer.\r\n *     public NestedInteger(int value);\r\n *\r\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     bool IsInteger();\r\n *\r\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // Return null if this NestedInteger holds a nested list\r\n *     int GetInteger();\r\n *\r\n *     // Set this NestedInteger to hold a single integer.\r\n *     public void SetInteger(int value);\r\n *\r\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\r\n *     public void Add(NestedInteger ni);\r\n *\r\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // Return null if this NestedInteger holds a single integer\r\n *     IList<NestedInteger> GetList();\r\n * }\r\n */\r\npublic class Solution {\r\n    public NestedInteger Deserialize(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * function NestedInteger() {\r\n *\r\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     @return {boolean}\r\n *     this.isInteger = function() {\r\n *         ...\r\n *     };\r\n *\r\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     Return null if this NestedInteger holds a nested list\r\n *     @return {integer}\r\n *     this.getInteger = function() {\r\n *         ...\r\n *     };\r\n *\r\n *     Set this NestedInteger to hold a single integer equal to value.\r\n *     @return {void}\r\n *     this.setInteger = function(value) {\r\n *         ...\r\n *     };\r\n *\r\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\r\n *     @return {void}\r\n *     this.add = function(elem) {\r\n *         ...\r\n *     };\r\n *\r\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     Return null if this NestedInteger holds a single integer\r\n *     @return {NestedInteger[]}\r\n *     this.getList = function() {\r\n *         ...\r\n *     };\r\n * };\r\n */\r\n/**\r\n * @param {string} s\r\n * @return {NestedInteger}\r\n */\r\nvar deserialize = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\r\n# You should not implement it, or speculate about its implementation\r\n#\r\n#class NestedInteger\r\n#    def is_integer()\r\n#        """\r\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n#        @return {Boolean}\r\n#        """\r\n#\r\n#    def get_integer()\r\n#        """\r\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\r\n#        Return nil if this NestedInteger holds a nested list\r\n#        @return {Integer}\r\n#        """\r\n#\r\n#    def set_integer(value)\r\n#        """\r\n#        Set this NestedInteger to hold a single integer equal to value.\r\n#        @return {Void}\r\n#        """\r\n#\r\n#    def add(elem)\r\n#        """\r\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\r\n#        @return {Void}\r\n#        """\r\n#\r\n#    def get_list()\r\n#        """\r\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\r\n#        Return nil if this NestedInteger holds a single integer\r\n#        @return {NestedInteger[]}\r\n#        """\r\n\r\n# @param {String} s\r\n# @return {NestedInteger}\r\ndef deserialize(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public func isInteger() -> Bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     public func getInteger() -> Int\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public func setInteger(value: Int)\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public func add(elem: NestedInteger)\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     public func getList() -> [NestedInteger]\n * }\n */\nclass Solution {\n    func deserialize(_ s: String) -> NestedInteger {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * type NestedInteger struct {\r\n * }\r\n *\r\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n * func (n NestedInteger) IsInteger() bool {}\r\n *\r\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n * // The result is undefined if this NestedInteger holds a nested list\r\n * // So before calling this method, you should have a check\r\n * func (n NestedInteger) GetInteger() int {}\r\n *\r\n * // Set this NestedInteger to hold a single integer.\r\n * func (n *NestedInteger) SetInteger(value int) {}\r\n *\r\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\r\n * func (n *NestedInteger) Add(elem NestedInteger) {}\r\n *\r\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n * // The list length is zero if this NestedInteger holds a single integer\r\n * // You can access NestedInteger\'s List element directly if you want to modify it\r\n * func (n NestedInteger) GetList() []*NestedInteger {}\r\n */\r\nfunc deserialize(s string) *NestedInteger {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *   def isInteger: Boolean = {}\n *\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer\n *   def getInteger: Int = {}\n *\n *   // Set this NestedInteger to hold a single integer.\n *   def setInteger(i: Int) = {}\n *\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list\n *   def getList = {}\n *\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *   def add(ni: NestedInteger) = {}\n * }\n */\nobject Solution {\n    def deserialize(s: String): NestedInteger = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(218,'Factorial Trailing Zeroes',1,'Math',0,0,'<p></p><p>Given an integer <i>n</i>, return the number of trailing zeroes in <i>n</i>!.</p><p><b>Note: </b>Your solution should be in logarithmic time complexity.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int trailingZeroes(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int trailingZeroes(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def trailingZeroes(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int trailingZeroes(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int TrailingZeroes(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar trailingZeroes = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef trailing_zeroes(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func trailingZeroes(_ n: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func trailingZeroes(n int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def trailingZeroes(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(219,'Remove Nth Node From End of List',2,'Linked List,Two Pointers',0,0,'<p></p><p>Given a linked list, remove the <i>n</i><sup>th</sup> node from the end of list and return its head.</p><p>\nFor example,</p><pre>\n   Given linked list: <b>1-&gt;2-&gt;3-&gt;4-&gt;5</b>, and <b><i>n</i> = 2</b>.\n\n   After removing the second node from the end, the linked list becomes <b>1-&gt;2-&gt;3-&gt;5</b>.\n</pre><p>\n<b>Note:</b><br/>\nGiven <i>n</i> will always be valid.<br/>\nTry to do this in one pass.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def removeNthFromEnd(self, head, n):\r\n        """\r\n        :type head: ListNode\r\n        :type n: int\r\n        :rtype: ListNode\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode RemoveNthFromEnd(ListNode head, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} n\r\n * @return {ListNode}\r\n */\r\nvar removeNthFromEnd = function(head, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @param {Integer} n\r\n# @return {ListNode}\r\ndef remove_nth_from_end(head, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func removeNthFromEnd(_ head: ListNode?, _ n: Int) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-two-pass-algorithm\">Approach #1 (Two pass algorithm)</a></li>\n<li><a href=\"#approach-2-one-pass-algorithm\">Approach #2 (One pass algorithm)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for beginners. It introduces the following idea:\nLinked List traversal and removal of nth element from the end.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-two-pass-algorithm\">Approach #1 (Two pass algorithm)</h4>\n<p><strong>Intuition</strong></p>\n<p>We notice that the problem could be simply reduced to another one : Remove the <script type=\"math/tex; mode=display\">(L - n + 1)</script> th node from the beginning in the list , where <script type=\"math/tex; mode=display\">L</script> is the list length. This problem is easy to solve once we found list length <script type=\"math/tex; mode=display\">L</script>.</p>\n<p><strong>Algorithm</strong></p>\n<p>First we will add an auxiliary \"dummy\" node, which points to the list head. The \"dummy\" node is used to simplify some corner cases such as a list with only one node, or removing the head of the list. On the first pass, we find the list length <script type=\"math/tex; mode=display\">L</script>. Then we set a pointer to the dummy node and start to move it through the list till it comes to the <script type=\"math/tex; mode=display\">(L - n)</script> th node. We relink <code>next</code> pointer of the <script type=\"math/tex; mode=display\">(L - n)</script> th node to the <script type=\"math/tex; mode=display\">(L - n + 2)</script> th node and we are done.</p>\n<p align=\"center\"><img alt=\"Remove the nth element from a list\" src=\"https://leetcode.com/media/original_images/19_Remove_nth_node_from_end_of_listA.png\" /></p>\n<p align=\"center\"><em>Figure 1. Remove the L - n + 1 th element from a list.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">removeNthFromEnd</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">dummy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ListNode</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"n\">dummy</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">length</span>  <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">length</span><span class=\"o\">++;</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">length</span> <span class=\"o\">-=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">length</span><span class=\"o\">--;</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">dummy</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(L)</script>.</li>\n</ul>\n<p>The algorithm makes two traversal of the list, first to calculate list length <script type=\"math/tex; mode=display\">L</script> and second to find the <script type=\"math/tex; mode=display\">(L - n)</script> th node. There are <script type=\"math/tex; mode=display\">2L-n</script> operations and time complexity is <script type=\"math/tex; mode=display\">O(L)</script>.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe only used constant extra space.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-one-pass-algorithm\">Approach #2 (One pass algorithm)</h4>\n<p><strong>Algorithm</strong></p>\n<p>The above algorithm could be optimized to one pass. Instead of one pointer, we could use two pointers. The first pointer advances the list by <script type=\"math/tex; mode=display\">n+1</script> steps from the beginning, while the second pointer starts from the beginning of the list. Now, both pointers are exactly separated by <script type=\"math/tex; mode=display\">n</script> nodes apart. We maintain this constant gap by advancing both pointers together until the first pointer arrives past the last node. The second pointer will be pointing at the <script type=\"math/tex; mode=display\">n</script>th node counting from the last.\nWe relink the next pointer of the node referenced by the second pointer to point to the node\'s next next node.</p>\n<p align=\"center\"><img alt=\"Remove the nth element from a list\" src=\"https://leetcode.com/media/original_images/19_Remove_nth_node_from_end_of_listB.png\" /></p>\n<p align=\"center\"><em>Figure 2. Remove the nth element from end of a list.</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">removeNthFromEnd</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">dummy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ListNode</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"n\">dummy</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"o\">;</span>\n    <span class=\"c1\">// Advances first pointer so that the gap between first and second is n nodes apart</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// Move first to the end, maintaining the gap</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">second</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">dummy</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(L)</script>. The algorithm makes one traversal of the list of <script type=\"math/tex; mode=display\">L</script> nodes. Therefore time complexity is <script type=\"math/tex; mode=display\">O(L)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe only used constant extra space.</p>\n</li>\n</ul>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(220,'Combination Sum II',2,'Array,Backtracking',0,0,'<p></p><p>\nGiven a collection of candidate numbers (<b><i>C</i></b>) and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>.\n</p><p>Each number in <b><i>C</i></b> may only be used <b>once</b> in the combination.\n</p><p><b>Note:</b><br/>\n</p><ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul><p>\nFor example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>, <br/>\nA solution set is: <br/>\n</p><pre>\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def combinationSum2(self, candidates, target):\r\n        """\r\n        :type candidates: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum2(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} candidates\r\n * @param {number} target\r\n * @return {number[][]}\r\n */\r\nvar combinationSum2 = function(candidates, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} candidates\r\n# @param {Integer} target\r\n# @return {Integer[][]}\r\ndef combination_sum2(candidates, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func combinationSum2(candidates []int, target int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(221,'Count Complete Tree Nodes',2,'Tree,Binary Search',0,0,'<p></p><p>Given a <b>complete</b> binary tree, count the number of nodes.</p><p><b><u>Definition of a complete binary tree from <a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">Wikipedia</a>:</u></b><br/>\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int countNodes(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int countNodes(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def countNodes(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint countNodes(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int CountNodes(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar countNodes = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef count_nodes(root)\r\n    \r\nend\" }]',NULL,NULL,1,'none','none','none'),(222,'Find the Closest Palindrome',3,'String',0,0,'<p></p><p>Given an integer n, find the closest integer (not including itself), which is a palindrome. </p><p>The \'closest\' is defined as absolute difference minimized between two integers.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"123\"\n<b>Output:</b> \"121\"\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The input <b>n</b> is a positive integer represented by string, whose length will not exceed 18.</li>\n<li>If there is a tie, return the smaller one as answer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    string nearestPalindromic(string n) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String nearestPalindromic(String n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def nearestPalindromic(self, n):\n        """\n        :type n: str\n        :rtype: str\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* nearestPalindromic(char* n) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string NearestPalindromic(string n) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} n\n * @return {string}\n */\nvar nearestPalindromic = function(n) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} n\n# @return {String}\ndef nearest_palindromic(n)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func nearestPalindromic(_ n: String) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nearestPalindromic(n string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nearestPalindromic(n: String): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-forcetime-limit-exceeded\">Approach #1 Brute Force[Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-mathaccepted\">Approach #2 Using Math[Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-forcetime-limit-exceeded\">Approach #1 Brute Force[Time Limit Exceeded]</h4>\n<p>The simplest solution is to consider every possible number smaller than the given number <script type=\"math/tex; mode=display\">n</script>, starting by decrementing 1 from the given number and go on in descending order. Similarly, we can consider every possible number greater than <script type=\"math/tex; mode=display\">n</script> starting by incrementing 1 from the given number and going in ascending order. We can continue doing so in an alternate manner till we find a number which is a palindrome.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">nearestPalindromic</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">long</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isPalindrome</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isPalindrome</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">boolean</span> <span class=\"nf\">isPalindrome</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">long</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">rev</span> <span class=\"o\">+</span> <span class=\"n\">t</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">t</span> <span class=\"o\">/=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">rev</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(\\sqrt{n})</script>. Upto <script type=\"math/tex; mode=display\">2*\\sqrt{n}</script> numbers could be generated in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-mathaccepted\">Approach #2 Using Math[Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>To understand this method, let\'s start with a simple illustration. Assume that the number given to us is \"abcxy\". One way to convert this number into a palindrome is to replicate one half of the string to the other half. If we try replicating the second half to the first half, the new palindrome obtained will be \"yxcxy\" which lies at an absolute of <script type=\"math/tex; mode=display\">\\left|10000(a-y) + 1000(b-x)\\right|</script> from the original number. But, if we replicate the first half to the second half of the string, we obtain \"abcba\", which lies at an absolute difference of <script type=\"math/tex; mode=display\">\\left|10(x-b) + (y-a)\\right|</script>. Trying to change <script type=\"math/tex; mode=display\">c</script> additionaly in either case would incur an additional value of atleast 100 in the absolute difference.</p>\n<p>From the above illustration, we can conclude that if replication is used to generate the palindromic number, we should always replicate the first half to the second half. In this implementation, we\'ve stored such a number in <script type=\"math/tex; mode=display\">a</script> at a difference of <script type=\"math/tex; mode=display\">diff1</script> from <script type=\"math/tex; mode=display\">n</script>.</p>\n<p>But, there exists another case as well, where the digit at the middle index is incremented or decremented. In such cases, it could be profitable to make changes to the central digit only since such changes could lead to a palindrome formation nearer to the original digit. e.g. 10987. Using the above criteria, the palindrome obtained will be 10901 which is at a more difference from 10987 than 11011. A similar situation occurs if a 0 occurs at the middle digit. But, again as discussed previously, we need to consider only the first half digits to obtain the new palindrome. This special effect occurs with 0 or 9 at the middle digit since, only decrementing 0 and incrementing 9 at that digit place can lead to the change in the rest of the digits towards their left. In any other case, the situation boils down to the one discussed in the first paragraph.</p>\n<p>Now, whenever we find a 0 near the middle index, in order to consider the palindromes which are lesser than <script type=\"math/tex; mode=display\">n</script>, we subtract a 1 from the first half of the number to obtain a new palindromic half e.g. If the given number <script type=\"math/tex; mode=display\">n</script> is 20001, we subtract a 1 from 200 creating a number of the form 199xx. To obtain the new palindrome, we replicate the first half to obtain 19991. Taking another example of  10000, (with a 1 at the MSB), we subtract a 1 from 100 creating 099xx as the new number transforming to a 9999 as the new palindrome. This number is stored in <script type=\"math/tex; mode=display\">b</script> having a difference of <script type=\"math/tex; mode=display\">diff2</script> from <script type=\"math/tex; mode=display\">n</script>\n</p>\n<p>Similar treatment needs to be done with a 9 at the middle digit, except that this time we need to consider the numbers larger than the current number. For this, we add a 1 to the first half. e.g. Taking the number 10987, we add a 1 to 109 creating a number of the form 110xx(11011 is the new palindrome). This palindrome is stored in <script type=\"math/tex; mode=display\">c</script> having a difference of <script type=\"math/tex; mode=display\">diff3</script> from <script type=\"math/tex; mode=display\">n</script>.</p>\n<p>Out of these three palindromes, we can choose the one with a minimum difference from <script type=\"math/tex; mode=display\">n</script>. Further, in case of a tie, we need to return the smallest palindrome obtained. For resolving this tie\'s conflict, we can observe that a tie is possible only if one number is larger than <script type=\"math/tex; mode=display\">n</script> and another is lesser than <script type=\"math/tex; mode=display\">n</script>. Further, we know that the number <script type=\"math/tex; mode=display\">b</script> is obtained by decreasing <script type=\"math/tex; mode=display\">n</script>. Thus, in case of conflict between <script type=\"math/tex; mode=display\">b</script> and any other number, we need to choose <script type=\"math/tex; mode=display\">b</script>. Similarly, <script type=\"math/tex; mode=display\">c</script> is obtained by increasing <script type=\"math/tex; mode=display\">n</script>. Thus, in case of a tie between <script type=\"math/tex; mode=display\">c</script> and any other number, we need to choose the number other than <script type=\"math/tex; mode=display\">c</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">mirroring</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">).</span><span class=\"na\">reverse</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">nearestPalindromic</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">&quot;1&quot;</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;0&quot;</span><span class=\"o\">;</span>\n\n        <span class=\"n\">String</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">mirroring</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"kt\">long</span> <span class=\"n\">diff1</span> <span class=\"o\">=</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"n\">diff1</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">));</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff1</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"n\">diff1</span> <span class=\"o\">=</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;9&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;9&quot;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">)(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n        <span class=\"n\">String</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">mirroring</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"kt\">long</span> <span class=\"n\">diff2</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">));</span>\n\n\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;0&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">insert</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s\">&quot;1&quot;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span>\n            <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">)(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n        <span class=\"n\">String</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">mirroring</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"kt\">long</span> <span class=\"n\">diff3</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">));</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff2</span> <span class=\"o\">&lt;=</span> <span class=\"n\">diff1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">diff2</span> <span class=\"o\">&lt;=</span> <span class=\"n\">diff3</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">diff3</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">diff1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">diff2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l)</script>. Scanning, insertion, deletion,, mirroring takes <script type=\"math/tex; mode=display\">O(l)</script>, where <script type=\"math/tex; mode=display\">l</script> is the length of the string.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(l)</script>. Temporary variables are used to store the strings.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(223,'First Bad Version',1,'Binary Search',0,0,'<p></p><p>\nYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. \n</p><p>\nSuppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.\n</p><p>\nYou are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"// Forward declaration of isBadVersion API.\r\nbool isBadVersion(int version);\r\n\r\nclass Solution {\r\npublic:\r\n    int firstBadVersion(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\r\n      boolean isBadVersion(int version); */\r\n\r\npublic class Solution extends VersionControl {\r\n    public int firstBadVersion(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# The isBadVersion API is already defined for you.\r\n# @param version, an integer\r\n# @return a bool\r\n# def isBadVersion(version):\r\n\r\nclass Solution(object):\r\n    def firstBadVersion(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"// Forward declaration of isBadVersion API.\r\nbool isBadVersion(int version);\r\n\r\nint firstBadVersion(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\r\n      bool IsBadVersion(int version); */\r\n\r\npublic class Solution : VersionControl {\r\n    public int FirstBadVersion(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for isBadVersion()\r\n * \r\n * @param {integer} version number\r\n * @return {boolean} whether the version is bad\r\n * isBadVersion = function(version) {\r\n *     ...\r\n * };\r\n */\r\n\r\n/**\r\n * @param {function} isBadVersion()\r\n * @return {function}\r\n */\r\nvar solution = function(isBadVersion) {\r\n    /**\r\n     * @param {integer} n Total versions\r\n     * @return {integer} The first bad version\r\n     */\r\n    return function(n) {\r\n        \r\n    };\r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# The is_bad_version API is already defined for you.\r\n# @param {Integer} version\r\n# @return {boolean} whether the version is bad\r\n# def is_bad_version(version):\r\n\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef first_bad_version(n)\r\n    \r\nend\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-linear-scan-time-limit-exceeded\">Approach #1 (Linear Scan) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-binary-search-accepted\">Approach #2 (Binary Search) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This is a very simple problem. There is a subtle trap that you may fall into if you are not careful. Other than that, it is a direct application of a very famous algorithm.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-linear-scan-time-limit-exceeded\">Approach #1 (Linear Scan) [Time Limit Exceeded]</h4>\n<p>The straight forward way is to brute force it by doing a linear scan.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">firstBadVersion</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isBadVersion</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nAssume that <script type=\"math/tex; mode=display\">isBadVersion(version)</script> takes constant time to check if a <em>version</em> is bad. It takes at most <script type=\"math/tex; mode=display\">n - 1</script> checks, therefore the overall time complexity is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-binary-search-accepted\">Approach #2 (Binary Search) [Accepted]</h4>\n<p>It is not difficult to see that this could be solved using a classic algorithm - Binary search. Let us see how the search space could be halved each time below.</p>\n<div class=\"codehilite\"><pre><span></span>Scenario #1: isBadVersion(mid) =&gt; false\n\n 1 2 3 4 5 6 7 8 9\n G G G G G G B B B       G = Good, B = Bad\n |       |       |\nleft    mid    right\n</pre></div>\n\n\n<p>Let us look at the first scenario above where <script type=\"math/tex; mode=display\">isBadVersion(mid) \\Rightarrow  false</script>. We know that all versions preceding and including <script type=\"math/tex; mode=display\">mid</script> are all good. So we set <script type=\"math/tex; mode=display\">left = mid + 1</script> to indicate that the new search space is the interval <script type=\"math/tex; mode=display\">[mid + 1, right]</script> (inclusive).</p>\n<div class=\"codehilite\"><pre><span></span>Scenario #2: isBadVersion(mid) =&gt; true\n\n 1 2 3 4 5 6 7 8 9\n G G G B B B B B B       G = Good, B = Bad\n |       |       |\nleft    mid    right\n</pre></div>\n\n\n<p>The only scenario left is where <script type=\"math/tex; mode=display\">isBadVersion(mid) \\Rightarrow true</script>. This tells us that <script type=\"math/tex; mode=display\">mid</script> may or may not be the first bad version, but we can tell for sure that all versions after <script type=\"math/tex; mode=display\">mid</script> can be discarded. Therefore we set <script type=\"math/tex; mode=display\">right = mid</script> as the new search space of interval <script type=\"math/tex; mode=display\">[left,mid]</script> (inclusive).</p>\n<p>In our case, we indicate <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> as the boundary of our search space (both inclusive). This is why we initialize <script type=\"math/tex; mode=display\">left = 1</script> and <script type=\"math/tex; mode=display\">right = n </script>. How about the terminating condition? We could guess that <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> eventually both meet and it must be the first bad version, but how could you tell for sure?</p>\n<p>The formal way is to <a href=\"http://www.cs.cornell.edu/courses/cs211/2006sp/Lectures/L06-Induction/binary_search.html\">prove by induction</a>, which you can read up yourself if you are interested. Here is a helpful tip to quickly prove the correctness of your binary search algorithm\nduring an interview. We just need to test an input of size 2. Check if it reduces the search space to a single element (which must be the answer) for both of the scenarios above. If not, your algorithm will never terminate.</p>\n<p>If you are setting <script type=\"math/tex; mode=display\">mid = \\frac{left + right}{2}</script>, you have to be very careful. Unless you are using a language that does not overflow such as <a href=\"https://www.reddit.com/r/Python/comments/36xu5z/can_integer_operations_overflow_in_python/\">Python</a>, <script type=\"math/tex; mode=display\">left + right</script> could overflow. One way to fix this is to use <script type=\"math/tex; mode=display\">left + \\frac{right - left}{2}</script> instead.</p>\n<p>If you fall into this subtle overflow bug, you are not alone. Even Jon Bentley\'s own implementation of binary search had this <a href=\"https://en.wikipedia.org/wiki/Binary_search_algorithm#Implementation_issues\">overflow bug</a> and remained undetected for over twenty years.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">firstBadVersion</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isBadVersion</span><span class=\"o\">(</span><span class=\"n\">mid</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(\\log n)</script>.\nThe search space is halved each time, so the time complexity is <script type=\"math/tex; mode=display\">O(\\log n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>',NULL,1,'none','none','none'),(224,'Number of Boomerangs',1,'Hash Table',0,0,'<p></p><p>Given <i>n</i> points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (<b>the order of the tuple matters</b>).</p><p>Find the number of boomerangs. You may assume that <i>n</i> will be at most <b>500</b> and coordinates of points are all in the range <b>[-10000, 10000]</b> (inclusive).</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b>\n[[0,0],[1,0],[2,0]]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nThe two boomerangs are <b>[[1,0],[0,0],[2,0]]</b> and <b>[[1,0],[2,0],[0,0]]</b>\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numberOfBoomerangs(vector<pair<int, int>>& points) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numberOfBoomerangs(int[][] points) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numberOfBoomerangs(self, points):\r\n        """\r\n        :type points: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numberOfBoomerangs(int** points, int pointsRowSize, int pointsColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumberOfBoomerangs(int[,] points) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} points\r\n * @return {number}\r\n */\r\nvar numberOfBoomerangs = function(points) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} points\r\n# @return {Integer}\r\ndef number_of_boomerangs(points)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numberOfBoomerangs(_ points: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberOfBoomerangs(points [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numberOfBoomerangs(points: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(225,'Rising Temperature',1,'',0,0,'<p></p><p>Given a <code>Weather</code> table, write a SQL query to find all dates\' Ids with higher temperature compared to its previous (yesterday\'s) dates.</p><pre>\n+---------+------------+------------------+\n| Id(INT) | Date(DATE) | Temperature(INT) |\n+---------+------------+------------------+\n|       1 | 2015-01-01 |               10 |\n|       2 | 2015-01-02 |               25 |\n|       3 | 2015-01-03 |               20 |\n|       4 | 2015-01-04 |               30 |\n+---------+------------+------------------+\n</pre>\n\nFor example, return the following Ids for the above Weather table:\n<pre>\n+----+\n| Id |\n+----+\n|  2 |\n|  4 |\n+----+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-join-and-datediff-clause-accepted\">Approach: Using JOIN and DATEDIFF() clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-join-and-datediff-clause-accepted\">Approach: Using <code>JOIN</code> and <code>DATEDIFF()</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>MySQL uses <a href=\"https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_datediff\">DATEDIFF</a> to compare two date type values.</p>\n<p>So, we can get the result by joining this table <strong>weather</strong> with itself and use this <code>DATEDIFF()</code> function.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">weather</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"k\">AS</span> <span class=\"s1\">&#39;Id&#39;</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">weather</span>\n        <span class=\"k\">JOIN</span>\n    <span class=\"n\">weather</span> <span class=\"n\">w</span> <span class=\"k\">ON</span> <span class=\"n\">DATEDIFF</span><span class=\"p\">(</span><span class=\"n\">weather</span><span class=\"p\">.</span><span class=\"nb\">date</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">.</span><span class=\"nb\">date</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">AND</span> <span class=\"n\">weather</span><span class=\"p\">.</span><span class=\"n\">Temperature</span> <span class=\"o\">&gt;</span> <span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">Temperature</span>\n<span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(226,'Can Place Flowers',1,'Array',0,0,'<p></p><p>Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.</p><p>Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number <b>n</b>, return if <b>n</b> new flowers can be planted in it without violating the no-adjacent-flowers rule.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> flowerbed = [1,0,0,0,1], n = 1\n<b>Output:</b> True\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> flowerbed = [1,0,0,0,1], n = 2\n<b>Output:</b> False\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The input array won\'t violate no-adjacent-flowers rule.</li>\n<li>The input array size is in the range of [1, 20000].</li>\n<li><b>n</b> is a non-negative integer which won\'t exceed the input array size.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canPlaceFlowers(self, flowerbed, n):\r\n        """\r\n        :type flowerbed: List[int]\r\n        :type n: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def canPlaceFlowers(self, flowerbed, n):\r\n        """\r\n        :type flowerbed: List[int]\r\n        :type n: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} flowerbed\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar canPlaceFlowers = function(flowerbed, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} flowerbed\r\n# @param {Integer} n\r\n# @return {Boolean}\r\ndef can_place_flowers(flowerbed, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canPlaceFlowers(flowerbed []int, n int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-single-scan-accepted\">Approach #1 Single Scan [Accepted]</a></li>\n<li><a href=\"#approach-2-optimized-accepted\">Approach #2 Optimized [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-single-scan-accepted\">Approach #1 Single Scan [Accepted]</h4>\n<p>The solution is very simple. We can find out the extra maximum number of flowers, <script type=\"math/tex; mode=display\">count</script>, that can be planted for the given <script type=\"math/tex; mode=display\">flowerbed</script> arrangement. To do so, we can traverse over all the elements of the <script type=\"math/tex; mode=display\">flowerbed</script> and find out those elements which are 0(implying an empty position). For every such element, we check if its both adjacent positions are also empty. If so, we can plant a flower at the current position without violating the no-adjacent-flowers-rule. For the first and last elements, we need not check the previous and the next adjacent positions respectively.</p>\n<p>If the <script type=\"math/tex; mode=display\">count</script> obtained is greater than or equal to <script type=\"math/tex; mode=display\">n</script>, the required number of flowers to be planted, we can plant <script type=\"math/tex; mode=display\">n</script> flowers in the empty spaces, otherwise not.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canPlaceFlowers</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">flowerbed</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">flowerbed</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">flowerbed</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span> <span class=\"o\">&gt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A single scan of the <script type=\"math/tex; mode=display\">flowerbed</script> array of size <script type=\"math/tex; mode=display\">n</script> is done.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-optimized-accepted\">Approach #2 Optimized [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of finding the maximum value of <script type=\"math/tex; mode=display\">count</script> that can be obtained, as done in the last approach, we can stop the process of checking the positions for planting the flowers as soon as <script type=\"math/tex; mode=display\">count</script> becomes equal to <script type=\"math/tex; mode=display\">n</script>. Doing this leads to an optimization of the first approach. If <script type=\"math/tex; mode=display\">count</script> never becomes equal to <script type=\"math/tex; mode=display\">n</script>, <script type=\"math/tex; mode=display\">n</script> flowers can\'t be planted at the empty positions.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canPlaceFlowers</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">flowerbed</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">flowerbed</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">flowerbed</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">flowerbed</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n             <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">&gt;=</span><span class=\"n\">n</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A single scan of the <script type=\"math/tex; mode=display\">flowerbed</script> array of size <script type=\"math/tex; mode=display\">n</script> is done.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(227,'Smallest Good Base',3,'Binary Search,Math',0,0,'<p></p><p>For an integer n, we call k&gt;=2 a <i><b>good base</b></i> of n, if all digits of n base k are 1.</p><p>Now given a string representing n, you should return the smallest good base of n in string format. <br/></p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"13\"\n<b>Output:</b> \"3\"\n<b>Explanation:</b> 13 base 3 is 111.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"4681\"\n<b>Output:</b> \"8\"\n<b>Explanation:</b> 4681 base 8 is 11111.\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> \"1000000000000000000\"\n<b>Output:</b> \"999999999999999999\"\n<b>Explanation:</b> 1000000000000000000 base 999999999999999999 is 11.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The range of n is [3, 10^18].</li>\n<li>The string representing n is always valid and will not have leading zeros.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string smallestGoodBase(string n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String smallestGoodBase(String n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def smallestGoodBase(self, n):\r\n        """\r\n        :type n: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* smallestGoodBase(char* n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string SmallestGoodBase(string n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} n\r\n * @return {string}\r\n */\r\nvar smallestGoodBase = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} n\r\n# @return {String}\r\ndef smallest_good_base(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func smallestGoodBase(_ n: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func smallestGoodBase(n string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def smallestGoodBase(n: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(228,'Add Strings',1,'Math',0,0,'<p></p><p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as string, return the sum of <code>num1</code> and <code>num2</code>.</p><p><b>Note:</b>\n</p><ol>\n<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 5100.</li>\n<li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>\n<li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>\n<li>You <b>must not use any built-in BigInteger library</b> or <b>convert the inputs to integer</b> directly.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string addStrings(string num1, string num2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String addStrings(String num1, String num2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def addStrings(self, num1, num2):\r\n        """\r\n        :type num1: str\r\n        :type num2: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* addStrings(char* num1, char* num2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string AddStrings(string num1, string num2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} num1\r\n * @param {string} num2\r\n * @return {string}\r\n */\r\nvar addStrings = function(num1, num2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num1\r\n# @param {String} num2\r\n# @return {String}\r\ndef add_strings(num1, num2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func addStrings(_ num1: String, _ num2: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func addStrings(num1 string, num2 string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def addStrings(num1: String, num2: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(229,'Excel Sheet Column Number',1,'Math',0,0,'<p></p><p>Related to question <a href=\"https://leetcode.com/problems/excel-sheet-column-title/\">Excel Sheet Column Title</a></p><p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p><p>For example:</p><pre>    A -&gt; 1\n    B -&gt; 2\n    C -&gt; 3\n    ...\n    Z -&gt; 26\n    AA -&gt; 27\n    AB -&gt; 28 </pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int titleToNumber(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int titleToNumber(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def titleToNumber(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int titleToNumber(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int TitleToNumber(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar titleToNumber = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef title_to_number(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func titleToNumber(_ s: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func titleToNumber(s string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def titleToNumber(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(230,'Minimum Path Sum',2,'Array,Dynamic Programming',0,0,'<p></p><p>Given a <i>m</i> x <i>n</i> grid filled with non-negative numbers, find a path from top left to bottom right which <i>minimizes</i> the sum of all numbers along its path.</p><p><b>Note:</b> You can only move either down or right at any point in time.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minPathSum(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minPathSum(int[][] grid) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minPathSum(self, grid):\r\n        """\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minPathSum(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinPathSum(int[,] grid) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar minPathSum = function(grid) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef min_path_sum(grid)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minPathSum(grid [][]int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(231,'Shuffle an Array',2,'',0,0,'<p></p><p>Shuffle a set of numbers without duplicates.\n</p><p><b>Example:</b>\n</p><pre>\n// Init an array with set 1, 2, and 3.\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.\nsolution.shuffle();\n\n// Resets the array back to its original configuration [1,2,3].\nsolution.reset();\n\n// Returns the random shuffling of array [1,2,3].\nsolution.shuffle();\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    Solution(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    /** Resets the array to its original configuration and return it. */\r\n    vector<int> reset() {\r\n        \r\n    }\r\n    \r\n    /** Returns a random shuffling of the array. */\r\n    vector<int> shuffle() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(nums);\r\n * vector<int> param_1 = obj.reset();\r\n * vector<int> param_2 = obj.shuffle();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n\n    public Solution(int[] nums) {\n        \n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    public int[] reset() {\n        \n    }\n    \n    /** Returns a random shuffling of the array. */\n    public int[] shuffle() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int[] param_1 = obj.reset();\n * int[] param_2 = obj.shuffle();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n\r\n    def __init__(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        """\r\n        \r\n\r\n    def reset(self):\r\n        """\r\n        Resets the array to its original configuration and return it.\r\n        :rtype: List[int]\r\n        """\r\n        \r\n\r\n    def shuffle(self):\r\n        """\r\n        Returns a random shuffling of the array.\r\n        :rtype: List[int]\r\n        """\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(nums)\r\n# param_1 = obj.reset()\r\n# param_2 = obj.shuffle()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\r\n    \r\n} Solution;\r\n\r\nSolution* solutionCreate(int* nums, int size) {\r\n    \r\n}\r\n\r\n/** Resets the array to its original configuration and return it. */\r\nint* solutionReset(Solution* obj, int *returnSize) {\r\n    \r\n}\r\n\r\n/** Returns a random shuffling of the array. */\r\nint* solutionShuffle(Solution* obj, int *returnSize) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(nums, size);\r\n * int* param_1 = solutionReset(obj);\r\n * int* param_2 = solutionShuffle(obj);\r\n * solutionFree(obj);\r\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n\r\n    public Solution(int[] nums) {\r\n        \r\n    }\r\n    \r\n    /** Resets the array to its original configuration and return it. */\r\n    public int[] Reset() {\r\n        \r\n    }\r\n    \r\n    /** Returns a random shuffling of the array. */\r\n    public int[] Shuffle() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(nums);\r\n * int[] param_1 = obj.Reset();\r\n * int[] param_2 = obj.Shuffle();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n */\r\nvar Solution = function(nums) {\r\n    \r\n};\r\n\r\n/**\r\n * Resets the array to its original configuration and return it.\r\n * @return {number[]}\r\n */\r\nSolution.prototype.reset = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Returns a random shuffling of the array.\r\n * @return {number[]}\r\n */\r\nSolution.prototype.shuffle = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(nums)\r\n * var param_1 = obj.reset()\r\n * var param_2 = obj.shuffle()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Solution\r\n\r\n=begin\r\n    :type nums: Integer[]\r\n=end\r\n    def initialize(nums)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Resets the array to its original configuration and return it.\r\n    :rtype: Integer[]\r\n=end\r\n    def reset()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns a random shuffling of the array.\r\n    :rtype: Integer[]\r\n=end\r\n    def shuffle()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(nums)\r\n# param_1 = obj.reset()\r\n# param_2 = obj.shuffle()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(nums []int) Solution {\r\n    \r\n}\r\n\r\n\r\n/** Resets the array to its original configuration and return it. */\r\nfunc (this *Solution) Reset() []int {\r\n    \r\n}\r\n\r\n\r\n/** Returns a random shuffling of the array. */\r\nfunc (this *Solution) Shuffle() []int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(nums);\r\n * param_1 := obj.Reset();\r\n * param_2 := obj.Shuffle();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class Solution(var _nums: Array[Int]) {\n    \n    /** Resets the array to its original configuration and return it. */\n    def reset() : Array[Int] = {\n\n    }\n    \n    /** Returns a random shuffling of the array. */\n    def shuffle() : Array[Int] = {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums);\n * Array[Int] param_1 = obj.reset();\n * Array[Int] param_2 = obj.shuffle();\n */\" }]',NULL,NULL,1,'none','none','none'),(232,'4Sum',2,'Array,Hash Table,Two Pointers',0,0,'<p></p><p>Given an array <i>S</i> of <i>n</i> integers, are there elements <i>a</i>, <i>b</i>, <i>c</i>, and <i>d</i> in <i>S</i> such that <i>a</i> + <i>b</i> + <i>c</i> + <i>d</i> = target? Find all unique quadruplets in the array which gives the sum of target.</p><p><b>Note:</b> The solution set must not contain duplicate quadruplets.\n</p><pre>\nFor example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.\n\nA solution set is:\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def fourSum(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** fourSum(int* nums, int numsSize, int target, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> FourSum(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number[][]}\r\n */\r\nvar fourSum = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer[][]}\r\ndef four_sum(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func fourSum(_ nums: [Int], _ target: Int) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fourSum(nums []int, target int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def fourSum(nums: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(233,'Combination Sum',2,'Array,Backtracking',0,0,'<p></p><p>\nGiven a <b>set</b> of candidate numbers (<b><i>C</i></b>) <b>(without duplicates)</b> and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>. \n</p><p>The <b>same</b> repeated number may be chosen from <b><i>C</i></b> unlimited number of times.\n</p><p><b>Note:</b><br/>\n</p><ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul><p>\nFor example, given candidate set <code>[2, 3, 6, 7]</code> and target <code>7</code>, <br/>\nA solution set is: <br/>\n</p><pre>\n[\n  [7],\n  [2, 2, 3]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def combinationSum(self, candidates, target):\r\n        """\r\n        :type candidates: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} candidates\r\n * @param {number} target\r\n * @return {number[][]}\r\n */\r\nvar combinationSum = function(candidates, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} candidates\r\n# @param {Integer} target\r\n# @return {Integer[][]}\r\ndef combination_sum(candidates, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func combinationSum(candidates []int, target int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(234,'Data Stream as Disjoint Intervals',3,'Binary Search Tree',0,0,'<p></p><p>Given a data stream input of non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, ..., summarize the numbers seen so far as a list of disjoint intervals.</p><p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:</p><pre>\n[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre><p><b>Follow up:</b><br/>\nWhat if there are lots of merges and the number of disjoint intervals are small compared to the data stream\'s size?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> for adding this problem and creating most of the test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass SummaryRanges {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    SummaryRanges() {\r\n        \r\n    }\r\n    \r\n    void addNum(int val) {\r\n        \r\n    }\r\n    \r\n    vector<Interval> getIntervals() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * SummaryRanges obj = new SummaryRanges();\r\n * obj.addNum(val);\r\n * vector<Interval> param_2 = obj.getIntervals();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass SummaryRanges {\n\n    /** Initialize your data structure here. */\n    public SummaryRanges() {\n        \n    }\n    \n    public void addNum(int val) {\n        \n    }\n    \n    public List<Interval> getIntervals() {\n        \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.addNum(val);\n * List<Interval> param_2 = obj.getIntervals();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass SummaryRanges(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def addNum(self, val):\r\n        """\r\n        :type val: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def getIntervals(self):\r\n        """\r\n        :rtype: List[Interval]\r\n        """\r\n        \r\n\r\n\r\n# Your SummaryRanges object will be instantiated and called as such:\r\n# obj = SummaryRanges()\r\n# obj.addNum(val)\r\n# param_2 = obj.getIntervals()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for an interval.\n * struct Interval {\n *     int start;\n *     int end;\n * };\n */\ntypedef struct {\n    \n} SummaryRanges;\n\n/** Initialize your data structure here. */\nSummaryRanges* summaryRangesCreate() {\n    \n}\n\nvoid summaryRangesAddNum(SummaryRanges* obj, int val) {\n    \n}\n\nstruct Interval* summaryRangesGetIntervals(SummaryRanges* obj, int *returnSize) {\n    \n}\n\nvoid summaryRangesFree(SummaryRanges* obj) {\n    \n}\n\n/**\n * Your SummaryRanges struct will be instantiated and called as such:\n * struct SummaryRanges* obj = summaryRangesCreate();\n * summaryRangesAddNum(obj, val);\n * struct Interval* param_2 = summaryRangesGetIntervals(obj);\n * summaryRangesFree(obj);\n */\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\ntype SummaryRanges struct {\r\n\r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() SummaryRanges {\r\n\r\n}\r\n\r\n\r\nfunc (this *SummaryRanges) Addnum(val int)  {\r\n\r\n}\r\n\r\n\r\nfunc (this *SummaryRanges) Getintervals() []Interval {\r\n\r\n}\r\n\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Addnum(val);\r\n * param_2 := obj.Getintervals();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for an interval.\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\n *   var start: Int = _start\n *   var end: Int = _end\n * }\n */\n\n    /** Initialize your data structure here. */class SummaryRanges() {\n    \n    def addNum(int val) {\n\n    }\n    \n    def getIntervals() : List[Interval] = {\n\n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = new SummaryRanges();\n * obj.addNum(val);\n * List[Interval] param_2 = obj.getIntervals();\n */\" }]',NULL,NULL,1,'none','none','none'),(235,'H-Index II',2,'Binary Search',0,0,'<p></p><p>\n<b>Follow up</b> for <a href=\"/problems/h-index/\" target=\"_blank\">H-Index</a>: What if the <code>citations</code> array is sorted in ascending order? Could you optimize your algorithm?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int hIndex(vector<int>& citations) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int hIndex(int[] citations) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def hIndex(self, citations):\r\n        """\r\n        :type citations: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int hIndex(int* citations, int citationsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int HIndex(int[] citations) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} citations\r\n * @return {number}\r\n */\r\nvar hIndex = function(citations) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} citations\r\n# @return {Integer}\r\ndef h_index(citations)\r\n    \r\nend\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func hIndex(citations []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(236,'Arithmetic Slices II - Subsequence',3,'Dynamic Programming',0,0,'<p></p><p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p><p>For example, these are arithmetic sequences:</p><pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre><p>The following sequence is not arithmetic.</p> <pre>1, 1, 2, 5, 7</pre><br/><p>A zero-indexed array A consisting of N numbers is given. A <b>subsequence</b> slice of that array is any sequence of integers (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) such that 0 ≤ P<sub>0</sub> &lt; P<sub>1</sub> &lt; ... &lt; P<sub>k</sub> &lt; N.</p><p>A <b>subsequence</b> slice (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) of array A is called arithmetic if the sequence A[P<sub>0</sub>], A[P<sub>1</sub>], ..., A[P<sub>k-1</sub>], A[P<sub>k</sub>] is arithmetic. In particular, this means that k ≥ 2.</p><p>The function should return the number of arithmetic subsequence slices in the array A. </p><p>The input contains N integers. Every integer is in the range of -2<sup>31</sup> and 2<sup>31</sup>-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 2<sup>31</sup>-1.</p><br/><p><b>Example:</b>\n</p><pre>\n<b>Input:</b> [2, 4, 6, 8, 10]\n\n<b>Output:</b> 7\n\n<b>Explanation:</b>\nAll arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numberOfArithmeticSlices(vector<int>& A) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numberOfArithmeticSlices(self, A):\r\n        """\r\n        :type A: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numberOfArithmeticSlices(int* A, int ASize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumberOfArithmeticSlices(int[] A) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} A\r\n * @return {number}\r\n */\r\nvar numberOfArithmeticSlices = function(A) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} a\r\n# @return {Integer}\r\ndef number_of_arithmetic_slices(a)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numberOfArithmeticSlices(_ A: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberOfArithmeticSlices(A []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numberOfArithmeticSlices(A: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(237,'Majority Element',1,'Array,Divide and Conquer,Bit Manipulation',0,0,'<p></p><p>Given an array of size <i>n</i>, find the majority element. The majority element is the element that appears <b>more than</b> <code>⌊ n/2 ⌋</code> times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int majorityElement(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def majorityElement(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int majorityElement(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MajorityElement(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar majorityElement = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef majority_element(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func majorityElement(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func majorityElement(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(238,'Delete Duplicate Emails',1,'',0,0,'<p></p><p>\nWrite a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its <i>smallest</i> <b>Id</b>.</p><pre>\n+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nId is the primary key column for this table.\n</pre><p>For example, after running your query, the above <code>Person</code> table should have the following rows:</p><pre>\n+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-delete-and-where-clause-accepted\">Approach: Using DELETE and WHERE clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-delete-and-where-clause-accepted\">Approach: Using <code>DELETE</code> and <code>WHERE</code> clause [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>By joining this table with itself on the <em>Email</em> column, we can get the following code.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Person</span> <span class=\"n\">p1</span><span class=\"p\">,</span>\n    <span class=\"n\">Person</span> <span class=\"n\">p2</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">Email</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">Email</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Then we need to find the bigger id having same email address with other records. So we can add a new condition to the <code>WHERE</code> clause like this.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Person</span> <span class=\"n\">p1</span><span class=\"p\">,</span>\n    <span class=\"n\">Person</span> <span class=\"n\">p2</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">Email</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">Email</span> <span class=\"k\">AND</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">&gt;</span> <span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<p>As we already get the records to be deleted, we can alter this statement to <code>DELETE</code> in the end.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">DELETE</span> <span class=\"n\">p1</span> <span class=\"k\">FROM</span> <span class=\"n\">Person</span> <span class=\"n\">p1</span><span class=\"p\">,</span>\n    <span class=\"n\">Person</span> <span class=\"n\">p2</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">Email</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">Email</span> <span class=\"k\">AND</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">Id</span> <span class=\"o\">&gt;</span> <span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">Id</span>\n</pre></div>',NULL,1,'none','none','none'),(239,'Human Traffic of Stadium',3,'',0,0,'<p></p><p>X city built a new stadium, each day many people visit it and the stats are saved as these columns: <b>id</b>, <b>date</b>, <b>people</b>\n</p><p>\nPlease write a query to display the records which have 3 or more consecutive rows and the  amount of people more than 100(inclusive).\n</p>\n \nFor example, the table <code>stadium</code>:\n<pre>\n+------+------------+-----------+\n| id   | date       | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-08 | 188       |\n+------+------------+-----------+\n</pre><p>\nFor the sample data above, the output is:\n</p><pre>\n+------+------------+-----------+\n| id   | date       | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-08 | 188       |\n+------+------------+-----------+\n</pre><p>\n<b>Note:</b><br/>\nEach day only have one row record, and the dates are increasing with id increasing.\n</p>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-join-and-where-clause-accepted\">Approach: Using JOIN and WHERE clause [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-join-and-where-clause-accepted\">Approach: Using <code>JOIN</code> and <code>WHERE</code> clause [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Select the days with more than 100 people attending the stadium, and join this temp table with itself. We might get the solution after using complex conditions in a <code>WHERE</code> clause.</p>\n<p><strong>Algorithm</strong></p>\n<p>The first step is to get the days with 100 people and join this table with itself.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"k\">distinct</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"o\">*</span>\n<span class=\"k\">from</span> <span class=\"n\">stadium</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">stadium</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">stadium</span> <span class=\"n\">t3</span>\n<span class=\"k\">where</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span> <span class=\"k\">and</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>date</th>\n<th>people</th>\n<th>id</th>\n<th>date</th>\n<th>people</th>\n<th>id</th>\n<th>date</th>\n<th>people</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2017-01-02</td>\n<td>109</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2017-01-03</td>\n<td>150</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2017-01-05</td>\n<td>145</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2017-01-06</td>\n<td>1455</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>7</td>\n<td>2017-01-07</td>\n<td>199</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n<tr>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n<td>8</td>\n<td>2017-01-08</td>\n<td>188</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note:\n- There are 6 days with more than 100 people. So there are 216(6<em>6</em>6) records in total after  <a href=\"https://en.wikipedia.org/wiki/Cartesian_product\">Cartesian product</a>.\n- The first 3 columns are from t1, and the next 3 ones are from t2, and the last 3 are from t3.</p>\n</blockquote>\n<p>Considering t1, t2 and t3 are identical, we can take one of them to consider what conditions we should add to filter the data and get the final result. Taking t1 for example, it could exist in the beginning of the consecutive 3 days, or the middle, or the last.</p>\n<ul>\n<li>t1 in the beginning: <code>(t1.id - t2.id = 1 and t1.id - t3.id = 2 and t2.id - t3.id =1)  -- t1, t2, t3</code></li>\n<li>t1 in the middle: <code>(t2.id - t1.id = 1 and t2.id - t3.id = 2 and t1.id - t3.id =1) -- t2, t1, t3</code></li>\n<li>t1 in the end: <code>(t3.id - t2.id = 1 and t2.id - t1.id =1 and t3.id - t1.id = 2) -- t3, t2, t1</code></li>\n</ul>\n<p>So if we add these conditions in the SQL code, we can get this.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"o\">*</span>\n<span class=\"k\">from</span> <span class=\"n\">stadium</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">stadium</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">stadium</span> <span class=\"n\">t3</span>\n<span class=\"k\">where</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span> <span class=\"k\">and</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span>\n<span class=\"k\">and</span>\n<span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">-- t1, t2, t3</span>\n    <span class=\"k\">or</span>\n    <span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"k\">and</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">-- t2, t1, t3</span>\n    <span class=\"k\">or</span>\n    <span class=\"p\">(</span><span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">-- t3, t2, t1</span>\n<span class=\"p\">)</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>| id | date       | people |\n|----|------------|--------|\n| 7  | 2017-01-07 | 199    |\n| 6  | 2017-01-06 | 1455   |\n| 8  | 2017-01-08 | 188    |\n| 7  | 2017-01-07 | 199    |\n| 5  | 2017-01-05 | 145    |\n| 6  | 2017-01-06 | 1455   |\n</pre></div>\n\n\n<p>You may notice some records duplicates since they appear in different positions. So, we can use <code>DISTINCT</code> to deal with it.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"k\">distinct</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"o\">*</span>\n<span class=\"k\">from</span> <span class=\"n\">stadium</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">stadium</span> <span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">stadium</span> <span class=\"n\">t3</span>\n<span class=\"k\">where</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span> <span class=\"k\">and</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">people</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span>\n<span class=\"k\">and</span>\n<span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\">-- t1, t2, t3</span>\n    <span class=\"k\">or</span>\n    <span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"k\">and</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">-- t2, t1, t3</span>\n    <span class=\"k\">or</span>\n    <span class=\"p\">(</span><span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">and</span> <span class=\"n\">t3</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">-- t3, t2, t1</span>\n<span class=\"p\">)</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(240,'Third Maximum Number',1,'Array',0,0,'<p></p><p>Given a <b>non-empty</b> array of integers, return the <b>third</b> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [3, 2, 1]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> The third maximum is 1.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1, 2]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> The third maximum does not exist, so the maximum (2) is returned instead.\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> [2, 2, 3, 1]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> Note that the third maximum here means the third maximum distinct number.\nBoth numbers with value 2 are both considered as second maximum.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int thirdMax(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int thirdMax(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def thirdMax(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int thirdMax(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ThirdMax(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar thirdMax = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef third_max(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func thirdMax(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func thirdMax(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def thirdMax(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(241,'Binary Tree Preorder Traversal',2,'Tree,Stack',0,0,'<p></p><p>Given a binary tree, return the <i>preorder</i> traversal of its nodes\' values.</p><p>\nFor example:<br/>\nGiven binary tree <code>{1,#,2,3}</code>,<br/>\n</p><pre>\n   1\n    \\\n     2\n    /\n   3\n</pre><p>\nreturn <code>[1,2,3]</code>.\n</p><p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> preorderTraversal(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def preorderTraversal(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* preorderTraversal(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> PreorderTraversal(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar preorderTraversal = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef preorder_traversal(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func preorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc preorderTraversal(root *TreeNode) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def preorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(242,'License Key Formatting',2,'',0,0,'<p></p><p>Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.</p><p>We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.</p><p>So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> S = \"2-4A0r7-4k\", K = 4\n\n<b>Output:</b> \"24A0-R74K\"\n\n<b>Explanation:</b> The string S has been split into two parts, each part has 4 characters.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> S = \"2-4A0r7-4k\", K = 3\n\n<b>Output:</b> \"24-A0R-74K\"\n\n<b>Explanation:</b> The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\n<li>String S is non-empty.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string licenseKeyFormatting(string S, int K) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String licenseKeyFormatting(String S, int K) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def licenseKeyFormatting(self, S, K):\r\n        """\r\n        :type S: str\r\n        :type K: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* licenseKeyFormatting(char* S, int K) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string LicenseKeyFormatting(string S, int K) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} S\r\n * @param {number} K\r\n * @return {string}\r\n */\r\nvar licenseKeyFormatting = function(S, K) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {Integer} k\r\n# @return {String}\r\ndef license_key_formatting(s, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func licenseKeyFormatting(_ S: String, _ K: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func licenseKeyFormatting(S string, K int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def licenseKeyFormatting(S: String, K: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(243,'Unique Paths II',2,'Array,Dynamic Programming',0,0,'<p></p><p>Follow up for \"Unique Paths\":</p><p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p><p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p><p>For example,<br/>\n</p><p>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p><pre>\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n</pre><p>The total number of unique paths is <code>2</code>.</p><p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def uniquePathsWithObstacles(self, obstacleGrid):\r\n        """\r\n        :type obstacleGrid: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridRowSize, int obstacleGridColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int UniquePathsWithObstacles(int[,] obstacleGrid) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} obstacleGrid\r\n * @return {number}\r\n */\r\nvar uniquePathsWithObstacles = function(obstacleGrid) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} obstacle_grid\r\n# @return {Integer}\r\ndef unique_paths_with_obstacles(obstacle_grid)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func uniquePathsWithObstacles(obstacleGrid [][]int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def uniquePathsWithObstacles(obstacleGrid: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(244,'Ransom Note',1,'String',0,0,'<p></p><p>\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \nnote can be constructed from the magazines ; otherwise, it will return false. \n</p><p>\nEach letter in the magazine string can only be used once in your ransom note.\n</p><p><b>Note:</b><br/>\nYou may assume that both strings contain only lowercase letters.\n</p><pre>\ncanConstruct(\"a\", \"b\") -&gt; false\ncanConstruct(\"aa\", \"ab\") -&gt; false\ncanConstruct(\"aa\", \"aab\") -&gt; true\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canConstruct(string ransomNote, string magazine) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canConstruct(self, ransomNote, magazine):\r\n        """\r\n        :type ransomNote: str\r\n        :type magazine: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canConstruct(char* ransomNote, char* magazine) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanConstruct(string ransomNote, string magazine) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} ransomNote\r\n * @param {string} magazine\r\n * @return {boolean}\r\n */\r\nvar canConstruct = function(ransomNote, magazine) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} ransom_note\r\n# @param {String} magazine\r\n# @return {Boolean}\r\ndef can_construct(ransom_note, magazine)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canConstruct(ransomNote string, magazine string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(245,'Letter Combinations of a Phone Number',2,'Backtracking,String',0,0,'<p></p><p>Given a digit string, return all possible letter combinations that the number could represent.\n</p><p>\nA mapping of digit to letters (just like on the telephone buttons) is given below.</p><p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\"/></p><pre>\n<b>Input:</b>Digit string \"23\"\n<b>Output:</b> [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n</pre><p>\n<b>Note:</b><br/>\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> letterCombinations(string digits) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def letterCombinations(self, digits):\r\n        """\r\n        :type digits: str\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** letterCombinations(char* digits, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> LetterCombinations(string digits) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} digits\r\n * @return {string[]}\r\n */\r\nvar letterCombinations = function(digits) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} digits\r\n# @return {String[]}\r\ndef letter_combinations(digits)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func letterCombinations(_ digits: String) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func letterCombinations(digits string) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(246,'Count and Say',1,'String',0,0,'<p></p><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><pre>\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n</pre><p>\n<code>1</code> is read off as <code>\"one 1\"</code> or <code>11</code>.<br/>\n<code>11</code> is read off as <code>\"two 1s\"</code> or <code>21</code>.<br/>\n<code>21</code> is read off as <code>\"one 2</code>, then <code>one 1\"</code> or <code>1211</code>.<br/>\n</p><p>\nGiven an integer <i>n</i>, generate the <i>n</i><sup>th</sup> term of the count-and-say sequence.\n</p><p>\nNote: Each term of the sequence of integers will be represented as a string.\n</p><p><b>Example 1:</b>\n</p><pre>\n<b>Input:</b> 1\n<b>Output:</b> \"1\"\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>Input:</b> 4\n<b>Output:</b> \"1211\"\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string countAndSay(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String countAndSay(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countAndSay(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* countAndSay(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string CountAndSay(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {string}\r\n */\r\nvar countAndSay = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {String}\r\ndef count_and_say(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countAndSay(_ n: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countAndSay(n int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(247,'Add Two Numbers II',2,'Linked List',0,0,'<p></p><p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><b>Follow up:</b><br/>\nWhat if you cannot modify the input lists? In other words, reversing the lists is not allowed.\n</p><p>\n<b>Example:</b>\n</p><pre>\n<b>Input:</b> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<b>Output:</b> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def addTwoNumbers(self, l1, l2):\r\n        """\r\n        :type l1: ListNode\r\n        :type l2: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} l1\r\n * @param {ListNode} l2\r\n * @return {ListNode}\r\n */\r\nvar addTwoNumbers = function(l1, l2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} l1\r\n# @param {ListNode} l2\r\n# @return {ListNode}\r\ndef add_two_numbers(l1, l2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(248,'Intersection of Two Arrays II',1,'Binary Search,Hash Table,Two Pointers,Sort',0,0,'<p></p><p>\nGiven two arrays, write a function to compute their intersection.\n</p><p><b>Example:</b><br/>\nGiven <i>nums1</i> = <code>[1, 2, 2, 1]</code>, <i>nums2</i> = <code>[2, 2]</code>, return <code>[2, 2]</code>.\n</p><p><b>Note:</b><br/>\n</p><ul>\n<li>Each element in the result should appear as many times as it shows in both arrays.</li>\n<li>The result can be in any order.</li>\n</ul><p><b>Follow up:</b><br/>\n</p><ul>\n<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n<li>What if <i>nums1</i>\'s size is small compared to <i>nums2</i>\'s size? Which algorithm is better?</li>\n<li>What if elements of <i>nums2</i> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def intersect(self, nums1, nums2):\r\n        """\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] Intersect(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @return {number[]}\r\n */\r\nvar intersect = function(nums1, nums2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @return {Integer[]}\r\ndef intersect(nums1, nums2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func intersect(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func intersect(nums1 []int, nums2 []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def intersect(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(249,'Non-negative Integers without Consecutive Ones',3,'Dynamic Programming',0,0,'<p></p><p>Given a positive integer n, find the number of <b>non-negative</b> integers less than or equal to n, whose binary representations do NOT contain <b>consecutive ones</b>.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 5\n<b>Output:</b> 5\n<b>Explanation:</b> \nHere are the non-negative integers &lt;= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n</pre><p><b>Note:</b>\n1 &lt;= n &lt;= 10<sup>9</sup>\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findIntegers(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findIntegers(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findIntegers(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findIntegers(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findIntegers(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindIntegers(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nvar findIntegers = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Integer}\r\ndef find_integers(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findIntegers(_ num: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findIntegers(num int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findIntegers(num: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-bit-manipulation-accepted\">Approach #3 Using Bit Manipulation [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The brute force approach is simple. We can traverse through all the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">num</script>. For every current number chosen, we can check all the consecutive positions in this number to check if the number contains two consecutive ones or not. If not, we increment the <script type=\"math/tex; mode=display\">count</script> of the resultant numbers with no consecutive ones. </p>\n<p>To check if a <script type=\"math/tex; mode=display\">1</script> exists at the position <script type=\"math/tex; mode=display\">x</script>(counting from the LSB side), in the current number <script type=\"math/tex; mode=display\">n</script>, we can proceed as follows. We can shift a binary <script type=\"math/tex; mode=display\">1</script>\n<script type=\"math/tex; mode=display\">x-1</script> times towards the left to get a number <script type=\"math/tex; mode=display\">y</script> which has a <script type=\"math/tex; mode=display\">1</script> only at the <script type=\"math/tex; mode=display\">x^{th}</script> position. Now, logical ANDing of <script type=\"math/tex; mode=display\">n</script> and <script type=\"math/tex; mode=display\">y</script> will result in a logical <script type=\"math/tex; mode=display\">1</script> output only if <script type=\"math/tex; mode=display\">n</script> contains <script type=\"math/tex; mode=display\">1</script> at the <script type=\"math/tex; mode=display\">x^{th}</script> position.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findIntegers</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">num</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">check</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">31</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(32*n)</script>. We test  the 32 consecutive positions of every number from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">n</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to given number. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we generated every number and then checked if it contains consecutive ones at any position or not. Instead of this, we can generate only the required kind of numbers. e.g. If we genearte numbers in the order of the number of bits in the current number, if we get a binary number <code>110</code> on the way at the step of 3-bit number generation. Now, since this number already contains two consecutive ones, it is useless to generate number with more number of bits with the current bitstream as the suffix(e.g. numbers of the form <code>1110</code> and <code>0110</code>).</p>\n<p>The current approach is based on the above idea. We can start with the LSB position, by placing a <code>0</code> and a <code>1</code> at the LSB. These two initial numbers correspond to the 1-bit numbers which don\'t contain any consecutive ones. Now, taking <code>0</code> as the initial suffix, if we want to generate two bit numbers with no two consecutive 1\'s, we can append a <code>1</code> and a <code>0</code> both in front of the initial <code>0</code> generating the numbers <code>10</code> and <code>00</code> as the two bit numbers ending with a <code>0</code> with no two consecutive 1\'s.</p>\n<p>But, when we take <code>1</code> as the initial suffix, we can append a <code>0</code> to it to generate <code>01</code> which doesn\'t contain any consecutive ones. But, adding a <code>1</code> won\'t satisfy this criteria(<code>11</code> will be generated). Thus, while generating the current number, we need to keep a track of the point that whether a <code>1</code> was added as the last prefix or not. If yes, we can\'t append a new <code>1</code> and only <code>0</code> can be appended. If a <code>0</code> was appended as the last prefix, both <code>0</code> and <code>1</code> can be appended in the new bit-pattern without creating a violating number.\nThus, we can continue forward with the 3-bit number generation only with <code>00</code>, <code>01</code> and <code>10</code> as the new suffixes  in the same manner. </p>\n<p>To get a count of numbers lesser than <script type=\"math/tex; mode=display\">num</script>, with no two consecutive 1\'s, based on the above discussion, we make use of a recursive function <code>find(i, sum, num, prev)</code>. This function returns the count of binary numbers with <script type=\"math/tex; mode=display\">i</script> bits with no two consecutive 1\'s. Here, <script type=\"math/tex; mode=display\">sum</script> refers to the binary number generated till now(the prefix obtained as the input). <script type=\"math/tex; mode=display\">num</script> refers to the given number. <script type=\"math/tex; mode=display\">prev</script> is a boolean variable that indicates whether the last prefix added was a <code>1</code> or a <code>0</code>.</p>\n<p>If the last prefix was a <code>0</code>, we can add both <code>1</code> and <code>0</code> as the new prefix. Thus, we need to make a function call <code>find(i + 1, sum, num, false) + find(i + 1, sum + (1 &lt;&lt; i), num, true)</code>. Here, the first sub-part refers to a <code>0</code> being added at the <script type=\"math/tex; mode=display\">i^{th}</script> position. Thus, we pass a <code>false</code> as the prefix in this case. The second sub-part refers to a <code>1</code> being added at the <script type=\"math/tex; mode=display\">i^{th}</script> position. Thus, we pass <code>true</code> as the prefix in this case. </p>\n<p>If the last prefix was a <code>1</code>, we can add only a <code>0</code> as the new prefix. Thus, only one function call <code>find(i + 1, sum, num, false)</code> is made in this case. </p>\n<p>Further, we need to stop the number generation whenver the current input number(<script type=\"math/tex; mode=display\">sum</script>) exceeds the given number <script type=\"math/tex; mode=display\">num</script>. </p>\n<p><img alt=\"Tree\" src=\"../Figures/600_Non_Negative_2.PNG\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findIntegers</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">prev</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(x)</script>. Only <script type=\"math/tex; mode=display\">x</script> numbers are generated. Here, <script type=\"math/tex; mode=display\">x</script> refers to the resultant count to be returned.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log(max\\_int)=32)</script>. The depth of recursion tree can go upto <script type=\"math/tex; mode=display\">32</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-bit-manipulation-accepted\">Approach #3 Using Bit Manipulation [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Before we discuss the idea behind this approach, we consider another simple idea that will be used in the current approach. </p>\n<p>Suppose, we need to find the count of binary numbers with <script type=\"math/tex; mode=display\">n</script> bits such that these numbers don\'t contain consecutive 1\'s. In order to do so, we can look at the problem in a recursive fashion. Suppose <script type=\"math/tex; mode=display\">f[i]</script> gives the count of such binary numbers with <script type=\"math/tex; mode=display\">i</script> bits. In order to determine the value of <script type=\"math/tex; mode=display\">f[n]</script>, which is the requirement, we can consider the cases shown below:</p>\n<p><img alt=\"Recursive_Function\" src=\"../Figures/600_Non_Negative_1.png\" /></p>\n<p>From the above figure, we can see that if we know the value of <script type=\"math/tex; mode=display\">f[n-1]</script> and <script type=\"math/tex; mode=display\">f[n-2]</script>, in order to generate the required binary numbers with <script type=\"math/tex; mode=display\">n</script> bits, we can append a <code>0</code> to all the binary numbers contained in <script type=\"math/tex; mode=display\">f[n-1]</script> without creating an invalid number. These numbers give a factor of <script type=\"math/tex; mode=display\">f[n-1]</script> to be included in <script type=\"math/tex; mode=display\">f[n]</script>. But, we can\'t append a <code>1</code> to all these numbers, since it could lead to the presence of two consecutive ones in the newly generated numbers. Thus, for the currently generated numbers to end with a <code>1</code>, we need to ensure that the second last position is always <code>0</code>. Thus, we need to fix a <code>01</code> at the end of all the numbers contained in <script type=\"math/tex; mode=display\">f[n-2]</script>. This gives a factor of <script type=\"math/tex; mode=display\">f[n-2]</script> to be included in <script type=\"math/tex; mode=display\">f[n]</script>. Thus, in total, we get <script type=\"math/tex; mode=display\">f[n] = f[n-1] + f[n-2]</script>.</p>\n<p>Now, let\'s look into the current approach. We\'ll try to understand the idea behind the approach by taking two simple examples. Firstly, we look at the case where the given number doesn\'t contain any consecutive 1\'s.Say, <script type=\"math/tex; mode=display\">num = \\text{1010100}</script>(7 bit number). Now, we\'ll see how we can find the numbers lesser than <script type=\"math/tex; mode=display\">num</script> with no two consecutive 1\'s. We start off with the MSB of <script type=\"math/tex; mode=display\">nums</script>. If we fix a <script type=\"math/tex; mode=display\">\\text{0}</script> at the MSB position, and find out the count of 6 bit numbers(corresponding to the 6 LSBs) with no two consecutive 1\'s, these 6-bit numbers will lie in the range <script type=\"math/tex; mode=display\">\\textbf{0}\\text{000000} -> \\textbf{0}\\text{111111}</script>. For finding this count we can make use of <script type=\"math/tex; mode=display\">f[6]</script> which we\'ll have already calculated based on the discussion above. </p>\n<p>But, even after doing this, all the numbers in the required range haven\'t been covered yet. Now, if we try to fix <script type=\"math/tex; mode=display\">\\text{1}</script> at the MSB, the numbers considered will lie in the range <script type=\"math/tex; mode=display\">\\textbf{1}\\text{000000} -> \\textbf{1}\\text{111111}</script>. As we can see, this covers the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{1}\\text{000000} -> \\textbf{1}\\text{010100}</script>, but it covers the numbers in the range beyond limit as well. Thus, we can\'t fix <script type=\"math/tex; mode=display\">\\text{1}</script> at the MSB and consider all the 6-bit numbers at the LSBs. </p>\n<p>For covering the pending range, we fix <script type=\"math/tex; mode=display\">\\text{1}</script> at the MSB, and move forward to proceed with the second digit(counting from MSB). Now, since we\'ve already got a <script type=\"math/tex; mode=display\">\\text{0}</script> at this position, we can\'t substitute a <script type=\"math/tex; mode=display\">\\text{1}</script> here, since doing so will lead to generation of numbers exceeding <script type=\"math/tex; mode=display\">num</script>. Thus, the only option left here is to substitute a <script type=\"math/tex; mode=display\">\\text{0}</script> at the second position. But, if we do so, and consider the 5-bit numbers(at the 5 LSBs) with no two consecutive 1\'s, these new numbers will fall in the range <script type=\"math/tex; mode=display\">\\textbf{10}\\text{00000} -> \\textbf{10}\\text{11111}</script>. But, again we can observe that considering these numbers leads to exceeding the required range. Thus, we can\'t consider all the 5-bit numbers for the required count by fixing <script type=\"math/tex; mode=display\">\\text{0}</script> at the second position. </p>\n<p>Thus, now, we fix <script type=\"math/tex; mode=display\">\\text{0}</script> at the second position and proceed further. Again, we encounter a <script type=\"math/tex; mode=display\">\\text{1}</script> at the third position. Thus, as discussed above, we can fix a <script type=\"math/tex; mode=display\">\\text{0}</script> at this position and find out the count of 4-bit consecutive numbers with no two consecutive 1\'s(by varying only the 4 LSB bits). We can obtain this value from <script type=\"math/tex; mode=display\">f[4]</script>. Thus, now the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{100}\\text{0000} -> \\textbf{100}\\text{1111}</script> have been covered up. </p>\n<p>Again, as discussed above, now we fix a <script type=\"math/tex; mode=display\">\\text{1}</script> at the third position, and proceed with the fourth bit. It is a <script type=\"math/tex; mode=display\">\\text{0}</script>. So, we need to fix it as such as per the above discussion, and proceed with the fifth bit. It is a <script type=\"math/tex; mode=display\">\\text{1}</script>. So, we fix a <script type=\"math/tex; mode=display\">\\text{0}</script> here and consider all the numbers by varying the two LSBs for finding the required count of numbers in the range <script type=\"math/tex; mode=display\">\\textbf{10101}\\text{00} -> \\textbf{10101}\\text{11}</script>. Now, we proceed to the sixth bit, find a <script type=\"math/tex; mode=display\">\\text{0}</script> there. So, we fix <script type=\"math/tex; mode=display\">\\text{0}</script> at the sixth position and proceed to the seventh bit which is again <script type=\"math/tex; mode=display\">\\text{0}</script>. So, we fix a <script type=\"math/tex; mode=display\">\\text{0}</script> at the seventh position as well.</p>\n<p>Now, we can see, that based on the above procedure, the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{1}\\text{000000} -> \\textbf{1}\\text{111111}</script>, <script type=\"math/tex; mode=display\">\\textbf{100}\\text{0000} -> \\textbf{100}\\text{1111}</script>,  <script type=\"math/tex; mode=display\">\\textbf{100}\\text{0000} -> \\textbf{100}\\text{1111}</script> have been considered and the counts for these ranges have been obtained as <script type=\"math/tex; mode=display\">f[6]</script>, <script type=\"math/tex; mode=display\">f[4]</script> and <script type=\"math/tex; mode=display\">f[2]</script> respectively. Now, only <script type=\"math/tex; mode=display\">\\text{1010100}</script> is pending to be considered in the required count. Since, it doesn\'t contain any consecutive 1\'s, we add a 1 to the total count obtained till now to consider this number. Thus, the result returned is <script type=\"math/tex; mode=display\">f[6] + f[4] + f[2] + 1</script>.</p>\n<p>!?!../Documents/600_Non_Negative1.json:1000,563!?!</p>\n<p>Now, we look at the case, where <script type=\"math/tex; mode=display\">num</script> contains some consecutive 1\'s. The idea will be the same as the last example, with the only exception taken when the two consecutive 1\'s are encountered. Let\'s say, <script type=\"math/tex; mode=display\">num = \\text{1011010}</script>(7 bit number). Now, as per the last discussion, we start with the MSB. We find a <script type=\"math/tex; mode=display\">\\text{1}</script> at this position. Thus, we initially fix a <script type=\"math/tex; mode=display\">\\text{0}</script> at this position to consider the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{0}\\text{000000} -> \\textbf{0}\\text{111111}</script>, by varying the 6 LSB bits only. The count of the required numbers in this range is again given by <script type=\"math/tex; mode=display\">f[6]</script>.</p>\n<p>Now, we fix a <script type=\"math/tex; mode=display\">\\text{1}</script> at the MSB and move on to the second bit. It is a <script type=\"math/tex; mode=display\">\\text{0}</script>, so we have no choice but to fix <script type=\"math/tex; mode=display\">\\text{0}</script> at this position and to proceed with the third bit. It is a <script type=\"math/tex; mode=display\">\\text{1}</script>, so we fix a <script type=\"math/tex; mode=display\">\\text{0}</script> here, considering the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{100}\\text{0000} -> \\textbf{100}\\text{1111}</script>. This accounts for a factor of <script type=\"math/tex; mode=display\">f[4]</script>. Now, we fix a <script type=\"math/tex; mode=display\">\\text{1}</script> at the third positon, and proceed with the fourth bit. It is a <script type=\"math/tex; mode=display\">\\text{1}</script>(consecutive to the previous <script type=\"math/tex; mode=display\">\\text{1}</script>). Now, initially we fix a <script type=\"math/tex; mode=display\">\\text{0}</script> at the fourth position, considering the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{1010}\\text{000} -> \\textbf{1010}\\text{111}</script>. This adds a factor of <script type=\"math/tex; mode=display\">f[3]</script> to the required count. </p>\n<p>Now, we can see that till now the numbers in the range <script type=\"math/tex; mode=display\">\\textbf{0}\\text{000000} -> \\textbf{0}\\text{111111}</script>, <script type=\"math/tex; mode=display\">\\textbf{100}\\text{0000} -> \\textbf{100}\\text{1111}</script>, <script type=\"math/tex; mode=display\">\\textbf{1010}\\text{000} -> \\textbf{1010}\\text{111}</script> have been considered. But, if we try to consider any number larger than <script type=\"math/tex; mode=display\">\\text{1010111}</script>, it leads to the presence of two consecutive 1\'s in the new number at the third and fourth position. Thus, all the valid numbers upto <script type=\"math/tex; mode=display\">num</script> have been considered with this, giving a resultant count of <script type=\"math/tex; mode=display\">f[6] + f[4] + f[3]</script>.</p>\n<p>!?!../Documents/600_Non_Negative2.json:1000,563!?!</p>\n<p>Thus, summarizing the above discussion, we can say that we start scanning the given number <script type=\"math/tex; mode=display\">num</script> from its MSB. For every 1 encountered at the <script type=\"math/tex; mode=display\">i^{th}</script> bit position(counting from 0 from LSB), we add a factor of <script type=\"math/tex; mode=display\">f[i]</script> to the resultant count. For every 0 encountered, we don\'t add any factor. We also keep a track of the last bit checked. If we happen to find two consecutive 1\'s at any time, we add the factors for the positions of both the 1\'s and stop the traversal immediately. If we don\'t find any two consecutive 1\'s, we proceed till reaching the LSB and add an extra 1 to account for the given number <script type=\"math/tex; mode=display\">num</script> as well, since the procedure discussed above considers numbers upto <script type=\"math/tex; mode=display\">num</script> without including itself.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findIntegers</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">32</span><span class=\"o\">];</span>\n        <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">prev_bit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">num</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prev_bit</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">sum</span><span class=\"o\">--;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">prev_bit</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">prev_bit</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(log_2(max\\_int)=32)</script>. One loop to fill <script type=\"math/tex; mode=display\">f</script> array and one loop to check all bits of <script type=\"math/tex; mode=display\">num</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log_2(max\\_int)=32)</script>. <script type=\"math/tex; mode=display\">f</script> array of size 32 is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(250,'Excel Sheet Column Title',1,'Math',0,0,'<p></p><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p><p>For example:</p><pre>\n    1 -&gt; A\n    2 -&gt; B\n    3 -&gt; C\n    ...\n    26 -&gt; Z\n    27 -&gt; AA\n    28 -&gt; AB </pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/ifanchu\">@ifanchu</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string convertToTitle(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String convertToTitle(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def convertToTitle(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* convertToTitle(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ConvertToTitle(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {string}\r\n */\r\nvar convertToTitle = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {String}\r\ndef convert_to_title(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func convertToTitle(_ n: Int) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func convertToTitle(n int) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def convertToTitle(n: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(251,'Unique Paths',2,'Array,Dynamic Programming',0,0,'<p></p><p>A robot is located at the top-left corner of a <i>m</i> x <i>n</i> grid (marked \'Start\' in the diagram below).</p><p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below).</p><p>How many possible unique paths are there?</p><p>\n<img src=\"https://leetcode.com/static/images/problemset/robot_maze.png\"/><br/>\n</p><p style=\"font-size: 11px\">Above is a 3 x 7 grid. How many possible unique paths are there?\n</p><p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int uniquePaths(int m, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int uniquePaths(int m, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def uniquePaths(self, m, n):\r\n        """\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int uniquePaths(int m, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int UniquePaths(int m, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar uniquePaths = function(m, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef unique_paths(m, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func uniquePaths(m int, n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none');
INSERT INTO `problems` VALUES (252,'Arithmetic Slices',2,'Dynamic Programming,Math',0,0,'<p></p><p>A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p><p>For example, these are arithmetic sequence:</p><pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre><p>The following sequence is not arithmetic.</p> <pre>1, 1, 2, 5, 7</pre><br/><p>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 &lt;= P &lt; Q &lt; N.</p><p>A slice (P, Q) of array A is called arithmetic if the sequence:<br/>\n    A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 &lt; Q.</p><p>The function should return the number of arithmetic slices in the array A. </p><br/><p><b>Example:</b>\n</p><pre>\nA = [1, 2, 3, 4]\n\nreturn: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numberOfArithmeticSlices(vector<int>& A) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numberOfArithmeticSlices(self, A):\r\n        """\r\n        :type A: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numberOfArithmeticSlices(int* A, int ASize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumberOfArithmeticSlices(int[] A) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} A\r\n * @return {number}\r\n */\r\nvar numberOfArithmeticSlices = function(A) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} a\r\n# @return {Integer}\r\ndef number_of_arithmetic_slices(a)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numberOfArithmeticSlices(_ A: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberOfArithmeticSlices(A []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numberOfArithmeticSlices(A: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-3-using-recursion-accepted\">Approach #3  Using Recursion [Accepted]</a></li>\n<li><a href=\"#approach-5-dynamic-programming-accepted\">Approach #5 Dynamic Programming [Accepted]:</a></li>\n<li><a href=\"#approach-5-constant-space-dynamic-programming-accepted\">Approach #5 Constant Space Dynamic Programming [Accepted]:</a></li>\n<li><a href=\"#approach-6-using-formula-accepted\">Approach #6 Using Formula [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</h4>\n<p>The most naive solution is to consider every pair of elements(with atleast 1 element between them), so that the range of elements lying between these two elements acts as a slice. Then, we can iterate over every such slice(range) to check if all the consecutive elements within this range have the same difference. For every such range found, we can increment the <script type=\"math/tex; mode=display\">count</script> that is used to keep a track of the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numberOfArithmeticSlices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">s</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">e</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n                        <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. We iterate over the range formed by every pair of elements. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in the given array <script type=\"math/tex; mode=display\">A</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we considered every possible range and then iterated over the range to check if the difference between every consercutive element in this range is the same. We can optimize this approach to some extent, by making a small observation. </p>\n<p>We can see, that if we are currently considering the range bound by the elements, let\'s say, <script type=\"math/tex; mode=display\">A[s]</script>(start) and <script type=\"math/tex; mode=display\">A[e]</script>(end), we have checked the consecutive elements in this range to have the same difference. Now, when we move on to the next range between the indices <script type=\"math/tex; mode=display\">s</script> and <script type=\"math/tex; mode=display\">e+1</script>, we again perform a check on all the elements in the range <script type=\"math/tex; mode=display\">s:e</script>, along with one additional pair <script type=\"math/tex; mode=display\">A[e+1]</script> and <script type=\"math/tex; mode=display\">A[e]</script>. We can remove this redundant check in the range <script type=\"math/tex; mode=display\">s:e</script> and just check the last pair to have the same difference as the one used for the previous range(same <script type=\"math/tex; mode=display\">s</script>, incremented <script type=\"math/tex; mode=display\">e</script>).</p>\n<p>Note that if the last range didn\'t constitute an arithmetic slice, the same elements will be a part of the updated range as well. Thus, we can omit the rest of the ranges consisting of the same starting index. The rest of the process remains the same as in the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numberOfArithmeticSlices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">s</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">e</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"k\">else</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Two for loops are used.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-recursion-accepted\">Approach #3  Using Recursion [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>By making use of the observation discussed in the last approach, we know, that if a range of elements between the indices <script type=\"math/tex; mode=display\">(i,j)</script> constitute an Arithmetic Slice, and another element <script type=\"math/tex; mode=display\">A[j+1]</script> is included such that <script type=\"math/tex; mode=display\">A[j+1]</script> and <script type=\"math/tex; mode=display\">A[j]</script> have the same difference as that of the previous common difference, the ranges between <script type=\"math/tex; mode=display\">(i,j+1)</script> will constitutes an arithmetic slice. Further, if the original range <script type=\"math/tex; mode=display\">(i,j)</script> doesn\'t form an arithmetic slice, adding new elements to this range won\'t do us any good. Thus, no more arithmetic slices can be obtained by adding new elements to it.</p>\n<p>By making use of this observation, we can develop a recursive solution for the given problem as well. Assume that a <script type=\"math/tex; mode=display\">sum</script> variable is used to store the total number of arithmetic slices in the given array <script type=\"math/tex; mode=display\">A</script>. We make use of a recursive function <code>slices(A,i)</code> which returns the number of Arithmetic Slices in the range <script type=\"math/tex; mode=display\">(k,i)</script>, but which are not a part of any range <script type=\"math/tex; mode=display\">(k,j)</script> such that <script type=\"math/tex; mode=display\">j<i</script>. It also updates <script type=\"math/tex; mode=display\">sum</script> with the number of arithmetic slices(total) in the current range. Thus, <script type=\"math/tex; mode=display\">k</script> refers to  the minimum index such that the range <script type=\"math/tex; mode=display\">(k,i)</script> constitutes a valid arithmetic slice.</p>\n<p>Now, suppose we know the number of arithmetic slices in the range <script type=\"math/tex; mode=display\">(0,i-1)</script> constituted by the elements <script type=\"math/tex; mode=display\">[a_0,a_1,a_2,...a_(i-1)]</script>, to be say <script type=\"math/tex; mode=display\">x</script>. If this range itself is an arithmetic slice, all the consecutive elements have the same difference(equal to say, <script type=\"math/tex; mode=display\">a_(i-1)-a_(i-2)</script>). Now, adding a new element <script type=\"math/tex; mode=display\">a_i</script> to it to extend the range to <script type=\"math/tex; mode=display\">(0,i)</script> will constitute an arithmetic slice only if this new element satisfies <script type=\"math/tex; mode=display\">a_i-a_(i-1)=a_(i-1)-a_(i-2)</script>. Thus, now, the addition of this new element, will lead to an addition of <script type=\"math/tex; mode=display\">ap</script> number of arithmetic slices to the ones obtained in the range <script type=\"math/tex; mode=display\">(0,i-1)</script>. The new arithmetic slices will be the ones constituting the ranges <script type=\"math/tex; mode=display\">(0,i), (1,i), ... (i-2,i)</script>, which are a total of  <script type=\"math/tex; mode=display\">x+1</script> additional arithmetic slices. This is because, apart from the range <script type=\"math/tex; mode=display\">(0,i)</script> the rest of the ranges <script type=\"math/tex; mode=display\">(1,i), (2,i),...(i-2,i)</script> can be mapped to <script type=\"math/tex; mode=display\">(0,i-1), (1,i-1),...(i-3,i-1)</script>, with count equal to <script type=\"math/tex; mode=display\">x</script>. </p>\n<p>Thus, in every call to <code>slices</code>, if the <script type=\"math/tex; mode=display\">i^{th}</script> element has the same common difference with the last element as the previous common difference, we can find the number of new arithmetic slices added by the use of this element, <script type=\"math/tex; mode=display\">ap</script> and also update the <script type=\"math/tex; mode=display\">sum</script> to include this <script type=\"math/tex; mode=display\">ap</script> into it, apart from the count obtained by the smaller ranges. But, if the new element doesn\'t have the same common difference, extra arithmetic slices can\'t be contributed by it and hence, no addition is done to <script type=\"math/tex; mode=display\">sum</script> for the current element. But, of course <script type=\"math/tex; mode=display\">sum</script> will be updated as per the count obtained from the smaller ranges.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numberOfArithmeticSlices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">slices</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">slices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ap</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"n\">ap</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">slices</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">ap</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span>\n            <span class=\"n\">slices</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">ap</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The recursive function is called at most <script type=\"math/tex; mode=display\">n-2</script> times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree goes upto <script type=\"math/tex; mode=display\">n-2</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-dynamic-programming-accepted\">Approach #5 Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we start with the full range <script type=\"math/tex; mode=display\">(0,n-1)</script>, where <script type=\"math/tex; mode=display\">n</script> is the number of elements in the given <script type=\"math/tex; mode=display\">A</script> array. We can observe that the result for the range <script type=\"math/tex; mode=display\">(0,i)</script> only depends on the elements in the range <script type=\"math/tex; mode=display\">(0,i)</script> and not on any element beyond this range. Thus, we can make use of Dynamic Programming to solve the given problem.</p>\n<p>We can make use of a 1-D <script type=\"math/tex; mode=display\">dp</script> with number of elements equal to <script type=\"math/tex; mode=display\">n</script>. <script type=\"math/tex; mode=display\">dp[i]</script> is used to store the number of arithmetic slices possible in the range <script type=\"math/tex; mode=display\">(k,i)</script> and not in any range <script type=\"math/tex; mode=display\">(k,j)</script> such that <script type=\"math/tex; mode=display\">j<i</script>. Again, <script type=\"math/tex; mode=display\">k</script> refers to the minimum index possible such that <script type=\"math/tex; mode=display\">(k,j)</script> constitutes a valid Arithmetic Slice.</p>\n<p>Instead of going in the reverse order as in the recursive approach, we can start filling the <script type=\"math/tex; mode=display\">dp</script> in a forward manner. The intuition remains the same as in the last approach. For the <script type=\"math/tex; mode=display\">i^{th}</script> element being considered, we check if this element satsfies the common difference criteria with the previous element. If so, we know the number of new arithmetic slices added will be <script type=\"math/tex; mode=display\">1+dp[i-1]</script> as discussed in the last approach. The <script type=\"math/tex; mode=display\">sum</script> is also updated by the same count to reflect the new arithmetic slices added.  </p>\n<p>The following animation illustrates the <script type=\"math/tex; mode=display\">dp</script> filling process.</p>\n<p>!?!../Documents/413_Arithmetic_Slices.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numberOfArithmeticSlices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">dp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse over the given <script type=\"math/tex; mode=display\">A</script> array with <script type=\"math/tex; mode=display\">n</script> elements once only.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. 1-D <script type=\"math/tex; mode=display\">dp</script> of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-constant-space-dynamic-programming-accepted\">Approach #5 Constant Space Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we can observe that we only require the element <script type=\"math/tex; mode=display\">dp[i-1]</script> to determine the value to be entered at <script type=\"math/tex; mode=display\">dp[i]</script>. Thus, instead of making use of a 1-D array to store the required data, we can simply keep a track of just the last element. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numberOfArithmeticSlices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">;</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse over the given <script type=\"math/tex; mode=display\">A</script> array with <script type=\"math/tex; mode=display\">n</script> elements once only.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-6-using-formula-accepted\">Approach #6 Using Formula [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>From the <script type=\"math/tex; mode=display\">dp</script> solution, we can observe that for <script type=\"math/tex; mode=display\">k</script> consecutive elements sastisfying the common difference criteria, we update the <script type=\"math/tex; mode=display\">sum</script> for each such element by <script type=\"math/tex; mode=display\">1, 2, 3, ..., k</script> counts in that order. Thus, instead of updating the <script type=\"math/tex; mode=display\">sum</script> at the same time, we can just keep a track of the number of consecutive elements satisfying the common differnce criteria in a <script type=\"math/tex; mode=display\">count</script> variable and just update the <script type=\"math/tex; mode=display\">sum</script> directly as <script type=\"math/tex; mode=display\">count*(count+1)/2</script> whenver an element not satisfying this criteria is found. At the same time, we also need to reset the <script type=\"math/tex; mode=display\">count</script> value. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numberOfArithmeticSlices</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n                <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">count</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over <script type=\"math/tex; mode=display\">A</script> with <script type=\"math/tex; mode=display\">n</script> elements exactly once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(253,'3Sum Closest',2,'Array,Two Pointers',0,0,'<p></p><p>Given an array <i>S</i> of <i>n</i> integers, find three integers in <i>S</i> such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><pre>\n    For example, given array S = {-1 2 1 -4}, and target = 1.\n\n    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int threeSumClosest(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def threeSumClosest(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int threeSumClosest(int* nums, int numsSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ThreeSumClosest(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar threeSumClosest = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer}\r\ndef three_sum_closest(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func threeSumClosest(_ nums: [Int], _ target: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func threeSumClosest(nums []int, target int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def threeSumClosest(nums: Array[Int], target: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(254,'Additive Number',2,'',0,0,'<p></p><p>Additive number is a string whose digits can form additive sequence.</p><p>A valid additive sequence should contain <b>at least</b> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p><p>\nFor example:<br/>\n<code>\"112358\"</code> is an additive number because the digits can form an additive sequence: <code>1, 1, 2, 3, 5, 8</code>.\n</p><pre>1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</pre><code>\"199100199\"</code> is also an additive number, the additive sequence is: <code>1, 99, 100, 199</code>.\n<pre>1 + 99 = 100, 99 + 100 = 199</pre><p>\n<b>Note:</b> Numbers in the additive sequence <b>cannot</b> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.\n</p><p>Given a string containing only digits <code>\'0\'-\'9\'</code>, write a function to determine if it\'s an additive number.</p><p>\n<b>Follow up:</b><br/>\nHow would you handle overflow for very large input integers?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jeantimex\">@jeantimex</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isAdditiveNumber(string num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isAdditiveNumber(String num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isAdditiveNumber(self, num):\r\n        """\r\n        :type num: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isAdditiveNumber(char* num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsAdditiveNumber(string num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} num\r\n * @return {boolean}\r\n */\r\nvar isAdditiveNumber = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num\r\n# @return {Boolean}\r\ndef is_additive_number(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isAdditiveNumber(_ num: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isAdditiveNumber(num string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isAdditiveNumber(num: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(255,'Sudoku Solver',3,'Backtracking,Hash Table',0,0,'<p></p><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>Empty cells are indicated by the character <code>\'.\'</code>.</p><p>You may assume that there will be only one unique solution.\n\n</p><p>\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"/><br/>\n</p><p style=\"font-size: 11px\">A sudoku puzzle...</p><p>\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"/><br/>\n</p><p style=\"font-size: 11px\">...and its solution numbers marked in red.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void solveSudoku(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void solveSudoku(char[][] board) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def solveSudoku(self, board):\r\n        """\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void solveSudoku(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void SolveSudoku(char[,] board) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar solveSudoku = function(board) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef solve_sudoku(board)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func solveSudoku(_ board: inout [[Character]]) {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func solveSudoku(board [][]byte)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(256,'Find All Duplicates in an Array',2,'Array',0,0,'<p></p><p>Given an array of integers, 1 ≤ a[i] ≤ <i>n</i> (<i>n</i> = size of array), some elements appear <b>twice</b> and others appear <b>once</b>.</p><p>Find all the elements that appear <b>twice</b> in this array.</p><p>Could you do it without extra space and in O(<i>n</i>) runtime?</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b>\n[4,3,2,7,8,2,3,1]\n\n<b>Output:</b>\n[2,3]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findDuplicates(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> findDuplicates(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findDuplicates(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findDuplicates(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> FindDuplicates(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar findDuplicates = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef find_duplicates(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findDuplicates(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findDuplicates(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findDuplicates(nums: Array[Int]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(257,'Minimum Index Sum of Two Lists',1,'Hash Table',0,0,'<p></p><p>\nSuppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings. \n</p><p>\nYou need to help them find out their <b>common interest</b> with the <b>least list index sum</b>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\n<b>Output:</b> [\"Shogun\"]\n<b>Explanation:</b> The only restaurant they both like is \"Shogun\".\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"KFC\", \"Shogun\", \"Burger King\"]\n<b>Output:</b> [\"Shogun\"]\n<b>Explanation:</b> The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of both lists will be in the range of [1, 1000].</li>\n<li>The length of strings in both lists will be in the range of [1, 30].</li>\n<li>The index is starting from 0 to the list length minus 1.</li>\n<li>No duplicates in both lists.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String[] findRestaurant(String[] list1, String[] list2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findRestaurant(self, list1, list2):\r\n        """\r\n        :type list1: List[str]\r\n        :type list2: List[str]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findRestaurant(self, list1, list2):\r\n        """\r\n        :type list1: List[str]\r\n        :type list2: List[str]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findRestaurant(char** list1, int list1Size, char** list2, int list2Size, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string[] FindRestaurant(string[] list1, string[] list2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} list1\r\n * @param {string[]} list2\r\n * @return {string[]}\r\n */\r\nvar findRestaurant = function(list1, list2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} list1\r\n# @param {String[]} list2\r\n# @return {String[]}\r\ndef find_restaurant(list1, list2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findRestaurant(_ list1: [String], _ list2: [String]) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findRestaurant(list1 []string, list2 []string) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findRestaurant(list1: Array[String], list2: Array[String]): Array[String] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-hashmap-accepted\">Approach #1 Using HashMap [Accepted]</a></li>\n<li><a href=\"#approach-2-without-using-hashmap-accepted\">Approach #2 Without Using HashMap [Accepted]</a></li>\n<li><a href=\"#approach-3-using-hashmap-linear-accepted\">Approach #3 Using HashMap (linear) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-hashmap-accepted\">Approach #1 Using HashMap [Accepted]</h4>\n<p>In this approach, we compare every string in <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script> by traversing over the whole list <script type=\"math/tex; mode=display\">list2</script> for every string chosen from <script type=\"math/tex; mode=display\">list1</script>. We make use of a hashmap <script type=\"math/tex; mode=display\">map</script>, which contains elements of the form <script type=\"math/tex; mode=display\">(sum : list_{sum})</script>. Here, <script type=\"math/tex; mode=display\">sum</script> refers to the sum of indices of matching elements and <script type=\"math/tex; mode=display\">list_{sum}</script> refers to the list of matching strings whose indices\' sum equals <script type=\"math/tex; mode=display\">sum</script>. </p>\n<p>Thus, while doing the comparisons, whenever a match between a string at <script type=\"math/tex; mode=display\">i^{th}</script> index of <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">j^{th}</script> index of <script type=\"math/tex; mode=display\">list2</script> is found, we make an entry in the <script type=\"math/tex; mode=display\">map</script> corresponding to the sum <script type=\"math/tex; mode=display\">i + j</script>, if this entry isn\'t already present. If an entry with this sum already exists, we need to keep a track of all the strings which lead to the same index sum. Thus, we append the current string to the list of strings corresponding to sum <script type=\"math/tex; mode=display\">i + j</script>.</p>\n<p>At the end, we traverse over the keys of the <script type=\"math/tex; mode=display\">map</script> and find out the list of strings corresponding to the key reprsenting the minimum sum.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"nf\">findRestaurant</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">list1</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">list2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">list1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n                        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"o\">());</span>\n                    <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">).</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">list1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min_index_sum</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">())</span>\n            <span class=\"n\">min_index_sum</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min_index_sum</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">min_index_sum</span><span class=\"o\">).</span><span class=\"na\">size</span><span class=\"o\">()];</span>\n        <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">min_index_sum</span><span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l_1*l_2*x)</script>. Every item of <script type=\"math/tex; mode=display\">list1</script> is compared with all the items of <script type=\"math/tex; mode=display\">list2</script>. <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> are the lengths of <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script> respectively. And <script type=\"math/tex; mode=display\">x</script> refers to average string length.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(l_1*l_2*x)</script>. In worst case all items of <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script> are same. In that case, hashmap size grows upto <script type=\"math/tex; mode=display\">l_1*l_2*x</script>, where <script type=\"math/tex; mode=display\">x</script> refers to average string length.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-without-using-hashmap-accepted\">Approach #2 Without Using HashMap [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another method could be to traverse over the various <script type=\"math/tex; mode=display\">sum</script>(index sum) values and determine if any such string exists in <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script> such that the sum of its indices in the two lists equals <script type=\"math/tex; mode=display\">sum</script>. </p>\n<p>Now, we know that the value of index sum, <script type=\"math/tex; mode=display\">sum</script> could range from 0 to <script type=\"math/tex; mode=display\">m + n - 1</script>. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the length of lists <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script> respectively. Thus, we choose every value of <script type=\"math/tex; mode=display\">sum</script> in ascending order. For every <script type=\"math/tex; mode=display\">sum</script> chosen, we iterate over <script type=\"math/tex; mode=display\">list1</script>. Suppose, currently the string at <script type=\"math/tex; mode=display\">i^{th}</script> index in <script type=\"math/tex; mode=display\">list1</script> is being considered. Now, in order for the index sum <script type=\"math/tex; mode=display\">sum</script> to be the one corresponding to matching strings in <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script>, the string at index <script type=\"math/tex; mode=display\">j</script> in <script type=\"math/tex; mode=display\">list2</script> should match the string at index <script type=\"math/tex; mode=display\">i</script> in <script type=\"math/tex; mode=display\">list1</script>, such that <script type=\"math/tex; mode=display\">sum = i + j</script>.</p>\n<p>Or, stating in other terms, the string at index <script type=\"math/tex; mode=display\">j</script> in <script type=\"math/tex; mode=display\">list2</script> should be equal to the string at index <script type=\"math/tex; mode=display\">i</script> in <script type=\"math/tex; mode=display\">list1</script>, such that <script type=\"math/tex; mode=display\">j = sum - i</script>. Thus, for a particular <script type=\"math/tex; mode=display\">sum</script> and <script type=\"math/tex; mode=display\">i</script>(from <script type=\"math/tex; mode=display\">list1</script>), we can directly determine that we need to check the element at index <script type=\"math/tex; mode=display\"> j= sum - i</script> in <script type=\"math/tex; mode=display\">list2</script>, instead of traversing over the whole <script type=\"math/tex; mode=display\">list2</script>. </p>\n<p>Doing such checks/comparisons, iterate over all the indices of <script type=\"math/tex; mode=display\">list1</script> for every <script type=\"math/tex; mode=display\">sum</script> value chosen. Whenver a match occurs between <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script>, we put the matching string in a list <script type=\"math/tex; mode=display\">res</script>. </p>\n<p>We do the same process of checking the strings for all the  values of <script type=\"math/tex; mode=display\">sum</script> in ascending order. After completing every iteration over <script type=\"math/tex; mode=display\">list1</script> for a particular <script type=\"math/tex; mode=display\">sum</script>, we check if the <script type=\"math/tex; mode=display\">res</script> list is empty or not. If it is empty, we need to continue the process with the next <script type=\"math/tex; mode=display\">sum</script> value considered. If not, the current <script type=\"math/tex; mode=display\">res</script> gives the required list with minimum index sum. This is because we are already considering the index sum values in ascending order. So, the first list to be found is the required resultant list.</p>\n<p>The following example depicts the process:</p>\n<p>!?!../Documents/599_Min_Index_Sum.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"nf\">findRestaurant</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">list1</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">list2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">sum</span> <span class=\"o\">&lt;</span> <span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">sum</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sum</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">list1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">[</span><span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">]))</span>\n                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">list1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O((l_1+l_2)^2*x)</script>. There are two nested loops upto <script type=\"math/tex; mode=display\">l_1+l_2</script> and string comparison takes <script type=\"math/tex; mode=display\">x</script> time. Here, <script type=\"math/tex; mode=display\">x</script> refers to the average string length.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(r*x)</script>. <script type=\"math/tex; mode=display\">res</script> list is used to store the result. Assuming <script type=\"math/tex; mode=display\">r</script> is the length of <script type=\"math/tex; mode=display\">res</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-hashmap-linear-accepted\">Approach #3 Using HashMap (linear) [Accepted]</h4>\n<p>We make use of a HashMap to solve the given problem in a different way in this approach. Firstly, we traverse over the whole <script type=\"math/tex; mode=display\">list1</script> and create an entry for each element of <script type=\"math/tex; mode=display\">list1</script> in a HashMap <script type=\"math/tex; mode=display\">map</script>, of the form <script type=\"math/tex; mode=display\">(list[i], i)</script>. Here, <script type=\"math/tex; mode=display\">i</script> refers to the index of the <script type=\"math/tex; mode=display\">i^{th}</script> element, and <script type=\"math/tex; mode=display\">list[i]</script> is the <script type=\"math/tex; mode=display\">i^{th}</script> element itself. Thus, we create a mapping from the elements of <script type=\"math/tex; mode=display\">list1</script> to their indices.</p>\n<p>Now, we traverse over <script type=\"math/tex; mode=display\">list2</script>. For every element ,<script type=\"math/tex; mode=display\">list2[j]</script>, of <script type=\"math/tex; mode=display\">list2</script> encountered, we check if the same element already exists as a key in the <script type=\"math/tex; mode=display\">map</script>. If so, it means that the element exists in both <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script>. Thus, we find out the sum of indices corresponding to this element in the two lists, given by <script type=\"math/tex; mode=display\">sum = map.get(list[j]) + j</script>. If this <script type=\"math/tex; mode=display\">sum</script> is lesser than the minimum sum  obtained till now, we update the resultant list to be returned, <script type=\"math/tex; mode=display\">res</script>, with the element <script type=\"math/tex; mode=display\">list2[j]</script> as the only entry in it. </p>\n<p>If the <script type=\"math/tex; mode=display\">sum</script> is equal to the minimum sum obtained till now, we put an extra entry corresponding to the element <script type=\"math/tex; mode=display\">list2[j]</script> in the <script type=\"math/tex; mode=display\">res</script> list.</p>\n<p>Below code is inspired by <a href=\"http://leetcode.com/cloud.runner\">@cloud.runner</a></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"nf\">findRestaurant</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">list1</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">list2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">list1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min_sum</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min_sum</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_sum</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                    <span class=\"n\">min_sum</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">min_sum</span><span class=\"o\">)</span>\n                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(l_1+l_2)</script>. Every item of <script type=\"math/tex; mode=display\">list2</script> is checked in a map of <script type=\"math/tex; mode=display\">list1</script>. <script type=\"math/tex; mode=display\">l_1</script> and <script type=\"math/tex; mode=display\">l_2</script> are the lengths of <script type=\"math/tex; mode=display\">list1</script> and <script type=\"math/tex; mode=display\">list2</script> respectively.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(l_1*x)</script>. hashmap size grows upto <script type=\"math/tex; mode=display\">l_1*x</script>, where <script type=\"math/tex; mode=display\">x</script> refers to average string length.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(258,'Intersection of Two Arrays',1,'Binary Search,Hash Table,Two Pointers,Sort',0,0,'<p></p><p>\nGiven two arrays, write a function to compute their intersection.\n</p><p><b>Example:</b><br/>\nGiven <i>nums1</i> = <code>[1, 2, 2, 1]</code>, <i>nums2</i> = <code>[2, 2]</code>, return <code>[2]</code>.\n</p><p><b>Note:</b><br/>\n</p><ul>\n<li>Each element in the result must be unique.</li>\n<li>The result can be in any order.</li>\n</ul>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def intersection(self, nums1, nums2):\r\n        """\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] Intersection(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @return {number[]}\r\n */\r\nvar intersection = function(nums1, nums2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @return {Integer[]}\r\ndef intersection(nums1, nums2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func intersection(nums1 []int, nums2 []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(259,'Two Sum II - Input array is sorted',1,'Array,Two Pointers,Binary Search',0,0,'<p></p><p>Given an array of integers that is already <b><i>sorted in ascending order</i></b>, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p><p>You may assume that each input would have <i>exactly</i> one solution and you may not use the <i>same</i> element twice.</p><p style=\"font-family:monospace\">\n<b>Input:</b> numbers={2, 7, 11, 15}, target=9<br/>\n<b>Output:</b> index1=1, index2=2\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> twoSum(vector<int>& numbers, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def twoSum(self, numbers, target):\r\n        """\r\n        :type numbers: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* twoSum(int* numbers, int numbersSize, int target, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] TwoSum(int[] numbers, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} numbers\r\n * @param {number} target\r\n * @return {number[]}\r\n */\r\nvar twoSum = function(numbers, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} numbers\r\n# @param {Integer} target\r\n# @return {Integer[]}\r\ndef two_sum(numbers, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func twoSum(_ numbers: [Int], _ target: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func twoSum(numbers []int, target int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def twoSum(numbers: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(260,'Rotate List',2,'Linked List,Two Pointers',0,0,'<p></p><p>Given a list, rotate the list to the right by <i>k</i> places, where <i>k</i> is non-negative.</p><p>For example:<br/>\nGiven <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code> and <i>k</i> = <code>2</code>,<br/>\nreturn <code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code>.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* rotateRight(ListNode* head, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def rotateRight(self, head, k):\r\n        """\r\n        :type head: ListNode\r\n        :type k: int\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* rotateRight(struct ListNode* head, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode RotateRight(ListNode head, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} k\r\n * @return {ListNode}\r\n */\r\nvar rotateRight = function(head, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @param {Integer} k\r\n# @return {ListNode}\r\ndef rotate_right(head, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func rotateRight(_ head: ListNode?, _ k: Int) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc rotateRight(head *ListNode, k int) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def rotateRight(head: ListNode, k: Int): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(261,'Fizz Buzz',1,'',0,0,'<p></p><p>Write a program that outputs the string representation of numbers from 1 to <i>n</i>.</p><p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.</p><p><b>Example:</b>\n</p><pre>\nn = 15,\n\nReturn:\n[\n    \"1\",\n    \"2\",\n    \"Fizz\",\n    \"4\",\n    \"Buzz\",\n    \"Fizz\",\n    \"7\",\n    \"8\",\n    \"Fizz\",\n    \"Buzz\",\n    \"11\",\n    \"Fizz\",\n    \"13\",\n    \"14\",\n    \"FizzBuzz\"\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    vector<string> fizzBuzz(int n) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> fizzBuzz(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def fizzBuzz(self, n):\n        """\n        :type n: int\n        :rtype: List[str]\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** fizzBuzz(int n, int* returnSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public IList<string> FizzBuzz(int n) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} n\n * @return {string[]}\n */\nvar fizzBuzz = function(n) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\n# @return {String[]}\ndef fizz_buzz(n)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func fizzBuzz(_ n: Int) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fizzBuzz(n int) []string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def fizzBuzz(n: Int): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(262,'3Sum',2,'Array,Two Pointers',0,0,'<p></p><p>Given an array <i>S</i> of <i>n</i> integers, are there elements <i>a</i>, <i>b</i>, <i>c</i> in <i>S</i> such that <i>a</i> + <i>b</i> + <i>c</i> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><b>Note:</b> The solution set must not contain duplicate triplets.</p><pre>\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> threeSum(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def threeSum(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** threeSum(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> ThreeSum(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar threeSum = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef three_sum(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func threeSum(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func threeSum(nums []int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(263,'Range Sum Query 2D - Immutable',2,'Dynamic Programming',0,0,'<p></p><p>Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1) and lower right corner (<i>row</i>2, <i>col</i>2).</p><p>\n<img alt=\"Range Sum Query 2D\" border=\"0\" src=\"/static/images/courses/range_sum_query_2d.png\"/><br/>\n<small>The above rectangle (with the red border) is defined by (row1, col1) = <b>(2, 1)</b> and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.</small>\n</p><p><b>Example:</b><br/>\n</p><pre>\nGiven matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume that the matrix does not change.</li>\n<li>There are many calls to <i>sumRegion</i> function.</li>\n<li>You may assume that <i>row</i>1 ≤ <i>row</i>2 and <i>col</i>1 ≤ <i>col</i>2.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class NumMatrix {\r\npublic:\r\n    NumMatrix(vector<vector<int>> matrix) {\r\n        \r\n    }\r\n    \r\n    int sumRegion(int row1, int col1, int row2, int col2) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumMatrix object will be instantiated and called as such:\r\n * NumMatrix obj = new NumMatrix(matrix);\r\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class NumMatrix {\n\n    public NumMatrix(int[][] matrix) {\n        \n    }\n    \n    public int sumRegion(int row1, int col1, int row2, int col2) {\n        \n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class NumMatrix(object):\r\n\r\n    def __init__(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        """\r\n        \r\n\r\n    def sumRegion(self, row1, col1, row2, col2):\r\n        """\r\n        :type row1: int\r\n        :type col1: int\r\n        :type row2: int\r\n        :type col2: int\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your NumMatrix object will be instantiated and called as such:\r\n# obj = NumMatrix(matrix)\r\n# param_1 = obj.sumRegion(row1,col1,row2,col2)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} NumMatrix;\n\nNumMatrix* numMatrixCreate(int** matrix, int matrixRowSize, int matrixColSize) {\n    \n}\n\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\n    \n}\n\nvoid numMatrixFree(NumMatrix* obj) {\n    \n}\n\n/**\n * Your NumMatrix struct will be instantiated and called as such:\n * struct NumMatrix* obj = numMatrixCreate(matrix, matrixRowSize, matrixColSize);\n * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);\n * numMatrixFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class NumMatrix {\r\n\r\n    public NumMatrix(int[,] matrix) {\r\n        \r\n    }\r\n    \r\n    public int SumRegion(int row1, int col1, int row2, int col2) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumMatrix object will be instantiated and called as such:\r\n * NumMatrix obj = new NumMatrix(matrix);\r\n * int param_1 = obj.SumRegion(row1,col1,row2,col2);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n */\r\nvar NumMatrix = function(matrix) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} row1 \r\n * @param {number} col1 \r\n * @param {number} row2 \r\n * @param {number} col2\r\n * @return {number}\r\n */\r\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumMatrix object will be instantiated and called as such:\r\n * var obj = Object.create(NumMatrix).createNew(matrix)\r\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class NumMatrix\r\n\r\n=begin\r\n    :type matrix: Integer[][]\r\n=end\r\n    def initialize(matrix)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type row1: Integer\r\n    :type col1: Integer\r\n    :type row2: Integer\r\n    :type col2: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_region(row1, col1, row2, col2)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumMatrix object will be instantiated and called as such:\r\n# obj = NumMatrix.new(matrix)\r\n# param_1 = obj.sum_region(row1,col1,row2,col2)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type NumMatrix struct {\n    \n}\n\n\nfunc Constructor(matrix [][]int) NumMatrix {\n    \n}\n\n\nfunc (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {\n    \n}\n\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * obj := Constructor(matrix);\n * param_1 := obj.SumRegion(row1,col1,row2,col2);\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class NumMatrix(var _matrix: Array[Array[Int]]) {\n    \n    def sumRegion(int row1, int col1, int row2, int col2) : Int = {\n\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * var obj = new NumMatrix(matrix);\n * Int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-caching-memory-limit-exceeded\">Approach #2 (Caching) [Memory Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-caching-rows-accepted\">Approach #3 (Caching Rows) [Accepted]</a></li>\n<li><a href=\"#approach-4-caching-smarter-accepted\">Approach #4 (Caching Smarter) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Each time <em>sumRegion</em> is called, we use a double for loop to sum all elements from <script type=\"math/tex; mode=display\">(row1, col1) \\rightarrow (row2, col2)</script>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumMatrix</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRegion</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">row1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">col1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">row2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">col2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">row1</span><span class=\"o\">;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">row2</span><span class=\"o\">;</span> <span class=\"n\">r</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">col1</span><span class=\"o\">;</span> <span class=\"n\">c</span> <span class=\"o\">&lt;=</span> <span class=\"n\">col2</span><span class=\"o\">;</span> <span class=\"n\">c</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">data</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(mn)</script> time per query.\nAssume that <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> represents the number of rows and columns respectively, each <em>sumRegion</em> query can go through at most <script type=\"math/tex; mode=display\">m \\times n</script> elements.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Note that <code>data</code> is a <em>reference</em> to <code>matrix</code> and is not a copy of it.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-caching-memory-limit-exceeded\">Approach #2 (Caching) [Memory Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Since <em>sumRegion</em> could be called many times, we definitely need to do some pre-processing.</p>\n<p><strong>Algorithm</strong></p>\n<p>We could trade in extra space for speed by pre-calculating all possible rectangular region sum and store them in a hash table. Each <em>sumRegion</em> query now takes only constant time complexity.</p>\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script> time per query, <script type=\"math/tex; mode=display\">O(m^2n^2)</script> time pre-computation.\nEach <em>sumRegion</em> query takes <script type=\"math/tex; mode=display\">O(1)</script> time as the hash table lookup\'s time complexity is constant. The pre-computation will take <script type=\"math/tex; mode=display\">O(m^2n^2)</script> time as there are a total of <script type=\"math/tex; mode=display\">m^2 \\times n^2</script> possibilities need to be cached.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m^2n^2)</script>.\nSince there are <script type=\"math/tex; mode=display\">mn</script> different possibilities for both top left and bottom right points of the rectangular region, the extra space required is <script type=\"math/tex; mode=display\">O(m^2n^2)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-caching-rows-accepted\">Approach #3 (Caching Rows) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Remember from the <a href=\"https://leetcode.com/course/chapters/leetcode-101/range-sum-query-immutable/\">1D version</a> where we used a cumulative sum array? Could we apply that directly to solve this 2D version?</p>\n<p><strong>Algorithm</strong></p>\n<p>Try to see the 2D matrix as <script type=\"math/tex; mode=display\">m</script> rows of 1D arrays. To find the region sum, we just accumulate the sum in the region row by row.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumMatrix</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">r</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">c</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRegion</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">row1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">col1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">row2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">col2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">row1</span><span class=\"o\">;</span> <span class=\"n\">row</span> <span class=\"o\">&lt;=</span> <span class=\"n\">row2</span><span class=\"o\">;</span> <span class=\"n\">row</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">][</span><span class=\"n\">col2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">][</span><span class=\"n\">col1</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m)</script> time per query, <script type=\"math/tex; mode=display\">O(mn)</script> time pre-computation.\nThe pre-computation in the constructor takes <script type=\"math/tex; mode=display\">O(mn)</script> time. The <em>sumRegion</em> query takes <script type=\"math/tex; mode=display\">O(m)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(mn)</script>.\nThe algorithm uses <script type=\"math/tex; mode=display\">O(mn)</script> space to store the cumulative sum of all rows.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-caching-smarter-accepted\">Approach #4 (Caching Smarter) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We used a cumulative sum array in the <a href=\"https://leetcode.com/course/chapters/leetcode-101/range-sum-query-immutable/\">1D version</a>. We notice that the cumulative sum is computed with respect to the origin at index 0. Extending this analogy to the 2D case, we could pre-compute a cumulative region sum with respect to the origin at <script type=\"math/tex; mode=display\">(0, 0)</script>.</p>\n<p><img alt=\"Sum OD\" src=\"https://leetcode.com/static/images/courses/sum_od.png\" /><br />\n<small>Sum(OD) is the cumulative region sum with respect to the origin at (0, 0).</small></p>\n<p>How do we derive <script type=\"math/tex; mode=display\">Sum(ABCD)</script> using the pre-computed cumulative region sum?</p>\n<p><img alt=\"Sum OB\" src=\"https://leetcode.com/static/images/courses/sum_ob.png\" /><br />\n<small>Sum(OB) is the cumulative region sum on top of the rectangle.</small></p>\n<p><img alt=\"Sum OC\" src=\"https://leetcode.com/static/images/courses/sum_oc.png\" /><br />\n<small>Sum(OC) is the cumulative region sum to the left of the rectangle.</small></p>\n<p><img alt=\"Sum OA\" src=\"https://leetcode.com/static/images/courses/sum_oa.png\" /><br />\n<small>Sum(OA) is the cumulative region sum to the top left corner of the rectangle.</small></p>\n<p>Note that the region <script type=\"math/tex; mode=display\">Sum(OA)</script> is covered twice by both <script type=\"math/tex; mode=display\">Sum(OB)</script> and <script type=\"math/tex; mode=display\">Sum(OC)</script>. We could use the principle of inclusion-exclusion to calculate <script type=\"math/tex; mode=display\">Sum(ABCD)</script> as following:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nSum(ABCD) = Sum(OD) - Sum(OB) - Sum(OC) + Sum(OA)\n</script>\n</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumMatrix</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">r</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">c</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRegion</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">row1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">col1</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">row2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">col2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">row2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">col2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">row1</span><span class=\"o\">][</span><span class=\"n\">col2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">row2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">col1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">row1</span><span class=\"o\">][</span><span class=\"n\">col1</span><span class=\"o\">];</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script> time per query, <script type=\"math/tex; mode=display\">O(mn)</script> time pre-computation.\nThe pre-computation in the constructor takes <script type=\"math/tex; mode=display\">O(mn)</script> time. Each <em>sumRegion</em> query takes <script type=\"math/tex; mode=display\">O(1)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(mn)</script>.\nThe algorithm uses <script type=\"math/tex; mode=display\">O(mn)</script> space to store the cumulative region sum.</p>\n</li>\n</ul>',NULL,1,'none','none','none'),(264,'Valid Sudoku',2,'Hash Table',0,0,'<p></p><p>Determine if a Sudoku is valid, according to: <a href=\"http://sudoku.com.au/TheRules.aspx\">Sudoku Puzzles - The Rules</a>.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>\'.\'</code>.</p><p>\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"/><br/>\n</p><p style=\"font-size: 11px\">A partially filled sudoku which is valid.</p><p><b>Note:</b><br/>\nA valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isValidSudoku(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isValidSudoku(self, board):\r\n        """\r\n        :type board: List[List[str]]\r\n        :rtype: bool\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isValidSudoku(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsValidSudoku(char[,] board) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @return {boolean}\r\n */\r\nvar isValidSudoku = function(board) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @return {Boolean}\r\ndef is_valid_sudoku(board)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isValidSudoku(board [][]byte) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(265,'Arranging Coins',1,'Binary Search,Math',0,0,'<p></p><p>You have a total of <i>n</i> coins that you want to form in a staircase shape, where every <i>k</i>-th row must have exactly <i>k</i> coins.</p><p>Given <i>n</i>, find the total number of <b>full</b> staircase rows that can be formed.</p><p><i>n</i> is a non-negative integer and fits within the range of a 32-bit signed integer.</p><p><b>Example 1:</b>\n</p><pre>\nn = 5\n\nThe coins can form the following rows:\n¤\n¤ ¤\n¤ ¤\n\nBecause the 3rd row is incomplete, we return 2.\n</pre><p><b>Example 2:</b>\n</p><pre>\nn = 8\n\nThe coins can form the following rows:\n¤\n¤ ¤\n¤ ¤ ¤\n¤ ¤\n\nBecause the 4th row is incomplete, we return 3.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int arrangeCoins(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int arrangeCoins(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def arrangeCoins(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int arrangeCoins(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ArrangeCoins(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar arrangeCoins = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef arrange_coins(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func arrangeCoins(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func arrangeCoins(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def arrangeCoins(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(266,'Range Addition II',1,'Math',0,0,'<p></p><p>Given an m * n matrix <b>M</b> initialized with all <b>0</b>\'s and several update operations.</p><p>Operations are represented by a 2D array, and each operation is represented by an array with two <b>positive</b> integers <b>a</b> and <b>b</b>, which means <b>M[i][j]</b> should be <b>added by one</b> for all <b>0 &lt;= i &lt; a</b> and <b>0 &lt;= j &lt; b</b>. </p><p>You need to count and return the number of maximum integers in the matrix after performing all the operations.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \nm = 3, n = 3\noperations = [[2,2],[3,3]]\n<b>Output:</b> 4\n<b>Explanation:</b> \nInitially, M = \n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\nAfter performing [2,2], M = \n[[1, 1, 0],\n [1, 1, 0],\n [0, 0, 0]]\n\nAfter performing [3,3], M = \n[[2, 2, 1],\n [2, 2, 1],\n [1, 1, 1]]\n\nSo the maximum integer in M is 2, and there are four of it in M. So return 4.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The range of m and n is [1,40000].</li>\n<li>The range of a is [1,m], and the range of b is [1,n].</li>\n<li>The range of operations size won\'t exceed 10,000.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def maxCount(self, m, n, ops):\n        """\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def maxCount(self, m, n, ops):\n        """\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxCount(int m, int n, int** ops, int opsRowSize, int opsColSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int MaxCount(int m, int n, int[,] ops) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} ops\n * @return {number}\n */\nvar maxCount = function(m, n, ops) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[][]} ops\n# @return {Integer}\ndef max_count(m, n, ops)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxCount(m int, n int, ops [][]int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-single-pass-accepted\">Approach #2 Single Pass [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest method is to create a actual 2-D array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script>(<script type=\"math/tex; mode=display\">arr</script>), perform all the operations one by one on the given range of elements, and then count the number of maximum elements. Now, we know that all the operations performed always include the element at index <script type=\"math/tex; mode=display\">(0,0)</script>. Thus, the element <script type=\"math/tex; mode=display\">arr[0][0]</script> will always be the maximum. After performing all the operations, we can count the number of elements equal to <script type=\"math/tex; mode=display\">arr[0][0]</script> to get the required count of the maximum elements.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxCount</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">op</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">op</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">])</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(x*m*n)</script>. Array is updated <script type=\"math/tex; mode=display\">x</script> times, where <script type=\"math/tex; mode=display\">x</script> represents number of times operation is preformed i.e. <script type=\"math/tex; mode=display\">ops.length</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. Array of size <script type=\"math/tex; mode=display\">m*n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-single-pass-accepted\">Approach #2 Single Pass [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>As per the given problem statement, all the operations are performed on a rectangular sub-matrix of the initial all 0\'s <script type=\"math/tex; mode=display\">M</script> matrix. The upper left corner of each such rectangle is given by the index <script type=\"math/tex; mode=display\">(0, 0)</script> and the lower right corner for an operation <script type=\"math/tex; mode=display\">[i, j]</script> is given by the index <script type=\"math/tex; mode=display\">(i, j)</script>. </p>\n<p>The maximum element will be the one on which all the operations have been performed. The figure below shows an example of two operations being performed on the initial <script type=\"math/tex; mode=display\">M</script> array. </p>\n<p><img alt=\"Range_Addition\" src=\"../Figures/598_Range_Addition2.PNG\" /></p>\n<p>From this figure, we can observe that the maximum elements will be the ones which lie in the intersection region of the rectangles representing the operations. Further, we can observe that to count the number of elements lying in this intersection region, we don\'t actually need to perform the operations, but we need to determine the lower right cornerof the intersecting region only. This corner is given by <script type=\"math/tex; mode=display\">\\big(x, y\\big) = \\big(\\text{min}(op[0], \\text{min}(op[1])\\big)</script>, where <script type=\"math/tex; mode=display\">\\text{min}(op[i])</script> reprsents the minimum value of <script type=\"math/tex; mode=display\">op[i]</script> from among all the <script type=\"math/tex; mode=display\">op[i]</script>\'s in the given set of operations.</p>\n<p>Thus, the resultant count of elements lying in the intersection is given by: <script type=\"math/tex; mode=display\">x</script>x<script type=\"math/tex; mode=display\">y</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxCount</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">op</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n            <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">op</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">m</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(x)</script>. Single traversal of all operations is done. <script type=\"math/tex; mode=display\">x</script> refers to the number of operations.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(267,'Top K Frequent Elements',2,'Hash Table,Heap',0,0,'<p></p><p>\nGiven a non-empty array of integers, return the <b><i>k</i></b> most frequent elements.</p><p>For example,<br/>\nGiven <code>[1,1,1,2,2,3]</code> and k = 2, return <code>[1,2]</code>.\n</p><p><b>Note: </b><br/>\n</p><ul>\n<li>You may assume <i>k</i> is always valid, 1 ? <i>k</i> ? number of unique elements.</li>\n<li>Your algorithm\'s time complexity <b>must be</b> better than O(<i>n</i> log <i>n</i>), where <i>n</i> is the array\'s size.</li>\n</ul>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> topKFrequent(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> topKFrequent(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def topKFrequent(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> TopKFrequent(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar topKFrequent = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Integer[]}\r\ndef top_k_frequent(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func topKFrequent(_ nums: [Int], _ k: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func topKFrequent(nums []int, k int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def topKFrequent(nums: Array[Int], k: Int): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(268,'Fraction to Recurring Decimal',2,'Hash Table,Math',0,0,'<p></p><p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p><p>If the fractional part is repeating, enclose the repeating part in parentheses.</p><p>\nFor example,\n</p><ul>\n<li>Given numerator = 1, denominator = 2, return \"0.5\".</li>\n<li>Given numerator = 2, denominator = 1, return \"2\".</li>\n<li>Given numerator = 2, denominator = 3, return \"0.(6)\".</li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/Shangrila\">@Shangrila</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string fractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String fractionToDecimal(int numerator, int denominator) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def fractionToDecimal(self, numerator, denominator):\r\n        """\r\n        :type numerator: int\r\n        :type denominator: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* fractionToDecimal(int numerator, int denominator) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string FractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} numerator\r\n * @param {number} denominator\r\n * @return {string}\r\n */\r\nvar fractionToDecimal = function(numerator, denominator) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} numerator\r\n# @param {Integer} denominator\r\n# @return {String}\r\ndef fraction_to_decimal(numerator, denominator)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func fractionToDecimal(_ numerator: Int, _ denominator: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fractionToDecimal(numerator int, denominator int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(269,'Permutation Sequence',2,'Backtracking,Math',0,0,'<p></p><p>The set <code>[1,2,3,…,<i>n</i>]</code> contains a total of <i>n</i>! unique permutations.</p><p>By listing and labeling all of the permutations in order,<br/>\nWe get the following sequence (ie, for <i>n</i> = 3):\n</p><ol>\n<li><code>\"123\"</code></li>\n<li><code>\"132\"</code></li>\n<li><code>\"213\"</code></li>\n<li><code>\"231\"</code></li>\n<li><code>\"312\"</code></li>\n<li><code>\"321\"</code></li>\n</ol><p>Given <i>n</i> and <i>k</i>, return the <i>k</i><sup>th</sup> permutation sequence.</p><p><b>Note:</b> Given <i>n</i> will be between 1 and 9 inclusive.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string getPermutation(int n, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String getPermutation(int n, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def getPermutation(self, n, k):\r\n        """\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* getPermutation(int n, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string GetPermutation(int n, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {string}\r\n */\r\nvar getPermutation = function(n, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {String}\r\ndef get_permutation(n, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func getPermutation(_ n: Int, _ k: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getPermutation(n int, k int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getPermutation(n: Int, k: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(270,'Split Array Largest Sum',3,'Binary Search,Dynamic Programming',0,0,'<p></p><p>Given an array which consists of non-negative integers and an integer <i>m</i>, you can split the array into <i>m</i> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <i>m</i> subarrays.\n</p><p><b>Note:</b><br/>\nIf <i>n</i> is the length of array, assume the following constraints are satisfied:\n</p><ul>\n<li>1 ≤ <i>n</i> ≤ 1000</li>\n<li>1 ≤ <i>m</i> ≤ min(50, <i>n</i>)</li>\n</ul><p><b>Examples: </b>\n</p><pre>\nInput:\n<b>nums</b> = [7,2,5,10,8]\n<b>m</b> = 2\n\nOutput:\n18\n\nExplanation:\nThere are four ways to split <b>nums</b> into two subarrays.\nThe best way is to split it into <b>[7,2,5]</b> and <b>[10,8]</b>,\nwhere the largest sum among the two subarrays is only 18.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int splitArray(vector<int>& nums, int m) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int splitArray(int[] nums, int m) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def splitArray(self, nums, m):\r\n        """\r\n        :type nums: List[int]\r\n        :type m: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int splitArray(int* nums, int numsSize, int m) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int SplitArray(int[] nums, int m) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} m\r\n * @return {number}\r\n */\r\nvar splitArray = function(nums, m) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} m\r\n# @return {Integer}\r\ndef split_array(nums, m)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func splitArray(_ nums: [Int], _ m: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func splitArray(nums []int, m int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def splitArray(nums: Array[Int], m: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(271,'Longest Common Prefix',1,'String',0,0,'<p></p><p>Write a function to find the longest common prefix string amongst an array of strings.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string longestCommonPrefix(vector<string>& strs) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestCommonPrefix(self, strs):\r\n        """\r\n        :type strs: List[str]\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* longestCommonPrefix(char** strs, int strsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string LongestCommonPrefix(string[] strs) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} strs\r\n * @return {string}\r\n */\r\nvar longestCommonPrefix = function(strs) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} strs\r\n# @return {String}\r\ndef longest_common_prefix(strs)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestCommonPrefix(_ strs: [String]) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestCommonPrefix(strs []string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestCommonPrefix(strs: Array[String]): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-horizontal-scanning\">Approach #1 (Horizontal scanning)</a></li>\n<li><a href=\"#approach-2-vertical-scanning\">Approach #2 (Vertical scanning)</a></li>\n<li><a href=\"#approach-3-divide-and-conquer\">Approach #3 (Divide and conquer)</a></li>\n<li><a href=\"#approach-4-binary-search\">Approach #4  (Binary search)</a></li>\n</ul>\n</li>\n<li><a href=\"#further-thoughts-follow-up\">Further Thoughts / Follow up</a></li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-horizontal-scanning\">Approach #1 (Horizontal scanning)</h4>\n<p><strong>Intuition</strong></p>\n<p>For a start we will describe a simple way of finding the longest prefix shared by a set of strings <script type=\"math/tex; mode=display\">LCP(S_1  \\ldots  S_n)</script>.\nWe will use the observation that :</p>\n<p>\n<script type=\"math/tex; mode=display\">LCP(S_1 \\ldots S_n) = LCP(LCP(LCP(S_1, S_2),S_3),\\ldots S_n)</script>\n</p>\n<p><strong>Algorithm</strong></p>\n<p>To employ this idea, the algorithm iterates through the strings <script type=\"math/tex; mode=display\">[S_1  \\ldots  S_n]</script>, finding at each iteration <script type=\"math/tex; mode=display\">i</script> the longest common prefix of strings <script type=\"math/tex; mode=display\">LCP(S_1  \\ldots  S_i)</script> When <script type=\"math/tex; mode=display\">LCP(S_1  \\ldots  S_i)</script> is an empty string, the algorithm ends. Otherwise after <script type=\"math/tex; mode=display\">n</script> iterations, the algorithm returns <script type=\"math/tex; mode=display\">LCP(S_1  \\ldots  S_n)</script>.</p>\n<p align=\"center\"><img alt=\"Finding the longest common prefix\" src=\"https://leetcode.com/media/original_images/14_basic.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 1. Finding the longest common prefix (Horizontal scanning)</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n    <span class=\"n\">String</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">prefix</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>        \n    <span class=\"k\">return</span> <span class=\"n\">prefix</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(S)</script> , where S is the sum of all characters in all strings.</li>\n</ul>\n<p>In the worst case all <script type=\"math/tex; mode=display\">n</script> strings are the same. The algorithm compares the string <script type=\"math/tex; mode=display\">S1</script> with the other strings <script type=\"math/tex; mode=display\">[S_2 \\ldots S_n]</script> There are <script type=\"math/tex; mode=display\">S</script> character comparisons, where <script type=\"math/tex; mode=display\">S</script> is the sum of all characters in the input array.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe only used constant extra space.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-vertical-scanning\">Approach #2 (Vertical scanning)</h4>\n<p><strong>Algorithm</strong></p>\n<p>Imagine a very short string is at the end of the array. The above approach will still do <script type=\"math/tex; mode=display\">S</script> comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column (same character index of  the strings) before moving on to the next column.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++){</span>\n        <span class=\"kt\">char</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">].</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>             \n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(S)</script> , where S is the sum of all characters in all strings.\nIn the worst case there will be <script type=\"math/tex; mode=display\">n</script> equal strings with length <script type=\"math/tex; mode=display\">m</script> and the algorithm performs  <script type=\"math/tex; mode=display\">S = m*n</script> character comparisons.\nEven though the worst case is still the same as Approach #1, in the best case there are at most <script type=\"math/tex; mode=display\">n*minLen</script> comparisons where <script type=\"math/tex; mode=display\">minLen</script> is the length of the shortest string in the array.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe only used constant extra space.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-divide-and-conquer\">Approach #3 (Divide and conquer)</h4>\n<p><strong>Intuition</strong></p>\n<p>The idea of the algorithm comes from the associative property of LCP operation. We notice that :\n<script type=\"math/tex; mode=display\">LCP(S_1 \\ldots S_n) = LCP(LCP(S_1 \\ldots S_k), LCP (S_{k+1} \\ldots S_n))</script>\n, where <script type=\"math/tex; mode=display\">LCP(S_1 \\ldots S_n)</script> is the longest common prefix in set of strings <script type=\"math/tex; mode=display\">[S_1 \\ldots S_n]</script> , <script type=\"math/tex; mode=display\">1 < k < n</script>\n</p>\n<p><strong>Algorithm</strong></p>\n<p>To apply the observation above, we use divide and conquer technique, where we split the <script type=\"math/tex; mode=display\">LCP(S_i \\ldots S_j)</script> problem into two subproblems <script type=\"math/tex; mode=display\">LCP(S_i \\ldots S_{mid})</script>   and <script type=\"math/tex; mode=display\">LCP(S_{mid+1} \\ldots S_j)</script>, where <code>mid</code> is <script type=\"math/tex; mode=display\">\\frac{i + j}{2}</script>. We use their solutions <code>lcpLeft</code> and <code>lcpRight</code> to construct the solution of the main problem <script type=\"math/tex; mode=display\">LCP(S_i \\ldots S_j)</script>. To accomplish this we compare one by one the characters of <code>lcpLeft</code> and <code>lcpRight</code> till there is no character match. The found common prefix of <code>lcpLeft</code> and <code>lcpRight</code> is the solution of the  <script type=\"math/tex; mode=display\">LCP(S_i \\ldots S_j)</script>.</p>\n<p align=\"center\"><img alt=\"Finding the longest common prefix\" src=\"https://leetcode.com/media/original_images/14_lcp_diviso_et_lmpera.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 2. Finding the longest common prefix of strings using divide and conquer technique</em></p>\n<p><strong>Java</strong>  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>    \n        <span class=\"k\">return</span> <span class=\"n\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)/</span><span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">lcpLeft</span> <span class=\"o\">=</span>   <span class=\"n\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">lcpRight</span> <span class=\"o\">=</span>  <span class=\"n\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">commonPrefix</span><span class=\"o\">(</span><span class=\"n\">lcpLeft</span><span class=\"o\">,</span> <span class=\"n\">lcpRight</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">String</span> <span class=\"nf\">commonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">left</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">(),</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>       \n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">min</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>In the worst case we have <script type=\"math/tex; mode=display\">n</script> equal strings with length <script type=\"math/tex; mode=display\">m</script>\n</p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(S)</script>, where <script type=\"math/tex; mode=display\">S</script> is the number of all characters in the array, <script type=\"math/tex; mode=display\">S = m*n</script>\n Time complexity is <script type=\"math/tex; mode=display\">T(n) = 2 T(\\frac{n}{2}) + O(m)</script>. Therefore time complexity is <script type=\"math/tex; mode=display\">O(S)</script>.\n  In the best case this algorithm performs  <script type=\"math/tex; mode=display\">O(minLen*n)</script> comparisons, where  <script type=\"math/tex; mode=display\">minLen</script> is the shortest string of the array</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*log(n))</script>\n</p>\n</li>\n</ul>\n<p>There is a memory overhead since we store recursive calls in the execution stack. There are <script type=\"math/tex; mode=display\">log(n)</script> recursive calls, each store need <script type=\"math/tex; mode=display\">m</script> space to store the result,  so space complexity is <script type=\"math/tex; mode=display\">O(m*log(n))</script>\n</p>\n<hr />\n<h4 id=\"approach-4-binary-search\">Approach #4  (Binary search)</h4>\n<p>The idea is to apply binary search method to find the string with maximum value <code>L</code>, which is common prefix of all of the strings. The algorithm searches space is the interval <script type=\"math/tex; mode=display\">(0 \\ldots minLen)</script>, where <code>minLen</code> is minimum string length and the maximum possible common prefix. Each time search space is divided in two equal parts, one of them is discarded, because it is sure that it doesn\'t contain the solution. There are two possible cases:\n<em> <code>S[1...mid]</code> is not a common string. This means that for each <code>j &gt; i S[1..j]</code> is not a common string and we discard the second half of the  search space.\n</em> <code>S[1...mid]</code> is common string. This means that for for each <code>i &lt; j S[1..i]</code> is a common string and we discard the first half of the search space, because we try to find longer common prefix.</p>\n<p align=\"center\"><img alt=\"Finding the longest common prefix\" src=\"https://leetcode.com/media/original_images/14_lcp_binary_search.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 3. Finding the longest common prefix of strings using binary search technique</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">minLen</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">strs</span><span class=\"o\">)</span>\n        <span class=\"n\">minLen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">minLen</span><span class=\"o\">,</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n    <span class=\"kt\">int</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">minLen</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">&lt;=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">,</span> <span class=\"n\">middle</span><span class=\"o\">))</span>\n            <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">middle</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">middle</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"o\">){</span>\n    <span class=\"n\">String</span> <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">len</span><span class=\"o\">);</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"n\">str1</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>In the worst case we have <script type=\"math/tex; mode=display\">n</script> equal strings with length <script type=\"math/tex; mode=display\">m</script>\n</p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(S*log(n))</script>, where <script type=\"math/tex; mode=display\">S</script> is the sum of all characters in all strings.</li>\n</ul>\n<p>The algorithm makes <script type=\"math/tex; mode=display\">log(n)</script> iterations, for each of them there are <script type=\"math/tex; mode=display\">S =  m*n</script> comparisons, which gives in total <script type=\"math/tex; mode=display\">O(S*log(n))</script> time complexity.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p>We only used constant extra space.</p>\n<h2 id=\"further-thoughts-follow-up\">Further Thoughts / Follow up</h2>\n<p>Let\'s take a look at a slightly different problem:</p>\n<blockquote>\n<p>Given a set of keys S = <script type=\"math/tex; mode=display\">[S_1,S_2 \\ldots S_n]</script>, find the longest common prefix among a string <code>q</code> and S. This LCP query will be called frequently.</p>\n</blockquote>\n<p>We could optimize LCP queries by storing the set of keys S in a Trie. For more information about Trie, please see this article <a href=\"https://leetcode.com/articles/implement-trie-prefix-tree/\">Implement a trie (Prefix trie)</a>. In a Trie, each node descending from the root represents a common prefix of some keys. But we need to find the longest common prefix of a string <code>q</code> and all key strings. This means that we have to find the deepest path from the root, which satisfies the following conditions:\n<em> it is prefix of query string <code>q</code>\n</em> each node along the path must contain only one child element. Otherwise the found path will not be a common prefix among all strings.\n* the path doesn\'t comprise of nodes which are marked as end of key. Otherwise the path couldn\'t be a prefix a of key which is shorter than itself.</p>\n<p><strong>Algorithm</strong></p>\n<p>The only question left, is how to find the deepest path in the Trie, that fulfills the requirements above. The most effective way is to build a trie from <script type=\"math/tex; mode=display\">[S_1 \\ldots   S_n]</script> strings. Then find the prefix of query string <code>q</code> in the Trie. We traverse the Trie from the root, till it is impossible to continue the path in the Trie because one of the conditions above is not satisfied.</p>\n<p align=\"center\"><img alt=\"Finding the longest common prefix using Trie\" src=\"https://leetcode.com/media/original_images/14_lcp_trie.png\" width=\"539px\" /></p>\n<p align=\"center\"><em>Figure 4. Finding the longest common prefix of strings using Trie</em></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestCommonPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">strs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n         <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>  \n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n         <span class=\"k\">return</span> <span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n    <span class=\"n\">Trie</span> <span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Trie</span><span class=\"o\">();</span>      \n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"na\">insert</span><span class=\"o\">(</span><span class=\"n\">strs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"na\">searchLongestPrefix</span><span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">TrieNode</span> <span class=\"o\">{</span>\n\n    <span class=\"c1\">// R links to node children</span>\n    <span class=\"kd\">private</span> <span class=\"n\">TrieNode</span><span class=\"o\">[]</span> <span class=\"n\">links</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">isEnd</span><span class=\"o\">;</span>\n\n    <span class=\"c1\">// number of children non null links</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"o\">;</span>    \n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">put</span><span class=\"o\">(</span><span class=\"kt\">char</span> <span class=\"n\">ch</span><span class=\"o\">,</span> <span class=\"n\">TrieNode</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">links</span><span class=\"o\">[</span><span class=\"n\">ch</span> <span class=\"o\">-</span><span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n        <span class=\"n\">size</span><span class=\"o\">++;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getLinks</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">size</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//assume methods containsKey, isEnd, get, put are implemented as it is described</span>\n   <span class=\"c1\">//in  https://leetcode.com/articles/implement-trie-prefix-tree/)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Trie</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">TrieNode</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Trie</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TrieNode</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n<span class=\"c1\">//assume methods insert, search, searchPrefix are implemented as it is described</span>\n<span class=\"c1\">//in  https://leetcode.com/articles/implement-trie-prefix-tree/)</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"nf\">searchLongestPrefix</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">TrieNode</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">;</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">char</span> <span class=\"n\">curLetter</span> <span class=\"o\">=</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">curLetter</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">getLinks</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(!</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">isEnd</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n                <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">curLetter</span><span class=\"o\">);</span>\n                <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">curLetter</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n\n         <span class=\"o\">}</span>\n         <span class=\"k\">return</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong>\nIn the worst case query <script type=\"math/tex; mode=display\">q</script> has length <script type=\"math/tex; mode=display\">m</script> and it is equal to all <script type=\"math/tex; mode=display\">n</script> strings of the array.</p>\n<ul>\n<li>Time complexity : preprocessing <script type=\"math/tex; mode=display\">O(S)</script>, where <script type=\"math/tex; mode=display\">S</script> is the number of all characters in the array, LCP query <script type=\"math/tex; mode=display\">O(m)</script>\n</li>\n</ul>\n<p>Trie build has <script type=\"math/tex; mode=display\">O(S)</script> time complexity. To find the common prefix of <script type=\"math/tex; mode=display\">q</script> in the Trie takes in the worst case <script type=\"math/tex; mode=display\">O(m)</script>.</p>\n<ul>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(S)</script>\n</li>\n</ul>\n<p>We only used additional  <script type=\"math/tex; mode=display\">S</script> extra space for the Trie.</p>\n<p>Analysis written by: @elmirap.</p>',NULL,1,'none','none','none'),(272,'Classes More Than 5 Students',1,'',0,0,'<p></p><p>\nThere is a table <code>courses</code> with columns: <b>student</b> and <b>class</b>\n</p><p>\nPlease list out all classes which have more than or equal to 5 students.\n</p><p>\nFor example, the table:\n</p><pre>\n+---------+------------+\n| student | class      |\n+---------+------------+\n| A       | Math       |\n| B       | English    |\n| C       | Math       |\n| D       | Biology    |\n| E       | Math       |\n| F       | Computer   |\n| G       | Math       |\n| H       | Math       |\n| I       | Math       |\n+---------+------------+\n</pre><p>\nShould output:\n</p><pre>\n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n</pre><p>\n<b>Note:</b><br/>\nThe students should not be counted duplicate in each course.\n</p>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-using-group-by-clause-and-sub-query-accepted\">Approach: Using GROUP BY clause and sub-query [Accepted]</a></li>\n<li><a href=\"#approach-using-group-by-and-having-condition-accepted\">Approach: Using GROUP BY and HAVING condition [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-using-group-by-clause-and-sub-query-accepted\">Approach: Using <code>GROUP BY</code> clause and <strong>sub-query</strong> [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>First, we can count the student number in each class. And then select the ones have more than 5 students.</p>\n<p><strong>Algorithm</strong></p>\n<p>To get the student number in each class. We can use <code>GROUP BY</code> and <code>COUNT</code>, which is very popular used to statistic bases on some character in a table.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"k\">class</span><span class=\"p\">,</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"k\">DISTINCT</span> <span class=\"n\">student</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">courses</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"k\">class</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: We use <code>DISTINCT</code> here since the student name may duplicated in a class as it is mentioned int he problem description.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>| class    | COUNT(student) |\n|----------|----------------|\n| Biology  | 1              |\n| Computer | 1              |\n| English  | 1              |\n| Math     | 6              |\n</pre></div>\n\n\n<p>To continue, we can filter the classes by taking the above query as a sub-query.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"k\">class</span>\n<span class=\"k\">FROM</span>\n    <span class=\"p\">(</span><span class=\"k\">SELECT</span>\n        <span class=\"k\">class</span><span class=\"p\">,</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"k\">DISTINCT</span> <span class=\"n\">student</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">num</span>\n    <span class=\"k\">FROM</span>\n        <span class=\"n\">courses</span>\n    <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">temp_table</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">num</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: Make an alias of <code>COUNT(student)</code> (\'num\' in this case) so that you can use in the <code>WHERE</code> clause because it cannot be used directly over there.</p>\n</blockquote>\n<h4 id=\"approach-using-group-by-and-having-condition-accepted\">Approach: Using <code>GROUP BY</code> and <code>HAVING</code> condition [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Using sub-query is one way to add some condition to a <code>GROUP BY</code> clause, however, using <a href=\"https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html\"><code>HAVING</code></a> is another simpler and natural approach. So we can rewrite the above solution as below.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"k\">class</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">courses</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"k\">class</span>\n<span class=\"k\">HAVING</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"k\">DISTINCT</span> <span class=\"n\">student</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span>\n<span class=\"p\">;</span>\n</pre></div>',NULL,1,'none','none','none'),(273,'Range Sum Query - Immutable',1,'Dynamic Programming',0,0,'<p></p><p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> ≤ <i>j</i>), inclusive.</p><p><b>Example:</b><br/>\n</p><pre>\nGiven nums = [-2, 0, 3, -5, 2, -1]\n\nsumRange(0, 2) -&gt; 1\nsumRange(2, 5) -&gt; -1\nsumRange(0, 5) -&gt; -3\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume that the array does not change.</li>\n<li>There are many calls to <i>sumRange</i> function.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class NumArray {\r\npublic:\r\n    NumArray(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    int sumRange(int i, int j) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.sumRange(i,j);\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class NumArray {\n\n    public NumArray(int[] nums) {\n        \n    }\n    \n    public int sumRange(int i, int j) {\n        \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.sumRange(i,j);\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class NumArray(object):\r\n\r\n    def __init__(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        """\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        """\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# param_1 = obj.sumRange(i,j)\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} NumArray;\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n\nint numArraySumRange(NumArray* obj, int i, int j) {\n    \n}\n\nvoid numArrayFree(NumArray* obj) {\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * struct NumArray* obj = numArrayCreate(nums, numsSize);\n * int param_1 = numArraySumRange(obj, i, j);\n * numArrayFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public int SumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.SumRange(i,j);\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n */\r\nvar NumArray = function(nums) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} j\r\n * @return {number}\r\n */\r\nNumArray.prototype.sumRange = function(i, j) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = Object.create(NumArray).createNew(nums)\r\n * var param_1 = obj.sumRange(i,j)\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class NumArray\r\n\r\n=begin\r\n    :type nums: Integer[]\r\n=end\r\n    def initialize(nums)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type j: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_range(i, j)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray.new(nums)\r\n# param_1 = obj.sum_range(i,j)\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type NumArray struct {\n    \n}\n\n\nfunc Constructor(nums []int) NumArray {\n    \n}\n\n\nfunc (this *NumArray) SumRange(i int, j int) int {\n    \n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.SumRange(i,j);\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class NumArray(var _nums: Array[Int]) {\n    \n    def sumRange(int i, int j) : Int = {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums);\n * Int param_1 = obj.sumRange(i,j);\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-caching-accepted\">Approach #2 (Caching) [Accepted]</a></li>\n<li><a href=\"#approach-3-caching-accepted\">Approach #3 (Caching) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</h4>\n<p>Each time <em>sumRange</em> is called, we use a for loop to sum each individual element from index <script type=\"math/tex; mode=display\">i</script> to <script type=\"math/tex; mode=display\">j</script>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">data</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">data</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis:</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script> time per query.\nEach <em>sumRange</em> query takes <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Note that <code>data</code> is a <em>reference</em> to <code>nums</code> and is not a copy of it.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-caching-accepted\">Approach #2 (Caching) [Accepted]</h4>\n<p>Imagine that <em>sumRange</em> is called one thousand times with the exact same arguments. How could we speed that up?</p>\n<p>We could trade in extra space for speed. By pre-computing all range sum possibilities and store its results in a hash table, we can speed up the query to constant time.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Pair</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;,</span> <span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">Pair</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">sum</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">Pair</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script> time per query, <script type=\"math/tex; mode=display\">O(n^2)</script> time pre-computation.\nThe pre-computation done in the constructor takes <script type=\"math/tex; mode=display\">O(n^2)</script> time. Each <em>sumRange</em> query\'s time complexity is <script type=\"math/tex; mode=display\">O(1)</script> as the hash table\'s look up operation is constant time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.\nThe extra space required is <script type=\"math/tex; mode=display\">O(n^2)</script> as there are <script type=\"math/tex; mode=display\">n</script> candidates for both <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-caching-accepted\">Approach #3 (Caching) [Accepted]</h4>\n<p>The above approach takes a lot of space, could we optimize it?</p>\n<p>Imagine that we pre-compute the cummulative sum from index <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">k</script>. Could we use this information to derive <script type=\"math/tex; mode=display\">Sum(i, j)</script>?</p>\n<p>Let us define <script type=\"math/tex; mode=display\">sum[k]</script> as the cumulative sum for <script type=\"math/tex; mode=display\">nums[0 \\cdots k-1]</script> (inclusive):</p>\n<p>\n<script type=\"math/tex; mode=display\">\nsum[k] = \\left\\{ \\begin{array}{rl} \\sum_{i=0}^{k-1}nums[i] & , k > 0 \\\\ 0 &, k = 0 \\end{array} \\right.\n</script>\n</p>\n<p>Now, we can calculate <em>sumRange</em> as following:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nsumRange(i, j) = sum[j + 1] - sum[i]\n</script>\n</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">private</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"nf\">NumArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sumRange</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Notice in the code above we inserted a dummy 0 as the first element in the <em>sum</em> array. This trick saves us from an extra conditional check in <em>sumRange</em> function.</p>\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script> time per query, <script type=\"math/tex; mode=display\">O(n)</script> time pre-computation.\nSince the cumulative sum is cached, each <em>sumRange</em> query can be calculated in <script type=\"math/tex; mode=display\">O(1)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n</ul>',NULL,1,'none','none','none'),(274,'Search Insert Position',1,'Array,Binary Search',0,0,'<p></p><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p>\nHere are few examples.<br/>\n<code>[1,3,5,6]</code>, 5 → 2<br/>\n<code>[1,3,5,6]</code>, 2 → 1<br/>\n<code>[1,3,5,6]</code>, 7 → 4<br/>\n<code>[1,3,5,6]</code>, 0 → 0\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int searchInsert(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def searchInsert(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int searchInsert(int* nums, int numsSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int SearchInsert(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar searchInsert = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer}\r\ndef search_insert(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchInsert(nums []int, target int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(275,'Reverse Vowels of a String',1,'Two Pointers,String',0,0,'<p></p><p>Write a function that takes a string as input and reverse only the vowels of a string.</p><p>\n<b>Example 1:</b><br/>\nGiven s = \"hello\", return \"holle\".\n</p><p>\n<b>Example 2:</b><br/>\nGiven s = \"leetcode\", return \"leotcede\".\n</p><p>\n<b>Note:</b><br/>\nThe vowels does not include the letter \"y\".\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string reverseVowels(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String reverseVowels(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reverseVowels(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* reverseVowels(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ReverseVowels(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar reverseVowels = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef reverse_vowels(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func reverseVowels(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseVowels(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reverseVowels(s: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(276,'K-th Smallest in Lexicographical Order',3,'',0,0,'<p></p><p>Given integers <code>n</code> and <code>k</code>, find the lexicographically k-th smallest integer in the range from <code>1</code> to <code>n</code>.</p><p>Note: 1 ≤ k ≤ n ≤ 10<sup>9</sup>.</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b>\nn: 13   k: 2\n\n<b>Output:</b>\n10\n\n<b>Explanation:</b>\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findKthNumber(int n, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findKthNumber(int n, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findKthNumber(self, n, k):\r\n        """\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findKthNumber(int n, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindKthNumber(int n, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findKthNumber = function(n, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef find_kth_number(n, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findKthNumber(_ n: Int, _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findKthNumber(n int, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findKthNumber(n: Int, k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(277,'Binary Tree Inorder Traversal',2,'Tree,Hash Table,Stack',0,0,'<p></p><p>Given a binary tree, return the <i>inorder</i> traversal of its nodes\' values.</p><p>\nFor example:<br/>\nGiven binary tree <code>[1,null,2,3]</code>,<br/>\n</p><pre>\n   1\n    \\\n     2\n    /\n   3\n</pre><p>\nreturn <code>[1,3,2]</code>.\n</p><p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> inorderTraversal(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def inorderTraversal(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> InorderTraversal(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar inorderTraversal = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef inorder_traversal(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc inorderTraversal(root *TreeNode) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def inorderTraversal(root: TreeNode): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(278,'Compare Version Numbers',2,'String',0,0,'<p></p><p>Compare two version numbers <i>version1</i> and <i>version2</i>.<br/>\nIf <i>version1</i> &gt; <i>version2</i> return 1, if <i>version1</i> &lt; <i>version2</i> return -1, otherwise return 0.</p><p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.<br/>\nThe <code>.</code> character does not represent a decimal point and is used to separate number sequences.<br/>\nFor instance, <code>2.5</code> is not \"two and a half\" or \"half way to version three\", it is the fifth second-level revision of the second first-level revision.</p><p>Here is an example of version numbers ordering:</p><pre>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int compareVersion(string version1, string version2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int compareVersion(String version1, String version2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def compareVersion(self, version1, version2):\r\n        """\r\n        :type version1: str\r\n        :type version2: str\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int compareVersion(char* version1, char* version2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CompareVersion(string version1, string version2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} version1\r\n * @param {string} version2\r\n * @return {number}\r\n */\r\nvar compareVersion = function(version1, version2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} version1\r\n# @param {String} version2\r\n# @return {Integer}\r\ndef compare_version(version1, version2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func compareVersion(_ version1: String, _ version2: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func compareVersion(version1 string, version2 string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def compareVersion(version1: String, version2: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(279,'Spiral Matrix II',2,'Array',0,0,'<p></p><p>Given an integer <i>n</i>, generate a square matrix filled with elements from 1 to <i>n</i><sup>2</sup> in spiral order.</p><p>\nFor example,<br/>\nGiven <i>n</i> = <code>3</code>,\n</p>\nYou should return the following matrix:\n<pre>\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> generateMatrix(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[][] generateMatrix(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def generateMatrix(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** generateMatrix(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[,] GenerateMatrix(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number[][]}\r\n */\r\nvar generateMatrix = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer[][]}\r\ndef generate_matrix(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func generateMatrix(_ n: Int) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func generateMatrix(n int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def generateMatrix(n: Int): Array[Array[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(280,'Detect Capital',1,'String',0,0,'<p></p><p>\nGiven a word, you need to judge whether the usage of capitals in it is right or not.\n</p><p>\nWe define the usage of capitals in a word to be right when one of the following cases holds:\n</p><ol>\n<li>All letters in this word are capitals, like \"USA\".</li>\n<li>All letters in this word are not capitals, like \"leetcode\".</li>\n<li>Only the first letter in this word is capital if it has more than one letter, like \"Google\".</li>\n</ol>\nOtherwise, we define that this word doesn\'t use capitals in a right way.\n\n\n\n<p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"USA\"\n<b>Output:</b> True\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"FlaG\"\n<b>Output:</b> False\n</pre><p><b>Note:</b>\nThe input will be a non-empty word consisting of uppercase and lowercase latin letters.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    bool detectCapitalUse(string word) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean detectCapitalUse(String word) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def detectCapitalUse(self, word):\n        """\n        :type word: str\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool detectCapitalUse(char* word) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public bool DetectCapitalUse(string word) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} word\n# @return {Boolean}\ndef detect_capital_use(word)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func detectCapitalUse(_ word: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func detectCapitalUse(word string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def detectCapitalUse(word: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(281,'Longest Palindrome',1,'Hash Table',0,0,'<p></p><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p><p>This is case sensitive, for example <code>\"Aa\"</code> is not considered a palindrome here.</p><p><b>Note:</b><br/>\nAssume the length of given string will not exceed 1,010.\n</p><p><b>Example: </b>\n</p><pre>\nInput:\n\"abccccdd\"\n\nOutput:\n7\n\nExplanation:\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int longestPalindrome(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int longestPalindrome(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestPalindrome(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int longestPalindrome(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LongestPalindrome(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar longestPalindrome = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef longest_palindrome(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestPalindrome(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestPalindrome(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestPalindrome(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(282,'Roman to Integer',1,'Math,String',0,0,'<p></p><p>Given a roman numeral, convert it to an integer.</p><p>Input is guaranteed to be within the range from 1 to 3999.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int romanToInt(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int romanToInt(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def romanToInt(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int romanToInt(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int RomanToInt(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar romanToInt = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef roman_to_int(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func romanToInt(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func romanToInt(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def romanToInt(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(283,'Remove Invalid Parentheses',3,'Depth-first Search,Breadth-first Search',0,0,'<p></p><p>\nRemove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.</p><p>Note: The input string may contain letters other than the parentheses <code>(</code> and <code>)</code>. \n</p><p>\n<b>Examples:</b><br/>\n</p><pre>\n\"()())()\" -&gt; [\"()()()\", \"(())()\"]\n\"(a)())()\" -&gt; [\"(a)()()\", \"(a())()\"]\n\")(\" -&gt; [\"\"]\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/hpplayer\">@hpplayer</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> removeInvalidParentheses(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> removeInvalidParentheses(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def removeInvalidParentheses(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** removeInvalidParentheses(char* s, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> RemoveInvalidParentheses(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar removeInvalidParentheses = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String[]}\r\ndef remove_invalid_parentheses(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func removeInvalidParentheses(_ s: String) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeInvalidParentheses(s string) []string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeInvalidParentheses(s: String): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(284,'Pascal\'s Triangle II',1,'Array',0,0,'<p></p><p>Given an index <i>k</i>, return the <i>k</i><sup>th</sup> row of the Pascal\'s triangle.</p><p>\nFor example, given <i>k</i> = 3,<br/>\nReturn <code>[1,3,3,1]</code>.\n</p><p>\n<b>Note:</b><br/>\nCould you optimize your algorithm to use only <i>O</i>(<i>k</i>) extra space?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> getRow(int rowIndex) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> getRow(int rowIndex) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def getRow(self, rowIndex):\r\n        """\r\n        :type rowIndex: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* getRow(int rowIndex, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> GetRow(int rowIndex) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} rowIndex\r\n * @return {number[]}\r\n */\r\nvar getRow = function(rowIndex) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} row_index\r\n# @return {Integer[]}\r\ndef get_row(row_index)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getRow(rowIndex int) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getRow(rowIndex: Int): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(285,'Reverse String',1,'Two Pointers,String',0,0,'<p></p><p>Write a function that takes a string as input and returns the string reversed.</p><p>\n<b>Example:</b><br/>\nGiven s = \"hello\", return \"olleh\".\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string reverseString(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String reverseString(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reverseString(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* reverseString(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ReverseString(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar reverseString = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef reverse_string(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func reverseString(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseString(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reverseString(s: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(286,'Dota2 Senate',2,'Greedy',0,0,'<p></p><p>\nIn the world of Dota2, there are two parties: the <code>Radiant</code> and the <code>Dire</code>.\n</p><p>\nThe Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <code>one</code> of the two rights:\n</p><ol>\n<li><code>Ban one senator\'s right</code>: <br/>A senator can make another senator lose <b>all his rights</b> in this and all the following rounds.</li>\n<li><code>Announce the victory</code>: <br/>If this senator found the senators who still have rights to vote are all from <b>the same party</b>, he can announce the victory and make the decision about the change in the game.</li>\n</ol><p>\nGiven a string representing each senator\'s party belonging. The character \'R\' and \'D\' represent the <code>Radiant</code> party and the <code>Dire</code> party respectively. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.\n</p><p>\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n</p><p>\nSuppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be <code>Radiant</code> or <code>Dire</code>.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"RD\"\n<b>Output:</b> \"Radiant\"\n<b>Explanation:</b> The first senator comes from Radiant and he can just ban the next senator\'s right in the round 1. <br/>And the second senator can\'t exercise any rights any more since his right has been banned. <br/>And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"RDD\"\n<b>Output:</b> \"Dire\"\n<b>Explanation:</b> \nThe first senator comes from Radiant and he can just ban the next senator\'s right in the round 1. <br/>And the second senator can\'t exercise any rights anymore since his right has been banned. <br/>And the third senator comes from Dire and he can ban the first senator\'s right in the round 1. <br/>And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the given string will in the range [1, 10,000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string predictPartyVictory(string senate) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String predictPartyVictory(String senate) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def predictPartyVictory(self, senate):\r\n        """\r\n        :type senate: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def predictPartyVictory(self, senate):\r\n        """\r\n        :type senate: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* predictPartyVictory(char* senate) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string PredictPartyVictory(string senate) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} senate\r\n * @return {string}\r\n */\r\nvar predictPartyVictory = function(senate) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} senate\r\n# @return {String}\r\ndef predict_party_victory(senate)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func predictPartyVictory(_ senate: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func predictPartyVictory(senate string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def predictPartyVictory(senate: String): String = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(287,'Restore IP Addresses',2,'Backtracking,String',0,0,'<p></p><p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p><p>\nFor example:<br/>\nGiven <code>\"25525511135\"</code>,\n</p><p>\nreturn <code>[\"255.255.11.135\", \"255.255.111.35\"]</code>. (Order does not matter)\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> restoreIpAddresses(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> restoreIpAddresses(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def restoreIpAddresses(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** restoreIpAddresses(char* s, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> RestoreIpAddresses(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar restoreIpAddresses = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String[]}\r\ndef restore_ip_addresses(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func restoreIpAddresses(_ s: String) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func restoreIpAddresses(s string) []string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def restoreIpAddresses(s: String): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(288,'Binary Tree Tilt',1,'Tree',0,0,'<p></p><p>Given a binary tree, return the tilt of the <b>whole tree</b>.</p><p>The tilt of a <b>tree node</b> is defined as the <b>absolute difference</b> between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.</p><p>The tilt of the <b>whole tree</b> is defined as the sum of all nodes\' tilt.</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> \n         1\n       /   \\\n      2     3\n<b>Output:</b> 1\n<b>Explanation:</b> \nTilt of node 2 : 0\nTilt of node 3 : 0\nTilt of node 1 : |2-3| = 1\nTilt of binary tree : 0 + 0 + 1 = 1\n</pre><p><b>Note:</b>\n</p><ol>\n<li>The sum of node values in any subtree won\'t exceed the range of 32-bit integer. </li>\n<li>All the tilt values won\'t exceed the range of 32-bit integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int findTilt(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int findTilt(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findTilt(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint findTilt(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int FindTilt(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar findTilt = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef find_tilt(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func findTilt(_ root: TreeNode?) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findTilt(root *TreeNode) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findTilt(root: TreeNode): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>From the problem statement, it is clear that we need to find the tilt value at every node of the given tree and add up all the tilt values to obtain the final result. To find the tilt value at any node, we need to subtract the sum of all the nodes in its left subtree and the sum of all the nodes in its right subtree. </p>\n<p>Thus, to find the solution, we make use of a recursive function <code>traverse</code> which when called from any node, returns the sum of the nodes below the current node including itself. With the help of such sum values for the right and left subchild of any node, we can directly obtain the tilt value corresponding to that node.</p>\n<p>The below animation depicts how the value passing and tilt calculation:</p>\n<p>!?!../Documents/563_Binary.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tilt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findTilt</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">traverse</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">tilt</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">traverse</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">traverse</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">traverse</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n        <span class=\"n\">tilt</span><span class=\"o\">+=</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">-</span><span class=\"n\">right</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"o\">+</span><span class=\"n\">right</span><span class=\"o\">+</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. where <script type=\"math/tex; mode=display\">n</script> is the number of nodes. Each node is visited once.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. In worst case when the tree is skewed depth of tree will be <script type=\"math/tex; mode=display\">n</script>. In average case depth will be <script type=\"math/tex; mode=display\">logn</script>.</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(289,'Maximum Gap',3,'Sort',0,0,'<p></p><p>Given an unsorted array, find the maximum difference between the successive elements in its sorted form.</p><p>Try to solve it in linear time/space.</p><p>Return 0 if the array contains less than 2 elements.</p><p>You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/porker2008\">@porker2008</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maximumGap(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maximumGap(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maximumGap(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maximumGap(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaximumGap(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maximumGap = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef maximum_gap(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maximumGap(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maximumGap(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maximumGap(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-comparison-sorting-accepted\">Approach #1 Comparison Sorting [Accepted]</a></li>\n<li><a href=\"#approach-2-radix-sort-accepted\">Approach #2 Radix Sort [Accepted]</a></li>\n<li><a href=\"#approach-3-buckets-and-the-pigeonhole-principle-accepted\">Approach #3 Buckets and The Pigeonhole Principle [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-comparison-sorting-accepted\">Approach #1 Comparison Sorting [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do what the question says.</p>\n<p><strong>Algorithm</strong></p>\n<p>Sort the entire array. Then iterate over it to find the maximum gap between two successive elements.</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">maximumGap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>            <span class=\"c1\">// check if array is empty or small sized</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>                 <span class=\"c1\">// sort the array</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">maxGap</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">maxGap</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">maxGap</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">maxGap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n \\cdot log(n))</script>.</p>\n<p>Time taken to sort the array is <script type=\"math/tex; mode=display\">O(n \\cdot log(n))</script> (average case). Time taken for linear iteration through the array is of <script type=\"math/tex; mode=display\">O(n)</script> complexity. Hence overall time complexity is <script type=\"math/tex; mode=display\">O(n \\cdot log(n))</script>.</p>\n</li>\n<li>\n<p>Space complexity: No extra space needed, other than the input array (since sorting can usually be done in-place).</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-radix-sort-accepted\">Approach #2 Radix Sort [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is similar to <a href=\"#approach-1-comparison-sorting-accepted\">Approach #1</a>, except we use <a href=\"https://en.wikipedia.org/wiki/Radix_sort\">Radix Sort</a> instead of a traditional comparison sort.</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">maximumGap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">maxVal</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">max_element</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>                                 <span class=\"c1\">// 1, 10, 100, 1000 ...</span>\n    <span class=\"kt\">int</span> <span class=\"n\">radix</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>                              <span class=\"c1\">// base 10 system</span>\n\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">aux</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n\n    <span class=\"cm\">/* LSD Radix Sort */</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">maxVal</span> <span class=\"o\">/</span> <span class=\"n\">exp</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>                   <span class=\"c1\">// Go through all digits from LSD to MSD</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">radix</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>    <span class=\"c1\">// Counting sort</span>\n            <span class=\"n\">count</span><span class=\"p\">[(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">exp</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>   <span class=\"c1\">// you could also use partial_sum()</span>\n            <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n            <span class=\"n\">aux</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">count</span><span class=\"p\">[(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">exp</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">aux</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\n        <span class=\"n\">exp</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">maxGap</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">maxGap</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">maxGap</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">maxGap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(d \\cdot (n + k)) \\approx O(n)</script>.</p>\n<p>Since a linear iteration over the array (once it is sorted) is of linear (i.e. <script type=\"math/tex; mode=display\">O(n)</script>) complexity, the performance of this approach is limited by the performance of Radix sort.</p>\n<p>Radix sort uses <a href=\"https://en.wikipedia.org/wiki/Counting_sort\">Counting sort</a> as a subroutine.</p>\n<ul>\n<li>\n<p>Counting sort runs in <script type=\"math/tex; mode=display\">O(n + k)</script> time (where <script type=\"math/tex; mode=display\">k</script> is the radix or base of the digits comprising the <script type=\"math/tex; mode=display\">n</script> elements in the array). If <script type=\"math/tex; mode=display\">k \\leq O(n)</script>, Counting sort would run in linear time. In our case, the radix is fixed (i.e. <script type=\"math/tex; mode=display\">k = 10</script>). Hence our Counting sort subroutine runs in <script type=\"math/tex; mode=display\">O(n)</script> linear time.</p>\n</li>\n<li>\n<p>Radix sort works by running <script type=\"math/tex; mode=display\">d</script> passes of the Counting sort subroutine (where the elements are composed of, maximally, <script type=\"math/tex; mode=display\">d</script> digits). Hence effective runtime of Radix sort would be <script type=\"math/tex; mode=display\">O(d \\cdot (n + k))</script>. However, in our case an element can, maximally, be the maximum 32-bit signed integer <code>2,147,483,647</code>. Hence <script type=\"math/tex; mode=display\">d \\leq 10</script> is a constant.</p>\n</li>\n</ul>\n<p>Thus Radix sort has a runtime performance complexity of about <script type=\"math/tex; mode=display\">O(n)</script> for reasonably large input.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n + k) \\approx O(n)</script> extra space.</p>\n<p>Counting sort requires <script type=\"math/tex; mode=display\">O(k)</script> extra space. Radix sort requires an auxiliary array of the same size as input array. However given that <script type=\"math/tex; mode=display\">k</script> is a small fixed constant, the space required by Counting sort can be ignored for reasonably large input.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-buckets-and-the-pigeonhole-principle-accepted\">Approach #3 Buckets and The Pigeonhole Principle [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Sorting an entire array can be costly. At worst, it requires comparing each element with <em>every</em> other element.\nWhat if we didn\'t need to compare all pairs of elements? That would be possible if we could somehow divide the elements into representative groups, or rather, <em>buckets</em>. Then we would only need to compare these buckets.</p>\n<blockquote>\n<p><strong>Digression: The Pigeonhole Principle</strong>\nThe <a href=\"https://en.wikipedia.org/wiki/Pigeonhole_principle\">Pigeonhole Principle</a> states that if <script type=\"math/tex; mode=display\">n</script> items are put into <script type=\"math/tex; mode=display\">m</script> containers, with <script type=\"math/tex; mode=display\">n > m</script>, then at least one container must contain more than one item.</p>\n</blockquote>\n<p>Suppose for each of the <script type=\"math/tex; mode=display\">n</script> elements in our array, there was a bucket. Then each element would occupy one bucket. Now what if we reduced, the number of buckets? Some buckets would have to accommodate more than one element.</p>\n<p>Now let\'s talk about the gaps between the elements. Let\'s take the best case, where all elements of the array are sorted and have a uniform gap between them. This means every adjacent pair of elements differ by the same constant value. So for <script type=\"math/tex; mode=display\">n</script> elements of the array, there are <script type=\"math/tex; mode=display\">n-1</script> gaps, each of width, say, <script type=\"math/tex; mode=display\">t</script>. It is trivial to deduce that <script type=\"math/tex; mode=display\">t = (max - min)/(n-1)</script> (where <script type=\"math/tex; mode=display\">max</script> and <script type=\"math/tex; mode=display\">min</script> are the minimum and maximum elements of the array). This width is the maximal width/gap between two adjacent elements in the array; precisely the quantity we are looking for!</p>\n<p>One can safely argue that this value of <script type=\"math/tex; mode=display\">t</script>, is in fact, the smallest value that <script type=\"math/tex; mode=display\">t</script> can ever accomplish of any array with the same number of elements (i.e. <script type=\"math/tex; mode=display\">n</script>) and the same range (i.e. <script type=\"math/tex; mode=display\">(max - min)</script>). To test this fact, you can start with a uniform width array (as described above) and try to reduce the gap between any two adjacent elements. If you reduce the gap between <script type=\"math/tex; mode=display\">arr[i-1]</script> and <script type=\"math/tex; mode=display\">arr[i]</script> to some value <script type=\"math/tex; mode=display\">t - p</script>, then you will notice that the gap between <script type=\"math/tex; mode=display\">arr[i]</script> and <script type=\"math/tex; mode=display\">arr[i+1]</script> would have increased to <script type=\"math/tex; mode=display\">t + p</script>. Hence the maximum attainable gap would have become <script type=\"math/tex; mode=display\">t + p</script> from <script type=\"math/tex; mode=display\">t</script>. Thus the value of the <strong>maximum gap</strong> <script type=\"math/tex; mode=display\">t</script> can only increase.</p>\n<p><strong>Buckets!</strong></p>\n<p>Coming back to our problem, we have already established by application of the Pigeonhole Principle, that if we used <em>buckets</em> instead of individual elements as our base for comparison, the number of comparisons would reduce if we could accommodate more than one element in a single bucket. That does not immediately solve the problem though. What if we had to compare elements <em>within</em> a bucket? We would end up no better.</p>\n<p>So the current motivation remains: somehow, if we only had to compare among the buckets, and <em>not</em> the elements <em>within</em> the buckets, we would be good. It would also solve our sorting problem: we would just distribute the elements to the right buckets. Since the buckets can be already ordered, and we only compare among buckets, we wouldn\'t have to compare all elements to sort them!</p>\n<p>But if we only had buckets to compare, we would have to <em>ensure</em>, that the gap between the buckets itself represent the maximal gap in the input array. How do we go about doing that?</p>\n<p>We could do that just by setting the buckets to be smaller than <script type=\"math/tex; mode=display\">t = (max - min)/(n-1)</script> (as described above). Since the gaps (between elements) within the same bucket would only be <script type=\"math/tex; mode=display\">\\leq t</script>, we could deduce that the maximal gap would <em>indeed</em> occur <strong>only between two adjacent buckets</strong>.</p>\n<p>Hence by setting bucket size <script type=\"math/tex; mode=display\">b</script> to be <script type=\"math/tex; mode=display\">1 < b \\leq (max - min)/(n-1)</script>, we can ensure that at least one of the gaps between adjacent buckets would serve as the <strong>maximal gap.</strong></p>\n<p><strong>Clarifications</strong></p>\n<p>A few clarifications are in order:</p>\n<ul>\n<li>\n<p><strong>Would the buckets be of uniform size?</strong>\nYes. Each of them would be of the same size <script type=\"math/tex; mode=display\">b</script>.</p>\n</li>\n<li>\n<p><strong>But, then wouldn\'t the gap between them be uniform/constant as well?</strong>\nYes it would be. The gap between them would be <script type=\"math/tex; mode=display\">1</script> integer unit wide. That means a two adjacent buckets of size <script type=\"math/tex; mode=display\">3</script> could hold integers with values, say, <script type=\"math/tex; mode=display\">3 - 6</script> and <script type=\"math/tex; mode=display\">7 - 9</script>. We avoid overlapping buckets.</p>\n</li>\n<li>\n<p><strong>Then what are you talking about when you say the gap between two adjacent buckets could be the maximal gap?</strong>\nWhen we are talking about the size of a bucket, we are talking about its holding capacity. That is the range of values the bucket can represent (or <em>hold</em>). However the actual extent of the bucket are determined by the values of the maximum and minimum element a bucket holds. For example a bucket of size <script type=\"math/tex; mode=display\">5</script> could have a capacity to hold values between <script type=\"math/tex; mode=display\">6 - 10</script>. However, if it only holds the elements <script type=\"math/tex; mode=display\">7, 8</script> and <script type=\"math/tex; mode=display\">9</script>, then its actual extent is only <script type=\"math/tex; mode=display\">(9 - 7) + 1 = 3</script> which is not the same as the capacity of the bucket.</p>\n</li>\n<li>\n<p><strong>Then how do you compare adjacent buckets?</strong>\nWe do that by comparing their extents. Thus we compare the minimum element of the next bucket to the maximum element of the current bucket. For example: if we have two buckets of size <script type=\"math/tex; mode=display\">5</script> each, holding elements <script type=\"math/tex; mode=display\">[1, 2, 3]</script> and <script type=\"math/tex; mode=display\">[9, 10]</script> respectively, then the gap between the buckets would essentially refer to the value <script type=\"math/tex; mode=display\">9 - 3 = 6</script> (which is larger than the size of either bucket).</p>\n</li>\n<li>\n<p><strong>But then aren\'t we comparing elements again?!</strong>\nWe are, yes! But only compare about twice the elements as the number of buckets (i.e. the minimum and maximum elements of each bucket). If you followed the above, you would realize that this amount is certainly less than the actual number of elements in the array, given a suitable bucket size was chosen.</p>\n</li>\n</ul>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>\n<p>We choose a bucket size <script type=\"math/tex; mode=display\">b</script> such that <script type=\"math/tex; mode=display\">1 < b \\leq (max - min)/(n-1)</script>. Let\'s just choose <script type=\"math/tex; mode=display\">b = \\lfloor (max - min)/(n-1) \\rfloor</script>.</p>\n</li>\n<li>\n<p>Thus all the <script type=\"math/tex; mode=display\">n</script> elements would be divided among <script type=\"math/tex; mode=display\">k = \\lceil (max - min)/b \\rceil</script> buckets.</p>\n</li>\n<li>\n<p>Hence the <script type=\"math/tex; mode=display\">i^{th}</script> bucket would hold the range of values: <script type=\"math/tex; mode=display\">\\bigg [min + (i-1) * b, \\space min + i*b \\bigg )</script> (<code>1</code>-based indexing).</p>\n</li>\n<li>\n<p>It is trivial to calculate the index of the bucket to which a particular element belongs. That is given by <script type=\"math/tex; mode=display\">\\lfloor (num - min)/b \\rfloor</script> (<code>0</code>-based indexing) where <script type=\"math/tex; mode=display\">num</script> is the element in question.</p>\n</li>\n<li>\n<p>Once all <script type=\"math/tex; mode=display\">n</script> elements have been distributed, we compare <script type=\"math/tex; mode=display\">k-1</script> adjacent bucket pairs to find the maximum gap.</p>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Bucket</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">used</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">minval</span> <span class=\"o\">=</span> <span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">();</span>        <span class=\"c1\">// same as INT_MAX</span>\n    <span class=\"kt\">int</span> <span class=\"n\">maxval</span> <span class=\"o\">=</span> <span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">min</span><span class=\"p\">();</span>        <span class=\"c1\">// same as INT_MIN</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">maximumGap</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">mini</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">min_element</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()),</span>\n        <span class=\"n\">maxi</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">max_element</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">bucketSize</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">maxi</span> <span class=\"o\">-</span> <span class=\"n\">mini</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">((</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">nums</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">));</span>        <span class=\"c1\">// bucket size or capacity</span>\n    <span class=\"kt\">int</span> <span class=\"n\">bucketNum</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">maxi</span> <span class=\"o\">-</span> <span class=\"n\">mini</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">bucketSize</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>                         <span class=\"c1\">// number of buckets</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Bucket</span><span class=\"o\">&gt;</span> <span class=\"n\">buckets</span><span class=\"p\">(</span><span class=\"n\">bucketNum</span><span class=\"p\">);</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;&amp;</span> <span class=\"nl\">num</span> <span class=\"p\">:</span> <span class=\"n\">nums</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">bucketIdx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">mini</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">bucketSize</span><span class=\"p\">;</span>                          <span class=\"c1\">// locating correct bucket</span>\n        <span class=\"n\">buckets</span><span class=\"p\">[</span><span class=\"n\">bucketIdx</span><span class=\"p\">].</span><span class=\"n\">used</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"n\">buckets</span><span class=\"p\">[</span><span class=\"n\">bucketIdx</span><span class=\"p\">].</span><span class=\"n\">minval</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">buckets</span><span class=\"p\">[</span><span class=\"n\">bucketIdx</span><span class=\"p\">].</span><span class=\"n\">minval</span><span class=\"p\">);</span>\n        <span class=\"n\">buckets</span><span class=\"p\">[</span><span class=\"n\">bucketIdx</span><span class=\"p\">].</span><span class=\"n\">maxval</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">buckets</span><span class=\"p\">[</span><span class=\"n\">bucketIdx</span><span class=\"p\">].</span><span class=\"n\">maxval</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">prevBucketMax</span> <span class=\"o\">=</span> <span class=\"n\">mini</span><span class=\"p\">,</span> <span class=\"n\">maxGap</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;&amp;</span> <span class=\"nl\">bucket</span> <span class=\"p\">:</span> <span class=\"n\">buckets</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">bucket</span><span class=\"p\">.</span><span class=\"n\">used</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n\n        <span class=\"n\">maxGap</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">maxGap</span><span class=\"p\">,</span> <span class=\"n\">bucket</span><span class=\"p\">.</span><span class=\"n\">minval</span> <span class=\"o\">-</span> <span class=\"n\">prevBucketMax</span><span class=\"p\">);</span>\n        <span class=\"n\">prevBucketMax</span> <span class=\"o\">=</span> <span class=\"n\">bucket</span><span class=\"p\">.</span><span class=\"n\">maxval</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">maxGap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n + b) \\approx O(n)</script>.</p>\n<p>Distributing the elements of the array takes one linear pass (i.e. <script type=\"math/tex; mode=display\">O(n)</script> complexity). Finding the maximum gap among the buckets takes a linear pass over the bucket storage (i.e. <script type=\"math/tex; mode=display\">O(b)</script> complexity). Hence overall process takes linear runtime.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(2*b) \\approx O(b)</script> extra space.</p>\n<p>Each bucket stores a maximum and a minimum element. Hence extra space linear to the number of buckets is required.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/babhishek21\">@babhishek21</a>. Shout-out to <a href=\"https://leetcode.com/zkfairytale/\">@zkfairytale</a>, <a href=\"https://leetcode.com/teddyyyy/\">@teddyyyy</a> and <a href=\"https://leetcode.com/lhearen/\">@lhearen</a>!</p>',NULL,1,'none','none','none'),(290,'Length of Last Word',1,'String',0,0,'<p></p><p>Given a string <i>s</i> consists of upper/lower-case alphabets and empty space characters <code>\' \'</code>, return the length of last word in the string.</p><p>If the last word does not exist, return 0.</p><p><b>Note:</b> A word is defined as a character sequence consists of non-space characters only.</p><p>\nFor example, <br/>\nGiven <i>s</i> = <code>\"Hello World\"</code>,<br/>\nreturn <code>5</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int lengthOfLastWord(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int lengthOfLastWord(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def lengthOfLastWord(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int lengthOfLastWord(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LengthOfLastWord(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar lengthOfLastWord = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef length_of_last_word(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func lengthOfLastWord(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthOfLastWord(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def lengthOfLastWord(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(291,'Coin Change 2',2,'',0,0,'<p></p><p>\nYou are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.\n</p><p><b>Note:</b> \nYou can assume that\n</p><ul>\n<li> 0 &lt;= amount &lt;= 5000</li>\n<li> 1 &lt;= coin &lt;= 5000</li>\n<li> the number of coins is less than 500 </li>\n<li> the answer is guaranteed to fit into signed 32-bit integer\n</li></ul><p><b>Example 1:</b>\n</p><pre>\n<b>Input:</b> amount = 5, coins = [1, 2, 5]\n<b>Output:</b> 4\n<b>Explanation:</b> there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>Input:</b> amount = 3, coins = [2]\n<b>Output:</b> 0\n<b>Explanation:</b> the amount of 3 cannot be made up just with coins of 2.\n</pre><p><b>Example 3:</b>\n</p><pre>\n<b>Input:</b> amount = 10, coins = [10] \n<b>Output:</b> 1\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int change(int amount, vector<int>& coins) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int change(int amount, int[] coins) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def change(self, amount, coins):\n        """\n        :type amount: int\n        :type coins: List[int]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int change(int amount, int* coins, int coinsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int Change(int amount, int[] coins) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function(amount, coins) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} amount\n# @param {Integer[]} coins\n# @return {Integer}\ndef change(amount, coins)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func change(_ amount: Int, _ coins: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func change(amount int, coins []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def change(amount: Int, coins: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(292,'Maximal Square',2,'Dynamic Programming',0,0,'<p></p><p>\nGiven a 2D binary matrix filled with 0\'s and 1\'s, find the largest square containing only 1\'s and return its area.\n</p><p>For example, given the following matrix:\n</p><pre>\n1 0 1 0 0\n1 0 <font color=\"red\">1</font> <font color=\"red\">1</font> 1\n1 1 <font color=\"red\">1</font> <font color=\"red\">1</font> 1\n1 0 0 1 0\n</pre>\nReturn 4.\n\n\n<p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/Freezen\">@Freezen</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maximalSquare(vector<vector<char>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maximalSquare(self, matrix):\r\n        """\r\n        :type matrix: List[List[str]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaximalSquare(char[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} matrix\r\n * @return {number}\r\n */\r\nvar maximalSquare = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} matrix\r\n# @return {Integer}\r\ndef maximal_square(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maximalSquare(_ matrix: [[Character]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maximalSquare(matrix [][]byte) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-2-dynamic-programming-accepted\">Approach #2 (Dynamic Programming) [Accepted]</a></li>\n<li><a href=\"#approach-3-better-dynamic-programming-accepted\">Approach #3 (Better Dynamic Programming) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We need to find the largest square comprising of all ones in the given <script type=\"math/tex; mode=display\">m \\times n</script> matrix. In other words we need to find the largest set of connected ones in the given matrix that forms a square.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</h4>\n<p>The simplest approach consists of trying to find out every possible square of 1’s that can be formed from within the matrix. The question now is – how to go for it?</p>\n<p>We use a variable to contain the size of the largest square found so far and another variable to store the size of the current, both initialized to 0. Starting from the left uppermost point in the matrix, we search for a 1. No operation needs to be done for a 0. Whenever a 1 is found, we try to find out the largest square that can be formed including that 1. For this, we move diagonally (right and downwards), i.e. we increment the row index and column index temporarily and then check whether all the elements of that row and column are 1 or not. If all the elements happen to be 1, we move diagonally further as previously. If even one element turns out to be 0, we stop this diagonal movement and update the size of the largest square. Now we, continue the traversal of the matrix from the element next to the initial 1 found, till all the elements of the matrix have been traversed.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximalSquare</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">rows</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxsqlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">sqlen</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                    <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">sqlen</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">sqlen</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sqlen</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">sqlen</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                                <span class=\"k\">break</span><span class=\"o\">;</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sqlen</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">sqlen</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                                <span class=\"k\">break</span><span class=\"o\">;</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span>\n                            <span class=\"n\">sqlen</span><span class=\"o\">++;</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">maxsqlen</span> <span class=\"o\">&lt;</span> <span class=\"n\">sqlen</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">maxsqlen</span> <span class=\"o\">=</span> <span class=\"n\">sqlen</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxsqlen</span> <span class=\"o\">*</span> <span class=\"n\">maxsqlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O\\big((mn)^2\\big)</script>. In worst case, we need to traverse the complete matrix for every 1.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-dynamic-programming-accepted\">Approach #2 (Dynamic Programming) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We will explain this approach with the help of an example.</p>\n<div class=\"codehilite\"><pre><span></span>0 1 1 1 0\n1 1 1 1 1\n0 1 1 1 1\n0 1 1 1 1\n0 0 1 1 1\n</pre></div>\n\n\n<p>We initialize another matrix (dp) with the same dimensions as the original one initialized with all 0’s.</p>\n<p>dp(i,j) represents the side length of the maximum square whose bottom right corner is the cell with index (i,j) in the original matrix. </p>\n<p>Starting from index (0,0), for every 1 found in the original matrix, we update the value of the current element as </p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\text{dp}(i,\\  j) = \\min \\big( \\text{dp}(i-1,\\  j),\\  \\text{dp}(i-1,\\  j-1),\\  \\text{dp}(i,\\  j-1) \\big) + 1.\n</script>\n</p>\n<p>We also remember the size of the largest square found so far. In this way, we traverse the original matrix once and find out the required maximum size. This gives the side length of the square (say <script type=\"math/tex; mode=display\">maxsqlen</script>). The required result is the area <script type=\"math/tex; mode=display\">maxsqlen^2</script>.</p>\n<p>To understand how this solution works, see the figure below.</p>\n<p><img alt=\"Max Square\" src=\"https://leetcode.com/media/original_images/221_Maximal_Square.PNG?raw=true\" /></p>\n<p>An entry 2 at <script type=\"math/tex; mode=display\">(1, 3)</script> implies that we have a square of side 2 up to that index in the original matrix. Similarly, a 2 at <script type=\"math/tex; mode=display\">(1, 2)</script> and <script type=\"math/tex; mode=display\">(2, 2)</script> implies that a square of side 2 exists up to that index in the original matrix. Now to make a square of side 3, only a single entry of 1 is pending at <script type=\"math/tex; mode=display\">(2, 3)</script>. So, we enter a 3 corresponding to that position in the dp array.</p>\n<p>Now consider the case for the index <script type=\"math/tex; mode=display\">(3, 4)</script>. Here, the entries at index <script type=\"math/tex; mode=display\">(3, 3)</script> and <script type=\"math/tex; mode=display\">(2, 3)</script> imply that a square of side 3 is possible up to their indices. But, the entry 1 at index <script type=\"math/tex; mode=display\">(2, 4)</script> indicates that a square of side 1 only can be formed up to its index. Therefore, while making an entry at the index <script type=\"math/tex; mode=display\">(3, 4)</script>, this element obstructs the formation of a square having a side larger than 2. Thus, the maximum sized square that can be formed up to this index is of size <script type=\"math/tex; mode=display\">2\\times2</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximalSquare</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">rows</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">rows</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">cols</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxsqlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">rows</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">cols</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">){</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]),</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                    <span class=\"n\">maxsqlen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxsqlen</span><span class=\"o\">,</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxsqlen</span> <span class=\"o\">*</span> <span class=\"n\">maxsqlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(mn)</script>. Single pass.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(mn)</script>. Another matrix of same size is used for dp.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-better-dynamic-programming-accepted\">Approach #3 (Better Dynamic Programming) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the previous approach for calculating dp of <script type=\"math/tex; mode=display\">i^{th}</script> row we are using only the previous element and the <script type=\"math/tex; mode=display\">(i-1)^{th}</script> row. Therefore, we don\'t need 2D dp matrix as 1D dp array will be sufficient for this.</p>\n<p>Initially the dp array contains all 0\'s. As we scan the elements of the original matrix across a row, we keep on updating the dp array as per the equation <script type=\"math/tex; mode=display\">dp[j]=min(dp[j-1],dp[j],prev)</script>, where prev refers to the old <script type=\"math/tex; mode=display\">dp[j-1]</script>. For every row, we repeat the same process and update in the same dp array.</p>\n<p><img alt=\" Max Square \" src=\"https://leetcode.com/media/original_images/221_Maximal_Square1.png?raw=true\" /></p>\n<p><strong>java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximalSquare</span><span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">rows</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">cols</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxsqlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">rows</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">cols</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">prev</span><span class=\"o\">),</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                    <span class=\"n\">maxsqlen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxsqlen</span><span class=\"o\">,</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxsqlen</span> <span class=\"o\">*</span> <span class=\"n\">maxsqlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(mn)</script>. Single pass.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Another array which stores elements in a row is used for dp.</p>\n</li>\n</ul>\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(293,'Trapping Rain Water II',3,'Breadth-first Search,Heap',0,0,'<p></p><p>Given an <code>m x n</code> matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.\n</p><p><b>Note:</b><br/>\nBoth <i>m</i> and <i>n</i> are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.\n</p><p><b>Example:</b>\n</p><pre>\nGiven the following 3x6 height map:\n[\n  [1,4,3,1,3,2],\n  [3,2,1,3,2,4],\n  [2,3,3,2,3,1]\n]\n\nReturn 4.\n</pre><p>\n<img src=\"https://leetcode.com/static/images/problemset/rainwater_empty.png\"/><br/>\nThe above image represents the elevation map <code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> before the rain.\n</p><p>\n<img src=\"https://leetcode.com/static/images/problemset/rainwater_fill.png\"/><br/>\nAfter the rain, water are trapped between the blocks. The total volume of water trapped is 4.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int trapRainWater(vector<vector<int>>& heightMap) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int trapRainWater(int[][] heightMap) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def trapRainWater(self, heightMap):\r\n        """\r\n        :type heightMap: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int trapRainWater(int** heightMap, int heightMapRowSize, int heightMapColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int TrapRainWater(int[,] heightMap) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} heightMap\r\n * @return {number}\r\n */\r\nvar trapRainWater = function(heightMap) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} height_map\r\n# @return {Integer}\r\ndef trap_rain_water(height_map)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func trapRainWater(_ heightMap: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func trapRainWater(heightMap [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def trapRainWater(heightMap: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(294,'Longest Increasing Subsequence',2,'Dynamic Programming,Binary Search',0,0,'<p></p><p>\nGiven an unsorted array of integers, find the length of longest increasing subsequence.\n</p><p>\nFor example,<br/>\nGiven <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,<br/>\nThe longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is <code>4</code>. Note that there may be more than one LIS combination, it is only necessary for you to return the length.\n</p><p>\nYour algorithm should run in O(<i>n<sup>2</sup></i>) complexity.\n</p><p><b>Follow up:</b> Could you improve it to O(<i>n</i> log <i>n</i>) time complexity? </p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/pbrother\">@pbrother</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int lengthOfLIS(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def lengthOfLIS(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int lengthOfLIS(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LengthOfLIS(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar lengthOfLIS = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef length_of_lis(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func lengthOfLIS(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthOfLIS(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def lengthOfLIS(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-recursion-with-memorization-memory-limit-exceeded\">Approach #2 Recursion with memorization [Memory Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-4-dynamic-programming-with-binary-searchaccepted\">Approach #4 Dynamic Programming with Binary Search[Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The simplest approach is to try to find all increasing subsequences and then returning the maximum length of longest increasing subsequence. In order to\ndo this, we make use of a recursive function <script type=\"math/tex; mode=display\">lengthofLIS</script> which returns the length of the LIS possible from the current element(corresponding to <script type=\"math/tex; mode=display\">curpos</script>)\n onwards(including the current element). Inside each function call, we consider two cases:</p>\n<ol>\n<li>\n<p>The current element is larger than the previous element included in the LIS. In this case, we can include the current element in the LIS. Thus, we find out the\nlength of the LIS obtained by including it. Further, we also find out the length of LIS possible by not including the current element in the LIS. The value returned\nby the current function call is, thus, the maximum out of the two lengths.</p>\n</li>\n<li>\n<p>The current element is smaller than the previous element included in the LIS. In this case, we can\'t include the current element in the LIS. Thus, we find out only\nthe length of the LIS possible by not including the current element in the LIS, which is returned by the current function call.</p>\n</li>\n</ol>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lengthofLIS</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthofLIS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">prev</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">curpos</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">curpos</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">taken</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">curpos</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">prev</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">taken</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">lengthofLIS</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">curpos</span><span class=\"o\">],</span> <span class=\"n\">curpos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">nottaken</span> <span class=\"o\">=</span> <span class=\"n\">lengthofLIS</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">prev</span><span class=\"o\">,</span> <span class=\"n\">curpos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">taken</span><span class=\"o\">,</span> <span class=\"n\">nottaken</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. Size of recursion tree will be <script type=\"math/tex; mode=display\">2^n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n * n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursion-with-memorization-memory-limit-exceeded\">Approach #2 Recursion with memorization [Memory Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the previous approach, many recursive calls had to made again and again with the same parameters. This redundancy can be eliminated by storing the results obtained for\na particular call in a 2-d memorization array <script type=\"math/tex; mode=display\">memo</script>. <script type=\"math/tex; mode=display\">memo[i][j]</script> represents the length of the LIS possible using <script type=\"math/tex; mode=display\">nums[i]</script> as the previous element considered to\nbe included/not included in the LIS, with <script type=\"math/tex; mode=display\">nums[j]</script> as the current element considered to be included/not included in the LIS. Here, <script type=\"math/tex; mode=display\">nums</script> represents the given array.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">memo</span><span class=\"o\">[][]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">lengthofLIS</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthofLIS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">previndex</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">curpos</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">curpos</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">previndex</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">curpos</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">previndex</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">curpos</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">taken</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">previndex</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">curpos</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">previndex</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"n\">taken</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">lengthofLIS</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">curpos</span><span class=\"o\">,</span> <span class=\"n\">curpos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">nottaken</span> <span class=\"o\">=</span> <span class=\"n\">lengthofLIS</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">previndex</span><span class=\"o\">,</span> <span class=\"n\">curpos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">previndex</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">curpos</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">taken</span><span class=\"o\">,</span> <span class=\"n\">nottaken</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">previndex</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">curpos</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Size of recursion tree can go upto <script type=\"math/tex; mode=display\">n^2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. <script type=\"math/tex; mode=display\">memo</script> array of <script type=\"math/tex; mode=display\">n*n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This method relies on the fact that the longest increasing subsequence possible upto the <script type=\"math/tex; mode=display\">i^{th}</script>  index in a given array is independent of the elements coming\nlater on in the array. Thus, if we know the length of the LIS upto <script type=\"math/tex; mode=display\">i^{th}</script> index, we can figure out the length of the LIS possible by including the <script type=\"math/tex; mode=display\">(i+1)^{th}</script> element\nbased on the elements with indices <script type=\"math/tex; mode=display\">j</script> such that <script type=\"math/tex; mode=display\">0 \\leq j \\leq (i + 1)</script>.</p>\n<p>We make use of a <script type=\"math/tex; mode=display\">dp</script> array to store the required data. <script type=\"math/tex; mode=display\">dp[i]</script> represents the length of the longest increasing subsequence possible considering the array elements upto the <script type=\"math/tex; mode=display\">i^{th}</script>\nindex only ,by necessarily including the <script type=\"math/tex; mode=display\">i^{th}</script> element. In order to find out <script type=\"math/tex; mode=display\">dp[i]</script>, we need to try to append the current element(<script type=\"math/tex; mode=display\">nums[i]</script>) in every possible increasing subsequences upto the <script type=\"math/tex; mode=display\">(i-1)^{th}</script>\nindex(including the <script type=\"math/tex; mode=display\">(i-1)^{th}</script> index), such that the new sequence formed by adding the current element is also an increasing subsequence. Thus, we can easily determine\n<script type=\"math/tex; mode=display\">dp[i]</script> using:  </p>\n<p>\n<script type=\"math/tex; mode=display\">dp[i] = \\text{max}(dp[j]) + 1, \\forall 0\\leq j < i</script>\n</p>\n<p>At the end, the maximum out of all the <script type=\"math/tex; mode=display\">dp[i]</script>\'s to determine the final result.</p>\n<p>\n<script type=\"math/tex; mode=display\">LIS_{length}= \\text{max}(dp[i]), \\forall 0\\leq i < n</script>\n</p>\n<p>The following animation illustrates the method:</p>\n<!--![LIS](../Figures/300_LIS1.gif)-->\n\n<p>!?!../Documents/300_LIS.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">dp</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">maxval</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">maxval</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxval</span><span class=\"o\">,</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">maxval</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"n\">maxans</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxans</span><span class=\"o\">,</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Two loops of <script type=\"math/tex; mode=display\">n</script> are there.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-dynamic-programming-with-binary-searchaccepted\">Approach #4 Dynamic Programming with Binary Search[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we scan the array from left to right. We also make use of a <script type=\"math/tex; mode=display\">dp</script> array initialized with all 0\'s. This <script type=\"math/tex; mode=display\">dp</script> array is meant to store the\nincreasing subsequence formed by including the currently encountered element.\n While traversing the <script type=\"math/tex; mode=display\">nums</script> array, we keep on filling the <script type=\"math/tex; mode=display\">dp</script> array with\nthe elements encountered so far. For the element corresponding to the <script type=\"math/tex; mode=display\">j^{th}</script> index (<script type=\"math/tex; mode=display\">nums[j]</script>),\n we determine its correct position in the <script type=\"math/tex; mode=display\">dp</script> array(say <script type=\"math/tex; mode=display\">i^{th}</script> index) by making use of Binary Search(which can be used since the\n  <script type=\"math/tex; mode=display\">dp</script> array is storing increasing subsequence) and also insert it at the correct position. An important point to be noted is that for Binary Search, we consider\n  only that portion of the <script type=\"math/tex; mode=display\">dp</script> array in which we have made the updations by inserting some elements at their correct positions(which remains always sorted).\n  Thus, only the elements upto the <script type=\"math/tex; mode=display\">i^{th}</script> index\n  in the <script type=\"math/tex; mode=display\">dp</script> array can determine the position of the current element in it.\n  Since, the element enters its correct position(<script type=\"math/tex; mode=display\">i</script>) in an ascending order in the <script type=\"math/tex; mode=display\">dp</script> array, the\n  subsequence formed so far in it is surely an increasing subsequence. Whenever this position index <script type=\"math/tex; mode=display\">i</script> becomes equal to the length of the LIS formed so far(<script type=\"math/tex; mode=display\">len</script>),\n  it means, we need to update the <script type=\"math/tex; mode=display\">len</script> as <script type=\"math/tex; mode=display\">len = len + 1</script>.</p>\n<p>Note: <script type=\"math/tex; mode=display\">dp</script> array does not result in longest increasing subsequence, but length of <script type=\"math/tex; mode=display\">dp</script> array will give you length of LIS.</p>\n<p>Consider the example:</p>\n<p>input: [0, 8, 4, 12, 2]</p>\n<p>dp: [0]</p>\n<p>dp: [0, 8]</p>\n<p>dp: [0, 4]</p>\n<p>dp: [0, 4, 12]</p>\n<p>dp: [0 , 2, 12] which is not the longest increasing subsequence, but length of <script type=\"math/tex; mode=display\">dp</script> array results in length of Longest Increasing Subsequence.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lengthOfLIS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">binarySearch</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">len</span><span class=\"o\">,</span> <span class=\"n\">num</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">-(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">len</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Note: Arrays.binarySearch() method returns index of the search key, if it is contained in the array, else it returns (-(insertion point) - 1). The insertion point is the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlog(n))</script>. Binary search takes <script type=\"math/tex; mode=display\">log(n)</script> time and it is called <script type=\"math/tex; mode=display\">n</script> times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(295,'Integer to Roman',2,'Math,String',0,0,'<p></p><p>Given an integer, convert it to a roman numeral.\n</p><p>Input is guaranteed to be within the range from 1 to 3999.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string intToRoman(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def intToRoman(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* intToRoman(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string IntToRoman(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {string}\r\n */\r\nvar intToRoman = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {String}\r\ndef int_to_roman(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func intToRoman(_ num: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func intToRoman(num int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(296,'Integer Break',2,'Dynamic Programming,Math',0,0,'<p></p><p>\nGiven a positive integer <i>n</i>, break it into the sum of <b>at least</b> two positive integers and maximize the product of those integers. Return the maximum product you can get.\n</p><p>\nFor example, given <i>n</i> = 2, return 1 (2 = 1 + 1); given <i>n</i> = 10, return 36 (10 = 3 + 3 + 4).\n</p><p>\n<b>Note</b>: You may assume that <i>n</i> is not less than 2 and not larger than 58.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int integerBreak(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int integerBreak(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def integerBreak(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int integerBreak(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int IntegerBreak(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar integerBreak = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef integer_break(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func integerBreak(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func integerBreak(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def integerBreak(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(297,'Reverse Linked List II',2,'Linked List',0,0,'<p></p><p>\nReverse a linked list from position <i>m</i> to <i>n</i>. Do it in-place and in one-pass.\n</p><p>\nFor example:<br/>\nGiven <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>, <i>m</i> = 2 and <i>n</i> = 4,\n</p><p>\nreturn <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</code>.\n</p><p>\n<b>Note:</b><br/>\nGiven <i>m</i>, <i>n</i> satisfy the following condition:<br/>\n1 ? <i>m</i> ? <i>n</i> ? length of list.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* reverseBetween(ListNode* head, int m, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def reverseBetween(self, head, m, n):\r\n        """\r\n        :type head: ListNode\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def reverseBetween(self, head, m, n):\r\n        """\r\n        :type head: ListNode\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* reverseBetween(struct ListNode* head, int m, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode ReverseBetween(ListNode head, int m, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {ListNode}\r\n */\r\nvar reverseBetween = function(head, m, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {ListNode}\r\ndef reverse_between(head, m, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func reverseBetween(_ head: ListNode?, _ m: Int, _ n: Int) -> ListNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc reverseBetween(head *ListNode, m int, n int) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseBetween(head: ListNode, m: Int, n: Int): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(298,'Array Partition I',1,'Array',0,0,'<p></p><p>\nGiven an array of <b>2n</b> integers, your task is to group these integers into <b>n</b> pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,4,3,2]\n\n<b>Output:</b> 4\n<b>Explanation:</b> n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li><b>n</b> is a positive integer, which is in the range of [1, 10000].</li>\n<li>All the integers in the array will be in the range of [-10000, 10000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int arrayPairSum(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int arrayPairSum(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def arrayPairSum(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int arrayPairSum(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ArrayPairSum(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar arrayPairSum = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef array_pair_sum(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func arrayPairSum(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func arrayPairSum(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def arrayPairSum(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(299,'Find Peak Element',2,'Binary Search,Array',0,0,'<p></p><p>A peak element is an element that is greater than its neighbors.</p><p>Given an input array where <code>num[i] ≠ num[i+1]</code>, find a peak element and return its index.</p><p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p><p>You may imagine that <code>num[-1] = num[n] = -∞</code>.</p><p>For example, in array <code>[1, 2, 3, 1]</code>, 3 is a peak element and your function should return the index number 2.</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show spoilers.</a></p><div class=\"spoilers\"><b>Note:</b>\n<p>Your solution should be in logarithmic complexity.</p>\n</div><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findPeakElement(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findPeakElement(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findPeakElement(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findPeakElement(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindPeakElement(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findPeakElement = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_peak_element(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findPeakElement(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findPeakElement(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findPeakElement(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-linear-scan-accepted\">Approach #1 Linear Scan [Accepted]</a></li>\n<li><a href=\"#approach-2-recursive-binary-search-accepted\">Approach #2 Recursive Binary Search [Accepted]</a></li>\n<li><a href=\"#approach-3-iterative-binary-search-accepted\">Approach #3 Iterative Binary Search [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-linear-scan-accepted\">Approach #1 Linear Scan [Accepted]</h4>\n<p>In this approach, we make use of the fact that two consecutive numbers <script type=\"math/tex; mode=display\">nums[j]</script> and <script type=\"math/tex; mode=display\">nums[j + 1]</script> are never equal. Thus, we can traverse over the <script type=\"math/tex; mode=display\">nums</script> array starting from the beginning. Whenever, we find a number <script type=\"math/tex; mode=display\">nums[i]</script>, we only need to check if it is larger than the next number <script type=\"math/tex; mode=display\">nums[i+1]</script> for determining if <script type=\"math/tex; mode=display\">nums[i]</script> is the peak element. The reasoning behind this can be understood by taking the following three cases which cover every case into which any problem can be divided.</p>\n<p>Case 1: All the numbers appear in a descending order. In this case, the first element corresponds to the peak element. We start off by checking if the current element is larger than the next one. The first element satisfies this criteria, and is hence identified as the peak correctly. In this case, we didn\'t reach a point where we needed to compare <script type=\"math/tex; mode=display\">nums[i]</script> with <script type=\"math/tex; mode=display\">nums[i-1]</script> also, to determine if it is the peak element or not.</p>\n<p align=\"center\"><img alt=\"Graph\" src=\"../Figures/162/Find_Peak_Case1.PNG\" /></p>\n<p>Case 2: All the elements appear in ascending order. In this case, we keep on comparing <script type=\"math/tex; mode=display\">nums[i]</script> with <script type=\"math/tex; mode=display\">nums[i+1]</script> to determine if <script type=\"math/tex; mode=display\">nums[i]</script> is the peak element or not. None of the elements satisfy this criteria, indicating that we are currently on a rising slope and not on a peak. Thus, at the end, we need to return the last element as the peak element, which turns out to be correct. In this case also, we need not compare <script type=\"math/tex; mode=display\">nums[i]</script> with <script type=\"math/tex; mode=display\">nums[i-1]</script>, since being on the rising slope is a sufficient condition to ensure that <script type=\"math/tex; mode=display\">nums[i]</script> isn\'t the peak element.</p>\n<p align=\"center\"><img alt=\"Graph\" src=\"../Figures/162/Find_Peak_Case2.PNG\" /></p>\n<p>Case 3: The peak appears somewhere in the middle. In this case, when we are traversing on the rising edge, as in Case 2, none of the elements will satisfy <script type=\"math/tex; mode=display\">nums[i] > nums[i + 1]</script>. We need not compare <script type=\"math/tex; mode=display\">nums[i]</script> with <script type=\"math/tex; mode=display\">nums[i-1]</script> on the rising slope as discussed above. When we finally reach the peak element, the condition <script type=\"math/tex; mode=display\">nums[i] > nums[i + 1]</script> is satisfied. We again, need not compare <script type=\"math/tex; mode=display\">nums[i]</script> with <script type=\"math/tex; mode=display\">nums[i-1]</script>. This is because, we could reach <script type=\"math/tex; mode=display\">nums[i]</script> as the current element only when the check <script type=\"math/tex; mode=display\">nums[i] > nums[i + 1]</script> failed for the previous(<script type=\"math/tex; mode=display\">(i-1)^{th}</script> element, indicating that <script type=\"math/tex; mode=display\">nums[i-1] < nums[i]</script>. Thus, we are able to identify the peak element correctly in this case as well.</p>\n<p align=\"center\"><img alt=\"Graph\" src=\"../Figures/162/Find_Peak_Case3.PNG\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPeakElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> once only.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursive-binary-search-accepted\">Approach #2 Recursive Binary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can view any given sequence in <script type=\"math/tex; mode=display\">nums</script> array as alternating ascending and descending sequences. By making use of this, and the fact that we can return any peak as the result, we can make use of Binary Search to find the required peak element.</p>\n<p>In case of simple Binary Search, we work on a sorted sequence of numbers and try to find out the required number by reducing the search space at every step. In this case, we use a modification of this simple Binary Search to our advantage. We start off by finding the middle element, <script type=\"math/tex; mode=display\">mid</script> from the given <script type=\"math/tex; mode=display\">nums</script> array. If this element happens to be lying in a descending sequence of numbers. or a local falling slope(found by comparing <script type=\"math/tex; mode=display\">nums[i]</script> to its right neighbour), it means that the peak will always lie towards the left of this element. Thus, we reduce the search space to the left of <script type=\"math/tex; mode=display\">mid</script>(including itself) and perform the same process on left subarray.</p>\n<p>If the middle element, <script type=\"math/tex; mode=display\">mid</script> lies in an ascending sequence of numbers, or a rising slope(found by comparing <script type=\"math/tex; mode=display\">nums[i]</script> to its right neighbour), it obviously implies that the peak lies towards the right of this element. Thus, we reduce the search space to the right of <script type=\"math/tex; mode=display\">mid</script> and perform the same process on the right subarray.</p>\n<p>In this way, we keep on reducing the search space till we eventually reach a state where only one element is remaining in the search space. This single element is the peak element.</p>\n<p>To see how it works, let\'s consider the three cases discussed above again.</p>\n<p>Case 1. In this case, we firstly find <script type=\"math/tex; mode=display\">3</script> as the middle element. Since it lies on a falling slope, we reduce the search space to <code>[1, 2, 3]</code>. For this subarray, <script type=\"math/tex; mode=display\">2</script> happens to be the middle element, which again lies on a falling slope, reducing the search space to <code>[1, 2]</code>. Now, <script type=\"math/tex; mode=display\">1</script> acts as the middle element and it lies on a falling slope, reducing the search space to <code>[1]</code> only. Thus, <script type=\"math/tex; mode=display\">1</script> is returned as the peak correctly.</p>\n<p>!?!../Documents/Find_Peak_Case1.json:1000,563!?!</p>\n<p>Case 2. In this case, we firstly find <script type=\"math/tex; mode=display\">3</script> as the middle element. Since it lies on a rising slope, we reduce the search space to <code>[4, 5]</code>. Now, <script type=\"math/tex; mode=display\">4</script> acts as the middle element for this subarray and it lies on a rising slope, reducing the search space to <code>[5]</code> only. Thus, <script type=\"math/tex; mode=display\">5</script> is returned as the peak correctly.</p>\n<p>!?!../Documents/Find_Peak_Case2.json:1000,563!?!</p>\n<p>Case 3. In this case, the peak lies somewhere in the middle. The first middle element is <script type=\"math/tex; mode=display\">4</script>. It lies on a rising slope, indicating that the peak lies towards its right. Thus, the search space is reduced to <code>[5, 1]</code>. Now, <script type=\"math/tex; mode=display\">5</script> happens to be the on a falling slope(relative to its right neighbour), reducing the search space to <code>[5]</code> only. Thus, <script type=\"math/tex; mode=display\">5</script> is identified as the peak element correctly.</p>\n<p>!?!../Documents/Find_Peak_Case3.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPeakElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">search</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">mid</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">search</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(log_2(n)\\big)</script>. We reduce the search space in half at every step. Thus, the total search space will be consumed in <script type=\"math/tex; mode=display\">log_2(n)</script> steps. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O\\big(log_2(n)\\big)</script>. We reduce the search space in half at every step. Thus, the total search space will be consumed in <script type=\"math/tex; mode=display\">log_2(n)</script> steps. Thus, the depth of recursion tree will go upto <script type=\"math/tex; mode=display\">log_2(n)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-iterative-binary-search-accepted\">Approach #3 Iterative Binary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The binary search discussed in the previous approach used a recursive method. We can do the same process in an iterative fashion also. This is done in the current approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPeakElement</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(log_2(n)\\big)</script>. We reduce the search space in half at every step. Thus, the total search space will be consumed in <script type=\"math/tex; mode=display\">log_2(n)</script> steps. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(300,'Magical String',2,'',0,0,'<p></p><p>\nA magical string <b>S</b> consists of only \'1\' and \'2\' and obeys the following rules:\n</p><p>\nThe string <b>S</b> is magical because concatenating the number of contiguous occurrences of characters \'1\' and \'2\' generates the string <b>S</b> itself.\n</p><p>\nThe first few elements of string <b>S</b> is the following:\n<b>S</b> = \"1221121221221121122……\"\n</p><p>\nIf we group the consecutive \'1\'s and \'2\'s in <b>S</b>, it will be:\n</p><p>\n1   22  11  2  1  22  1  22  11  2  11  22 ......\n</p><p>\nand the occurrences of \'1\'s or \'2\'s in each group are:\n</p><p>\n1   2	   2    1   1    2     1    2     2    1    2    2 ......\n</p><p>\nYou can see that the occurrence sequence above is the <b>S</b> itself. \n</p><p>\nGiven an integer N as input, return the number of \'1\'s in the first N number in the magical string <b>S</b>.\n</p><p><b>Note:</b>\nN will not exceed 100,000.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 6\n<b>Output:</b> 3\n<b>Explanation:</b> The first 6 elements of magical string S is \"12211\" and it contains three 1\'s, so return 3.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int magicalString(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int magicalString(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def magicalString(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int magicalString(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MagicalString(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar magicalString = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef magical_string(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func magicalString(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func magicalString(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def magicalString(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(301,'Tenth Line',1,'',0,0,'<p></p><p>How would you print just the 10th line of a file?</p><p>For example, assume that <code>file.txt</code> has the following content:</p><pre>\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n</pre>\n\nYour script should output the tenth line, which is:\n<pre>\nLine 10\n</pre><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">[show hint]</a></p><div class=\"spoilers\"><b>Hint:</b><br/>\n1. If the file contains less than 10 lines, what should you output?<br/>\n2. There\'s at least three different solutions. Try to explore all possibilities.\n</div>','[{\"value\": \"bash\", \"text\": \"Bash\", \"defaultCode\": \"# Read from the file file.txt and output the tenth line to stdout.\r\n\" }]',NULL,NULL,1,'none','none','none'),(302,'Queue Reconstruction by Height',2,'Greedy',0,0,'<p></p><p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers <code>(h, k)</code>, where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.\n</p><p><b>Note:</b><br/>\nThe number of people is less than 1,100.\n</p><p><b>Example</b>\n</p><pre>\nInput:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\nOutput:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reconstructQueue(self, people):\r\n        """\r\n        :type people: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** reconstructQueue(int** people, int peopleRowSize, int peopleColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[,] ReconstructQueue(int[,] people) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} people\r\n * @return {number[][]}\r\n */\r\nvar reconstructQueue = function(people) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} people\r\n# @return {Integer[][]}\r\ndef reconstruct_queue(people)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func reconstructQueue(_ people: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reconstructQueue(people [][]int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(303,'Insert Interval',3,'Array,Sort',0,0,'<p></p><p>Given a set of <i>non-overlapping</i> intervals, insert a new interval into the intervals (merge if necessary).</p><p>You may assume that the intervals were initially sorted according to their start times.</p><p>\n<b>Example 1:</b><br/>\nGiven intervals <code>[1,3],[6,9]</code>, insert and merge <code>[2,5]</code> in as <code>[1,5],[6,9]</code>.\n</p><p>\n<b>Example 2:</b><br/>\nGiven <code>[1,2],[3,5],[6,7],[8,10],[12,16]</code>, insert and merge <code>[4,9]</code> in as <code>[1,2],[3,10],[12,16]</code>.\n</p><p>\nThis is because the new interval <code>[4,9]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution(object):\r\n    def insert(self, intervals, newInterval):\r\n        """\r\n        :type intervals: List[Interval]\r\n        :type newInterval: Interval\r\n        :rtype: List[Interval]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct Interval* insert(struct Interval* intervals, int intervalsSize, struct Interval newInterval, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     public int start;\r\n *     public int end;\r\n *     public Interval() { start = 0; end = 0; }\r\n *     public Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<Interval> Insert(IList<Interval> intervals, Interval newInterval) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * function Interval(start, end) {\r\n *     this.start = start;\r\n *     this.end = end;\r\n * }\r\n */\r\n/**\r\n * @param {Interval[]} intervals\r\n * @param {Interval} newInterval\r\n * @return {Interval[]}\r\n */\r\nvar insert = function(intervals, newInterval) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval\r\n#     attr_accessor :start, :end\r\n#     def initialize(s=0, e=0)\r\n#         @start = s\r\n#         @end = e\r\n#     end\r\n# end\r\n\r\n# @param {Interval[]} intervals\r\n# @param {Interval} new_interval\r\n# @return {Interval[]}\r\ndef insert(intervals, new_interval)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *   public var start: Int\r\n *   public var end: Int\r\n *   public init(_ start: Int, _ end: Int) {\r\n *     self.start = start\r\n *     self.end = end\r\n *   }\r\n * }\r\n */\r\nclass Solution {\r\n    func insert(_ intervals: [Interval], _ newInterval: Interval) -> [Interval] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\nfunc insert(intervals []Interval, newInterval Interval) []Interval {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for an interval.\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\n *   var start: Int = _start\n *   var end: Int = _end\n * }\n */\nobject Solution {\n    def insert(intervals: List[Interval], newInterval: Interval): List[Interval] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(304,'Contains Duplicate III',2,'Binary Search Tree',0,0,'<p></p><p>\nGiven an array of integers, find out whether there are two distinct indices <i>i</i> and <i>j</i> in the array such that the <b>absolute</b> difference between <b>nums[i]</b> and <b>nums[j]</b> is at most <i>t</i> and the <b>absolute</b> difference between <i>i</i> and <i>j</i> is at most <i>k</i>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def containsNearbyAlmostDuplicate(self, nums, k, t):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :type t: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool containsNearbyAlmostDuplicate(int* nums, int numsSize, int k, int t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool ContainsNearbyAlmostDuplicate(int[] nums, int k, int t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @param {number} t\r\n * @return {boolean}\r\n */\r\nvar containsNearbyAlmostDuplicate = function(nums, k, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @param {Integer} t\r\n# @return {Boolean}\r\ndef contains_nearby_almost_duplicate(nums, k, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func containsNearbyAlmostDuplicate(_ nums: [Int], _ k: Int, _ t: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func containsNearbyAlmostDuplicate(nums []int, k int, t int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def containsNearbyAlmostDuplicate(nums: Array[Int], k: Int, t: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(305,'Container With Most Water',2,'Array,Two Pointers',0,0,'<p></p><p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n</p><p>Note: You may not slant the container and <i>n</i> is at least 2.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxArea(vector<int>& height) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxArea(self, height):\r\n        """\r\n        :type height: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxArea(int* height, int heightSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxArea(int[] height) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} height\r\n * @return {number}\r\n */\r\nvar maxArea = function(height) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} height\r\n# @return {Integer}\r\ndef max_area(height)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxArea(_ height: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxArea(height []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-two-pointer-approach-accepted\">Approach #2 (Two Pointer Approach) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We have to maximize the Area that can be formed between the vertical lines using the shorter line as length and the distance between the lines as the width of the rectangle forming the area.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this case, we will simply consider the area for every possible pair of the lines and find out the maximum area out of those. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxArea</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxarea</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span>\n                <span class=\"n\">maxarea</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxarea</span><span class=\"o\">,</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">height</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxarea</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Calculating area for all <script type=\"math/tex; mode=display\">\\frac{n(n-1)}{2}</script> height pairs.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-two-pointer-approach-accepted\">Approach #2 (Two Pointer Approach) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the farther the lines, the more will be the area obtained.</p>\n<p>We take two pointers, one at the beginning and one at the end of the array constituting the length of the lines. Futher, we maintain a variable <script type=\"math/tex; mode=display\">maxarea</script> to store the maximum area obtained till now. At every step, we find out the area formed between them, update <script type=\"math/tex; mode=display\">maxarea</script> and move the pointer pointing to the shorter line towards the other end by one step.</p>\n<p>The algorithm can be better understood by looking at the example below:</p>\n<div class=\"codehilite\"><pre><span></span>1 8 6 2 5 4 8 3 7\n</pre></div>\n\n\n<!--![Water_Continer](https://leetcode.com/media/original_images/11_Container_Water.gif)-->\n\n<p>!?!../Documents/11_Container_Water.json:1000,563!?!</p>\n<p>How this approach works?</p>\n<p>Initially we consider the area constituting the exterior most lines. Now, to maximize the area, we need to consider the area between the lines of larger lengths. If we try to move the pointer at the longer line inwards, we won\'t gain any increase in area, since it is limited by the shorter line. But moving the shorter line\'s pointer could turn out to be beneficial, as per the same argument, despite the reduction in the width. This is done since a relatively longer line obtained by moving the shorter line\'s pointer might overcome the reduction in area caused by the width reduction.</p>\n<p>For further clarification click <a href=\"https://discuss.leetcode.com/topic/3462/yet-another-way-to-see-what-happens-in-the-o-n-algorithm\">here</a> and for the proof click <a href=\"https://discuss.leetcode.com/topic/503/anyone-who-has-a-o-n-algorithm/2\">here</a>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maxArea</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">height</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxarea</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">maxarea</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxarea</span><span class=\"o\">,</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">],</span> <span class=\"n\">height</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span><span class=\"o\">));</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">height</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span>\n                <span class=\"n\">l</span><span class=\"o\">++;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">r</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxarea</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single pass.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(306,'Bulls and Cows',2,'Hash Table',0,0,'<p></p><p>You are playing the following <a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\">Bulls and Cows</a> game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \"bulls\") and how many digits match the secret number but locate in the wrong position (called \"cows\"). Your friend will use successive guesses and hints to eventually derive the secret number.</p><p>\nFor example:\n</p><pre>\nSecret number:  \"1807\"\nFriend\'s guess: \"7810\"\n</pre>\nHint: <code>1</code> bull and <code>3</code> cows. (The bull is <code>8</code>, the cows are <code>0</code>, <code>1</code> and <code>7</code>.)\n\n\n<p>Write a function to return a hint according to the secret number and friend\'s guess, use <code>A</code> to indicate the bulls and <code>B</code> to indicate the cows. In the above example, your function should return <code>\"1A3B\"</code>. </p><p>Please note that both secret number and friend\'s guess may contain duplicate digits, for example:\n</p><pre>\nSecret number:  \"1123\"\nFriend\'s guess: \"0111\"\n</pre>\nIn this case, the 1st <code>1</code> in friend\'s guess is a bull, the 2nd or 3rd <code>1</code> is a cow, and your function should return <code>\"1A1B\"</code>.\n\n\n<p>You may assume that the secret number and your friend\'s guess only contain digits, and their lengths are always equal.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jeantimex\">@jeantimex</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string getHint(string secret, string guess) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String getHint(String secret, String guess) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def getHint(self, secret, guess):\r\n        """\r\n        :type secret: str\r\n        :type guess: str\r\n        :rtype: str\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* getHint(char* secret, char* guess) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string GetHint(string secret, string guess) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} secret\r\n * @param {string} guess\r\n * @return {string}\r\n */\r\nvar getHint = function(secret, guess) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} secret\r\n# @param {String} guess\r\n# @return {String}\r\ndef get_hint(secret, guess)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func getHint(_ secret: String, _ guess: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getHint(secret string, guess string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getHint(secret: String, guess: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(307,'H-Index',2,'Hash Table,Sort',0,0,'<p></p><p>\nGiven an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher\'s h-index.\n</p><p>\nAccording to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: \"A scientist has index <i>h</i> if <i>h</i> of his/her <i>N</i> papers have <b>at least</b> <i>h</i> citations each, and the other <i>N − h</i> papers have <b>no more than</b> <i>h</i> citations each.\"\n</p><p>\nFor example, given <code>citations = [3, 0, 6, 1, 5]</code>, which means the researcher has <code>5</code> papers in total and each of them had received <code>3, 0, 6, 1, 5</code> citations respectively. Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining two with <b>no more than</b> <code>3</code> citations each, his h-index is <code>3</code>.\n</p><p>\n<b>Note</b>: If there are several possible values for <code>h</code>, the maximum one is taken as the h-index.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int hIndex(vector<int>& citations) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int hIndex(int[] citations) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def hIndex(self, citations):\r\n        """\r\n        :type citations: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int hIndex(int* citations, int citationsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int HIndex(int[] citations) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} citations\r\n * @return {number}\r\n */\r\nvar hIndex = function(citations) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} citations\r\n# @return {Integer}\r\ndef h_index(citations)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func hIndex(_ citations: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func hIndex(citations []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(308,'Power of Four',1,'Bit Manipulation',0,0,'<p></p><p>\nGiven an integer (signed 32 bits), write a function to check whether it is a power of 4.\n</p><p><b>Example:</b><br/>\nGiven num = 16, return true.\nGiven num = 5, return false.\n</p><p>\n<b>Follow up</b>: Could you solve it without loops/recursion?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/yukuairoy\">@yukuairoy </a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isPowerOfFour(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPowerOfFour(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isPowerOfFour(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPowerOfFour(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsPowerOfFour(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {boolean}\r\n */\r\nvar isPowerOfFour = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Boolean}\r\ndef is_power_of_four(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isPowerOfFour(_ num: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPowerOfFour(num int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPowerOfFour(num: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(309,'Decode Ways',2,'Dynamic Programming,String',0,0,'<p></p><p>\nA message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:\n</p><pre>\n\'A\' -&gt; 1\n\'B\' -&gt; 2\n...\n\'Z\' -&gt; 26\n</pre><p>\nGiven an encoded message containing digits, determine the total number of ways to decode it.\n</p><p>\nFor example,<br/>\nGiven encoded message <code>\"12\"</code>,\nit could be decoded as <code>\"AB\"</code> (1 2) or <code>\"L\"</code> (12).\n</p><p>\nThe number of ways decoding <code>\"12\"</code> is 2.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numDecodings(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numDecodings(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numDecodings(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumDecodings(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar numDecodings = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef num_decodings(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numDecodings(s string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(310,'Linked List Random Node',2,'Reservoir Sampling',0,0,'<p></p><p>Given a singly linked list, return a random node\'s value from the linked list. Each node must have the <b>same probability</b> of being chosen.</p><p><b>Follow up:</b><br/>\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n</p><p><b>Example:</b>\n</p><pre>\n// Init a singly linked list [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\nsolution.getRandom();\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    /** @param head The linked list\'s head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\n    Solution(ListNode* head) {\r\n        \r\n    }\r\n    \r\n    /** Returns a random node\'s value. */\r\n    int getRandom() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(head);\r\n * int param_1 = obj.getRandom();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n\n    /** @param head The linked list\'s head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    public Solution(ListNode head) {\n        \n    }\n    \n    /** Returns a random node\'s value. */\n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(head);\n * int param_1 = obj.getRandom();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n\r\n    def __init__(self, head):\r\n        """\r\n        @param head The linked list\'s head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n        :type head: ListNode\r\n        """\r\n        \r\n\r\n    def getRandom(self):\r\n        """\r\n        Returns a random node\'s value.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(head)\r\n# param_1 = obj.getRandom()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\ntypedef struct {\n    \n} Solution;\n\n/** @param head The linked list\'s head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\nSolution* solutionCreate(struct ListNode* head) {\n    \n}\n\n/** Returns a random node\'s value. */\nint solutionGetRandom(Solution* obj) {\n    \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * struct Solution* obj = solutionCreate(head);\n * int param_1 = solutionGetRandom(obj);\n * solutionFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n\r\n    /** @param head The linked list\'s head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\n    public Solution(ListNode head) {\r\n        \r\n    }\r\n    \r\n    /** Returns a random node\'s value. */\r\n    public int GetRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(head);\r\n * int param_1 = obj.GetRandom();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param head The linked list\'s head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n * @param {ListNode} head\r\n */\r\nvar Solution = function(head) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns a random node\'s value.\r\n * @return {number}\r\n */\r\nSolution.prototype.getRandom = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(head)\r\n * var param_1 = obj.getRandom()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\nclass Solution\r\n\r\n=begin\r\n    @param head The linked list\'s head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n    :type head: ListNode\r\n=end\r\n    def initialize(head)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns a random node\'s value.\r\n    :rtype: Integer\r\n=end\r\n    def get_random()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(head)\r\n# param_1 = obj.get_random()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\ntype Solution struct {\r\n    \r\n}\r\n\r\n\r\n/** @param head The linked list\'s head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\nfunc Constructor(head *ListNode) Solution {\r\n    \r\n}\r\n\r\n\r\n/** Returns a random node\'s value. */\r\nfunc (this *Solution) GetRandom() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(head);\r\n * param_1 := obj.GetRandom();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\n\n    /** @param head The linked list\'s head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */class Solution(var _head: ListNode) {\n    \n    /** Returns a random node\'s value. */\n    def getRandom() : Int = {\n\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head);\n * Int param_1 = obj.getRandom();\n */\" }]',NULL,NULL,1,'none','none','none'),(311,'Subarray Sum Equals K',2,'Array,Map',0,0,'<p></p><p>Given an array of integers and an integer <b>k</b>, you need to find the total number of continuous subarrays whose sum equals to <b>k</b>.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>nums = [1,1,1], k = 2\n<b>Output:</b> 2\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the array is in range [1, 20,000].</li>\n<li>The range of numbers in the array is [-1000, 1000] and the range of the integer <b>k</b> is [-1e7, 1e7].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int subarraySum(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def subarraySum(self, nums, k):\n        """\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int subarraySum(int* nums, int numsSize, int k) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int SubarraySum(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_sum(nums, k)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func subarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func subarraySum(nums []int, k int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def subarraySum(nums: Array[Int], k: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-cummulative-sum-accepted\">Approach #2 Using Cummulative sum [Accepted]</a></li>\n<li><a href=\"#approach-3-without-space-accepted\">Approach #3 Without space [Accepted]</a></li>\n<li><a href=\"#approach-4-using-hashmap-accepted\">Approach #4 Using hashmap [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The simplest method is to consider every possible subarray of the given <script type=\"math/tex; mode=display\">nums</script> array, find the sum of the elements of each of those subarrays and check for the equality of the sum obtained with the given <script type=\"math/tex; mode=display\">k</script>. Whenver the sum equals <script type=\"math/tex; mode=display\">k</script>, we can increment the <script type=\"math/tex; mode=display\">count</script> used to store the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">subarraySum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">start</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">end</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">end</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n                    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. Considering every possible subarray takes <script type=\"math/tex; mode=display\">O(n^2)</script> time. For each of the subarray we calculate the sum taking <script type=\"math/tex; mode=display\">O(n)</script> time in the worst case, taking a total of <script type=\"math/tex; mode=display\">O(n^3)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-cummulative-sum-accepted\">Approach #2 Using Cummulative sum [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of determining the sum of elements everytime for every new subarray considered, we can make use of a cumulative sum array , <script type=\"math/tex; mode=display\">sum</script>. Then, in order to calculate the sum of elements lying between two indices, we can subtract the cumulative sum corresponding to the two indices to obtain the sum directly, instead of iterating over the subarray to obtain the sum.</p>\n<p>In this implementation, we make use of a cumulative sum array, <script type=\"math/tex; mode=display\">sum</script>, such that <script type=\"math/tex; mode=display\">sum[i]</script> is used to store the cumulative sum of <script type=\"math/tex; mode=display\">nums</script> array upto the element corresponding to the <script type=\"math/tex; mode=display\">(i-1)^{th}</script> index. Thus, to determine the sum of elements for the subarray <script type=\"math/tex; mode=display\">nums[i:j]</script>, we can directly use <script type=\"math/tex; mode=display\">sum[j+1] - sum[i]</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">subarraySum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">start</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">end</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">end</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">end</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Considering every possible subarray takes <script type=\"math/tex; mode=display\">O(n^2)</script> time. Finding out the sum of any subarray takes <script type=\"math/tex; mode=display\">O(1)</script> time after the initial processing of <script type=\"math/tex; mode=display\">O(n)</script> for creating the cumulative sum array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Cumulative sum array <script type=\"math/tex; mode=display\">sum</script> of size <script type=\"math/tex; mode=display\">n+1</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-without-space-accepted\">Approach #3 Without space [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of considering all the <script type=\"math/tex; mode=display\">start</script> and <script type=\"math/tex; mode=display\">end</script> points and then finding the sum for each subarray corresponding to those points, we can directly find the sum on the go while considering different <script type=\"math/tex; mode=display\">end</script> points. i.e. We can choose a particular <script type=\"math/tex; mode=display\">start</script> point and while iterating over the <script type=\"math/tex; mode=display\">end</script> points, we can add the element corresponding to the <script type=\"math/tex; mode=display\">end</script> point to the sum formed till now. Whenver the <script type=\"math/tex; mode=display\">sum</script> equals the required <script type=\"math/tex; mode=display\">k</script> value, we can update the <script type=\"math/tex; mode=display\">count</script> value. We do so while iterating over all the <script type=\"math/tex; mode=display\">end</script> indices possible for every <script type=\"math/tex; mode=display\">start</script> index. Whenver, we update the <script type=\"math/tex; mode=display\">start</script> index, we need to reset the <script type=\"math/tex; mode=display\">sum</script> value to 0.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">subarraySum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">start</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span> <span class=\"n\">end</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">end</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span><span class=\"o\">+=</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">end</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We need to consider every subarray possible.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-hashmap-accepted\">Approach #4 Using hashmap [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is as follows: If the cumulative sum(repreesnted by <script type=\"math/tex; mode=display\">sum[i]</script> for sum upto <script type=\"math/tex; mode=display\">i^{th}</script> index) upto two indices is the same, the sum of the elements lying in between those indices is zero. Extending the same thought further, if the cumulative sum upto two indices, say <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> is at a difference of <script type=\"math/tex; mode=display\">k</script> i.e. if <script type=\"math/tex; mode=display\">sum[i] - sum[j] = k</script>, the sum of elements lying between indices <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> is <script type=\"math/tex; mode=display\">k</script>.</p>\n<p>Based on these thoughts, we make use of a hashmap <script type=\"math/tex; mode=display\">map</script> which is used to store the cumulative sum upto all the indices possible along with the number of times the same sum occurs. We store the data in the form: <script type=\"math/tex; mode=display\">(sum_i, no. of occurences of sum_i)</script>. We traverse over the array <script type=\"math/tex; mode=display\">nums</script> and keep on finding the cumulative sum. Every time we encounter a new sum, we make a new entry in the hashmap corresponding to that sum. If the same sum occurs again, we increment the count corresponding to that sum in the hashmap. Further, for every sum encountered, we also determine the number of times the sum <script type=\"math/tex; mode=display\">sum-k</script> has occured already, since it will determine the number of times a subarray with sum <script type=\"math/tex; mode=display\">k</script> has occured upto the current index. We increment the <script type=\"math/tex; mode=display\">count</script> by the same amount. </p>\n<p>After the complete array has been traversed, the <script type=\"math/tex; mode=display\">count</script> gives the required result.</p>\n<p>The animation below depicts the process.</p>\n<p>!?!../Documents/560_Subarray.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">subarraySum</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n                <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"o\">);</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The entire <script type=\"math/tex; mode=display\">nums</script> array is traversed only once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Hashmap <script type=\"math/tex; mode=display\">map</script> can contain upto <script type=\"math/tex; mode=display\">n</script> distinct entries in the worst case.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(312,'Intersection of Two Linked Lists',1,'Linked List',0,0,'<p></p><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p><p>For example, the following two linked lists: </p><pre>\nA:          a1 → a2\n                   ↘\n                     c1 → c2 → c3\n                   ↗            \nB:     b1 → b2 → b3\n</pre><p>begin to intersect at node c1.</p><p><b>Notes:</b>\n</p><ul>\n<li>If the two linked lists have no intersection at all, return <code>null</code>.</li>\n<li>The linked lists must retain their original structure after the function returns. </li>\n<li>You may assume there are no cycles anywhere in the entire linked structure.</li>\n<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/stellari\">@stellari</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def getIntersectionNode(self, headA, headB):\r\n        """\r\n        :type head1, head1: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {ListNode} headA\r\n * @param {ListNode} headB\r\n * @return {ListNode}\r\n */\r\nvar getIntersectionNode = function(headA, headB) {\r\n    \r\n};\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-hash-table-accepted\">Approach #2 (Hash Table) [Accepted]</a></li>\n<li><a href=\"#approach-3-two-pointers-accepted\">Approach #3 (Two Pointers) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 (Brute Force) [Time Limit Exceeded]</h4>\n<p>For each node a<sub>i</sub> in list A, traverse the entire list B and check if any node in list B coincides with a<sub>i</sub>.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(mn)</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-hash-table-accepted\">Approach #2 (Hash Table) [Accepted]</h4>\n<p>Traverse list A and store the address / reference to each node in a hash set. Then check every node b<sub>i</sub> in list B: if b<sub>i</sub> appears in the hash set, then b<sub>i</sub> is the intersection node.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(m+n)</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script> or <script type=\"math/tex; mode=display\">O(n)</script>.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-two-pointers-accepted\">Approach #3 (Two Pointers) [Accepted]</h4>\n<ul>\n<li>Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time.</li>\n<li>When pA reaches the end of a list, then redirect it to the head of B (yes, B, that\'s right.); similarly when pB reaches the end of a list, redirect it the head of A.</li>\n<li>If at any point pA meets pB, then pA/pB is the intersection node.</li>\n<li>To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, which are intersected at node \'9\'. Since B.length (=4) &lt; A.length (=6), pB would reach the end of the merged list first, because pB traverses exactly 2 nodes less than pA does. By redirecting pB to head A, and pA to head B, we now ask pB to travel exactly 2 more nodes than pA would. So in the second iteration, they are guaranteed to reach the intersection node at the same time.</li>\n<li>If two lists have intersection, then their last nodes must be the same one. So when pA/pB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the two lists have no intersections.</li>\n</ul>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(m+n)</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</li>\n</ul>\n<p>Analysis written by @stellari.</p>',NULL,1,'none','none','none'),(313,'Reorder List',2,'Linked List',0,0,'<p></p><p>\nGiven a singly linked list <i>L</i>: <i>L</i><sub>0</sub>?<i>L</i><sub>1</sub>?…?<i>L</i><sub><i>n</i>-1</sub>?<i>L</i><sub>n</sub>,<br/>\nreorder it to: <i>L</i><sub>0</sub>?<i>L</i><sub><i>n</i></sub>?<i>L</i><sub>1</sub>?<i>L</i><sub><i>n</i>-1</sub>?<i>L</i><sub>2</sub>?<i>L</i><sub><i>n</i>-2</sub>?…\n</p><p>You must do this in-place without altering the nodes\' values.</p><p>\nFor example,<br/>\nGiven <code>{1,2,3,4}</code>, reorder it to <code>{1,4,2,3}</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void reorderList(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def reorderList(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: void Do not return anything, modify head in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nvoid reorderList(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void ReorderList(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {void} Do not return anything, modify head in-place instead.\r\n */\r\nvar reorderList = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {Void} Do not return anything, modify head in-place instead.\r\ndef reorder_list(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func reorderList(_ head: ListNode?) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc reorderList(head *ListNode)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reorderList(head: ListNode): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(314,'Transpose File',2,'',0,0,'<p></p><p>Given a text file <code>file.txt</code>, transpose its content.</p><p>You may assume that each row has the same number of columns and each field is separated by the <code>\' \'</code> character.</p><p>\nFor example, if <code>file.txt</code> has the following content:\n</p><pre>\nname age\nalice 21\nryan 30\n</pre><p>\nOutput the following:\n</p><pre>\nname alice ryan\nage 21 30\n</pre>','[{\"value\": \"bash\", \"text\": \"Bash\", \"defaultCode\": \"# Read from the file file.txt and print its transposed content to stdout.\r\n\" }]',NULL,NULL,1,'none','none','none'),(315,'Contains Duplicate II',1,'Array,Hash Table',0,0,'<p></p><p>\nGiven an array of integers and an integer <i>k</i>, find out whether there are two distinct indices <i>i</i> and <i>j</i> in the array such that <b>nums[i] = nums[j]</b> and the <b>absolute</b> difference between <i>i</i> and <i>j</i> is at most <i>k</i>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def containsNearbyDuplicate(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool containsNearbyDuplicate(int* nums, int numsSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {boolean}\r\n */\r\nvar containsNearbyDuplicate = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Boolean}\r\ndef contains_nearby_duplicate(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func containsNearbyDuplicate(nums []int, k int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(316,'Convert a Number to Hexadecimal',1,'Bit Manipulation',0,0,'<p></p><p>\nGiven an integer, write an algorithm to convert it to hexadecimal. For negative integer, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two’s complement</a> method is used.\n</p><p><b>Note:</b>\n</p><ol>\n<li>All letters in hexadecimal (<code>a-f</code>) must be in lowercase.</li>\n<li>The hexadecimal string must not contain extra leading <code>0</code>s. If the number is zero, it is represented by a single zero character <code>\'0\'</code>; otherwise, the first character in the hexadecimal string will not be the zero character.</li>\n<li>The given number is guaranteed to fit within the range of a 32-bit signed integer.</li>\n<li>You <b>must not use <i>any</i> method provided by the library</b> which converts/formats the number to hex directly.</li>\n</ol><p><b>Example 1:</b>\n</p><pre>\nInput:\n26\n\nOutput:\n\"1a\"\n</pre><p><b>Example 2:</b>\n</p><pre>\nInput:\n-1\n\nOutput:\n\"ffffffff\"\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string toHex(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String toHex(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def toHex(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* toHex(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ToHex(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {string}\r\n */\r\nvar toHex = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {String}\r\ndef to_hex(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func toHex(_ num: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func toHex(num int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def toHex(num: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(317,'Merge Intervals',2,'Array,Sort',0,0,'<p></p><p>Given a collection of intervals, merge all overlapping intervals.</p><p>\nFor example,<br/>\nGiven <code>[1,3],[2,6],[8,10],[15,18]</code>,<br/>\nreturn <code>[1,6],[8,10],[15,18]</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<Interval> merge(vector<Interval>& intervals) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public List<Interval> merge(List<Interval> intervals) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution(object):\r\n    def merge(self, intervals):\r\n        """\r\n        :type intervals: List[Interval]\r\n        :rtype: List[Interval]\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct Interval* merge(struct Interval* intervals, int intervalsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     public int start;\r\n *     public int end;\r\n *     public Interval() { start = 0; end = 0; }\r\n *     public Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<Interval> Merge(IList<Interval> intervals) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * function Interval(start, end) {\r\n *     this.start = start;\r\n *     this.end = end;\r\n * }\r\n */\r\n/**\r\n * @param {Interval[]} intervals\r\n * @return {Interval[]}\r\n */\r\nvar merge = function(intervals) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval\r\n#     attr_accessor :start, :end\r\n#     def initialize(s=0, e=0)\r\n#         @start = s\r\n#         @end = e\r\n#     end\r\n# end\r\n\r\n# @param {Interval[]} intervals\r\n# @return {Interval[]}\r\ndef merge(intervals)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *   public var start: Int\r\n *   public var end: Int\r\n *   public init(_ start: Int, _ end: Int) {\r\n *     self.start = start\r\n *     self.end = end\r\n *   }\r\n * }\r\n */\r\nclass Solution {\r\n    func merge(_ intervals: [Interval]) -> [Interval] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\nfunc merge(intervals []Interval) []Interval {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for an interval.\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\n *   var start: Int = _start\n *   var end: Int = _end\n * }\n */\nobject Solution {\n    def merge(intervals: List[Interval]): List[Interval] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(318,'Regular Expression Matching',3,'Dynamic Programming,Backtracking,String',0,0,'<p></p><p>Implement regular expression matching with support for <code>\'.\'</code> and <code>\'*\'</code>.</p><pre>\n\'.\' Matches any single character.\n\'*\' Matches zero or more of the preceding element.\n\nThe matching should cover the <b>entire</b> input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") ? false\nisMatch(\"aa\",\"aa\") ? true\nisMatch(\"aaa\",\"aa\") ? false\nisMatch(\"aa\", \"a*\") ? true\nisMatch(\"aa\", \".*\") ? true\nisMatch(\"ab\", \".*\") ? true\nisMatch(\"aab\", \"c*a*b\") ? true\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isMatch(string s, string p) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isMatch(String s, String p) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isMatch(self, s, p):\r\n        """\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isMatch(char* s, char* p) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsMatch(string s, string p) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} p\r\n * @return {boolean}\r\n */\r\nvar isMatch = function(s, p) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} p\r\n# @return {Boolean}\r\ndef is_match(s, p)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isMatch(_ s: String, _ p: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(319,'Integer to English Words',3,'Math,String',0,0,'<p></p><p>\nConvert a non-negative integer to its english words representation. Given input is guaranteed to be less than 2<sup>31</sup> - 1.\n</p><p>For example,<br/>\n</p><pre>\n123 -&gt; \"One Hundred Twenty Three\"\n12345 -&gt; \"Twelve Thousand Three Hundred Forty Five\"\n1234567 -&gt; \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string numberToWords(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String numberToWords(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numberToWords(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* numberToWords(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string NumberToWords(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {string}\r\n */\r\nvar numberToWords = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {String}\r\ndef number_to_words(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numberToWords(_ num: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberToWords(num int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numberToWords(num: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(320,'Serialize and Deserialize Binary Tree',3,'Tree,Design',0,0,'<p></p><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. </p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p>\nFor example, you may serialize the following tree\n</p><pre>\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n</pre>\nas <code>\"[1,2,3,null,null,4,5]\"</code>, just the same as <a href=\"https://leetcode.com/faq/#binary-tree\">how LeetCode OJ serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n\n<p>\n<b>Note:</b> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/Louis1992\">@Louis1992</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes a tree to a single string.\r\n    string serialize(TreeNode* root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    TreeNode* deserialize(string data) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.deserialize(codec.serialize(root));\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public String serialize(TreeNode root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(String data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Codec:\r\n\r\n    def serialize(self, root):\r\n        """Encodes a tree to a single string.\r\n        \r\n        :type root: TreeNode\r\n        :rtype: str\r\n        """\r\n        \r\n\r\n    def deserialize(self, data):\r\n        """Decodes your encoded data to tree.\r\n        \r\n        :type data: str\r\n        :rtype: TreeNode\r\n        """\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.deserialize(codec.serialize(root))\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/** Encodes a tree to a single string. */\r\nchar* serialize(struct TreeNode* root) {\r\n    \r\n}\r\n\r\n/** Decodes your encoded data to tree. */\r\nstruct TreeNode* deserialize(char* data) {\r\n    \r\n}\r\n\r\n// Your functions will be called as such:\r\n// char* data = serialize(root);\r\n// deserialize(data);\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public string serialize(TreeNode root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(string data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n\r\n/**\r\n * Encodes a tree to a single string.\r\n *\r\n * @param {TreeNode} root\r\n * @return {string}\r\n */\r\nvar serialize = function(root) {\r\n    \r\n};\r\n\r\n/**\r\n * Decodes your encoded data to tree.\r\n *\r\n * @param {string} data\r\n * @return {TreeNode}\r\n */\r\nvar deserialize = function(data) {\r\n    \r\n};\r\n\r\n/**\r\n * Your functions will be called as such:\r\n * deserialize(serialize(root));\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# Encodes a tree to a single string.\r\n#\r\n# @param {TreeNode} root\r\n# @return {string}\r\ndef serialize(root)\r\n    \r\nend\r\n\r\n# Decodes your encoded data to tree.\r\n#\r\n# @param {string} data\r\n# @return {TreeNode}\r\ndef deserialize(data)\r\n    \r\nend\r\n\r\n\r\n# Your functions will be called as such:\r\n# deserialize(serialize(data))\" }]',NULL,NULL,1,'none','none','none'),(321,'Flatten Nested List Iterator',2,'Stack,Design',0,0,'<p></p><p>Given a nested list of integers, implement an iterator to flatten it.</p><p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p><p><b>Example 1:</b><br/>\nGiven the list <code>[[1,1],2,[1,1]]</code>,\n</p><p>\nBy calling <i>next</i> repeatedly until <i>hasNext</i> returns false, the order of elements returned by <i>next</i> should be: <code>[1,1,2,1,1]</code>.\n</p><p><b>Example 2:</b><br/>\nGiven the list <code>[1,[4,[6]]]</code>,\n</p><p>\nBy calling <i>next</i> repeatedly until <i>hasNext</i> returns false, the order of elements returned by <i>next</i> should be: <code>[1,4,6]</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * class NestedInteger {\r\n *   public:\r\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     bool isInteger() const;\r\n *\r\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // The result is undefined if this NestedInteger holds a nested list\r\n *     int getInteger() const;\r\n *\r\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // The result is undefined if this NestedInteger holds a single integer\r\n *     const vector<NestedInteger> &getList() const;\r\n * };\r\n */\r\nclass NestedIterator {\r\npublic:\r\n    NestedIterator(vector<NestedInteger> &nestedList) {\r\n        \r\n    }\r\n\r\n    int next() {\r\n        \r\n    }\r\n\r\n    bool hasNext() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NestedIterator object will be instantiated and called as such:\r\n * NestedIterator i(nestedList);\r\n * while (i.hasNext()) cout << i.next();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * public interface NestedInteger {\r\n *\r\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     public boolean isInteger();\r\n *\r\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // Return null if this NestedInteger holds a nested list\r\n *     public Integer getInteger();\r\n *\r\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // Return null if this NestedInteger holds a single integer\r\n *     public List<NestedInteger> getList();\r\n * }\r\n */\r\npublic class NestedIterator implements Iterator<Integer> {\r\n\r\n    public NestedIterator(List<NestedInteger> nestedList) {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public Integer next() {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public boolean hasNext() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NestedIterator object will be instantiated and called as such:\r\n * NestedIterator i = new NestedIterator(nestedList);\r\n * while (i.hasNext()) v[f()] = i.next();\r\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# """\r\n# This is the interface that allows for creating nested lists.\r\n# You should not implement it, or speculate about its implementation\r\n# """\r\n#class NestedInteger(object):\r\n#    def isInteger(self):\r\n#        """\r\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\r\n#        :rtype bool\r\n#        """\r\n#\r\n#    def getInteger(self):\r\n#        """\r\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\r\n#        Return None if this NestedInteger holds a nested list\r\n#        :rtype int\r\n#        """\r\n#\r\n#    def getList(self):\r\n#        """\r\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\r\n#        Return None if this NestedInteger holds a single integer\r\n#        :rtype List[NestedInteger]\r\n#        """\r\n\r\nclass NestedIterator(object):\r\n\r\n    def __init__(self, nestedList):\r\n        """\r\n        Initialize your data structure here.\r\n        :type nestedList: List[NestedInteger]\r\n        """\r\n        \r\n\r\n    def next(self):\r\n        """\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def hasNext(self):\r\n        """\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n# Your NestedIterator object will be instantiated and called as such:\r\n# i, v = NestedIterator(nestedList), []\r\n# while i.hasNext(): v.append(i.next())\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * *********************************************************************\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * *********************************************************************\r\n *\r\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n * bool NestedIntegerIsInteger(struct NestedInteger *);\r\n *\r\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\r\n * // The result is undefined if this NestedInteger holds a nested list\r\n * int NestedIntegerGetInteger(struct NestedInteger *);\r\n *\r\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\r\n * // The result is undefined if this NestedInteger holds a single integer\r\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\r\n *\r\n * // Return the nested list\'s size that this NestedInteger holds, if it holds a nested list\r\n * // The result is undefined if this NestedInteger holds a single integer\r\n * int NestedIntegerGetListSize(struct NestedInteger *);\r\n * };\r\n */\r\nstruct NestedIterator {\r\n    \r\n};\r\n\r\nstruct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {\r\n    \r\n}\r\n\r\nbool nestedIterHasNext(struct NestedIterator *iter) {\r\n    \r\n}\r\n\r\nint nestedIterNext(struct NestedIterator *iter) {\r\n    \r\n}\r\n\r\n/** Deallocates memory previously allocated for the iterator */\r\nvoid nestedIterFree(struct NestedIterator *iter) {\r\n    \r\n}\r\n\r\n/**\r\n * Your NestedIterator will be called like this:\r\n * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);\r\n * while (nestedIterHasNext(i)) printf("%d\\n", nestedIterNext(i));\r\n * nestedIterFree(i);\r\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * interface NestedInteger {\r\n *\r\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     bool IsInteger();\r\n *\r\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // Return null if this NestedInteger holds a nested list\r\n *     int GetInteger();\r\n *\r\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // Return null if this NestedInteger holds a single integer\r\n *     IList<NestedInteger> GetList();\r\n * }\r\n */\r\npublic class NestedIterator {\r\n\r\n    public NestedIterator(IList<NestedInteger> nestedList) {\r\n        \r\n    }\r\n\r\n    public bool HasNext() {\r\n        \r\n    }\r\n\r\n    public int Next() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NestedIterator will be called like this:\r\n * NestedIterator i = new NestedIterator(nestedList);\r\n * while (i.HasNext()) v[f()] = i.Next();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * function NestedInteger() {\r\n *\r\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     @return {boolean}\r\n *     this.isInteger = function() {\r\n *         ...\r\n *     };\r\n *\r\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     Return null if this NestedInteger holds a nested list\r\n *     @return {integer}\r\n *     this.getInteger = function() {\r\n *         ...\r\n *     };\r\n *\r\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     Return null if this NestedInteger holds a single integer\r\n *     @return {NestedInteger[]}\r\n *     this.getList = function() {\r\n *         ...\r\n *     };\r\n * };\r\n */\r\n/**\r\n * @constructor\r\n * @param {NestedInteger[]} nestedList\r\n */\r\nvar NestedIterator = function(nestedList) {\r\n    \r\n};\r\n\r\n\r\n/**\r\n * @this NestedIterator\r\n * @returns {boolean}\r\n */\r\nNestedIterator.prototype.hasNext = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @this NestedIterator\r\n * @returns {integer}\r\n */\r\nNestedIterator.prototype.next = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Your NestedIterator will be called like this:\r\n * var i = new NestedIterator(nestedList), a = [];\r\n * while (i.hasNext()) a.push(i.next());\r\n*/\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\r\n# You should not implement it, or speculate about its implementation\r\n#\r\n#class NestedInteger\r\n#    def is_integer()\r\n#        """\r\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\r\n#        @return {Boolean}\r\n#        """\r\n#\r\n#    def get_integer()\r\n#        """\r\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\r\n#        Return nil if this NestedInteger holds a nested list\r\n#        @return {Integer}\r\n#        """\r\n#\r\n#    def get_list()\r\n#        """\r\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\r\n#        Return nil if this NestedInteger holds a single integer\r\n#        @return {NestedInteger[]}\r\n#        """\r\n\r\nclass NestedIterator\r\n    # @param {NestedInteger[]} nested_list\r\n    def initialize(nested_list)\r\n        \r\n    end\r\n\r\n    # @return {Boolean}\r\n    def has_next\r\n        \r\n    end\r\n\r\n    # @return {Integer}\r\n    def next\r\n        \r\n    end\r\nend\r\n\r\n# Your NestedIterator will be called like this:\r\n# i, v = NestedIterator.new(nested_list), []\r\n# while i.has_next()\r\n#    v << i.next\r\n# end\" }]',NULL,NULL,1,'none','none','none'),(322,'Subsets II',2,'Array,Backtracking',0,0,'<p></p><p>\nGiven a collection of integers that might contain duplicates, <b><i>nums</i></b>, return all possible subsets.\n</p><p><b>Note:</b> The solution set must not contain duplicate subsets.\n</p><p>\nFor example,<br/>\nIf <b><i>nums</i></b> = <code>[1,2,2]</code>, a solution is:\n</p><pre>\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def subsetsWithDup(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** subsetsWithDup(int* nums, int numsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> SubsetsWithDup(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar subsetsWithDup = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef subsets_with_dup(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func subsetsWithDup(nums []int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def subsetsWithDup(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(323,'Insert Delete GetRandom O(1) - Duplicates allowed',3,'Array,Hash Table,Design',0,0,'<p></p><p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p><b>Note: Duplicate elements are allowed.</b><p>\n</p><ol>\n<li><code>insert(val)</code>: Inserts an item val to the collection.</li>\n<li><code>remove(val)</code>: Removes an item val from the collection if present.</li>\n<li><code>getRandom</code>: Returns a random element from current collection of elements. The probability of each element being returned is <b>linearly related</b> to the number of same value the collection contains.</li>\n</ol><p><b>Example:</b>\n</p><pre>\n// Init an empty collection.\nRandomizedCollection collection = new RandomizedCollection();\n\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\ncollection.insert(1);\n\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\ncollection.insert(1);\n\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\ncollection.insert(2);\n\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\ncollection.getRandom();\n\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\ncollection.remove(1);\n\n// getRandom should return 1 and 2 both equally likely.\ncollection.getRandom();\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class RandomizedCollection {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    RandomizedCollection() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\n    bool insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\n    bool remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the collection. */\r\n    int getRandom() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * RandomizedCollection obj = new RandomizedCollection();\r\n * bool param_1 = obj.insert(val);\r\n * bool param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class RandomizedCollection {\n\n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n        \n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    public boolean insert(int val) {\n        \n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    public boolean remove(int val) {\n        \n    }\n    \n    /** Get a random element from the collection. */\n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * RandomizedCollection obj = new RandomizedCollection();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class RandomizedCollection(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def insert(self, val):\r\n        """\r\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n    def remove(self, val):\r\n        """\r\n        Removes a value from the collection. Returns true if the collection contained the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n    def getRandom(self):\r\n        """\r\n        Get a random element from the collection.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your RandomizedCollection object will be instantiated and called as such:\r\n# obj = RandomizedCollection()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.getRandom()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} RandomizedCollection;\n\n/** Initialize your data structure here. */\nRandomizedCollection* randomizedCollectionCreate() {\n    \n}\n\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\nbool randomizedCollectionInsert(RandomizedCollection* obj, int val) {\n    \n}\n\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\nbool randomizedCollectionRemove(RandomizedCollection* obj, int val) {\n    \n}\n\n/** Get a random element from the collection. */\nint randomizedCollectionGetRandom(RandomizedCollection* obj) {\n    \n}\n\nvoid randomizedCollectionFree(RandomizedCollection* obj) {\n    \n}\n\n/**\n * Your RandomizedCollection struct will be instantiated and called as such:\n * struct RandomizedCollection* obj = randomizedCollectionCreate();\n * bool param_1 = randomizedCollectionInsert(obj, val);\n * bool param_2 = randomizedCollectionRemove(obj, val);\n * int param_3 = randomizedCollectionGetRandom(obj);\n * randomizedCollectionFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class RandomizedCollection {\r\n\r\n    /** Initialize your data structure here. */\r\n    public RandomizedCollection() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\n    public bool Insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\n    public bool Remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the collection. */\r\n    public int GetRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * RandomizedCollection obj = new RandomizedCollection();\r\n * bool param_1 = obj.Insert(val);\r\n * bool param_2 = obj.Remove(val);\r\n * int param_3 = obj.GetRandom();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar RandomizedCollection = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a value to the collection. Returns true if the collection did not already contain the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedCollection.prototype.insert = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes a value from the collection. Returns true if the collection contained the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedCollection.prototype.remove = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Get a random element from the collection.\r\n * @return {number}\r\n */\r\nRandomizedCollection.prototype.getRandom = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * var obj = Object.create(RandomizedCollection).createNew()\r\n * var param_1 = obj.insert(val)\r\n * var param_2 = obj.remove(val)\r\n * var param_3 = obj.getRandom()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class RandomizedCollection\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def insert(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes a value from the collection. Returns true if the collection contained the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def remove(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get a random element from the collection.\r\n    :rtype: Integer\r\n=end\r\n    def get_random()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your RandomizedCollection object will be instantiated and called as such:\r\n# obj = RandomizedCollection.new()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.get_random()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type RandomizedCollection struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() RandomizedCollection {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\nfunc (this *RandomizedCollection) Insert(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\nfunc (this *RandomizedCollection) Remove(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Get a random element from the collection. */\r\nfunc (this *RandomizedCollection) GetRandom() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.Insert(val);\r\n * param_2 := obj.Remove(val);\r\n * param_3 := obj.GetRandom();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class RandomizedCollection() {\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    def insert(int val) : Boolean = {\n\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    def remove(int val) : Boolean = {\n\n    }\n    \n    /** Get a random element from the collection. */\n    def getRandom() : Int = {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection();\n * Boolean param_1 = obj.insert(val);\n * Boolean param_2 = obj.remove(val);\n * Int param_3 = obj.getRandom();\n */\" }]',NULL,NULL,1,'none','none','none'),(324,'Min Stack',1,'Stack,Design',0,0,'<p></p><p>\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n</p><ul>\n<li>\npush(x) -- Push element x onto stack.\n</li>\n<li>\npop() -- Removes the element on top of the stack.\n</li>\n<li>\ntop() -- Get the top element.\n</li>\n<li>\ngetMin() -- Retrieve the minimum element in the stack.\n</li>\n</ul><p><b>Example:</b><br/>\n</p><pre>\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; Returns -3.\nminStack.pop();\nminStack.top();      --&gt; Returns 0.\nminStack.getMin();   --&gt; Returns -2.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MinStack {\r\npublic:\r\n    /** initialize your data structure here. */\r\n    MinStack() {\r\n        \r\n    }\r\n    \r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    void pop() {\r\n        \r\n    }\r\n    \r\n    int top() {\r\n        \r\n    }\r\n    \r\n    int getMin() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.push(x);\r\n * obj.pop();\r\n * int param_3 = obj.top();\r\n * int param_4 = obj.getMin();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MinStack {\n\n    /** initialize your data structure here. */\n    public MinStack() {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public void pop() {\n        \n    }\n    \n    public int top() {\n        \n    }\n    \n    public int getMin() {\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MinStack(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def push(self, x):\r\n        """\r\n        :type x: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def pop(self):\r\n        """\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def top(self):\r\n        """\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n    def getMin(self):\r\n        """\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.getMin()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} MinStack;\n\n/** initialize your data structure here. */\nMinStack* minStackCreate(int maxSize) {\n    \n}\n\nvoid minStackPush(MinStack* obj, int x) {\n    \n}\n\nvoid minStackPop(MinStack* obj) {\n    \n}\n\nint minStackTop(MinStack* obj) {\n    \n}\n\nint minStackGetMin(MinStack* obj) {\n    \n}\n\nvoid minStackFree(MinStack* obj) {\n    \n}\n\n/**\n * Your MinStack struct will be instantiated and called as such:\n * struct MinStack* obj = minStackCreate(maxSize);\n * minStackPush(obj, x);\n * minStackPop(obj);\n * int param_3 = minStackTop(obj);\n * int param_4 = minStackGetMin(obj);\n * minStackFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MinStack {\r\n\r\n    /** initialize your data structure here. */\r\n    public MinStack() {\r\n        \r\n    }\r\n    \r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    public void Pop() {\r\n        \r\n    }\r\n    \r\n    public int Top() {\r\n        \r\n    }\r\n    \r\n    public int GetMin() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.Push(x);\r\n * obj.Pop();\r\n * int param_3 = obj.Top();\r\n * int param_4 = obj.GetMin();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * initialize your data structure here.\r\n */\r\nvar MinStack = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMinStack.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {void}\r\n */\r\nMinStack.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMinStack.prototype.top = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMinStack.prototype.getMin = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MinStack object will be instantiated and called as such:\r\n * var obj = Object.create(MinStack).createNew()\r\n * obj.push(x)\r\n * obj.pop()\r\n * var param_3 = obj.top()\r\n * var param_4 = obj.getMin()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MinStack\r\n\r\n=begin\r\n    initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Void\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def top()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def get_min()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack.new()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.get_min()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MinStack struct {\r\n    \r\n}\r\n\r\n\r\n/** initialize your data structure here. */\r\nfunc Constructor() MinStack {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Pop()  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Top() int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) GetMin() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * obj.Pop();\r\n * param_3 := obj.Top();\r\n * param_4 := obj.GetMin();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** initialize your data structure here. */class MinStack() {\n    \n    def push(int x) {\n\n    }\n    \n    def pop() {\n\n    }\n    \n    def top() : Int = {\n\n    }\n    \n    def getMin() : Int = {\n\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * Int param_3 = obj.top();\n * Int param_4 = obj.getMin();\n */\" }]',NULL,NULL,1,'none','none','none'),(325,'Reverse Words in a String III',1,'String',0,0,'<p></p><p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"Let\'s take LeetCode contest\"\n<b>Output:</b> \"s\'teL ekat edoCteeL tsetnoc\"\n</pre><p><b>Note:</b>\nIn the string, each word is separated by single space and there will not be any extra space in the string.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String reverseWords(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def reverseWords(self, s):\n        """\n        :type s: str\n        :rtype: str\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* reverseWords(char* s) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string ReverseWords(string s) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\n# @return {String}\ndef reverse_words(s)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func reverseWords(_ s: String) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseWords(s string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reverseWords(s: String): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-simple-solutionaccepted\">Approach #1 Simple Solution[Accepted]</a></li>\n<li><a href=\"#approach-2-without-using-pre-defined-split-and-reverse-function-accepted\">Approach #2 Without using pre-defined split and reverse function [Accepted]</a></li>\n<li><a href=\"#approach-3-using-stringbuilder-and-reverse-method-accepted\">Approach #3 Using StringBuilder and reverse method [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-simple-solutionaccepted\">Approach #1 Simple Solution[Accepted]</h4>\n<p>The first method is really simple. We simply split up the given string based on whitespaces and put the individual words in an array of strings. Then, we reverse each individual string and concatenate the result. We return the result after removing the additional whitespaces at the end.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">reverseWords</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">words</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">res</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">word</span><span class=\"o\">:</span> <span class=\"n\">words</span><span class=\"o\">)</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">StringBuffer</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">).</span><span class=\"na\">reverse</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&quot; &quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">().</span><span class=\"na\">trim</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. where <script type=\"math/tex; mode=display\">n</script> is the length of the string.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">res</script> of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-without-using-pre-defined-split-and-reverse-function-accepted\">Approach #2 Without using pre-defined split and reverse function [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can create our own split and reverse function. Split function splits the string based on the delimiter \" \"(space) and returns the array of words. Reverse function returns the string after reversing the characters.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">reverseWords</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">words</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"n\">split</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">res</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">word</span><span class=\"o\">:</span> <span class=\"n\">words</span><span class=\"o\">)</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&quot; &quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">().</span><span class=\"na\">trim</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"nf\">split</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39; &#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n                <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">words</span><span class=\"o\">.</span><span class=\"na\">toArray</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">[</span><span class=\"n\">words</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()]);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">reverse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">StringBuilder</span> <span class=\"n\">res</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">insert</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. where <script type=\"math/tex; mode=display\">n</script> is the length of the string.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">res</script> of size <script type=\"math/tex; mode=display\">n</script> is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-stringbuilder-and-reverse-method-accepted\">Approach #3 Using StringBuilder and reverse method [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of using split method, we can use temporary string <script type=\"math/tex; mode=display\">word</script> to store the word. We simply append the characters to the <script type=\"math/tex; mode=display\">word</script> until <code>\' \'</code> character is not found. On getting <code>\' \'</code> we append the reverse of the <script type=\"math/tex; mode=display\">word</script> to the resultant string <script type=\"math/tex; mode=display\">result</script>. Also after completion of loop , we still have to append the <script type=\"math/tex; mode=display\">reverse</script> of the <script type=\"math/tex; mode=display\">word</script>(last word) to the <script type=\"math/tex; mode=display\">result</script> string. </p>\n<p>Below code is inspired by <a href=\"http://leetcode.com/apolloX\">@ApolloX</a>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">reverseWords</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">input</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"n\">StringBuilder</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"kd\">final</span> <span class=\"n\">StringBuilder</span> <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39; &#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">reverse</span><span class=\"o\">());</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&quot; &quot;</span><span class=\"o\">);</span>\n                <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">setLength</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">reverse</span><span class=\"o\">());</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single loop upto <script type=\"math/tex; mode=display\">n</script> is there, where <script type=\"math/tex; mode=display\">n</script> is the length of the string.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">result</script> and <script type=\"math/tex; mode=display\">word</script> size will grow upto <script type=\"math/tex; mode=display\">n</script>.</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(326,'Linked List Cycle II',2,'Linked List,Two Pointers',0,0,'<p></p><p>\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.\n</p><p>\n<b>Note:</b> Do not modify the linked list.</p><p>\n<b>Follow up</b>:<br/>\nCan you solve it without using extra space?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode *detectCycle(ListNode *head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def detectCycle(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode *detectCycle(struct ListNode *head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode DetectCycle(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar detectCycle = function(head) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(327,'Valid Phone Numbers',1,'',0,0,'<p></p><p>Given a text file <code>file.txt</code> that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.</p><p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p><p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p><p>For example, assume that <code>file.txt</code> has the following content:</p><pre>\n987-123-4567\n123 456 7890\n(123) 456-7890\n</pre>\n\nYour script should output the following valid phone numbers:\n<pre>\n987-123-4567\n(123) 456-7890\n</pre>','[{\"value\": \"bash\", \"text\": \"Bash\", \"defaultCode\": \"# Read from the file file.txt and output all valid phone numbers to stdout.\r\n\" }]',NULL,NULL,1,'none','none','none'),(328,'Jump Game',2,'Array,Greedy',0,0,'<p></p><p>\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n</p><p>\nEach element in the array represents your maximum jump length at that position. \n</p><p>\nDetermine if you are able to reach the last index.\n</p><p>\nFor example:<br/>\nA = <code>[2,3,1,1,4]</code>, return <code>true</code>.\n</p><p>\nA = <code>[3,2,1,0,4]</code>, return <code>false</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canJump(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canJump(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canJump(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanJump(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar canJump = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef can_jump(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canJump(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canJump(nums []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#naming\">Naming</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-backtracking-stack-overflow\">Approach #1 (Backtracking) [Stack Overflow]</a></li>\n<li><a href=\"#approach-2-dynamic-programming-top-down-stack-overflow\">Approach #2 (Dynamic Programming Top-down) [Stack Overflow]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-bottom-up-time-limit-exceeded\">Approach #3 (Dynamic Programming Bottom-up) [Time limit exceeded]</a></li>\n<li><a href=\"#approach-4-greedy-accepted\">Approach #4 (Greedy) [Accepted]</a></li>\n</ul>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n<li><a href=\"#appendix-a-complexity-analysis-for-approach-1\">Appendix A - Complexity Analysis for Approach #1</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</div>\n<h2 id=\"naming\">Naming</h2>\n<ul>\n<li>We call a position in the array a <strong>\"good index\"</strong> if starting at that position, we can reach the last index. Otherwise, that index is called a <strong>\"bad index\"</strong>. The problem then reduces to whether or not index 0 is a \"good index\".</li>\n</ul>\n<h2 id=\"solution\">Solution</h2>\n<p>This is a dynamic programming<sup>[1]</sup> question. Usually, solving and fully understanding a dynamic programming problem is a 4 step process:</p>\n<ol>\n<li>Start with the recursive backtracking solution</li>\n<li>Optimize by using a memoization table (top-down<sup>[3]</sup> dynamic programming)</li>\n<li>Remove the need for recursion (bottom-up dynamic programming)</li>\n<li>Apply final tricks to reduce the time / memory complexity</li>\n</ol>\n<p>All solutions presented below produce the correct result, but they differ in run time and memory requirements.</p>\n<hr />\n<h4 id=\"approach-1-backtracking-stack-overflow\">Approach #1 (Backtracking) [Stack Overflow]</h4>\n<p>This is the inefficient solution where we try every single jump pattern that takes us from the first position to the last. We start from the first position and jump to every index that is reachable. We repeat the process until last index is reached. When stuck, backtrack.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canJumpFromPosition</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">position</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">position</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">furthestJump</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">position</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nextPosition</span> <span class=\"o\">=</span> <span class=\"n\">position</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span> <span class=\"o\">&lt;=</span> <span class=\"n\">furthestJump</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">canJumpFromPosition</span><span class=\"o\">(</span><span class=\"n\">nextPosition</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canJump</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">canJumpFromPosition</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>One quick optimization we can do for the code above is to check the <code>nextPosition</code> from right to left. The theoretical worst case performance is the same, but in practice, for silly examples, the code might run faster. Intuitively, this means we always try to make the biggest jump such that we reach the end as soon as possible</p>\n<p>The change required is:</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Old</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nextPosition</span> <span class=\"o\">=</span> <span class=\"n\">position</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span> <span class=\"o\">&lt;=</span> <span class=\"n\">furthestJump</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span><span class=\"o\">++)</span>\n<span class=\"c1\">// New</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nextPosition</span> <span class=\"o\">=</span> <span class=\"n\">furthestJump</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span> <span class=\"o\">&gt;</span> <span class=\"n\">position</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span><span class=\"o\">--)</span>\n</pre></div>\n\n\n<p>For instance, in the example below, if we start from index <strong>0</strong>, jump as far as possible and reach <strong>1</strong>, jump as far as possible and reach <strong>6</strong>. By doing so, we determine that <strong>0</strong> is a <em>GOOD</em> index in 3 steps.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Index</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">nums</td>\n<td align=\"center\">1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>To illustrate the worst case, where this optimization has no effect, take the example below. Index <strong>6</strong> cannot be reached from any position, but all combinations will be tried.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Index</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">nums</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>The first few steps of the backtracking algorithm for the example above are: 0 -&gt; 4 -&gt; 5 -&gt; 4 -&gt; 0 -&gt; 3 -&gt; 5 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; etc.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. There are <script type=\"math/tex; mode=display\">2^n</script> (upper bound) ways of jumping from the first position to the last, where <script type=\"math/tex; mode=display\">n</script> is the length of array <code>nums</code>. For a complete proof, please refer to Appendix A.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Recursion requires additional memory for the stack frames.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-dynamic-programming-top-down-stack-overflow\">Approach #2 (Dynamic Programming Top-down) [Stack Overflow]</h4>\n<p>Top-down Dynamic Programming can be thought of as optimized backtracking. It relies on the observation that once we determine that a certain index is good / bad, this result will never change. This means that we can store the result and not need to recompute it every time.</p>\n<p>Therefore, for each position in the array, we remember whether the index is good or bad. Let\'s call this array <code>memo</code> and let its values be either one of: GOOD, BAD, UNKNOWN. This technique is called memoization<sup>[2]</sup>.</p>\n<p>An example of a memoization table for input array <code>nums = [2, 4, 2, 1, 0, 2, 0]</code> can be seen in the diagram below. We write <strong>G</strong> for a <em>GOOD</em> position and <strong>B</strong> for a <em>BAD</em> one. We can see that we cannot start from indices 2, 3 or 4 and eventually reach last index (6), but we can do that from indices 0, 1, 5 and (trivially) 6.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Index</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">nums</td>\n<td align=\"center\">2</td>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">memo</td>\n<td align=\"center\">G</td>\n<td align=\"center\">G</td>\n<td align=\"center\">B</td>\n<td align=\"center\">B</td>\n<td align=\"center\">B</td>\n<td align=\"center\">G</td>\n<td align=\"center\">G</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Steps</strong></p>\n<ol>\n<li>Initially, all elements of the <code>memo</code> table are <em>UNKNOWN</em>, except for the last one, which is (trivially) <em>GOOD</em> (it can reach itself)</li>\n<li>Modify the backtracking algorithm such that the recursive step first checks if the index is known (<em>GOOD</em> / <em>BAD</em>)<ol>\n<li>If it is known then return <em>True</em> / <em>False</em></li>\n<li>Otherwise perform the backtracking steps as before</li>\n</ol>\n</li>\n<li>Once we determine the value of the current index, we store it in the <code>memo</code> table</li>\n</ol>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">enum</span> <span class=\"n\">Index</span> <span class=\"o\">{</span>\n    <span class=\"n\">GOOD</span><span class=\"o\">,</span> <span class=\"n\">BAD</span><span class=\"o\">,</span> <span class=\"n\">UNKNOWN</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"n\">Index</span><span class=\"o\">[]</span> <span class=\"n\">memo</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canJumpFromPosition</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">position</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">UNKNOWN</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span> <span class=\"o\">?</span> <span class=\"kc\">true</span> <span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">furthestJump</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">position</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">nextPosition</span> <span class=\"o\">=</span> <span class=\"n\">position</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span> <span class=\"o\">&lt;=</span> <span class=\"n\">furthestJump</span><span class=\"o\">;</span> <span class=\"n\">nextPosition</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">canJumpFromPosition</span><span class=\"o\">(</span><span class=\"n\">nextPosition</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span><span class=\"o\">;</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">position</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">BAD</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canJump</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Index</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">memo</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">UNKNOWN</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">memo</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">canJumpFromPosition</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.\nFor every element in the array, say <code>i</code>, we are looking at the next <code>nums[i]</code> elements to its right aiming to find a <em>GOOD</em> index. <code>nums[i]</code> can be at most <script type=\"math/tex; mode=display\">n</script>, where <script type=\"math/tex; mode=display\">n</script> is the length of array <code>nums</code>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(2n) = O(n)</script>.\nFirst n originates from recursion. Second n comes from the usage of the memo table.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-bottom-up-time-limit-exceeded\">Approach #3 (Dynamic Programming Bottom-up) [Time limit exceeded]</h4>\n<p>Top-down to bottom-up conversion is done by eliminating recursion. In practice, this achieves better performance as we no longer have the method stack overhead and might even benefit from some caching. More importantly, this step opens up possibilities for future optimization. The recursion is usually eliminated by trying to reverse the order of the steps from the top-down approach.</p>\n<p>The observation to make here is that we only ever jump to the right. This means that if we start from the right of the array, every time we will query a position to our right, that position has already be determined as being <em>GOOD</em> or <em>BAD</em>. This means we don\'t need to recurse anymore, as we will always hit the <code>memo</code> table.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">enum</span> <span class=\"n\">Index</span> <span class=\"o\">{</span>\n    <span class=\"n\">GOOD</span><span class=\"o\">,</span> <span class=\"n\">BAD</span><span class=\"o\">,</span> <span class=\"n\">UNKNOWN</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canJump</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Index</span><span class=\"o\">[]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Index</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">memo</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">UNKNOWN</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">memo</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">furthestJump</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">furthestJump</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">Index</span><span class=\"o\">.</span><span class=\"na\">GOOD</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.\nFor every element in the array, say <code>i</code>, we are looking at the next <code>nums[i]</code> elements to its right aiming to find a <em>GOOD</em> index. <code>nums[i]</code> can be at most <script type=\"math/tex; mode=display\">n</script>, where <script type=\"math/tex; mode=display\">n</script> is the length of array <code>nums</code>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nThis comes from the usage of the memo table.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-greedy-accepted\">Approach #4 (Greedy) [Accepted]</h4>\n<p>Once we have our code in the bottom-up state, we can make one final, important observation. From a given position, when we try to see if we can jump to a <em>GOOD</em> position, we only ever use one - the first one (see the break statement). In other words, the left-most one. If we keep track of this left-most <em>GOOD</em> position as a separate variable, we can avoid searching for it in the array. Not only that, but we can stop using the array altogether.</p>\n<p>Iterating right-to-left, for each position we check if there is a potential jump that reaches a <em>GOOD</em> index (<code>currPosition + nums[currPosition] &gt;= leftmostGoodIndex</code>). If we can reach a <em>GOOD</em> index, then our position is itself <em>GOOD</em>. Also, this new <em>GOOD</em> position will be the new leftmost <em>GOOD</em> index. Iteration continues until the beginning of the array. If first position is a <em>GOOD</em> index then we can reach the last index from the first position.</p>\n<p>To illustrate this scenario, we will use the diagram below, for input array <code>nums = [9, 4, 2, 1, 0, 2, 0]</code>. We write <strong>G</strong> for <em>GOOD</em>, <strong>B</strong> for <em>BAD</em> and <strong>U</strong> for <em>UNKNOWN</em>. Let\'s assume we have iterated all the way to position 0 and we need to decide if index 0 is <em>GOOD</em>. Since index 1 was determined to be <em>GOOD</em>, it is enough to jump there and then be sure we can eventually reach index 6. It does not matter that <code>nums[0]</code> is big enough to jump all the way to the last index. All we need is <strong>one</strong> way.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Index</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">nums</td>\n<td align=\"center\">9</td>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">memo</td>\n<td align=\"center\">U</td>\n<td align=\"center\">G</td>\n<td align=\"center\">B</td>\n<td align=\"center\">B</td>\n<td align=\"center\">B</td>\n<td align=\"center\">G</td>\n<td align=\"center\">G</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">canJump</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lastPos</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">lastPos</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">lastPos</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">lastPos</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nWe are doing a single pass through the <code>nums</code> array, hence <script type=\"math/tex; mode=display\">n</script> steps, where <script type=\"math/tex; mode=display\">n</script> is the length of array <code>nums</code>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe are not using any extra memory.</p>\n</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The question left unanswered is how should one approach such a question in an interview scenario. I would say \"it depends\". The perfect solution is cleaner and shorter than all the other versions, but it might not be so straightforward to figure out.</p>\n<p>The (recursive) backtracking is the easiest to figure out, so it is worth mentioning it verbally while warming up for the tougher challenge. It might be that your interviewer actually wants to see that solution, but if not, mention that there might be a dynamic programming solution and try to think how could you use a memoization table. If you figure it out and the interviewer wants you to go for the top-down approach, it will not generally be time to think of the bottom-up version, but I would always mention the advantages of this technique as a final thought in the interview.</p>\n<p>Most people are stuck when converting from top-down Dynamic Programming (expressed naturally in recursion) to bottom-up. Practicing similar problems will help bridge this gap.</p>\n<h2 id=\"appendix-a-complexity-analysis-for-approach-1\">Appendix A - Complexity Analysis for Approach #1</h2>\n<p>There are <script type=\"math/tex; mode=display\">2^n</script> (upper bound) ways of jumping from the first position to the last, where <script type=\"math/tex; mode=display\">n</script> is the length of array <code>nums</code>. We get this recursively. Let <script type=\"math/tex; mode=display\">T(x)</script> be the number of possible ways of jumping from position <strong>x</strong> to position <strong>n</strong>. <script type=\"math/tex; mode=display\">T(n) = 1</script> trivially. <script type=\"math/tex; mode=display\">T(x) = \\sum_{i = x + 1}^{n} T(i)</script> because from position <strong>x</strong> we can potentially jump to all following positions <strong>i</strong> and then from there there are <script type=\"math/tex; mode=display\">T(i)</script> ways of continuing. Notice this is an upper bound.</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nT(x) &= \\sum_{i = x + 1}^{n} T(i) \\\\\nT(x) &= T(x + 1) + \\sum_{i = x + 2}^{n} T(i) \\\\\nT(x) &= T(x + 1) + T(x + 1) \\\\\nT(x) &= 2 * T(x + 1)\n\\end{align*}\n</script>\n</p>\n<p>Now by induction, assume <script type=\"math/tex; mode=display\">T(x) = 2^{n - x - 1}</script> and prove <script type=\"math/tex; mode=display\">T(x - 1) = 2^{n - (x - 1) - 1}</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nT(x - 1) &= 2 * T(x) \\\\\nT(x - 1) &= 2 * 2^{n - x - 1} \\\\\nT(x - 1) &= 2^{n - x - 1 + 1} \\\\\nT(x - 1) &= 2^{n - (x - 1) - 1}\n\\end{align*}\n</script>\n</p>\n<p>Therefore, since we start from position 1, <script type=\"math/tex; mode=display\">T(1) = 2^{n - 2}</script>. Final complexity <script type=\"math/tex; mode=display\">O(2^{n - 2})</script> = <script type=\"math/tex; mode=display\">O(2^n)</script>.</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li>[1] <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">https://en.wikipedia.org/wiki/Dynamic_programming</a></li>\n<li>[2] <a href=\"https://en.wikipedia.org/wiki/Memoization\">https://en.wikipedia.org/wiki/Memoization</a></li>\n<li>[3] <a href=\"https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design\">https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design</a></li>\n</ul>\n<p>Analysis written by: <a href=\"http://andrei.cioara.me\">@aicioara</a></p>\n<p>Thank you <a href=\"https://discuss.leetcode.com/user/jied333\">@jied333</a> for correcting the backtracking complexity analysis.</p>',NULL,1,'none','none','none'),(329,'Sum of Left Leaves',1,'Tree',0,0,'<p></p><p>Find the sum of all left leaves in a given binary tree.</p><p><b>Example:</b>\n</p><pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\nThere are two left leaves in the binary tree, with values <b>9</b> and <b>15</b> respectively. Return <b>24</b>.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int sumOfLeftLeaves(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def sumOfLeftLeaves(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint sumOfLeftLeaves(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int SumOfLeftLeaves(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar sumOfLeftLeaves = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef sum_of_left_leaves(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func sumOfLeftLeaves(_ root: TreeNode?) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc sumOfLeftLeaves(root *TreeNode) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sumOfLeftLeaves(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(330,'Palindrome Number',1,'Math',0,0,'<p></p><p>Determine whether an integer is a palindrome. Do this without extra space.</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show spoilers.</a></p><div class=\"spoilers\"><b>Some hints:</b>\n<p>Could negative integers be palindromes? (ie, -1)</p>\n<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>\n<p>You could also try reversing an integer. However, if you have solved the problem \"Reverse Integer\", you know that the reversed integer might overflow. How would you handle such case?</p>\n<p>There is a more generic way of solving this problem.</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isPalindrome(int x) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isPalindrome(self, x):\r\n        """\r\n        :type x: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isPalindrome(int x) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsPalindrome(int x) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} x\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function(x) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} x\r\n# @return {Boolean}\r\ndef is_palindrome(x)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isPalindrome(_ x: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPalindrome(x int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(331,'Missing Number',1,'Array,Math,Bit Manipulation',0,0,'<p></p><p>\nGiven an array containing <i>n</i> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.\n</p><p>For example,<br/>\nGiven <i>nums</i> = <code>[0, 1, 3]</code> return <code>2</code>.\n</p><p>\n<b>Note</b>:<br/>\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int missingNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int missingNumber(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def missingNumber(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int missingNumber(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MissingNumber(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar missingNumber = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef missing_number(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func missingNumber(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func missingNumber(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def missingNumber(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(332,'Find Median from Data Stream',3,'Heap,Design',0,0,'<p></p><p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\nExamples: <br/><p><code>[2,3,4]</code> , the median is <code>3</code></p><p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code> </p><p>\nDesign a data structure that supports the following two operations:\n</p><ul>\n<li>void addNum(int num) - Add a integer number from the data stream to the data structure.</li>\n<li>double findMedian() - Return the median of all elements so far.</li>\n</ul><p>\nFor example:</p><pre>\naddNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/Louis1992\">@Louis1992</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MedianFinder {\r\npublic:\r\n    /** initialize your data structure here. */\r\n    MedianFinder() {\r\n        \r\n    }\r\n    \r\n    void addNum(int num) {\r\n        \r\n    }\r\n    \r\n    double findMedian() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * MedianFinder obj = new MedianFinder();\r\n * obj.addNum(num);\r\n * double param_2 = obj.findMedian();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MedianFinder {\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MedianFinder(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def addNum(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: void\r\n        """\r\n        \r\n\r\n    def findMedian(self):\r\n        """\r\n        :rtype: float\r\n        """\r\n        \r\n\r\n\r\n# Your MedianFinder object will be instantiated and called as such:\r\n# obj = MedianFinder()\r\n# obj.addNum(num)\r\n# param_2 = obj.findMedian()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} MedianFinder;\n\n/** initialize your data structure here. */\nMedianFinder* medianFinderCreate() {\n    \n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    \n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    \n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    \n}\n\n/**\n * Your MedianFinder struct will be instantiated and called as such:\n * struct MedianFinder* obj = medianFinderCreate();\n * medianFinderAddNum(obj, num);\n * double param_2 = medianFinderFindMedian(obj);\n * medianFinderFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MedianFinder {\r\n\r\n    /** initialize your data structure here. */\r\n    public MedianFinder() {\r\n        \r\n    }\r\n    \r\n    public void AddNum(int num) {\r\n        \r\n    }\r\n    \r\n    public double FindMedian() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * MedianFinder obj = new MedianFinder();\r\n * obj.AddNum(num);\r\n * double param_2 = obj.FindMedian();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * initialize your data structure here.\r\n */\r\nvar MedianFinder = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} num\r\n * @return {void}\r\n */\r\nMedianFinder.prototype.addNum = function(num) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMedianFinder.prototype.findMedian = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MedianFinder object will be instantiated and called as such:\r\n * var obj = Object.create(MedianFinder).createNew()\r\n * obj.addNum(num)\r\n * var param_2 = obj.findMedian()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MedianFinder\r\n\r\n=begin\r\n    initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type num: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_num(num)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Float\r\n=end\r\n    def find_median()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MedianFinder object will be instantiated and called as such:\r\n# obj = MedianFinder.new()\r\n# obj.add_num(num)\r\n# param_2 = obj.find_median()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MedianFinder struct {\n    \n}\n\n\n/** initialize your data structure here. */\nfunc Constructor() MedianFinder {\n    \n}\n\n\nfunc (this *MedianFinder) AddNum(num int)  {\n    \n}\n\n\nfunc (this *MedianFinder) FindMedian() float64 {\n    \n}\n\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddNum(num);\n * param_2 := obj.FindMedian();\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** initialize your data structure here. */class MedianFinder() {\n    \n    def addNum(int num) {\n\n    }\n    \n    def findMedian() : Double = {\n\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder();\n * obj.addNum(num);\n * Double param_2 = obj.findMedian();\n */\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-simple-sorting-time-limit-exceeded\">Approach #1 Simple Sorting [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-insertion-sort-time-limit-exceeded\">Approach #2 Insertion Sort [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-two-heaps-accepted\">Approach #3 Two Heaps! [Accepted]</a></li>\n<li><a href=\"#approach-4-multiset-and-two-pointers-accepted\">Approach #4 Multiset and Two Pointers [Accepted]</a></li>\n<li><a href=\"#further-thoughts\">Further Thoughts</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-simple-sorting-time-limit-exceeded\">Approach #1 Simple Sorting [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do what the question says.</p>\n<p><strong>Algorithm</strong></p>\n<p>Store the numbers in a resize-able container. Every time you need to output the median, sort the container and output the median.</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MedianFinder</span> <span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">store</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"c1\">// Adds a number into the data structure.</span>\n    <span class=\"kt\">void</span> <span class=\"n\">addNum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Returns the median of current data stream</span>\n    <span class=\"kt\">double</span> <span class=\"n\">findMedian</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">store</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span> <span class=\"o\">:</span> <span class=\"n\">store</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n \\cdot log(n)) + O(1) \\simeq O(n \\cdot log(n))</script>.</p>\n<ul>\n<li>Adding a number takes amortized <script type=\"math/tex; mode=display\">O(1)</script> time for a container with an efficient resizing scheme.</li>\n<li>Finding the median is primarily dependent on the sorting that takes place. This takes <script type=\"math/tex; mode=display\">O(n \\cdot log(n))</script> time for a standard comparative sort.</li>\n</ul>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> linear space to hold input in a container. No extra space other than that needed (since sorting can usually be done in-place).</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-insertion-sort-time-limit-exceeded\">Approach #2 Insertion Sort [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Keeping our input container always sorted (i.e. maintaining the sorted nature of the container as an <em>invariant</em>).</p>\n<p><strong>Algorithm</strong></p>\n<p>Which algorithm allows a number to be added to a sorted list of numbers and yet keeps the entire list sorted? Well, for one, <strong>insertion sort!</strong></p>\n<p>We assume that the current list is already sorted. When a new number comes, we have to add it to the list while maintaining the sorted nature of the list. This is achieved easily by finding the correct place to insert the incoming number, using a <strong>binary search</strong> (remember, the list is <em>always sorted</em>). Once the position is found, we need to shift all higher elements by one space to make room for the incoming number.</p>\n<p>This method would work well when the amount of insertion queries is lesser or about the same as the amount of median finding queries.</p>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MedianFinder</span> <span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">store</span><span class=\"p\">;</span> <span class=\"c1\">// resize-able container</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"c1\">// Adds a number into the data structure.</span>\n    <span class=\"kt\">void</span> <span class=\"n\">addNum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n            <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">num</span><span class=\"p\">),</span> <span class=\"n\">num</span><span class=\"p\">);</span>     <span class=\"c1\">// binary search and insertion combined</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Returns the median of current data stream</span>\n    <span class=\"kt\">double</span> <span class=\"n\">findMedian</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">store</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">store</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n) + O(log(n)) \\approx O(n)</script>.</p>\n<ul>\n<li>Binary Search takes <script type=\"math/tex; mode=display\">O(log(n))</script> time to find correct insertion position.</li>\n<li>Insertion can take up to <script type=\"math/tex; mode=display\">O(n)</script> time since elements have to be shifted inside the container to make room for the new element.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Pop quiz:</strong> Can we use a <em>linear</em> search instead of a <em>binary</em> search to find insertion position, without incurring any significant runtime penalty?</p>\n</blockquote>\n<ul>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> linear space to hold input in a container.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-two-heaps-accepted\">Approach #3 Two Heaps! [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>The above two approaches gave us some valuable insights on how to tackle this problem. Concretely, one can infer two things:</p>\n<ol>\n<li>If we could maintain direct access to median elements at all times, then finding the median would take a constant amount of time.</li>\n<li>If we could find a reasonably fast way of adding numbers to our containers, additional penalties incurred could be lessened.</li>\n</ol>\n<p>But perhaps the most important insight, which is not readily observable, is the fact that we <em>only</em> need a consistent way to access the median elements. Keeping the <em>entire</em> input sorted is <strong>not a requirement.</strong></p>\n<blockquote>\n<p>Well, if only there were a data structure which could handle our needs.</p>\n</blockquote>\n<p>As it turns out there are two data structures for the job:</p>\n<ul>\n<li>Heaps (or Priority Queues <sup id=\"fnref:note-1\"><a class=\"footnote-ref\" href=\"#fn:note-1\" rel=\"footnote\">1</a></sup>)</li>\n<li>Self-balancing Binary Search Trees (we\'ll talk more about them in <a href=\"#approach-4-multiset-and-two-pointers-accepted\">Approach #4</a>)</li>\n</ul>\n<p>Heaps are a natural ingredient for this dish! Adding elements to them take logarithmic order of time. They also give direct access to the maximal/minimal elements in a group.</p>\n<p>If we could maintain <em>two</em> heaps in the following way:</p>\n<ul>\n<li>A max-heap to store the smaller half of the input numbers</li>\n<li>A min-heap to store the larger half of the input numbers</li>\n</ul>\n<p>This gives access to median values in the input: they comprise the top of the heaps!</p>\n<p><strong>Wait, what? How?</strong></p>\n<p>If the following conditions are met:</p>\n<ol>\n<li>Both the heaps are balanced (or nearly balanced)</li>\n<li>The max-heap contains all the smaller numbers while the min-heap contains all the larger numbers</li>\n</ol>\n<p>then we can say that:</p>\n<ol>\n<li>All the numbers in the max-heap are smaller or equal to the top element of the max-heap (let\'s call it <script type=\"math/tex; mode=display\">x</script>)</li>\n<li>All the numbers in the min-heap are larger or equal to the top element of the min-heap (let\'s call it <script type=\"math/tex; mode=display\">y</script>)</li>\n</ol>\n<p>Then <script type=\"math/tex; mode=display\">x</script> and/or <script type=\"math/tex; mode=display\">y</script> are smaller than (or equal to) almost half of the elements and larger than (or equal to) the other half. That is <em>the</em> definition of <strong>median</strong> elements.</p>\n<p>This leads us to a huge point of pain in this approach: <strong>balancing the two heaps!</strong></p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>\n<p>Two priority queues:</p>\n<ol>\n<li>A max-heap <code>lo</code> to store the smaller half of the numbers</li>\n<li>A min-heap <code>hi</code> to store the larger half of the numbers</li>\n</ol>\n</li>\n<li>\n<p>The max-heap <code>lo</code> is allowed to store, at worst, one more element more than the min-heap <code>hi</code>. Hence if we have processed <script type=\"math/tex; mode=display\">k</script> elements:</p>\n<ul>\n<li>If <script type=\"math/tex; mode=display\">k = 2*n + 1 \\quad (\\forall \\, n \\in \\mathbb{Z})</script>, then <code>lo</code> is allowed to hold <script type=\"math/tex; mode=display\">n+1</script> elements, while <code>hi</code> can hold <script type=\"math/tex; mode=display\">n</script> elements.</li>\n<li>If <script type=\"math/tex; mode=display\">k = 2*n \\quad (\\forall \\, n \\in \\mathbb{Z})</script>, then both heaps are balanced and hold <script type=\"math/tex; mode=display\">n</script> elements each.</li>\n</ul>\n<p>This gives us the nice property that when the heaps are perfectly balanced, the median can be derived from the tops of both heaps. Otherwise, the top of the max-heap <code>lo</code> holds the legitimate median.</p>\n</li>\n<li>\n<p>Adding a number <code>num</code>:</p>\n<ul>\n<li>Add <code>num</code> to max-heap <code>lo</code>. Since <code>lo</code> received a new element, we must do a balancing step for <code>hi</code>. So remove the largest element from <code>lo</code> and offer it to <code>hi</code>.</li>\n<li>The min-heap <code>hi</code> might end holding more elements than the max-heap <code>lo</code>, after the previous operation. We fix that by removing the smallest element from <code>hi</code> and offering it to <code>lo</code>.</li>\n</ul>\n<p>The above step ensures that we do not disturb the nice little size property we just mentioned.</p>\n</li>\n</ul>\n<p>A little example will clear this up! Say we take input from the stream <code>[41, 35, 62, 5, 97, 108]</code>. The run-though of the algorithm looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>Adding number <span class=\"m\">41</span>\nMaxHeap lo<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">41</span><span class=\"p\">]</span>           <span class=\"o\">//</span> MaxHeap stores the largest value at the top <span class=\"p\">(</span>index <span class=\"m\">0</span><span class=\"p\">)</span>\nMinHeap hi<span class=\"o\">:</span> <span class=\"p\">[]</span>             <span class=\"o\">//</span> MinHeap stores the smallest value at the top <span class=\"p\">(</span>index <span class=\"m\">0</span><span class=\"p\">)</span>\nMedian is <span class=\"m\">41</span>\n<span class=\"o\">=======================</span>\nAdding number <span class=\"m\">35</span>\nMaxHeap lo<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">35</span><span class=\"p\">]</span>\nMinHeap hi<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">41</span><span class=\"p\">]</span>\nMedian is <span class=\"m\">38</span>\n<span class=\"o\">=======================</span>\nAdding number <span class=\"m\">62</span>\nMaxHeap lo<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">41</span><span class=\"p\">,</span> <span class=\"m\">35</span><span class=\"p\">]</span>\nMinHeap hi<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">62</span><span class=\"p\">]</span>\nMedian is <span class=\"m\">41</span>\n<span class=\"o\">=======================</span>\nAdding number <span class=\"m\">4</span>\nMaxHeap lo<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">35</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">]</span>\nMinHeap hi<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">41</span><span class=\"p\">,</span> <span class=\"m\">62</span><span class=\"p\">]</span>\nMedian is <span class=\"m\">38</span>\n<span class=\"o\">=======================</span>\nAdding number <span class=\"m\">97</span>\nMaxHeap lo<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">41</span><span class=\"p\">,</span> <span class=\"m\">35</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">]</span>\nMinHeap hi<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">62</span><span class=\"p\">,</span> <span class=\"m\">97</span><span class=\"p\">]</span>\nMedian is <span class=\"m\">41</span>\n<span class=\"o\">=======================</span>\nAdding number <span class=\"m\">108</span>\nMaxHeap lo<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">41</span><span class=\"p\">,</span> <span class=\"m\">35</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">]</span>\nMinHeap hi<span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"m\">62</span><span class=\"p\">,</span> <span class=\"m\">97</span><span class=\"p\">,</span> <span class=\"m\">108</span><span class=\"p\">]</span>\nMedian is <span class=\"m\">51.5</span>\n</pre></div>\n\n\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MedianFinder</span> <span class=\"p\">{</span>\n    <span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lo</span><span class=\"p\">;</span>                              <span class=\"c1\">// max heap</span>\n    <span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">greater</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">hi</span><span class=\"p\">;</span>   <span class=\"c1\">// min heap</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"c1\">// Adds a number into the data structure.</span>\n    <span class=\"kt\">void</span> <span class=\"n\">addNum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>                                    <span class=\"c1\">// Add to max heap</span>\n\n        <span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">());</span>                               <span class=\"c1\">// balancing step</span>\n        <span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"p\">{</span>                     <span class=\"c1\">// maintain size property</span>\n            <span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">());</span>\n            <span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Returns the median of current data stream</span>\n    <span class=\"kt\">double</span> <span class=\"n\">findMedian</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)</span> <span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">())</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(5 * log(n)) + O(1) \\approx O(log(n))</script>.</p>\n<ul>\n<li>At worst, there are three heap insertions and two heap deletions from the top. Each of these takes about <script type=\"math/tex; mode=display\">O(log(n))</script> time.</li>\n<li>Finding the mean takes constant <script type=\"math/tex; mode=display\">O(1)</script> time since the tops of heaps are directly accessible.</li>\n</ul>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> linear space to hold input in containers.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-multiset-and-two-pointers-accepted\">Approach #4 Multiset and Two Pointers [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Self-balancing Binary Search Trees (like an <a href=\"https://en.wikipedia.org/wiki/AVL_tree\">AVL Tree</a>) have some <em>very</em> interesting properties. They maintain the tree\'s height to a logarithmic bound. Thus inserting a new element has reasonably good time performance. The median <strong>always</strong> winds up in the root of the tree and/or one of its children. Solving this problem using the same approach as <a href=\"#approach-3-two-heaps-accepted\">Approach #3</a> but using a Self-balancing BST seems like a good choice. Except the fact that implementing such a tree is not trivial and prone to errors.</p>\n<p><em>Why reinvent the wheel?</em> Most languages implement a <code>multiset</code> class which emulates such behavior. The only problem remains keeping track of the median elements. That is easily solved with <strong>pointers!</strong> <sup id=\"fnref:note-2\"><a class=\"footnote-ref\" href=\"#fn:note-2\" rel=\"footnote\">2</a></sup></p>\n<p>We maintain two pointers: one for the lower median element and the other for the higher median element. When the total number of elements is odd, both the pointers point to the same median element (since there is only one median in this case). When the number of elements is even, the pointers point to two consecutive elements, whose mean is the representative median of the input.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>\n<p>Two iterators/pointers <code>lo_median</code> and <code>hi_median</code>, which iterate over the <code>data</code> multiset.</p>\n</li>\n<li>\n<p>While adding a number <code>num</code>, three cases arise:</p>\n<ol>\n<li>The container is currently <strong>empty.</strong> Hence we simply insert <code>num</code> and set both pointers to point to this element.</li>\n<li>\n<p>The container currently holds an <strong>odd</strong> number of elements. This means that both the pointers currently point to the same element.</p>\n<ul>\n<li>If <code>num</code> is not equal to the current median element, then <code>num</code> goes on either side of it. Whichever side it goes, the size of that part increases and hence the corresponding pointer is updated. For example, if <code>num</code> is less than the median element, the size of the lesser half of input increases by <script type=\"math/tex; mode=display\">1</script> on inserting <code>num</code>. Thus it makes sense to decrement <code>lo_median</code>.</li>\n<li>If <code>num</code> is equal to the current median element, then the action taken is dependent on how <code>num</code> is inserted into <code>data</code>. <strong>NOTE:</strong> In our given C++ code example, <code>std::multiset::insert</code> inserts an element <em>after</em> all elements of equal value. Hence we increment <code>hi_median</code>.</li>\n</ul>\n</li>\n<li>\n<p>The container currently holds an <strong>even</strong> number of elements. This means that the pointers currently point to consecutive elements.</p>\n<ul>\n<li>If <code>num</code> is a number between both median elements, then <code>num</code> becomes the new median. Both pointers must point to it.</li>\n<li>Otherwise, <code>num</code> increases the size of either the lesser or higher half of the input. We update the pointers accordingly. It is important to remember that both the pointers <strong><em>must</em></strong> point to the same element now.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>Finding the median is easy! It is simply the <strong>mean</strong> of the elements pointed to by the two pointers <code>lo_median</code> and <code>hi_median</code>.</p>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MedianFinder</span> <span class=\"p\">{</span>\n    <span class=\"n\">multiset</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"n\">multiset</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">lo_median</span><span class=\"p\">,</span> <span class=\"n\">hi_median</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">MedianFinder</span><span class=\"p\">()</span>\n        <span class=\"o\">:</span> <span class=\"n\">lo_median</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n        <span class=\"p\">,</span> <span class=\"n\">hi_median</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">addNum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"kt\">size_t</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>   <span class=\"c1\">// store previous size</span>\n\n        <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>               <span class=\"c1\">// insert into multiset</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// no elements before, one element now</span>\n            <span class=\"n\">lo_median</span> <span class=\"o\">=</span> <span class=\"n\">hi_median</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// odd size before (i.e. lo == hi), even size now (i.e. hi = lo + 1)</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"o\">*</span><span class=\"n\">lo_median</span><span class=\"p\">)</span>       <span class=\"c1\">// num &lt; lo</span>\n                <span class=\"n\">lo_median</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>                        <span class=\"c1\">// num &gt;= hi</span>\n                <span class=\"n\">hi_median</span><span class=\"o\">++</span><span class=\"p\">;</span>            <span class=\"c1\">// insertion at end of equal range</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// even size before (i.e. hi = lo + 1), odd size now (i.e. lo == hi)</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">lo_median</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"o\">*</span><span class=\"n\">hi_median</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">lo_median</span><span class=\"o\">++</span><span class=\"p\">;</span>                    <span class=\"c1\">// num in between lo and hi</span>\n                <span class=\"n\">hi_median</span><span class=\"o\">--</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;=</span> <span class=\"o\">*</span><span class=\"n\">hi_median</span><span class=\"p\">)</span>         <span class=\"c1\">// num inserted after hi</span>\n                <span class=\"n\">lo_median</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>                                <span class=\"c1\">// num &lt;= lo &lt; hi</span>\n                <span class=\"n\">lo_median</span> <span class=\"o\">=</span> <span class=\"o\">--</span><span class=\"n\">hi_median</span><span class=\"p\">;</span>        <span class=\"c1\">// insertion at end of equal range spoils lo</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">double</span> <span class=\"n\">findMedian</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lo_median</span> <span class=\"o\">+</span> <span class=\"o\">*</span><span class=\"n\">hi_median</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>A much shorter (but harder to understand), <strong><em>one</em></strong> <em>pointer</em> version <sup id=\"fnref:note-3\"><a class=\"footnote-ref\" href=\"#fn:note-3\" rel=\"footnote\">3</a></sup> of this solution is given below:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MedianFinder</span> <span class=\"p\">{</span>\n    <span class=\"n\">multiset</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"n\">multiset</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">MedianFinder</span><span class=\"p\">()</span>\n        <span class=\"o\">:</span> <span class=\"n\">mid</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">addNum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">n</span><span class=\"p\">)</span>                                 <span class=\"c1\">// first element inserted</span>\n            <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n        <span class=\"k\">else</span> <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"o\">*</span><span class=\"n\">mid</span><span class=\"p\">)</span>                    <span class=\"c1\">// median is decreased</span>\n            <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"nl\">mid</span> <span class=\"p\">:</span> <span class=\"n\">prev</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">));</span>\n        <span class=\"k\">else</span>                                    <span class=\"c1\">// median is increased</span>\n            <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">next</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">double</span> <span class=\"n\">findMedian</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(log(n)) + O(1) \\approx O(log(n))</script>.</p>\n<ul>\n<li>Inserting a number takes <script type=\"math/tex; mode=display\">O(log(n))</script> time for a standard <code>multiset</code> scheme. <sup id=\"fnref:note-4\"><a class=\"footnote-ref\" href=\"#fn:note-4\" rel=\"footnote\">4</a></sup></li>\n<li>Finding the mean takes constant <script type=\"math/tex; mode=display\">O(1)</script> time since the median elements are directly accessible from the two pointers.</li>\n</ul>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> linear space to hold input in container.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"further-thoughts\">Further Thoughts</h4>\n<p>There are so many ways around this problem, that frankly, it is scary. Here are a few more that I came across:</p>\n<ul>\n<li>\n<p><strong>Buckets!</strong> If the numbers in the stream are statistically distributed, then it is easier to keep track of buckets where the median would land, than the entire array. Once you know the correct bucket, simply sort it find the median. If the bucket size is significantly smaller than the size of input processed, this results in huge time saving. <a href=\"https://leetcode.com/mitbbs8080/\">@mitbbs8080</a> has an interesting implementation <a href=\"https://discuss.leetcode.com/post/32180\">here.</a></p>\n</li>\n<li>\n<p><strong>Reservoir Sampling.</strong> Following along the lines of using buckets: if the stream is statistically distributed, you can rely on Reservoir Sampling. Basically, if you could maintain just one good bucket (or <em>reservoir</em>) which could hold a representative sample of the entire stream, you could estimate the median of the entire stream from just this one bucket. This means good time and memory performance. Reservoir Sampling lets you do just that. Determining a <strong>\"good\"</strong> size for your reservoir? <em>Now, that\'s a whole other challenge.</em> A good explanation for this can be found in <a href=\"http://stackoverflow.com/a/10693752/2844164\">this StackOverflow answer.</a></p>\n</li>\n<li>\n<p><strong>Segment Trees</strong> are a great data structure if you need to do a lot of insertions or a lot of read queries over a limited range of input values. They allow us to do all such operations <em>fast</em> and in roughly the <em>same amount of time</em>, <strong>always.</strong> The only problem is that they are far from trivial to implement. Take a look at my <a href=\"https://leetcode.com/articles/recursive-approach-segment-trees-range-sum-queries-lazy-propagation/\">introductory article on Segment Trees</a> if you are interested.</p>\n</li>\n<li>\n<p><strong>Order Statistic Trees</strong> are data structures which seem to be tailor-made for this problem. They have all the nice features of a BST, but also let you find the <script type=\"math/tex; mode=display\">k^{th}</script> order element stored in the tree. They are a pain to implement and no standard interview would require you to code these up. But they are fun to use if they are already implemented in the language of your choice. <sup id=\"fnref:note-5\"><a class=\"footnote-ref\" href=\"#fn:note-5\" rel=\"footnote\">5</a></sup></p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/babhishek21\">@babhishek21</a>.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:note-1\">\n<p>Priority Queues queue out elements based on a predefined priority. They are an abstract concept and can, as such, be implemented in many different ways. Heaps are an efficient way to implement Priority Queues.&#160;<a class=\"footnote-backref\" href=\"#fnref:note-1\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:note-2\">\n<p>Shout-out to <a href=\"https://leetcode.com/pharese/\">@pharese</a> for this approach.&#160;<a class=\"footnote-backref\" href=\"#fnref:note-2\" rev=\"footnote\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:note-3\">\n<p>Inspired from <a href=\"https://discuss.leetcode.com/topic/74963/o-n-log-k-c-using-multiset-and-updating-middle-iterator/\">this post</a> by <a href=\"https://leetcode.com/stefanpochmann\">@StefanPochmann</a>.&#160;<a class=\"footnote-backref\" href=\"#fnref:note-3\" rev=\"footnote\" title=\"Jump back to footnote 3 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:note-4\">\n<p><a href=\"http://en.cppreference.com/w/cpp/container/multiset/insert\">Hinting</a> can reduce that to amortized constant <script type=\"math/tex; mode=display\">O(1)</script> time.&#160;<a class=\"footnote-backref\" href=\"#fnref:note-4\" rev=\"footnote\" title=\"Jump back to footnote 4 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:note-5\">\n<p><a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/manual/policy_based_data_structures_test.html\"><strong>GNU</strong> <code>libstdc++</code></a> users are in luck! Take a look at <a href=\"http://stackoverflow.com/a/11228573/2844164\">this StackOverflow answer.</a>&#160;<a class=\"footnote-backref\" href=\"#fnref:note-5\" rev=\"footnote\" title=\"Jump back to footnote 5 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>',NULL,1,'none','none','none'),(333,'Gray Code',2,'Backtracking',0,0,'<p></p><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p><p>Given a non-negative integer <i>n</i> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p><p>For example, given <i>n</i> = 2, return <code>[0,1,3,2]</code>. Its gray code sequence is:</p><pre>\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n</pre><p><b>Note:</b><br/>\nFor a given <i>n</i>, a gray code sequence is not uniquely defined.\n</p><p>For example, <code>[0,2,3,1]</code> is also a valid gray code sequence according to the above definition.</p><p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> grayCode(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> grayCode(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def grayCode(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* grayCode(int n, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> GrayCode(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number[]}\r\n */\r\nvar grayCode = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer[]}\r\ndef gray_code(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func grayCode(_ n: Int) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func grayCode(n int) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def grayCode(n: Int): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(334,'Next Greater Element III',2,'String',0,0,'<p></p><p>\nGiven a positive <b>32-bit</b> integer <b>n</b>, you need to find the smallest <b>32-bit</b> integer which has exactly the same digits existing in the integer <b>n</b> and is greater in value than n. If no such positive <b>32-bit</b> integer exists, you need to return -1.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 12\n<b>Output:</b> 21\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> 21\n<b>Output:</b> -1\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int nextGreaterElement(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int nextGreaterElement(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def nextGreaterElement(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int nextGreaterElement(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NextGreaterElement(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar nextGreaterElement = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef next_greater_element(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func nextGreaterElement(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nextGreaterElement(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nextGreaterElement(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(335,'Insert Delete GetRandom O(1)',2,'Array,Hash Table,Design',0,0,'<p></p><p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p><p>\n</p><ol>\n<li><code>insert(val)</code>: Inserts an item val to the set if not already present.</li>\n<li><code>remove(val)</code>: Removes an item val from the set if present.</li>\n<li><code>getRandom</code>: Returns a random element from current set of elements. Each element must have the <b>same probability</b> of being returned.</li>\n</ol><p><b>Example:</b>\n</p><pre>\n// Init an empty set.\nRandomizedSet randomSet = new RandomizedSet();\n\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomSet.insert(1);\n\n// Returns false as 2 does not exist in the set.\nrandomSet.remove(2);\n\n// Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomSet.insert(2);\n\n// getRandom should return either 1 or 2 randomly.\nrandomSet.getRandom();\n\n// Removes 1 from the set, returns true. Set now contains [2].\nrandomSet.remove(1);\n\n// 2 was already in the set, so return false.\nrandomSet.insert(2);\n\n// Since 2 is the only number in the set, getRandom always return 2.\nrandomSet.getRandom();\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class RandomizedSet {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    RandomizedSet() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\n    bool insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\r\n    bool remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the set. */\r\n    int getRandom() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * RandomizedSet obj = new RandomizedSet();\r\n * bool param_1 = obj.insert(val);\r\n * bool param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class RandomizedSet {\n\n    /** Initialize your data structure here. */\n    public RandomizedSet() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    public boolean insert(int val) {\n        \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    public boolean remove(int val) {\n        \n    }\n    \n    /** Get a random element from the set. */\n    public int getRandom() {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class RandomizedSet(object):\r\n\r\n    def __init__(self):\r\n        """\r\n        Initialize your data structure here.\r\n        """\r\n        \r\n\r\n    def insert(self, val):\r\n        """\r\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n    def remove(self, val):\r\n        """\r\n        Removes a value from the set. Returns true if the set contained the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        """\r\n        \r\n\r\n    def getRandom(self):\r\n        """\r\n        Get a random element from the set.\r\n        :rtype: int\r\n        """\r\n        \r\n\r\n\r\n# Your RandomizedSet object will be instantiated and called as such:\r\n# obj = RandomizedSet()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.getRandom()\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\n    \n} RandomizedSet;\n\n/** Initialize your data structure here. */\nRandomizedSet* randomizedSetCreate() {\n    \n}\n\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\n    \n}\n\n/** Removes a value from the set. Returns true if the set contained the specified element. */\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\n    \n}\n\n/** Get a random element from the set. */\nint randomizedSetGetRandom(RandomizedSet* obj) {\n    \n}\n\nvoid randomizedSetFree(RandomizedSet* obj) {\n    \n}\n\n/**\n * Your RandomizedSet struct will be instantiated and called as such:\n * struct RandomizedSet* obj = randomizedSetCreate();\n * bool param_1 = randomizedSetInsert(obj, val);\n * bool param_2 = randomizedSetRemove(obj, val);\n * int param_3 = randomizedSetGetRandom(obj);\n * randomizedSetFree(obj);\n */\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class RandomizedSet {\r\n\r\n    /** Initialize your data structure here. */\r\n    public RandomizedSet() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\n    public bool Insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\r\n    public bool Remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the set. */\r\n    public int GetRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * RandomizedSet obj = new RandomizedSet();\r\n * bool param_1 = obj.Insert(val);\r\n * bool param_2 = obj.Remove(val);\r\n * int param_3 = obj.GetRandom();\r\n */\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Initialize your data structure here.\r\n */\r\nvar RandomizedSet = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedSet.prototype.insert = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes a value from the set. Returns true if the set contained the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedSet.prototype.remove = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Get a random element from the set.\r\n * @return {number}\r\n */\r\nRandomizedSet.prototype.getRandom = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * var obj = Object.create(RandomizedSet).createNew()\r\n * var param_1 = obj.insert(val)\r\n * var param_2 = obj.remove(val)\r\n * var param_3 = obj.getRandom()\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class RandomizedSet\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def insert(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes a value from the set. Returns true if the set contained the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def remove(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get a random element from the set.\r\n    :rtype: Integer\r\n=end\r\n    def get_random()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your RandomizedSet object will be instantiated and called as such:\r\n# obj = RandomizedSet.new()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.get_random()\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type RandomizedSet struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() RandomizedSet {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\nfunc (this *RandomizedSet) Insert(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Removes a value from the set. Returns true if the set contained the specified element. */\r\nfunc (this *RandomizedSet) Remove(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Get a random element from the set. */\r\nfunc (this *RandomizedSet) GetRandom() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.Insert(val);\r\n * param_2 := obj.Remove(val);\r\n * param_3 := obj.GetRandom();\r\n */\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"\n    /** Initialize your data structure here. */class RandomizedSet() {\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    def insert(int val) : Boolean = {\n\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    def remove(int val) : Boolean = {\n\n    }\n    \n    /** Get a random element from the set. */\n    def getRandom() : Int = {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet();\n * Boolean param_1 = obj.insert(val);\n * Boolean param_2 = obj.remove(val);\n * Int param_3 = obj.getRandom();\n */\" }]',NULL,NULL,1,'none','none','none'),(336,'Linked List Cycle',1,'Linked List,Two Pointers',0,0,'<p></p><p>\nGiven a linked list, determine if it has a cycle in it.\n</p><p>\nFollow up:<br/>\nCan you solve it without using extra space?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool hasCycle(ListNode *head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean hasCycle(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def hasCycle(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nbool hasCycle(struct ListNode *head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool HasCycle(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar hasCycle = function(head) {\r\n    \r\n};\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-hash-table-accepted\">Approach #1 (Hash Table) [Accepted]</a></li>\n<li><a href=\"#approach-2-two-pointers-accepted\">Approach #2 (Two Pointers) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for beginners. It introduces the following ideas: Linked List, Hash Table and Two Pointers.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-hash-table-accepted\">Approach #1 (Hash Table) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>To detect if a list is cyclic, we can check whether a node had been visited before. A natural way is to use a hash table.</p>\n<p><strong>Algorithm</strong></p>\n<p>We go through each node one by one and record each node\'s reference (or memory address) in a hash table. If the current node is <code>null</code>, we have reached the end of the list and it must not be cyclic. If current node’s reference is in the hash table, then return true.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasCycle</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">ListNode</span><span class=\"o\">&gt;</span> <span class=\"n\">nodesSeen</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nodesSeen</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">nodesSeen</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nWe visit each of the <script type=\"math/tex; mode=display\">n</script> elements in the list at most once. Adding a node to the hash table costs only <script type=\"math/tex; mode=display\">O(1)</script> time.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script>.\nThe space depends on the number of elements added to the hash table, which contains at most <script type=\"math/tex; mode=display\">n</script> elements.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-two-pointers-accepted\">Approach #2 (Two Pointers) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Imagine two runners running on a track at different speed. What happens when the track is actually a circle?</p>\n<p><strong>Algorithm</strong></p>\n<p>The space complexity can be reduced to <script type=\"math/tex; mode=display\">O(1)</script> by considering two pointers at <strong>different speed</strong> - a slow pointer and a fast pointer. The slow pointer moves one step at a time while the fast pointer moves two steps at a time.</p>\n<p>If there is no cycle in the list, the fast pointer will eventually reach the end and we can return false in this case.</p>\n<p>Now consider a cyclic list and imagine the slow and fast pointers are two runners racing around a circle track. The fast runner will eventually meet the slow runner. Why? Consider this case (we name it case A) - The fast runner is just one step behind the slow runner. In the next iteration, they both increment one and two steps respectively and meet each other.</p>\n<p>How about other cases? For example, we have not considered cases where the fast runner is two or three steps behind the slow runner yet. This is simple, because in the next or next\'s next iteration, this case will be reduced to case A mentioned above.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasCycle</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">slow</span> <span class=\"o\">!=</span> <span class=\"n\">fast</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fast</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nLet us denote <script type=\"math/tex; mode=display\">n</script> as the total number of nodes in the linked list. To analyze its time complexity, we consider the following two cases separately.</p>\n<ul>\n<li>\n<p><strong><em>List has no cycle:</em></strong><br />\nThe fast pointer reaches the end first and the run time depends on the list\'s length, which is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n<li>\n<p><strong><em>List has a cycle:</em></strong><br />\nWe break down the movement of the slow pointer into two steps, the non-cyclic part and the cyclic part:</p>\n<ol>\n<li>\n<p>The slow pointer takes \"non-cyclic length\" steps to enter the cycle. At this point, the fast pointer has already reached the cycle. <script type=\"math/tex; mode=display\">\\text{Number of iterations} = \\text{non-cyclic length} = N</script>\n</p>\n</li>\n<li>\n<p>Both pointers are now in the cycle. Consider two runners running in a cycle - the fast runner moves 2 steps while the slow runner moves 1 steps at a time. Since the speed difference is 1, it takes <script type=\"math/tex; mode=display\">\\frac{\\text{distance between the 2 runners}}{\\text{difference of speed}}</script> loops for the fast runner to catch up with the slow runner. As the distance is at most \"cyclic length K\" and the speed difference is 1, we conclude that <script type=\"math/tex; mode=display\">\\text{Number of iterations} = \\text{almost } `` \\text{cyclic length K} \".</script>\n</p>\n</li>\n</ol>\n</li>\n</ul>\n<p>Therefore, the worst case time complexity is <script type=\"math/tex; mode=display\">O(N+K)</script>, which is <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe only use two nodes (slow and fast) so the space complexity is <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<p>Analysis written by: @tianyi8, revised by @1337c0d3r.</p>',NULL,1,'none','none','none'),(337,'Find Minimum in Rotated Sorted Array II',3,'Array,Binary Search',0,0,'<p></p><blockquote>\n<p><i>Follow up</i> for \"Find Minimum in Rotated Sorted Array\":<br/>\nWhat if <i>duplicates</i> are allowed?</p>\n<p>Would this affect the run-time complexity? How and why?</p>\n</blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p><p>Find the minimum element.</p><p>The array may contain duplicates.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMin(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMin(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMin(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMin(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMin(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findMin = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_min(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMin(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMin(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMin(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(338,'Word Frequency',2,'',0,0,'<p></p><p>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p><p>For simplicity sake, you may assume:</p><ul>\n<li><code>words.txt</code> contains only lowercase characters and space <code>\' \'</code> characters.</li>\n<li>Each word must consist of lowercase characters only.</li>\n<li>Words are separated by one or more whitespace characters.</li>\n</ul><p>For example, assume that <code>words.txt</code> has the following content:</p><pre>the day is sunny the the\nthe sunny is is\n</pre>\n\nYour script should output the following, sorted by descending frequency:\n<pre>\nthe 4\nis 3\nsunny 2\nday 1\n</pre><p>\n<b>Note:</b><br/>\nDon\'t worry about handling ties, it is guaranteed that each word\'s frequency count is unique.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">[show hint]</a></p><div class=\"spoilers\"><b>Hint:</b><br/>\nCould you write it in one-line using <a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html\">Unix pipes</a>?\n</div>','[{\"value\": \"bash\", \"text\": \"Bash\", \"defaultCode\": \"# Read from the file words.txt and output the word frequency list to stdout.\r\n\" }]',NULL,NULL,1,'none','none','none'),(339,'Frog Jump',3,'Dynamic Programming',0,0,'<p></p><p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p><p>Given a list of stones\' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.\n</p><p>If the frog\'s last jump was <i>k</i> units, then its next jump must be either <i>k</i> - 1, <i>k</i>, or <i>k</i> + 1 units. Note that the frog can only jump in the forward direction.</p><p><b>Note:</b>\n</p><ul>\n<li>The number of stones is ≥ 2 and is &lt; 1,100.</li>\n<li>Each stone\'s position will be a non-negative integer &lt; 2<sup>31</sup>.</li>\n<li>The first stone\'s position is always 0.</li>\n</ul><p><b>Example 1:</b>\n</p><pre>\n<b>[0,1,3,5,6,8,12,17]</b>\n\nThere are a total of 8 stones.\nThe first stone at the 0th unit, second stone at the 1st unit,\nthird stone at the 3rd unit, and so on...\nThe last stone at the 17th unit.\n\n<b>Return true</b>. The frog can jump to the last stone by jumping \n1 unit to the 2nd stone, then 2 units to the 3rd stone, then \n2 units to the 4th stone, then 3 units to the 6th stone, \n4 units to the 7th stone, and 5 units to the 8th stone.\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>[0,1,2,3,4,8,9,11]</b>\n\n<b>Return false</b>. There is no way to jump to the last stone as \nthe gap between the 5th and 6th stone is too large.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canCross(vector<int>& stones) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canCross(int[] stones) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canCross(self, stones):\r\n        """\r\n        :type stones: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canCross(int* stones, int stonesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanCross(int[] stones) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} stones\r\n * @return {boolean}\r\n */\r\nvar canCross = function(stones) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} stones\r\n# @return {Boolean}\r\ndef can_cross(stones)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canCross(_ stones: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canCross(stones []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canCross(stones: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(340,'Spiral Matrix',2,'Array',0,0,'<p></p><p>Given a matrix of <i>m</i> x <i>n</i> elements (<i>m</i> rows, <i>n</i> columns), return all elements of the matrix in spiral order.\n</p><p>\nFor example,<br/>\nGiven the following matrix:\n</p><pre>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n</pre><p>\nYou should return <code>[1,2,3,6,9,8,7,4,5]</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def spiralOrder(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> SpiralOrder(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {number[]}\r\n */\r\nvar spiralOrder = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Integer[]}\r\ndef spiral_order(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func spiralOrder(matrix [][]int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(341,'String to Integer (atoi)',2,'Math,String',0,0,'<p></p><p>Implement <span style=\"font-family:monospace\">atoi</span> to convert a string to an integer.</p><p><b>Hint:</b> Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p><p>\n<b>Notes:</b> \nIt is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front. </p><p>\n<b><font color=\"red\">Update (2015-02-10):</font></b><br/>\nThe signature of the <code>C++</code> function had been updated. If you still see your function signature accepts a <code>const char *</code> argument, please click the reload button <span class=\"glyphicon glyphicon-refresh\"></span> to reset your code definition.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">spoilers alert... click to show requirements for atoi.</a></p><div class=\"spoilers\"><b>Requirements for atoi:</b>\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\n<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.\n</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int myAtoi(string str) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int myAtoi(String str) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def myAtoi(self, str):\r\n        """\r\n        :type str: str\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int myAtoi(char* str) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MyAtoi(string str) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar myAtoi = function(str) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} str\r\n# @return {Integer}\r\ndef my_atoi(str)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func myAtoi(_ str: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func myAtoi(str string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def myAtoi(str: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(342,'The Skyline Problem',3,'Binary Indexed Tree,Segment Tree,Heap,Divide and Conquer',0,0,'<p></p><p>A city\'s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are <b>given the locations and height of all the buildings</b> as shown on a cityscape photo (Figure A), write a program to <b>output the skyline</b> formed by these buildings collectively (Figure B).</p> Cityscape <a href=\"/static/images/problemset/skyline1.jpg\" target=\"_blank\">\n<img alt=\"Buildings\" border=\"0\" src=\"/static/images/problemset/skyline1.jpg\" style=\" max-width: 45%;\"/>\n</a> Use this image for the \'turning point\' description of skyline <a href=\"/static/images/problemset/skyline2.jpg\" target=\"_blank\">\n<img alt=\"Skyline Contour\" border=\"0\" src=\"/static/images/problemset/skyline2.jpg\" style=\"max-width: 45%;\"/>\n</a> Use the following image if we\'d like to define the output as \'horizontal lines\' rather than \'turning points\'\n<a href=\"http://tinypic.com?ref=mij3wi\" target=\"_blank\">\n<img style=\"max-width: 45%;\" src=\"http://i59.tinypic.com/mij3wi.jpg\" border=\"0\" alt=\"Skyline Contour\">\n</a>\n<p>The geometric information of each building is represented by a triplet of integers <code>[Li, Ri, Hi]</code>, where <code>Li</code> and <code>Ri</code> are the x coordinates of the left and right edge of the ith building, respectively, and <code>Hi</code> is its height. It is guaranteed that <code>0 ? Li, Ri ? INT_MAX</code>, <code>0 &lt; Hi ? INT_MAX</code>, and <code>Ri - Li &gt; 0</code>. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</p><p>For instance, the dimensions of all buildings in Figure A are recorded as: <code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] </code>.</p><p>The output is a list of \"<b>key points</b>\" (red dots in Figure B) in the format of <code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> that uniquely defines a skyline. <b>A key point is the left endpoint of a horizontal line segment</b>. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.\n\n</p><p>For instance, the skyline in Figure B should be represented as:<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>.</p><p><b>Notes:</b>\n</p><ul>\n<li> The number of buildings in any input list is guaranteed to be in the range <code>[0, 10000]</code>.</li>\n<li> The input list is already sorted in ascending order by the left x position <code>Li</code>. </li>\n<li> The output list must be sorted by the x position. </li>\n<li> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...[2 3], [4 5], [12 7], ...]</code></li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/stellari\">@stellari</a> for adding this problem, creating these two awesome images and all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<int[]> getSkyline(int[][] buildings) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def getSkyline(self, buildings):\r\n        """\r\n        :type buildings: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** getSkyline(int** buildings, int buildingsRowSize, int buildingsColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int[]> GetSkyline(int[,] buildings) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} buildings\r\n * @return {number[][]}\r\n */\r\nvar getSkyline = function(buildings) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} buildings\r\n# @return {Integer[][]}\r\ndef get_skyline(buildings)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getSkyline(buildings [][]int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getSkyline(buildings: Array[Array[Int]]): List[Array[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(343,'Ugly Number II',2,'Dynamic Programming,Heap,Math',0,0,'<p></p><p>\nWrite a program to find the <code>n</code>-th ugly number.\n</p><p>\nUgly numbers are positive numbers whose prime factors only include <code>2, 3, 5</code>. For example, <code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> is the sequence of the first <code>10</code> ugly numbers.\n</p><p>\nNote that <code>1</code> is typically treated as an ugly number, and <i>n</i> <b>does not exceed 1690</b>.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int nthUglyNumber(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int nthUglyNumber(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def nthUglyNumber(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int nthUglyNumber(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NthUglyNumber(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar nthUglyNumber = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef nth_ugly_number(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func nthUglyNumber(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nthUglyNumber(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nthUglyNumber(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(344,'Merge Sorted Array',1,'Array,Two Pointers',0,0,'<p></p><p>Given two sorted integer arrays <i>nums1</i> and <i>nums2</i>, merge <i>nums2</i> into <i>nums1</i> as one sorted array.</p><p>\n<b>Note:</b><br/>\nYou may assume that <i>nums1</i> has enough space (size that is greater or equal to <i>m</i> + <i>n</i>) to hold additional elements from <i>nums2</i>. The number of elements initialized in <i>nums1</i> and <i>nums2</i> are <i>m</i> and <i>n</i> respectively.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def merge(self, nums1, m, nums2, n):\r\n        """\r\n        :type nums1: List[int]\r\n        :type m: int\r\n        :type nums2: List[int]\r\n        :type n: int\r\n        :rtype: void Do not return anything, modify nums1 in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void merge(int* nums1, int m, int* nums2, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums1\r\n * @param {number} m\r\n * @param {number[]} nums2\r\n * @param {number} n\r\n * @return {void} Do not return anything, modify nums1 in-place instead.\r\n */\r\nvar merge = function(nums1, m, nums2, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\r\n# @param {Integer} m\r\n# @param {Integer[]} nums2\r\n# @param {Integer} n\r\n# @return {Void} Do not return anything, modify nums1 in-place instead.\r\ndef merge(nums1, m, nums2, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(345,'Brick Wall',2,'Hash Table',0,0,'<p></p><p>There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the <b>top</b> to the <b>bottom</b> and cross the <b>least</b> bricks. </p><p>\nThe brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right. \n</p><p>If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks. </p><p><b>You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. </b></p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> \n[[1,2,2,1],\n [3,1,2],\n [1,3,2],\n [2,4],\n [3,1,2],\n [1,3,1,1]]\n<b>Output:</b> 2\n<b>Explanation:</b> \n<img src=\"https://leetcode.com/static/images/problemset/brick_wall.png\" width=\"30%\"/>\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The width sum of bricks in different rows are the same and won\'t exceed INT_MAX.</li>\n<li>The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won\'t exceed 20,000. </li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int leastBricks(vector<vector<int>>& wall) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int leastBricks(List<List<Integer>> wall) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def leastBricks(self, wall):\r\n        """\r\n        :type wall: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int leastBricks(int** wall, int wallRowSize, int *wallColSizes) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LeastBricks(IList<IList<int>> wall) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} wall\r\n * @return {number}\r\n */\r\nvar leastBricks = function(wall) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} wall\r\n# @return {Integer}\r\ndef least_bricks(wall)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func leastBricks(_ wall: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func leastBricks(wall [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def leastBricks(wall: List[List[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(346,'Kth Smallest Element in a Sorted Matrix',2,'Binary Search,Heap',0,0,'<p></p><p>Given a <i>n</i> x <i>n</i> matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p><p>\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\n</p><p><b>Example:</b>\n</p><pre>\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n</pre><p><b>Note: </b><br/>\nYou may assume k is always valid, 1 ? k ? n<sup>2</sup>.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int kthSmallest(int[][] matrix, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def kthSmallest(self, matrix, k):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int kthSmallest(int** matrix, int matrixRowSize, int matrixColSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int KthSmallest(int[,] matrix, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar kthSmallest = function(matrix, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef kth_smallest(matrix, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func kthSmallest(_ matrix: [[Int]], _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func kthSmallest(matrix [][]int, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def kthSmallest(matrix: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(347,'Big Countries',1,'',0,0,'<p></p><p>There is a table <code>World</code> </p><pre>\n+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n</pre><p>\nA country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\n</p><p>\nWrite a SQL solution to output big countries\' name, population and area.\n</p><p>\nFor example, according to the above table, we should output:\n</p><pre>\n+--------------+-------------+--------------+\n| name         | population  | area         |\n+--------------+-------------+--------------+\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n+--------------+-------------+--------------+\n</pre>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-i-using-where-clause-and-or-accepted\">Approach I: Using WHERE clause and OR [Accepted]</a></li>\n<li><a href=\"#approach-ii-using-where-clause-and-union-accepted\">Approach II: Using WHERE clause and UNION [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-i-using-where-clause-and-or-accepted\">Approach I: Using <code>WHERE</code> clause and <code>OR</code> [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Use <code>WHERE</code> clause in SQL to filter these records and get the target countries.</p>\n<p><strong>Algorithm</strong></p>\n<p>According to the definition, a big country meets at least one of the following two conditions:\n1. It has an area of bigger than 3 million square km.\n2. It has a population of more than 25 million.</p>\n<p>So for the first condition, we can use the following code to get the big countries of this type.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">area</span> <span class=\"k\">FROM</span> <span class=\"n\">world</span> <span class=\"k\">WHERE</span> <span class=\"n\">area</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3000000</span>\n</pre></div>\n\n\n<p>In addition, we can use below code to get big countries of more than 25 million people.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">area</span> <span class=\"k\">FROM</span> <span class=\"n\">world</span> <span class=\"k\">WHERE</span> <span class=\"n\">population</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25000000</span>\n</pre></div>\n\n\n<p>As most people may already come into mind, we can use <code>OR</code> to combine these two solutions for the two sub-problems together.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">area</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">world</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">area</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3000000</span> <span class=\"k\">OR</span> <span class=\"n\">population</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25000000</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<h4 id=\"approach-ii-using-where-clause-and-union-accepted\">Approach II: Using <code>WHERE</code> clause and <code>UNION</code> [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea of this approach is the same as the first one. However, we use <code>UNION</code> instead of <code>OR</code>.</p>\n<p><strong>MySQL</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SELECT</span>\n    <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">area</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">world</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">area</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3000000</span>\n\n<span class=\"k\">UNION</span>\n\n<span class=\"k\">SELECT</span>\n    <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">area</span>\n<span class=\"k\">FROM</span>\n    <span class=\"n\">world</span>\n<span class=\"k\">WHERE</span>\n    <span class=\"n\">population</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25000000</span>\n<span class=\"p\">;</span>\n</pre></div>\n\n\n<blockquote>\n<p>Note: This solution runs a little bit faster than the first one. However, they do not have big difference.</p>\n</blockquote>',NULL,1,'none','none','none'),(348,'Number of 1 Bits',1,'Bit Manipulation',0,0,'<p></p><p>Write a function that takes an unsigned integer and returns the number of ’1\' bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\">Hamming weight</a>).</p><p>For example, the 32-bit integer ’11\' has binary representation <code>00000000000000000000000000001011</code>, so the function should return 3.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int hammingWeight(uint32_t n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"public class Solution {\r\n    // you need to treat n as an unsigned value\r\n    public int hammingWeight(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def hammingWeight(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int hammingWeight(uint32_t n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int HammingWeight(uint n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n - a positive integer\r\n * @return {number}\r\n */\r\nvar hammingWeight = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n, a positive integer\r\n# @return {Integer}\r\ndef hamming_weight(n)\r\n    \r\nend\" }]','<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-loop-and-flip-accepted\">Approach #1 (Loop and Flip) [Accepted]</h4>\n<p><strong> Algorithm</strong></p>\n<p>The solution is straight-forward. We check each of the <script type=\"math/tex; mode=display\">32</script> bits of the number. If the bit is <script type=\"math/tex; mode=display\">1</script>, we add one to the number of <script type=\"math/tex; mode=display\">1</script>-bits.</p>\n<p>We can check the <script type=\"math/tex; mode=display\">i^{th}</script> bit of a number using a <em>bit mask</em>. We start with a mask <script type=\"math/tex; mode=display\">m=1</script>, because the binary representation of <script type=\"math/tex; mode=display\">1</script> is,</p>\n<p>\n<script type=\"math/tex; mode=display\">\n0000\\ 0000\\ 0000\\ 0000\\ 0000\\ 0000\\ 0000\\ 0001\n</script>\nClearly, a logical AND between any number and the mask <script type=\"math/tex; mode=display\">1</script> gives us the least significant bit of this number. To check the next bit, we shift the mask to the left by one.</p>\n<p>\n<script type=\"math/tex; mode=display\">\n0000\\ 0000\\ 0000\\ 0000\\ 0000\\ 0000\\ 0000\\ 0010\n</script>\n</p>\n<p>And so on.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">hammingWeight</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">32</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"n\">mask</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">bits</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">mask</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">bits</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>The run time depends on the number of bits in <script type=\"math/tex; mode=display\">n</script>. Because <script type=\"math/tex; mode=display\">n</script> in this piece of code is a 32-bit integer, the time complexity is <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>The space complexity is <script type=\"math/tex; mode=display\">O(1)</script>, since no additional space is allocated.</p>\n<hr />\n<h4 id=\"approach-2-bit-manipulation-trick-accepted\">Approach #2 (Bit Manipulation Trick) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can make the previous algorithm simpler and a little faster. Instead of checking every bit of the number, we repeatedly flip the least-significant <script type=\"math/tex; mode=display\">1</script>-bit of the number to <script type=\"math/tex; mode=display\">0</script>, and add <script type=\"math/tex; mode=display\">1</script> to the sum. As soon as the number becomes <script type=\"math/tex; mode=display\">0</script>, we know that it does not have any more <script type=\"math/tex; mode=display\">1</script>-bits, and we return the sum.</p>\n<p>The key idea here is to realize that for any number <script type=\"math/tex; mode=display\">n</script>, doing a bit-wise AND of <script type=\"math/tex; mode=display\">n</script> and <script type=\"math/tex; mode=display\">n - 1</script> flips the least-significant <script type=\"math/tex; mode=display\">1</script>-bit in <script type=\"math/tex; mode=display\">n</script> to <script type=\"math/tex; mode=display\">0</script>. Why? Consider the binary representations of <script type=\"math/tex; mode=display\">n</script> and <script type=\"math/tex; mode=display\">n - 1</script>.</p>\n<p align=\"center\"><img alt=\"Number of 1 Bits\" src=\"https://leetcode.com/media/original_images/191_Number_Of_Bits.png\" width=\"400px\" /></p>\n<p align=\"center\"><em>Figure 1. AND-ing <script type=\"math/tex; mode=display\">n</script> and <script type=\"math/tex; mode=display\">n-1</script> flips the least-significant <script type=\"math/tex; mode=display\">1</script>-bit to 0.</em></p>\n<p>In the binary representation, the least significant <script type=\"math/tex; mode=display\">1</script>-bit in <script type=\"math/tex; mode=display\">n</script> always corresponds to a <script type=\"math/tex; mode=display\">0</script>-bit in <script type=\"math/tex; mode=display\">n - 1</script>. Therefore, anding the two numbers <script type=\"math/tex; mode=display\">n</script> and <script type=\"math/tex; mode=display\">n - 1</script> always flips the least significant <script type=\"math/tex; mode=display\">1</script>-bit in <script type=\"math/tex; mode=display\">n</script> to <script type=\"math/tex; mode=display\">0</script>, and keeps all other bits the same.</p>\n<p>Using this trick, the code becomes very simple.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">hammingWeight</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sum</span><span class=\"o\">++;</span>\n        <span class=\"n\">n</span> <span class=\"o\">&amp;=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>The run time depends on the number of <script type=\"math/tex; mode=display\">1</script>-bits in <script type=\"math/tex; mode=display\">n</script>. In the worst case, all bits in <script type=\"math/tex; mode=display\">n</script> are <script type=\"math/tex; mode=display\">1</script>-bits. In case of a 32-bit integer, the run time is <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>The space complexity is <script type=\"math/tex; mode=display\">O(1)</script>, since no additional space is allocated.</p>\n<p>Analysis written by: @noran.</p>',NULL,1,'none','none','none'),(349,'Word Break II',3,'Dynamic Programming,Backtracking',0,0,'<p></p><p>\nGiven a <b>non-empty</b> string <i>s</i> and a dictionary <i>wordDict</i> containing a list of <b>non-empty</b> words, add spaces in <i>s</i> to construct a sentence where each word is a valid dictionary word. You may assume the dictionary does not contain duplicate words.\n</p><p>\nReturn all such possible sentences.\n</p><p>\nFor example, given<br/>\n<i>s</i> = <code>\"catsanddog\"</code>,<br/>\n<i>dict</i> = <code>[\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]</code>.\n</p><p>\nA solution is <code>[\"cats and dog\", \"cat sand dog\"]</code>.\n</p><p>\n<b><font color=\"red\">UPDATE (2017/1/4):</font></b><br/>\nThe <i>wordDict</i> parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def wordBreak(self, s, wordDict):\r\n        """\r\n        :type s: str\r\n        :type wordDict: List[str]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** wordBreak(char* s, char** wordDict, int wordDictSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string[]} wordDict\r\n * @return {string[]}\r\n */\r\nvar wordBreak = function(s, wordDict) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String[]} word_dict\r\n# @return {String[]}\r\ndef word_break(s, word_dict)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wordBreak(s string, wordDict []string) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(350,'Remove K Digits',2,'Stack,Greedy',0,0,'<p></p><p>Given a non-negative integer <i>num</i> represented as a string, remove <i>k</i> digits from the number so that the new number is the smallest possible.\n</p><p><b>Note:</b><br/>\n</p><ul>\n<li>The length of <i>num</i> is less than 10002 and will be ≥ <i>k</i>.</li>\n<li>The given <i>num</i> does not contain any leading zero.</li>\n</ul><p><b>Example 1:</b>\n</p><pre>\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n</pre><p><b>Example 2:</b>\n</p><pre>\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n</pre><p><b>Example 3:</b>\n</p><pre>\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string removeKdigits(string num, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String removeKdigits(String num, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def removeKdigits(self, num, k):\r\n        """\r\n        :type num: str\r\n        :type k: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* removeKdigits(char* num, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string RemoveKdigits(string num, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} num\r\n * @param {number} k\r\n * @return {string}\r\n */\r\nvar removeKdigits = function(num, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num\r\n# @param {Integer} k\r\n# @return {String}\r\ndef remove_kdigits(num, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func removeKdigits(_ num: String, _ k: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeKdigits(num string, k int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeKdigits(num: String, k: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(351,'Search for a Range',2,'Binary Search,Array',0,0,'<p></p><p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.</p><p>Your algorithm\'s runtime complexity must be in the order of <i>O</i>(log <i>n</i>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><p>\nFor example,<br/>\nGiven <code>[5, 7, 7, 8, 8, 10]</code> and target value 8,<br/>\nreturn <code>[3, 4]</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> searchRange(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def searchRange(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] SearchRange(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number[]}\r\n */\r\nvar searchRange = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer[]}\r\ndef search_range(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchRange(nums []int, target int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(352,'Find All Anagrams in a String',1,'Hash Table',0,0,'<p></p><p>Given a string <b>s</b> and a <b>non-empty</b> string <b>p</b>, find all the start indices of <b>p</b>\'s anagrams in <b>s</b>.</p><p>Strings consists of lowercase English letters only and the length of both strings <b>s</b> and <b>p</b> will not be larger than 20,100.</p><p>The order of output does not matter.</p><p><b>Example 1:</b>\n</p><pre>\n<b>Input:</b>\ns: \"cbaebabacd\" p: \"abc\"\n\n<b>Output:</b>\n[0, 6]\n\n<b>Explanation:</b>\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>Input:</b>\ns: \"abab\" p: \"ab\"\n\n<b>Output:</b>\n[0, 1, 2]\n\n<b>Explanation:</b>\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findAnagrams(string s, string p) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findAnagrams(self, s, p):\r\n        """\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: List[int]\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findAnagrams(char* s, char* p, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> FindAnagrams(string s, string p) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} p\r\n * @return {number[]}\r\n */\r\nvar findAnagrams = function(s, p) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} p\r\n# @return {Integer[]}\r\ndef find_anagrams(s, p)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findAnagrams(s string, p string) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(353,'Replace Words',2,'Hash Table,Trie',0,0,'<p></p><p>\nIn English, we have a concept called <code>root</code>, which can be followed by some other words to form another longer word - let\'s call this word <code>successor</code>. For example, the root <code>an</code>, followed by <code>other</code>, which can form another word <code>another</code>.\n</p><p>\nNow, given a dictionary consisting of many roots and a sentence. You need to replace all the <code>successor</code> in the sentence with the <code>root</code> forming it. If a <code>successor</code> has many <code>roots</code> can form it, replace it with the root with the shortest length.\n</p><p>\nYou need to output the sentence after the replacement.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> dict = [\"cat\", \"bat\", \"rat\"]\nsentence = \"the cattle was rattled by the battery\"\n<b>Output:</b> \"the cat was rat by the bat\"\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The input will only have lower-case letters.</li>\n<li> 1 &lt;= dict words number &lt;= 1000 </li>\n<li> 1 &lt;= sentence words number &lt;= 1000  </li>\n<li> 1 &lt;= root length &lt;= 100 </li>\n<li> 1 &lt;= sentence words length &lt;= 1000 </li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string replaceWords(vector<string>& dict, string sentence) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String replaceWords(List<String> dict, String sentence) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def replaceWords(self, dict, sentence):\r\n        """\r\n        :type dict: List[str]\r\n        :type sentence: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def replaceWords(self, dict, sentence):\r\n        """\r\n        :type dict: List[str]\r\n        :type sentence: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* replaceWords(char** dict, int dictSize, char* sentence) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ReplaceWords(IList<string> dict, string sentence) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} dict\r\n * @param {string} sentence\r\n * @return {string}\r\n */\r\nvar replaceWords = function(dict, sentence) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} dict\r\n# @param {String} sentence\r\n# @return {String}\r\ndef replace_words(dict, sentence)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func replaceWords(_ dict: [String], _ sentence: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func replaceWords(dict []string, sentence string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def replaceWords(dict: List[String], sentence: String): String = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(354,'Contains Duplicate',1,'Array,Hash Table',0,0,'<p></p><p>\nGiven an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool containsDuplicate(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def containsDuplicate(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool containsDuplicate(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool ContainsDuplicate(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar containsDuplicate = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef contains_duplicate(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func containsDuplicate(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func containsDuplicate(nums []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def containsDuplicate(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-naive-linear-search-time-limit-exceeded\">Approach #1 (Naive Linear Search) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-sorting-accepted\">Approach #2 (Sorting) [Accepted]</a></li>\n<li><a href=\"#approach-3-hash-table-accepted\">Approach #3 (Hash Table) [Accepted]</a></li>\n</ul>\n</li>\n<li><a href=\"#see-also\">See Also</a></li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for beginners. It introduces the following ideas:\nLoop Invariant, Linear Search, Sorting and Hash Table.</p>\n<h2 id=\"solution\">Solution</h2>\n<h4 id=\"approach-1-naive-linear-search-time-limit-exceeded\">Approach #1 (Naive Linear Search) [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>For an array of <script type=\"math/tex; mode=display\">n</script> integers, there are <script type=\"math/tex; mode=display\">C(n,2) = \\frac{n(n+1)}{2}</script> pairs of integers. Thus, we may check all <script type=\"math/tex; mode=display\">\\frac{n(n+1)}{2}</script> pairs and see if there is any pair with duplicates.</p>\n<p><strong>Algorithm</strong></p>\n<p>To apply this idea, we employ the linear search algorithm which is the simplest search algorithm. Linear search is a method of finding if a particular value is in a list by checking each of its elements, one at a time and in sequence until the desired one is found.</p>\n<p>For our problem, we loop through all <script type=\"math/tex; mode=display\">n</script> integers. For the <script type=\"math/tex; mode=display\">i</script>th integer <code>nums[i]</code>, we search in the previous <code>i-1</code> integers for the duplicate of <code>nums[i]</code>. If we find one, we return true; if not, we continue. Return false at the end of the program.</p>\n<p>To prove the correctness of the algorithm, we define the loop invariant. A loop invariant is a property that holds before (and after) each iteration. Knowing its invariant(s) is essential for understanding the effect of a loop. Here is the <em>loop invariant</em>:</p>\n<blockquote>\n<p>Before the next search, there are no duplicate integers in the searched integers.</p>\n</blockquote>\n<p>The loop invariant holds true before the loop because there is no searched integer.\nEach time through the loop we look for any any possible duplicate of the current element.\nIf we found a duplicate, the function exits by returning true; If not, the invariant still holds true.</p>\n<p>Therefore, if the loop finishes, the invariant tells us that there is no duplicate in all <script type=\"math/tex; mode=display\">n</script> integers.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsDuplicate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>  \n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// Time Limit Exceeded</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. In the worst case, there are <script type=\"math/tex; mode=display\">\\frac{n(n+1)}{2}</script> pairs of integers to check. Therefore, the time complexity is <script type=\"math/tex; mode=display\">O(n^2)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nWe only used constant extra space.</p>\n</li>\n</ul>\n<p><strong>Note</strong></p>\n<p>This approach will get Time Limit Exceeded on LeetCode. Usually, if an algorithm is <script type=\"math/tex; mode=display\">O(n^2)</script>, it can handle <script type=\"math/tex; mode=display\">n</script> up to around <script type=\"math/tex; mode=display\">10^4</script>. It gets Time Limit Exceeded when <script type=\"math/tex; mode=display\">n \\geq 10^5</script>.</p>\n<hr />\n<h4 id=\"approach-2-sorting-accepted\">Approach #2 (Sorting) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>If there are any duplicate integers, they will be consecutive after sorting.</p>\n<p><strong>Algorithm</strong></p>\n<p>This approach employs sorting algorithm. Since comparison sorting algorithm like <em>heapsort</em> is known to provide <script type=\"math/tex; mode=display\">O(n \\log n)</script> worst-case performance, sorting is often a good preprocessing step. After sorting, we can sweep the sorted array to find if there are any two consecutive duplicate elements.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsDuplicate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n \\log n)</script>.\nSorting is <script type=\"math/tex; mode=display\">O(n \\log n)</script> and the sweeping is <script type=\"math/tex; mode=display\">O(n)</script>. The entire algorithm is dominated by the sorting step, which is <script type=\"math/tex; mode=display\">O(n \\log n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nSpace depends on the sorting implementation which, usually, costs <script type=\"math/tex; mode=display\">O(1)</script> auxiliary space if <code>heapsort</code> is used.</p>\n</li>\n</ul>\n<p><strong>Note</strong></p>\n<p>The implementation here modifies the original array by sorting it. In general, it is not a good practice to modify the input unless it is clear to the caller that the input will be modified. One may make a copy of <code>nums</code> and operate on the copy instead.</p>\n<hr />\n<h4 id=\"approach-3-hash-table-accepted\">Approach #3 (Hash Table) [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>Utilize a dynamic data structure that supports fast search and insert operations.</p>\n<p><strong>Algorithm</strong></p>\n<p>From <a href=\"#approach-1-naive-linear-search-time-limit-exceeded\">Approach #1</a> we know that search operations is <script type=\"math/tex; mode=display\">O(n)</script> in an unsorted array and we did so repeatedly. Utilizing a data structure with faster search time will speed up the entire algorithm.</p>\n<p>There are many data structures commonly used as dynamic sets such as Binary Search Tree and Hash Table. The operations we need to support here are <code>search()</code> and <code>insert()</code>. For a self-balancing Binary Search Tree (TreeSet or TreeMap in Java), <code>search()</code> and <code>insert()</code> are both <script type=\"math/tex; mode=display\">O(\\log n)</script> time. For a Hash Table (HashSet or HashMap in Java), <code>search()</code> and <code>insert()</code> are both <script type=\"math/tex; mode=display\">O(1)</script> on average. Therefore, by using hash table, we can achieve linear time complexity for finding the duplicate in an unsorted array.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">containsDuplicate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nWe do <code>search()</code> and <code>insert()</code> for <script type=\"math/tex; mode=display\">n</script> times and each operation takes constant time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nThe space used by a hash table is linear with the number of elements in it.</p>\n</li>\n</ul>\n<p><strong>Note</strong></p>\n<p>For certain test cases with not very large <script type=\"math/tex; mode=display\">n</script>, the runtime of this method can be slower than <a href=\"#approach-2-sorting-accepted\">Approach #2</a>. The reason is hash table has some overhead in maintaining its property. One should keep in mind that real world performance can be different from what the Big-O notation says. The Big-O notation only tells us that for <em>sufficiently</em> large input, one will be faster than the other. Therefore, when <script type=\"math/tex; mode=display\">n</script> is not sufficiently large, an <script type=\"math/tex; mode=display\">O(n)</script> algorithm can be slower than an <script type=\"math/tex; mode=display\">O(n \\log n)</script> algorithm.</p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://leetcode.com/articles/contains-duplicate-ii/\">Problem 219 Contains Duplicate II</a></li>\n<li><a href=\"https://leetcode.com/articles/contains-duplicate-iii/\">Problem 220 Contains Duplicate III</a></li>\n</ul>',NULL,1,'none','none','none'),(355,'Ugly Number',1,'Math',0,0,'<p></p><p>\nWrite a program to check whether a given number is an ugly number.\n</p><p>\nUgly numbers are positive numbers whose prime factors only include <code>2, 3, 5</code>. For example, <code>6, 8</code> are ugly while <code>14</code> is not ugly since it includes another prime factor <code>7</code>.\n</p><p>\nNote that <code>1</code> is typically treated as an ugly number.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isUgly(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isUgly(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isUgly(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isUgly(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsUgly(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {boolean}\r\n */\r\nvar isUgly = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Boolean}\r\ndef is_ugly(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isUgly(_ num: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isUgly(num int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isUgly(num: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(356,'Scramble String',3,'Dynamic Programming,String',0,0,'<p></p><p>\nGiven a string <i>s1</i>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\n</p><p>\nBelow is one possible representation of <i>s1</i> = <code>\"great\"</code>:\n</p><pre>\n    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n</pre><p>\nTo scramble the string, we may choose any non-leaf node and swap its two children.\n</p><p>\nFor example, if we choose the node <code>\"gr\"</code> and swap its two children, it produces a scrambled string <code>\"rgeat\"</code>.\n</p><pre>\n    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n</pre><p>\nWe say that <code>\"rgeat\"</code> is a scrambled string of <code>\"great\"</code>.\n</p><p>\nSimilarly, if we continue to swap the children of nodes <code>\"eat\"</code> and <code>\"at\"</code>, it produces a scrambled string <code>\"rgtae\"</code>.\n</p><pre>\n    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n</pre><p>\nWe say that <code>\"rgtae\"</code> is a scrambled string of <code>\"great\"</code>.\n</p><p>\nGiven two strings <i>s1</i> and <i>s2</i> of the same length, determine if <i>s2</i> is a scrambled string of <i>s1</i>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isScramble(string s1, string s2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isScramble(String s1, String s2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isScramble(self, s1, s2):\r\n        """\r\n        :type s1: str\r\n        :type s2: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isScramble(char* s1, char* s2) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsScramble(string s1, string s2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s1\r\n * @param {string} s2\r\n * @return {boolean}\r\n */\r\nvar isScramble = function(s1, s2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s1\r\n# @param {String} s2\r\n# @return {Boolean}\r\ndef is_scramble(s1, s2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isScramble(_ s1: String, _ s2: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isScramble(s1 string, s2 string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isScramble(s1: String, s2: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(357,'Longest Harmonious Subsequence',1,'Hash Table',0,0,'<p></p><p>We define a harmonious array is an array where the difference between its maximum value and its minimum value is <b>exactly</b> 1.</p><p>Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible <a href=\"https://en.wikipedia.org/wiki/Subsequence\">subsequences</a>.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,3,2,2,5,2,3,7]\n<b>Output:</b> 5\n<b>Explanation:</b> The longest harmonious subsequence is [3,2,2,2,3].\n</pre><p><b>Note:</b>\nThe length of the input array will not exceed 20,000.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findLHS(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findLHS(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findLHS(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findLHS(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findLHS(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindLHS(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findLHS = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_lhs(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findLHS(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findLHS(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findLHS(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-sorting-accepted\">Approach #3 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-4-using-hashmapaccepted\">Approach #4 Using HashMap[Accepted]:</a></li>\n<li><a href=\"#approach-5-in-single-loop-accepted\">Approach #5 In single loop [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>In the brute force solution, we consider every possible subsequence that can be formed using the elements of the given array. For every subsequence, we find the maximum and minimum values in the subsequence. If the difference between the maximum and the minimum values obtained is 1, it means the current subsequence forms a harmonious subsequence. Thus, we can consider the number of elements in this subsequence to be compared with the length of the last longest harmonious subsequence. </p>\n<p>In order to obtain all the subseqeuences possible, we make use of binary number representation of decimal numbers. For a binary number of size <script type=\"math/tex; mode=display\">n</script>, a total of <script type=\"math/tex; mode=display\">2^n</script> different binary numbers can be generated. We generate all these binary numbers from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">2^n</script>. For every binary number generated, we consider the subsequence to be comprised of only those elements of <script type=\"math/tex; mode=display\">nums</script> which have a 1 at the corresponding position in the current binary number. The following figure shows an example of the way the elements of <script type=\"math/tex; mode=display\">nums</script> are considered in the current subsequence.</p>\n<p><img alt=\"Harmonic_Subsequence\" src=\"../Figures/594_Harmonic_Subsequence_Binary.PNG\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLHS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                    <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^n)</script>. Number of subsequences generated will be <script type=\"math/tex; mode=display\">2^n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space required.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we created every possible subsequence, and for every such subsequence, we found out if it satisfies the harmonicity condition. Instead of doing this, we can do as follows. We can consider every element of the given <script type=\"math/tex; mode=display\">nums</script> array one by one. For <script type=\"math/tex; mode=display\">nums[i]</script> chosen to be the current element, we determine the <script type=\"math/tex; mode=display\">count</script> of all the elements in the <script type=\"math/tex; mode=display\">nums</script> array, which satisfy the harmonicity condition with <script type=\"math/tex; mode=display\">nums[i]</script>, i.e. the <script type=\"math/tex; mode=display\">count</script> of all such <script type=\"math/tex; mode=display\">nums[j]</script> satisfying <script type=\"math/tex; mode=display\">nums[i] == nums[j]</script> or <script type=\"math/tex; mode=display\">nums[i] == nums[j] + 1</script>. When we reach the end of the array for <script type=\"math/tex; mode=display\">nums[i]</script> being the current element, we compare this <script type=\"math/tex; mode=display\">count</script> obtained with the result obtained from the previous traversals and update the result appropriately. When all the elements of the array have been chosen as the element to be chosen as the base for harmonicity check, we get the required length of the longest harmonic subsequence.</p>\n<p>The following animation illustrates the process:</p>\n<p>!?!../Documents/594_Harmonic_Subsequence_1.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLHS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">count</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Two nested loops are there.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space required.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-sorting-accepted\">Approach #3 Using Sorting [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Since we are concerned only with the count of elements which are at a difference of 1, we can use sorting to our advantage. If we sort the given <script type=\"math/tex; mode=display\">nums</script> array, the related elements will get arranged close to each other. Thus, we can traverse over the sorted array, and find the count of similar elements and elements one larger than the current ones, which occur consecutively(all the similar elements will be lying consecutively now). Initially, this value is stored in <script type=\"math/tex; mode=display\">prev\\_count</script> variable. Then, if we encounter an element which is just 1 larger than the last elements, we count the occurences of such elements as well. This value is stored in <script type=\"math/tex; mode=display\">count</script> variable. </p>\n<p>Thus, now for the harmonic subsequence comprised of only these two elements is a subsequence of length <script type=\"math/tex; mode=display\">count + prev\\_count</script>. This result is stored in <script type=\"math/tex; mode=display\">res</script> for each subsequence found. When we move forward to considering the next set of similar consecutive elements, we need to update the <script type=\"math/tex; mode=display\">prev\\_count</script> with the <script type=\"math/tex; mode=display\">count</script>\'s value, since now <script type=\"math/tex; mode=display\">count</script> will act as the count of the elements 1 lesser than the next elements encountered. The value of <script type=\"math/tex; mode=display\">res</script> is always updated to be the larger of previous <script type=\"math/tex; mode=display\">res</script> and the current <script type=\"math/tex; mode=display\">count + prev\\_count</script> value.</p>\n<p>When we are done traversing over the whole array, the value of <script type=\"math/tex; mode=display\">res</script> gives us the required result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLHS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">prev_count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">i</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">prev_count</span><span class=\"o\">);</span>\n                <span class=\"n\">prev_count</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">i</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">prev_count</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlogn)</script>. Sorting takes <script type=\"math/tex; mode=display\">O(nlogn)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(logn)</script>. <script type=\"math/tex; mode=display\">logn</script> space is required by sorting in average case.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-hashmapaccepted\">Approach #4 Using HashMap[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we make use of a hashmap <script type=\"math/tex; mode=display\">map</script> which stores the number of times an element occurs in the array along with the element\'s value in the form <script type=\"math/tex; mode=display\">(num: count\\_num)</script>, where <script type=\"math/tex; mode=display\">num</script> refers to an element in the array and <script type=\"math/tex; mode=display\">count\\_num</script> refers to the number of times this <script type=\"math/tex; mode=display\">num</script> occurs in the <script type=\"math/tex; mode=display\">nums</script> array. We traverse over the <script type=\"math/tex; mode=display\">nums</script> array and fill this <script type=\"math/tex; mode=display\">map</script> once.</p>\n<p>After this, we traverse over the keys of the <script type=\"math/tex; mode=display\">map</script> created. For every key of the <script type=\"math/tex; mode=display\">map</script> considered, say <script type=\"math/tex; mode=display\">key</script>, we find out if the map contains the <script type=\"math/tex; mode=display\">key + 1</script>. Such an element is found, since only such elements can be counted for the harmonic subsequence if <script type=\"math/tex; mode=display\">key</script> is considered as one of the element of the harmonic subsequence. We need not care about <script type=\"math/tex; mode=display\">key - 1</script>, because if <script type=\"math/tex; mode=display\">key</script> is present in the harmonic subsequence, at one time either <script type=\"math/tex; mode=display\">key + 1</script> or <script type=\"math/tex; mode=display\">key - 1</script> only could be included in the harmonic subsequence. The case of <script type=\"math/tex; mode=display\">key - 1</script> being in the harmonic subsequence will automatically be considered, when <script type=\"math/tex; mode=display\">key - 1</script> is encountered as the current key. </p>\n<p>Now, whenver we find that <script type=\"math/tex; mode=display\">key + 1</script> exists in the keys of <script type=\"math/tex; mode=display\">map</script>, we determine the count of the current harmonic subsequence as <script type=\"math/tex; mode=display\">count_{key} + count_{key+1}</script>, where <script type=\"math/tex; mode=display\">count_i</script> refers to the value corresponding to the key <script type=\"math/tex; mode=display\">i</script> in <script type=\"math/tex; mode=display\">map</script>, which reprents the number of times <script type=\"math/tex; mode=display\">i</script> occurs in the array <script type=\"math/tex; mode=display\">nums</script>.</p>\n<p>Look at the animation below for a pictorial view of the process:</p>\n<p>!?!../Documents/594_Harmonic_Subsequence_2.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLHS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">keySet</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. One loop is required to fill <script type=\"math/tex; mode=display\">map</script> and one for traversing the <script type=\"math/tex; mode=display\">map</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. In worst case map size grows upto size <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-in-single-loop-accepted\">Approach #5 In single loop [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of filling the <script type=\"math/tex; mode=display\">map</script> first and then traversing over the <script type=\"math/tex; mode=display\">map</script> to determine the lengths of the harmonic subsequences encountered, we can traverse over the <script type=\"math/tex; mode=display\">nums</script> array, and while doing the traversals, we can determine the lengths of the harmonic subsequences possible till the current index of the <script type=\"math/tex; mode=display\">nums</script> array. </p>\n<p>The method of finding the length of harmonic subsequence remains the same as the last approach. But, this time, we need to consider the existence of both <script type=\"math/tex; mode=display\">key + 1</script> and <script type=\"math/tex; mode=display\">key - 1</script> exclusively and determine the counts corresponding to both the cases. This is needed now because it could be possible that <script type=\"math/tex; mode=display\">key</script> has already been added to the <script type=\"math/tex; mode=display\">map</script> and later on <script type=\"math/tex; mode=display\">key - 1</script> is encountered. In this case, if we consider the presence of <script type=\"math/tex; mode=display\">key + 1</script> only, we\'ll go in the wrong direction.</p>\n<p>Thus, we consider the <script type=\"math/tex; mode=display\">count</script>s corresponding to both the cases separately for every <script type=\"math/tex; mode=display\">key</script> and determine the maximum out of them. \nThus, now the same task can be done only in a single traveral of the <script type=\"math/tex; mode=display\">nums</script> array.</p>\n<p>See the animation below for understanding the process:</p>\n<p>!?!../Documents/594_Harmonic_Subsequence_3.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findLHS</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only one loop is there.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">map</script> size grows upto size <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(358,'Reverse Bits',1,'Bit Manipulation',0,0,'<p></p><p>Reverse bits of a given 32 bits unsigned integer.</p><p>For example, given input 43261596 (represented in binary as <b>00000010100101000001111010011100</b>), return 964176192 (represented in binary as <b>00111001011110000010100101000000</b>).</p><p>\n<b>Follow up</b>:<br/>\nIf this function is called many times, how would you optimize it?\n</p><p>Related problem: <a href=\"/problems/reverse-integer/\">Reverse Integer</a></p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    uint32_t reverseBits(uint32_t n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"public class Solution {\r\n    // you need treat n as an unsigned value\r\n    public int reverseBits(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution:\r\n    # @param n, an integer\r\n    # @return an integer\r\n    def reverseBits(self, n):\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"uint32_t reverseBits(uint32_t n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public uint reverseBits(uint n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n - a positive integer\r\n * @return {number} - a positive integer\r\n */\r\nvar reverseBits = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n, a positive integer\r\n# @return {Integer}\r\ndef reverse_bits(n)\r\n    \r\nend\" }]',NULL,NULL,1,'none','none','none'),(359,'Combination Sum IV',2,'Dynamic Programming',0,0,'<p></p><p> Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p><p><b>Example:</b>\n</p><pre>\n<i><b>nums</b></i> = [1, 2, 3]\n<i><b>target</b></i> = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is <i><b>7</b></i>.\n</pre><p><b>Follow up:</b><br/>\nWhat if negative numbers are allowed in the given array?<br/>\nHow does it change the problem?<br/>\nWhat limitation we need to add to the question to allow negative numbers? </p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int combinationSum4(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int combinationSum4(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def combinationSum4(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int combinationSum4(int* nums, int numsSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CombinationSum4(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar combinationSum4 = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer}\r\ndef combination_sum4(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func combinationSum4(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func combinationSum4(nums []int, target int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def combinationSum4(nums: Array[Int], target: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(360,'Path Sum III',1,'Tree',0,0,'<p></p><p>You are given a binary tree in which each node contains an integer value.</p><p>Find the number of paths that sum to a given value.</p><p>The path does not need to start or end at the root or a leaf, but it must go downwards\n(traveling only from parent nodes to child nodes).</p><p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n\n</p><p><b>Example:</b>\n</p><pre>\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <b>5</b>   <b>-3</b>\n   <b>/</b> <b>\\</b>    <b>\\</b>\n  <b>3</b>   <b>2</b>   <b>11</b>\n / \\   <b>\\</b>\n3  -2   <b>1</b>\n\nReturn 3. The paths that sum to 8 are:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3. -3 -&gt; 11\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int pathSum(TreeNode* root, int sum) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int pathSum(TreeNode root, int sum) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def pathSum(self, root, sum):\n        """\n        :type root: TreeNode\n        :type sum: int\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint pathSum(struct TreeNode* root, int sum) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int PathSum(TreeNode root, int sum) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */\nvar pathSum = function(root, sum) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} sum\n# @return {Integer}\ndef path_sum(root, sum)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func pathSum(_ root: TreeNode?, _ sum: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pathSum(root *TreeNode, sum int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def pathSum(root: TreeNode, sum: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(361,'Search in Rotated Sorted Array',2,'Binary Search,Array',0,0,'<p></p><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p><p>You may assume no duplicate exists in the array.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int search(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def search(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int search(int* nums, int numsSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Search(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar search = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer}\r\ndef search(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func search(_ nums: [Int], _ target: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func search(nums []int, target int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(362,'Pascal\'s Triangle',1,'Array',0,0,'<p></p><p>Given <i>numRows</i>, generate the first <i>numRows</i> of Pascal\'s triangle.</p><p>\nFor example, given <i>numRows</i> = 5,<br/>\nReturn\n</p><pre>\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> generate(int numRows) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def generate(self, numRows):\r\n        """\r\n        :type numRows: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** generate(int numRows, int** columnSizes) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> Generate(int numRows) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} numRows\r\n * @return {number[][]}\r\n */\r\nvar generate = function(numRows) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num_rows\r\n# @return {Integer[][]}\r\ndef generate(num_rows)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func generate(numRows int) [][]int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(363,'Binary Watch',1,'Backtracking,Bit Manipulation',0,0,'<p></p><p>A binary watch has 4 LEDs on the top which represent the <b>hours</b> (<b>0-11</b>), and the 6 LEDs on the bottom represent the <b>minutes</b> (<b>0-59</b>).</p><p>Each LED represents a zero or one, with the least significant bit on the right.</p><img height=\"300\" src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\"/><p>For example, the above binary watch reads \"3:25\".</p><p>Given a non-negative integer <i>n</i> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p><p><b>Example:</b>\n</p><pre>Input: n = 1<br/>Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]</pre><p><b>Note:</b><br/>\n</p><ul>\n<li>The order of output does not matter.</li>\n<li>The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".</li>\n<li>The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".</li>\n</ul>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> readBinaryWatch(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> readBinaryWatch(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def readBinaryWatch(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** readBinaryWatch(int num, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> ReadBinaryWatch(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {string[]}\r\n */\r\nvar readBinaryWatch = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {String[]}\r\ndef read_binary_watch(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func readBinaryWatch(_ num: Int) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func readBinaryWatch(num int) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def readBinaryWatch(num: Int): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(364,'Word Break',2,'Dynamic Programming',0,0,'<p></p><p>\nGiven a <b>non-empty</b> string <i>s</i> and a dictionary <i>wordDict</i> containing a list of <b>non-empty</b> words, determine if <i>s</i> can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.\n</p><p>For example, given<br/>\n<i>s</i> = <code>\"leetcode\"</code>,<br/>\n<i>dict</i> = <code>[\"leet\", \"code\"]</code>.\n</p><p>\nReturn true because <code>\"leetcode\"</code> can be segmented as <code>\"leet code\"</code>.\n</p><p>\n<b><font color=\"red\">UPDATE (2017/1/4):</font></b><br/>\nThe <i>wordDict</i> parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool wordBreak(string s, vector<string>& wordDict) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def wordBreak(self, s, wordDict):\r\n        """\r\n        :type s: str\r\n        :type wordDict: List[str]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool wordBreak(char* s, char** wordDict, int wordDictSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool WordBreak(string s, IList<string> wordDict) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string[]} wordDict\r\n * @return {boolean}\r\n */\r\nvar wordBreak = function(s, wordDict) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String[]} word_dict\r\n# @return {Boolean}\r\ndef word_break(s, word_dict)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wordBreak(s string, wordDict []string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(365,'Combination Sum III',2,'Array,Backtracking',0,0,'<p></p><div>\n<p>Find all possible combinations of <i><b>k</b></i> numbers that add up to a number <i><b>n</b></i>, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>\n</div><div>\n<br/>\n<p> <i><b>Example 1:</b></i></p>\n<p>Input:  <i><b>k</b></i> = 3,  <i><b>n</b></i> = 7</p>\n<p>Output: </p>\n<p></p><pre>\n[[1,2,4]]\n</pre>\n<br/>\n<p> <i><b>Example 2:</b></i></p>\n<p>Input:  <i><b>k</b></i> = 3,  <i><b>n</b></i> = 9</p>\n<p>Output: </p>\n<p></p><pre>\n[[1,2,6], [1,3,5], [2,3,4]]\n</pre>\n</div><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum3(int k, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def combinationSum3(self, k, n):\r\n        """\r\n        :type k: int\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum3(int k, int n, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> CombinationSum3(int k, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} k\r\n * @param {number} n\r\n * @return {number[][]}\r\n */\r\nvar combinationSum3 = function(k, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} k\r\n# @param {Integer} n\r\n# @return {Integer[][]}\r\ndef combination_sum3(k, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func combinationSum3(k int, n int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(366,'Trips and Users',3,'',0,0,'<p></p><p>\nThe <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the <code>Users</code> table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).</p><pre>\n+----+-----------+-----------+---------+--------------------+----------+\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\n+----+-----------+-----------+---------+--------------------+----------+\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\n+----+-----------+-----------+---------+--------------------+----------+\n</pre><p>\nThe <code>Users</code> table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).</p><pre>\n+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+\n</pre><p>Write a SQL query to find the cancellation rate of requests made by unbanned clients between <b>Oct 1, 2013</b> and <b>Oct 3, 2013</b>. For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to <i>two</i> decimal places.</p><pre>\n+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a> for contributing this question, writing the problem description and adding part of the test cases.</p>','[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\r\n\" }]',NULL,NULL,1,'none','none','none'),(367,'Partition List',2,'Linked List,Two Pointers',0,0,'<p></p><p>Given a linked list and a value <i>x</i>, partition it such that all nodes less than <i>x</i> come before nodes greater than or equal to <i>x</i>.\n</p><p>\nYou should preserve the original relative order of the nodes in each of the two partitions.\n</p><p>\nFor example,<br/>\nGiven <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2</code> and <i>x</i> = 3,<br/>\nreturn <code>1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* partition(ListNode* head, int x) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def partition(self, head, x):\r\n        """\r\n        :type head: ListNode\r\n        :type x: int\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* partition(struct ListNode* head, int x) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode Partition(ListNode head, int x) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} x\r\n * @return {ListNode}\r\n */\r\nvar partition = function(head, x) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @param {Integer} x\r\n# @return {ListNode}\r\ndef partition(head, x)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func partition(_ head: ListNode?, _ x: Int) -> ListNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc partition(head *ListNode, x int) *ListNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def partition(head: ListNode, x: Int): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(368,'Super Washing Machines',3,'Dynamic Programming,Math',0,0,'<p></p><p>You have <b>n</b> super washing machines on a line. Initially, each washing machine has some dresses or is empty. \n</p><p>For each <b>move</b>, you could choose <b>any m</b> (1 ? m ? n) washing machines, and pass <b>one dress</b> of each washing machine to one of its adjacent washing machines <b> at the same time </b>.  </p><p>Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the <b>minimum number of moves</b> to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.</p><p><b>Example1</b>\n</p><pre>\n<b>Input:</b> [1,0,5]\n\n<b>Output:</b> 3\n\n<b>Explanation:</b> \n1st move:    1     0     1     1     4\n2nd move:    1     2     1     3    \n3rd move:    2     1     2     2     2   \n</pre><p><b>Example2</b>\n</p><pre>\n<b>Input:</b> [0,3,0]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> \n1st move:    0     1     2     0    \n2nd move:    1     2 --&gt; 0    =&gt;    1     1     1     \n</pre><p><b>Example3</b>\n</p><pre>\n<b>Input:</b> [0,2,0]\n\n<b>Output:</b> -1\n\n<b>Explanation:</b> \nIt\'s impossible to make all the three washing machines have the same number of dresses. \n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The range of n is [1, 10000].</li>\n<li>The range of dresses number in a super washing machine is [0, 1e5].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMinMoves(vector<int>& machines) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMinMoves(int[] machines) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMinMoves(self, machines):\r\n        """\r\n        :type machines: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMinMoves(int* machines, int machinesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMinMoves(int[] machines) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} machines\r\n * @return {number}\r\n */\r\nvar findMinMoves = function(machines) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} machines\r\n# @return {Integer}\r\ndef find_min_moves(machines)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMinMoves(_ machines: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMinMoves(machines []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMinMoves(machines: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(369,'Valid Square',2,'Math',0,0,'<p></p><p>Given the coordinates of four points in 2D space, return whether the four points could construct a square.</p><p>The coordinate (x,y) of a point is represented by an integer array with two integers.</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<b>Output:</b> True\n</pre><p> Note: \n</p><ol>\n<li>All the input integers are in the range [-10000, 10000].</li>\n<li>A valid square has four equal sides with positive length and four equal angles (90-degree angles).</li>\n<li>Input points have no order.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def validSquare(self, p1, p2, p3, p4):\r\n        """\r\n        :type p1: List[int]\r\n        :type p2: List[int]\r\n        :type p3: List[int]\r\n        :type p4: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def validSquare(self, p1, p2, p3, p4):\r\n        """\r\n        :type p1: List[int]\r\n        :type p2: List[int]\r\n        :type p3: List[int]\r\n        :type p4: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool validSquare(int* p1, int p1Size, int* p2, int p2Size, int* p3, int p3Size, int* p4, int p4Size) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool ValidSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} p1\r\n * @param {number[]} p2\r\n * @param {number[]} p3\r\n * @param {number[]} p4\r\n * @return {boolean}\r\n */\r\nvar validSquare = function(p1, p2, p3, p4) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} p1\r\n# @param {Integer[]} p2\r\n# @param {Integer[]} p3\r\n# @param {Integer[]} p4\r\n# @return {Boolean}\r\ndef valid_square(p1, p2, p3, p4)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func validSquare(_ p1: [Int], _ p2: [Int], _ p3: [Int], _ p4: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func validSquare(p1 []int, p2 []int, p3 []int, p4 []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def validSquare(p1: Array[Int], p2: Array[Int], p3: Array[Int], p4: Array[Int]): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-2-using-sorting-accepted\">Approach #2 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-3-checking-every-case-accepted\">Approach #3 Checking every case [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</h4>\n<p>The idea behind determining whether 4 given set of points constitute a valid square or not is really simple. Firstly, we need to determine if the sides of the qaudrilateral formed by these 4 points are equal. But checking only this won\'t suffice. Since, this condition will be satisfied even in the case of a rhombus, where all the four sides are equal but the adjacent sides aren\'t perpendicular to each other. Thus, we also need to check if the lengths of the diagonals formed between the corners of the quadrilateral are equal. If both the conditions are satisfied, then only the given set of points can be deemed appropriate for constituting a square.</p>\n<p>Now, the problem arises in determining which pairs of points act as the adjacent points on the square boundary. So, the simplest method is to consider every possible case. For the given 4 points, <script type=\"math/tex; mode=display\">[p_0, p_1, p_2, p_3]</script>, there are a total of 4! ways in which these points can be arranged to be considered as the square\'s boundaries. We can generate every possible permutation and check if any permutation leads to the valid square arrangement of points.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">double</span> <span class=\"nf\">dist</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">check</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span><span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p4</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">validSquare</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"n\">p1</span><span class=\"o\">,</span><span class=\"n\">p2</span><span class=\"o\">,</span><span class=\"n\">p3</span><span class=\"o\">,</span><span class=\"n\">p4</span><span class=\"o\">};</span>\n        <span class=\"k\">return</span> <span class=\"n\">checkAllPermutations</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">boolean</span> <span class=\"nf\">checkAllPermutations</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"n\">res</span> <span class=\"o\">|=</span> <span class=\"n\">checkAllPermutations</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span>\n        <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">];</span>\n        <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant number of permutations(<script type=\"math/tex; mode=display\">4!</script>) are generated.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is required.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-sorting-accepted\">Approach #2 Using Sorting [Accepted]</h4>\n<p>Instead of considering all the permutations of arrangements possible, we can make use of maths to simplify this problem a bit. If we sort the given set of points based on their x-coordinate values, and in the case of a tie, based on their y-coordinate value, we can obtain an arrangement, which directly reflects the arrangement of points on a valid square boundary possible.</p>\n<p>Consider the only possible cases as shown in the figure below:</p>\n<p><img alt=\"Valid_Square\" src=\"../Figures/593_Valid_Square_1.PNG\" /></p>\n<p>In each case, after sorting, we obtain the following conclusion regarding the connections of the points:</p>\n<ol>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">p_0p_1</script>, <script type=\"math/tex; mode=display\">p_1p_3</script>, <script type=\"math/tex; mode=display\">p_3p_2</script> and <script type=\"math/tex; mode=display\">p_2p_0</script> form the four sides of any valid square.</p>\n</li>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">p_0p_3</script> and <script type=\"math/tex; mode=display\">p_1p_2</script> form the diagonals of the square.</p>\n</li>\n</ol>\n<p>Thus, once the sorting of the points is done, based on the above knowledge, we can directly compare <script type=\"math/tex; mode=display\">p_0p_1</script>, <script type=\"math/tex; mode=display\">p_1p_3</script>, <script type=\"math/tex; mode=display\">p_3p_2</script> and <script type=\"math/tex; mode=display\">p_2p_0</script> for equality of lengths(corresponding to the sides); and <script type=\"math/tex; mode=display\">p_0p_3</script> and <script type=\"math/tex; mode=display\">p_1p_2</script> for equality of lengths(corresponding to the diagonals).</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">double</span> <span class=\"nf\">dist</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">validSquare</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">p</span><span class=\"o\">={</span><span class=\"n\">p1</span><span class=\"o\">,</span><span class=\"n\">p2</span><span class=\"o\">,</span><span class=\"n\">p3</span><span class=\"o\">,</span><span class=\"n\">p4</span><span class=\"o\">};</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">l2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">l1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">?</span> <span class=\"n\">l1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">l2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">l1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">l2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n        <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span>   <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">])==</span><span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span><span class=\"n\">p</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Sorting 4 points takes constant time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is required.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-checking-every-case-accepted\">Approach #3 Checking every case [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>If we consider all the permutations descripting the arrangement of points as in the brute force approach, we can come up with the following set of 24 arrangements:</p>\n<p><img alt=\"Valid_Square\" src=\"../Figures/593_Valid_Square_2.PNG\" /></p>\n<p>In this figure, the rows with the same shaded color indicate that the corresponding arrangements lead to the same set of edges and diagonals. Thus, we can see that only three unique cases exist. Thus, instead of generating all the 24 permutations, we check for the equality of edges and diagonals for only the three distinct cases.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">double</span> <span class=\"nf\">dist</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">p1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">check</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span><span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p4</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">dist</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">validSquare</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">check</span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p4</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>. A fixed number of comparisons are done.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space required.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(370,'Wiggle Subsequence',2,'Dynamic Programming,Greedy',0,0,'<p></p><p>A sequence of numbers is called a <strong>wiggle sequence</strong> if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence. </p><p>For example, <code>[1,7,4,9,2,5]</code> is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, <code>[1,4,7,2,5]</code> and <code>[1,7,4,5,5]</code> are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p><p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p><p><b>Examples:</b><br/>\n</p><pre>\n<b>Input:</b> [1,7,4,9,2,5]\n<b>Output:</b> 6\nThe entire sequence is a wiggle sequence.\n\n<b>Input:</b> [1,17,5,10,13,15,10,5,16,8]\n<b>Output:</b> 7\nThere are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].\n\n<b>Input:</b> [1,2,3,4,5,6,7,8,9]\n<b>Output:</b> 2\n</pre><p><b>Follow up:</b><br/>\nCan you do it in O(<i>n</i>) time?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/agave/\">@agave</a> and <a href=\"https://leetcode.com/stefanpochmann/\">@StefanPochmann</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int wiggleMaxLength(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def wiggleMaxLength(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int wiggleMaxLength(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int WiggleMaxLength(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar wiggleMaxLength = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef wiggle_max_length(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func wiggleMaxLength(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wiggleMaxLength(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def wiggleMaxLength(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-dynamic-programming-accepted\">Approach #2  Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-3-linear-dynamic-programming-accepted\">Approach #3 Linear Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-4-space-optimized-dynamic-programming-accepted\">Approach #4 Space-Optimized Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-5-greedy-approach-accepted\">Approach #5 Greedy Approach [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We need to find the length of the longest wiggle subsequence. A wiggle subsequence consists of a subsequence with numbers which appears in alternating ascending / descending order.</p>\n<h2 id=\"solution\">Solution</h2>\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>Here, we can find the length of every possible wiggle subsequence and find the maximum length out of them. To implement this, we use a recursive function, <script type=\"math/tex; mode=display\">\\text{calculate}(\\text{nums}, \\text{index}, \\text{isUp})</script> which takes the array <script type=\"math/tex; mode=display\">\\text{nums}</script>, the <script type=\"math/tex; mode=display\">\\text{index}</script> from which we need to find the length of the longest wiggle subsequence, boolean variable <script type=\"math/tex; mode=display\">\\text{isUp}</script> to tell whether we need to find an increasing wiggle or decreasing wiggle respectively. If the function <script type=\"math/tex; mode=display\">\\text{calculate}</script> is called after an increasing wiggle, we need to find the next decreasing wiggle with the same function. If the function <script type=\"math/tex; mode=display\">\\text{calculate}</script> is called after a decreasing wiggle, we need to find the next increasing wiggle with the same function.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">calculate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">isUp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxcount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">isUp</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">])</span> <span class=\"o\">||</span> <span class=\"o\">(!</span><span class=\"n\">isUp</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">]))</span>\n                <span class=\"n\">maxcount</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxcount</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">!</span><span class=\"n\">isUp</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxcount</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">),</span> <span class=\"n\">calculate</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n!)</script>. <script type=\"math/tex; mode=display\">\\text{calculate}()</script> will be called maximum <script type=\"math/tex; mode=display\">n!</script> times.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Recursion of depth <script type=\"math/tex; mode=display\">n</script> is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-dynamic-programming-accepted\">Approach #2  Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>To understand this approach, take two arrays for dp named <script type=\"math/tex; mode=display\">up</script> and <script type=\"math/tex; mode=display\">down</script>.</p>\n<p>Whenever we pick up any element of the array to be a part of the wiggle subsequence, that element could be a part of a rising wiggle or a falling wiggle depending upon which element we have taken prior to it.</p>\n<p>\n<script type=\"math/tex; mode=display\">up[i]</script> refers to the length of the longest wiggle subsequence obtained so far considering <script type=\"math/tex; mode=display\">i^{th}</script> element as the last element of the wiggle subsequence and ending with a rising wiggle.</p>\n<p>Similarly, <script type=\"math/tex; mode=display\">down[i]</script> refers to the length of the longest wiggle subsequence obtained so far considering <script type=\"math/tex; mode=display\">i^{th}</script> element as the last element of the wiggle subsequence and ending with a falling wiggle.</p>\n<p>\n<script type=\"math/tex; mode=display\">up[i]</script> will be updated every time we find a rising wiggle ending with the <script type=\"math/tex; mode=display\">i^{th}</script> element. Now, to find <script type=\"math/tex; mode=display\">up[i]</script>, we need to consider the maximum out of all the previous wiggle subsequences ending with a falling wiggle i.e. <script type=\"math/tex; mode=display\">down[j]</script>, for every <script type=\"math/tex; mode=display\">j&lt;i</script> and <script type=\"math/tex; mode=display\">nums[i]&gt;nums[j]</script>. Similarly, <script type=\"math/tex; mode=display\">down[i]</script> will be updated.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">down</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Loop inside a loop.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Two arrays of the same length are used for dp.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-linear-dynamic-programming-accepted\">Approach #3 Linear Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Any element in the array could correspond to only one of the three possible states:</p>\n<ol>\n<li>up position, it means <script type=\"math/tex; mode=display\">nums[i] > nums[i-1]</script>\n</li>\n<li>down position, it means <script type=\"math/tex; mode=display\">nums[i] < nums[i-1]</script>\n</li>\n<li>equals to position, <script type=\"math/tex; mode=display\">nums[i] == nums[i-1]</script>\n</li>\n</ol>\n<p>The updates are done as:</p>\n<p>If <script type=\"math/tex; mode=display\">nums[i] > nums[i-1]</script>, that means it wiggles up. The element before it must be a down position. So <script type=\"math/tex; mode=display\">up[i] = down[i-1] + 1</script>, <script type=\"math/tex; mode=display\">down[i]</script> remains the same as <script type=\"math/tex; mode=display\">down[i-1]</script>.\nIf <script type=\"math/tex; mode=display\">nums[i] < nums[i-1]</script>, that means it wiggles down. The element before it must be a up position. So <script type=\"math/tex; mode=display\">down[i] = up[i-1] + 1</script>, <script type=\"math/tex; mode=display\">up[i]</script> remains the same as <script type=\"math/tex; mode=display\">up[i-1]</script>.\nIf <script type=\"math/tex; mode=display\">nums[i] == nums[i-1]</script>, that means it will not change anything becaue it didn\'t wiggle at all. So both <script type=\"math/tex; mode=display\">down[i]</script> and <script type=\"math/tex; mode=display\">up[i]</script> remain the same as <script type=\"math/tex; mode=display\">down[i-1]</script> and <script type=\"math/tex; mode=display\">up[i-1]</script>.</p>\n<p>At the end, we can find the larger out of <script type=\"math/tex; mode=display\">up[length-1]</script> and <script type=\"math/tex; mode=display\">down[length-1]</script> to find the max. wiggle subsequence length, where <script type=\"math/tex; mode=display\">length</script> refers to the number of elements in the given array.</p>\n<p>The process can be illustrated with the following example:</p>\n<!--![Wiggle gif](https://leetcode.com/media/original_images/376_Wiggle_Subsequence.gif)-->\n\n<p>!?!../Documents/376_Wiggle.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">down</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">down</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">up</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only one pass over the array length.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Two arrays of the same length are used for dp.</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-space-optimized-dynamic-programming-accepted\">Approach #4 Space-Optimized Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach relies on the same concept as <a href=\"https://leetcode.com/articles/wiggle-subsequence/#approach-3-linear-dynamic-programming-accepted\">Approach #3</a>. But we can observe that in the DP approach, for updating elements <script type=\"math/tex; mode=display\">up[i]</script> and <script type=\"math/tex; mode=display\">down[i]</script>, we need only the elements <script type=\"math/tex; mode=display\">up[i-1]</script> and <script type=\"math/tex; mode=display\">down[i-1]</script>. Thus, we can save space by not using the whole array, but only the last elements.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">down</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"n\">down</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">down</span> <span class=\"o\">=</span> <span class=\"n\">up</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">down</span><span class=\"o\">,</span> <span class=\"n\">up</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only one pass over the array length.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-greedy-approach-accepted\">Approach #5 Greedy Approach [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We need not necessarily need dp to solve this problem. This problem is equivalent to finding the number of alternating max. and min. peaks in the array. Since, if we choose any other intermediate number to be a part of the current wiggle subsequence, the maximum length of that wiggle subsequence will always be less than or equal to the one obtained by choosing only the consecutive max. and min. elements.</p>\n<p>This can be clarified by looking at the following figure:\n<img alt=\"Wiggle Peaks\" src=\"https://leetcode.com/media/original_images/376_Wiggle_Subsequence.PNG\" /></p>\n<p>From the above figure, we can see that if we choose <strong>C</strong> instead of <strong>D</strong> as the 2nd point in the wiggle subsequence, we can\'t include the point <strong>E</strong>. Thus, we won\'t obtain the maximum length wiggle subsequence.</p>\n<p>Thus, to solve this problem, we maintain a variable <script type=\"math/tex; mode=display\">\\text{prevdiff}</script>, where <script type=\"math/tex; mode=display\">\\text{prevdiff}</script> is used to indicate whether the current subsequence of numbers lies in an increasing or decreasing wiggle. If <script type=\"math/tex; mode=display\">\\text{prevdiff} > 0</script>, it indicates that we have found the increasing wiggle and are looking for a decreasing wiggle now. Thus, we update the length of the found subsequence when <script type=\"math/tex; mode=display\">\\text{diff}</script> (<script type=\"math/tex; mode=display\">nums[i]-nums[i-1]</script>) becomes negative. Similarly, if <script type=\"math/tex; mode=display\">\\text{prevdiff} < 0</script>, we will update the count when <script type=\"math/tex; mode=display\">\\text{diff}</script> (<script type=\"math/tex; mode=display\">nums[i]-nums[i-1]</script>) becomes positive.</p>\n<p>When the complete array has been traversed, we get the required count, which represents the length of the longest wiggle subsequence.</p>\n<p><strong>java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">prevdiff</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">prevdiff</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">diff</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prevdiff</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prevdiff</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"n\">prevdiff</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse the given array once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(371,'Rotate Array',1,'Array',0,0,'<p></p><p>Rotate an array of <i>n</i> elements to the right by <i>k</i> steps.</p><p>For example, with <i>n</i> = 7 and <i>k</i> = 3, the array <code>[1,2,3,4,5,6,7]</code> is rotated to <code>[5,6,7,1,2,3,4]</code>. </p><p><b>Note:</b><br/>\nTry to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">[show hint]</a></p><div class=\"spoilers\"><b>Hint:</b><br/>\nCould you do it in-place with O(1) extra space?\n</div><p>Related problem: <a href=\"/problems/reverse-words-in-a-string-ii/\">Reverse Words in a String II</a></p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/Freezen\">@Freezen</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void rotate(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void rotate(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def rotate(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void rotate(int* nums, int numsSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void Rotate(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */\r\nvar rotate = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Void} Do not return anything, modify nums in-place instead.\r\ndef rotate(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func rotate(nums []int, k int)  {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-extra-array-accepted\">Approach #2 Using Extra Array [Accepted]</a></li>\n<li><a href=\"#approach-3-using-cyclic-replacements-accepted\">Approach #3 Using Cyclic Replacements [Accepted]</a></li>\n<li><a href=\"#approach-4-using-reverse-accepted\">Approach #4 Using Reverse [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We have to rotate the elements of the given array k times to the right.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest approach is to rotate all the elements of the array in k steps\n by rotating the elements by 1 unit in each step.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span><span class=\"o\">,</span> <span class=\"n\">previous</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">previous</span><span class=\"o\">;</span>\n                <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. All the numbers are shifted by one step(<script type=\"math/tex; mode=display\">O(n)</script>)\n k times(<script type=\"math/tex; mode=display\">O(k)</script>).</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-extra-array-accepted\">Approach #2 Using Extra Array [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We use an extra array in which we place every element of the array at its correct\nposition i.e. the number at index <script type=\"math/tex; mode=display\">i</script> in the original array is placed at the\nindex <script type=\"math/tex; mode=display\">(i+k)%(length of array)</script>. Then, we copy the new array to the original one.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">a</span><span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. One pass is used to put the numbers in the new array.\n And another pass to copy the new array to the original one.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Another array of the same size is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-cyclic-replacements-accepted\">Approach #3 Using Cyclic Replacements [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can directly place every number of the array at its required correct position.\nBut if we do that, we will destroy the original element. Thus, we need to store\nthe number being replaced in a <script type=\"math/tex; mode=display\">temp</script> variable. Then, we can place the replaced\n number(<script type=\"math/tex; mode=display\">temp</script>) at its correct position and so on, <script type=\"math/tex; mode=display\">n</script> times, where <script type=\"math/tex; mode=display\">n</script> is\n the length of array. We have chosen <script type=\"math/tex; mode=display\">n</script> to be the number of replacements since we have \n to shift all the elements of the array(which is <script type=\"math/tex; mode=display\">n</script>). But, there could be a problem with this method, if <script type=\"math/tex; mode=display\">n%k=0</script>\n where <script type=\"math/tex; mode=display\">k = k%n</script>(since a value of <script type=\"math/tex; mode=display\">k</script> larger than <script type=\"math/tex; mode=display\">n</script> eventually leads to a <script type=\"math/tex; mode=display\">k</script> equivalent to <script type=\"math/tex; mode=display\">k%n</script>). In this case, while picking up numbers to be placed at the\n correct position, we will eventually reach the number from which we originally started. Thus, in such a case, when\n we hit the original number\'s index again, we start the same process with the number following it.</p>\n<p>Now let\'s look at the proof of how the above method works. Suppose, we have <script type=\"math/tex; mode=display\">n</script> as the number of elements in the array and\n <script type=\"math/tex; mode=display\">k</script> is the number of shifts required. Further, assume <script type=\"math/tex; mode=display\">n%k=0</script>. Now, when we start placing the elements at their correct position, in the first cycle all the numbers with their index <script type=\"math/tex; mode=display\">i</script> satisfying <script type=\"math/tex; mode=display\">i%k=0</script> get placed at their required position. This happens because when we jump k steps every time, we will only hit the numbers k steps apart. We start with index <script type=\"math/tex; mode=display\">i=0</script>, having <script type=\"math/tex; mode=display\">i%k=0</script>. Thus, we hit all the numbers satisfying the above condition in the first cycle. When we reach back the original index, we have placed <script type=\"math/tex; mode=display\">\\frac{n}{k}</script> elements at their correct position, since we hit only that many elements in the first cycle. Now, we increment the index for replacing the numbers. This time, we place other <script type=\"math/tex; mode=display\">\\frac{n}{k}</script> elements at their correct position, different from the ones placed correctly in the first cycle, because this time we hit all the numbers satisfy the condition <script type=\"math/tex; mode=display\">i%k=1</script>. When we hit the starting number again, we increment the index and repeat the same process from <script type=\"math/tex; mode=display\">i=1</script> for all the indices satisfying <script type=\"math/tex; mode=display\">i%k==1</script>. This happens till we reach the number with the index <script type=\"math/tex; mode=display\">i%k=0</script> again, which occurs for <script type=\"math/tex; mode=display\">i=k</script>. We will reach such a number after a total of k cycles. Now, the total count of numbers exclusive numbers placed at their correct position will be <script type=\"math/tex; mode=display\">k \\times \\frac{n}{k}=n</script>. Thus, all the numbers will be placed at their correct position.</p>\n<p>Look at the following example to clarify the process:\n <code>nums: [1, 2, 3, 4, 5, 6]\nk: 2</code></p>\n<p><img alt=\"Rotate Array\" src=\"https://leetcode.com/media/original_images/189_Rotate_Array.png\" /></p>\n<p><strong>java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">start</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"k\">do</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">current</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n                <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">];</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">;</span>\n                <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">!=</span> <span class=\"n\">current</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only one pass is used.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-reverse-accepted\">Approach #4 Using Reverse [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is based on the fact that when we rotate the array k times, <script type=\"math/tex; mode=display\">k%n</script> elements from the back end of the array come to the front and the rest of the elements from the front shift backwards.</p>\n<p>In this approach, we firstly reverse all the elements of the array. Then, reversing the first k elements followed by reversing the rest <script type=\"math/tex; mode=display\">n-k</script> elements gives us the required result.</p>\n<p>Let <script type=\"math/tex; mode=display\">n=7</script> and <script type=\"math/tex; mode=display\">k=3</script>.</p>\n<div class=\"codehilite\"><pre><span></span>Original List                   : 1 2 3 4 5 6 7\nAfter reversing all numbers     : 7 6 5 4 3 2 1\nAfter reversing first k numbers : 5 6 7 4 3 2 1\nAfter revering last n-k numbers : 5 6 7 1 2 3 4 --&gt; Result\n</pre></div>\n\n\n<p><strong>java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">rotate</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">k</span> <span class=\"o\">%=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">reverse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">end</span><span class=\"o\">];</span>\n            <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">end</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"n\">start</span><span class=\"o\">++;</span>\n            <span class=\"n\">end</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">n</script> elements are reversed a total of three times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</p>\n</li>\n</ul>\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(372,'Nth Digit',1,'Math',0,0,'<p></p><p>Find the <i>n</i><sup>th</sup> digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... </p><p><b>Note:</b><br/>\n<i>n</i> is positive and will fit within the range of a 32-bit signed integer (<i>n</i> &lt; 2<sup>31</sup>).\n</p><p><b>Example 1:</b>\n</p><pre>\n<b>Input:</b>\n3\n\n<b>Output:</b>\n3\n</pre><p><b>Example 2:</b>\n</p><pre>\n<b>Input:</b>\n11\n\n<b>Output:</b>\n0\n\n<b>Explanation:</b>\nThe 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findNthDigit(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findNthDigit(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findNthDigit(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findNthDigit(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindNthDigit(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar findNthDigit = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef find_nth_digit(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findNthDigit(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findNthDigit(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findNthDigit(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(373,'Longest Valid Parentheses',3,'Dynamic Programming,String',0,0,'<p></p><p>Given a string containing just the characters <code>\'(\'</code> and <code>\')\'</code>, find the length of the longest valid (well-formed) parentheses substring.\n</p><p>\nFor <code>\"(()\"</code>, the longest valid parentheses substring is <code>\"()\"</code>, which has length = 2.\n</p><p>\nAnother example is <code>\")()())\"</code>, where the longest valid parentheses substring is <code>\"()()\"</code>, which has length = 4.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int longestValidParentheses(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestValidParentheses(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int longestValidParentheses(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LongestValidParentheses(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar longestValidParentheses = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef longest_valid_parentheses(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestValidParentheses(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestValidParentheses(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-dynamic-programming-accepted\">Approach #2 Using Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-3-using-stack-accepted\">Approach #3 Using Stack [Accepted]</a></li>\n<li><a href=\"#approach-4-without-extra-space-accepted\">Approach #4 Without extra space [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We need to determine the length of the largest valid substring of parentheses from a given string.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we consider every possible non-empty even length substring from the given string and check whether it\'s\na valid string of parentheses or not. In order to check the validity, we use the Stack\'s Method.</p>\n<p>Every time we\nencounter a <script type=\"math/tex; mode=display\">\\text{‘(’}</script>, we push it onto the stack. For every <script type=\"math/tex; mode=display\">\\text{‘)’}</script> encountered, we pop a <script type=\"math/tex; mode=display\">\\text{‘(’}</script> from the stack. If <script type=\"math/tex; mode=display\">\\text{‘(’}</script> isn\'t\n available on the stack for popping at anytime or if stack contains some elements after processing complete substring, the substring of parentheses is invalid. In this way, we repeat the\n process for every possible substring and we keep on\n  storing the length of the longest valid string found so far.</p>\n<div class=\"codehilite\"><pre><span></span>Example:\n&quot;((())&quot;\n\n(( --&gt; invalid\n(( --&gt; invalid\n() --&gt; valid, length=2\n)) --&gt; invalid\n((()--&gt; invalid\n(())--&gt; valid, length=4\nmaxlength=4\n</pre></div>\n\n\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValid</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Character</span><span class=\"o\">&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"sc\">&#39;(&#39;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">longestValidParentheses</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">+=</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isValid</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">maxlen</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxlen</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxlen</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. Generating every possible substring from a string of length <script type=\"math/tex; mode=display\">n</script> requires <script type=\"math/tex; mode=display\">O(n^2)</script>. Checking validity of a string of length <script type=\"math/tex; mode=display\">n</script> requires <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A stack of depth <script type=\"math/tex; mode=display\">n</script> will be required for the longest substring.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-dynamic-programming-accepted\">Approach #2 Using Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This problem can be solved by using Dynamic Programming. We make use of a <script type=\"math/tex; mode=display\">\\text{dp}</script> array where <script type=\"math/tex; mode=display\">i</script>th element of <script type=\"math/tex; mode=display\">\\text{dp}</script> represents the length of the longest valid substring ending at <script type=\"math/tex; mode=display\">i</script>th index. We initialize the complete <script type=\"math/tex; mode=display\">\\text{dp}</script> array with 0\'s. Now, it\'s obvious that the valid substrings must end with <script type=\"math/tex; mode=display\">\\text{‘)’}</script>. This further leads to the conclusion that the substrings ending with <script type=\"math/tex; mode=display\">\\text{‘(’}</script> will always contain \'0\' at their corresponding <script type=\"math/tex; mode=display\">\\text{dp}</script> indices. Thus, we update the <script type=\"math/tex; mode=display\">\\text{dp}</script> array only when <script type=\"math/tex; mode=display\">\\text{‘)’}</script> is encountered.</p>\n<p>To fill <script type=\"math/tex; mode=display\">\\text{dp}</script> array we will check every two consecutive characters of the string and if</p>\n<ol>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">\\text{s}[i] = \\text{‘)’}</script> and <script type=\"math/tex; mode=display\">\\text{s}[i - 1] = \\text{‘(’}</script>, i.e. string looks like <script type=\"math/tex; mode=display\">``.......()\" \\Rightarrow</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\text{dp}[i]=\\text{dp}[i-2]+2\n</script>\n</p>\n<p>We do so because the ending \"()\" portion is a valid substring anyhow and leads to an increment of 2 in the length of the just previous valid substring\'s length.</p>\n</li>\n<li>\n<p>\n<script type=\"math/tex; mode=display\">\\text{s}[i] = \\text{‘)’}</script> and <script type=\"math/tex; mode=display\">\\text{s}[i - 1] = \\text{‘)’}</script>, i.e. string looks like <script type=\"math/tex; mode=display\">``.......))\" \\Rightarrow</script>\n</p>\n<p>if <script type=\"math/tex; mode=display\">\\text{s}[i - \\text{dp}[i - 1] - 1] = \\text{‘(’}</script> then</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\text{dp}[i]=\\text{dp}[i-1]+\\text{dp}[i-\\text{dp}[i-1]-2]+2\n</script>\n</p>\n</li>\n</ol>\n<p>The reason behind this is that if the 2nd last <script type=\"math/tex; mode=display\">\\text{‘)’}</script> was a part of a valid substring (say <script type=\"math/tex; mode=display\">sub_s</script>), for the last <script type=\"math/tex; mode=display\">\\text{‘)’}</script> to be a part of a larger substring, there must be a corresponding starting <script type=\"math/tex; mode=display\">\\text{‘(’}</script> which lies before the valid substring of which the 2nd last <script type=\"math/tex; mode=display\">\\text{‘)’}</script> is a part (i.e. before <script type=\"math/tex; mode=display\">sub_s</script>). Thus, if the character before <script type=\"math/tex; mode=display\">sub_s</script> happens to be <script type=\"math/tex; mode=display\">\\text{‘(’}</script>, we update the <script type=\"math/tex; mode=display\">\\text{dp}[i]</script> as an addition of <script type=\"math/tex; mode=display\">2</script> in the length of <script type=\"math/tex; mode=display\">sub_s</script> which is <script type=\"math/tex; mode=display\">\\text{dp}[i-1]</script>. To this, we also add the length of the valid substring just before the term \"(,sub_s,)\" , i.e. <script type=\"math/tex; mode=display\">\\text{dp}[i-\\text{dp}[i-1]-2]</script>.</p>\n<p>For better understanding of this method, see this example:</p>\n<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisDP.gif)-->\n\n<p>!?!../Documents/32_Longest_Valid2.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">longestValidParentheses</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;)&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">maxans</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxans</span><span class=\"o\">,</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single traversal of string to fill dp array is done.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. dp array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-stack-accepted\">Approach #3 Using Stack [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of finding every possible string and checking its validity, we can make use of stack while scanning\nthe given string to check if the string scanned so far is valid, and also the length of the longest valid string. In order to do so, we start by pushing <script type=\"math/tex; mode=display\">-1</script> onto the stack.</p>\n<p>For every <script type=\"math/tex; mode=display\">\\text{‘(’}</script> encountered, we push its index onto the stack.</p>\n<p>For every <script type=\"math/tex; mode=display\">\\text{‘)’}</script> encountered, we pop the topmost element and subtract the current element\'s index from the top element of the stack, which gives the length of the currently encountered valid string of parentheses. If while popping the element, the stack becomes empty, we push the current element\'s index onto the stack. In this way, we keep on calculating the lengths of the valid substrings, and return the length of the longest valid string at the end.</p>\n<p>See this example for better understanding.</p>\n<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisSTACK.gif)-->\n\n<p>!?!../Documents/32_Longest_Valid_stack_new.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">longestValidParentheses</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">maxans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">maxans</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxans</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">());</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">n</script> is the length of the given string..</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The size of stack can go up to <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-without-extra-space-accepted\">Approach #4 Without extra space [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we make use of two counters <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script>. First, we start traversing the string from the left towards the right and for every <script type=\"math/tex; mode=display\">\\text{‘(’}</script> encountered, we increment the <script type=\"math/tex; mode=display\">left</script> counter and for every <script type=\"math/tex; mode=display\">\\text{‘)’}</script> encountered, we increment the <script type=\"math/tex; mode=display\">right</script> counter. Whenever <script type=\"math/tex; mode=display\">left</script> becomes equal to <script type=\"math/tex; mode=display\">right</script>, we calculate the length of the current valid string and keep track of maximum length substring found so far. If <script type=\"math/tex; mode=display\">right</script> becomes greater than <script type=\"math/tex; mode=display\">left</script> we reset <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> to <script type=\"math/tex; mode=display\">0</script>.</p>\n<p>Next, we start traversing the string from right to left and similar procedure is applied.</p>\n<p>Example of this approach:</p>\n<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisLR.gif)-->\n\n<p>!?!../Documents/32_Longest_Validlr.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">longestValidParentheses</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">maxlength</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">left</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">right</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">maxlength</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxlength</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">right</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;=</span> <span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;(&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">left</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">right</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">maxlength</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">maxlength</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">left</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;=</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">maxlength</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Two traversals of the string.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Only two extra variables <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> are needed.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(374,'Populating Next Right Pointers in Each Node II',2,'Tree,Depth-first Search',0,0,'<p></p><p>Follow up for problem \"<i>Populating Next Right Pointers in Each Node</i>\".</p><p>What if the given tree could be any binary tree? Would your previous solution still work?</p><p>\n<b>Note:</b>\n</p><ul><li>You may only use constant extra space.</li></ul><p>\nFor example,<br/>\nGiven the following binary tree,<br/>\n</p><pre>\n         1\n       /  \\\n      2    3\n     / \\    \\\n    4   5    7\n</pre><p>\nAfter calling your function, the tree should look like:<br/>\n</p><pre>\n         1 -&gt; NULL\n       /  \\\n      2 -&gt; 3 -&gt; NULL\n     / \\    \\\n    4-&gt; 5 -&gt; 7 -&gt; NULL\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  TreeLinkNode *left, *right, *next;\r\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void connect(TreeLinkNode *root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * public class TreeLinkNode {\r\n *     int val;\r\n *     TreeLinkNode left, right, next;\r\n *     TreeLinkNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void connect(TreeLinkNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for binary tree with next pointer.\r\n# class TreeLinkNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    # @param root, a tree link node\r\n    # @return nothing\r\n    def connect(self, root):\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  struct TreeLinkNode *left, *right, *next;\r\n * };\r\n *\r\n */\r\nvoid connect(struct TreeLinkNode *root) {\r\n    \r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * function TreeLinkNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {TreeLinkNode} root\r\n * @return {void} Do not return anything, modify tree in-place instead.\r\n */\r\nvar connect = function(root) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(375,'Copy List with Random Pointer',2,'Hash Table,Linked List',0,0,'<p></p><p>\nA linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.\n</p><p>\nReturn a deep copy of the list.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list with a random pointer.\r\n * struct RandomListNode {\r\n *     int label;\r\n *     RandomListNode *next, *random;\r\n *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    RandomListNode *copyRandomList(RandomListNode *head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list with a random pointer.\r\n * class RandomListNode {\r\n *     int label;\r\n *     RandomListNode next, random;\r\n *     RandomListNode(int x) { this.label = x; }\r\n * };\r\n */\r\npublic class Solution {\r\n    public RandomListNode copyRandomList(RandomListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list with a random pointer.\r\n# class RandomListNode(object):\r\n#     def __init__(self, x):\r\n#         self.label = x\r\n#         self.next = None\r\n#         self.random = None\r\n\r\nclass Solution(object):\r\n    def copyRandomList(self, head):\r\n        """\r\n        :type head: RandomListNode\r\n        :rtype: RandomListNode\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list with a random pointer.\r\n * struct RandomListNode {\r\n *     int label;\r\n *     struct RandomListNode *next;\r\n *     struct RandomListNode *random;\r\n * };\r\n */\r\nstruct RandomListNode *copyRandomList(struct RandomListNode *head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list with a random pointer.\r\n * public class RandomListNode {\r\n *     public int label;\r\n *     public RandomListNode next, random;\r\n *     public RandomListNode(int x) { this.label = x; }\r\n * };\r\n */\r\npublic class Solution {\r\n    public RandomListNode CopyRandomList(RandomListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list with a random pointer.\r\n * function RandomListNode(label) {\r\n *     this.label = label;\r\n *     this.next = this.random = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {RandomListNode} head\r\n * @return {RandomListNode}\r\n */\r\nvar copyRandomList = function(head) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(376,'Single Number III',2,'Bit Manipulation',0,0,'<p></p><p>\nGiven an array of numbers <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.\n</p><p>\nFor example:\n</p><p>\nGiven <code>nums = [1, 2, 1, 3, 2, 5]</code>, return <code>[3, 5]</code>.\n</p><p>\n<b>Note</b>:<br/>\n</p><ol>\n<li>The order of the result is not important. So in the above example, <code>[5, 3]</code> is also correct.</li>\n<li>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</li>\n</ol><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> singleNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] singleNumber(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def singleNumber(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* singleNumber(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] SingleNumber(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar singleNumber = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef single_number(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func singleNumber(_ nums: [Int]) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func singleNumber(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def singleNumber(nums: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(377,'Sliding Window Median',3,'',0,0,'<p></p><p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\nExamples: <br/><p><code>[2,3,4]</code> , the median is <code>3</code></p><p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code> </p><p>Given an array <i>nums</i>, there is a sliding window of size <i>k</i> which is moving from the very left of the array to the very right. You can only see the <i>k</i> numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.</p><p>For example,<br/>\nGiven <i>nums</i> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <i>k</i> = 3.</p><pre>\nWindow position                Median\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre><p>Therefore, return the median sliding window as <code>[1,-1,-1,3,5,6]</code>.</p><p><b>Note: </b><br/>\nYou may assume <code>k</code> is always valid, ie: <code>k</code> is always smaller than input array\'s size for non-empty array.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<double> medianSlidingWindow(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public double[] medianSlidingWindow(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def medianSlidingWindow(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: List[float]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\ndouble* medianSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public double[] MedianSlidingWindow(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar medianSlidingWindow = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Float[]}\r\ndef median_sliding_window(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func medianSlidingWindow(_ nums: [Int], _ k: Int) -> [Double] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func medianSlidingWindow(nums []int, k int) []float64 {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def medianSlidingWindow(nums: Array[Int], k: Int): Array[Double] = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(378,'Fraction Addition and Subtraction',2,'Math',0,0,'<p></p><p>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <a href=\"https://en.wikipedia.org/wiki/Irreducible_fraction\">irreducible fraction</a>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\"-1/2+1/2\"\n<b>Output:</b> \"0/1\"\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>\"-1/2+1/2+1/3\"\n<b>Output:</b> \"1/3\"\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b>\"1/3-1/2\"\n<b>Output:</b> \"-1/6\"\n</pre><p><b>Example 4:</b><br/>\n</p><pre>\n<b>Input:</b>\"5/3+1/3\"\n<b>Output:</b> \"2/1\"\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The input string only contains <code>\'0\'</code> to <code>\'9\'</code>, <code>\'/\'</code>, <code>\'+\'</code> and <code>\'-\'</code>. So does the output.</li>\n<li>Each fraction (input and output) has format <code>±numerator/denominator</code>. If the first input fraction or the output is positive, then <code>\'+\'</code> will be omitted.</li>\n<li>The input only contains valid <b>irreducible fractions</b>, where the <b>numerator</b> and <b>denominator</b> of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.</li>\n<li>The number of given fractions will be in the range [1,10].</li>\n<li>The numerator and denominator of the <b>final result</b> are guaranteed to be valid and in the range of 32-bit int.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    string fractionAddition(string expression) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String fractionAddition(String expression) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def fractionAddition(self, expression):\n        """\n        :type expression: str\n        :rtype: str\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def fractionAddition(self, expression):\n        """\n        :type expression: str\n        :rtype: str\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* fractionAddition(char* expression) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string FractionAddition(string expression) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} expression\n * @return {string}\n */\nvar fractionAddition = function(expression) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} expression\n# @return {String}\ndef fraction_addition(expression)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func fractionAddition(_ expression: String) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fractionAddition(expression string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def fractionAddition(expression: String): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-lcmaccepted\">Approach #1  Using LCM[Accepted]</a></li>\n<li><a href=\"#approach-2-using-gcdaccepted\">Approach #2  Using GCD[Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-lcmaccepted\">Approach #1  Using LCM[Accepted]</h4>\n<p>The first obvious step to be undertaken is to split the given string into individual fractions. We split the string based on <code>+</code> and <code>-</code> sign. We store the signs in the order in which they appear in the string in <script type=\"math/tex; mode=display\">sign</script> array. Further, after getting the individual fractions, we further split the fractions based on <code>/</code> sign. Thus, we obtain the individual numerator and denominator parts. We store the same in <script type=\"math/tex; mode=display\">num</script> and <script type=\"math/tex; mode=display\">den</script> arrays respectively.</p>\n<p>Now, we\'ve got the data ready to be worked upon. In order to see the method we\'ve used in this implementation, we\'ll take an example and understand the way we work on it.</p>\n<p>Let\'s say, the given fraction is:</p>\n<p>\n<script type=\"math/tex; mode=display\">\\frac{3}{2} + \\frac{5}{3} -\\frac{7}{6}</script>\n</p>\n<p>We need to equalize all the denominators so as to be able to add and subtract the numerators easily. The nearest value the denominators can be scaled upto is the LCM of all the denominators. Thus, we need to find the LCM of all the denominators and then multiply all the denominators with appropriate integer factors to make them equal to the LCM. But, in order to keep the individual fraction values unchanged, we need to multiply the individual numerators also with the same factors. </p>\n<p>In order to find the LCM, we can go as follows. We use the method <script type=\"math/tex; mode=display\">lcm(a,b,c) = lcm( lcm(a,b), c)</script>. Thus, if we can compute the lcm of two denominators, we can keep on repeating the process iteratively over the denominators to get the overall lcm. To find the lcm of two numbers <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script>, we use <script type=\"math/tex; mode=display\">lcm(a,b) = (a*b)/gcd(a,b)</script>. For the above example, the <script type=\"math/tex; mode=display\">lcm</script> turns out to be 6.</p>\n<p>Thus, we scale up the denominators to 6 as follows:</p>\n<p>\n<script type=\"math/tex; mode=display\">\\frac{3*3}{2*3} + \\frac{5*2}{3*2} -\\frac{7}{6}</script>\n</p>\n<p>Thus, we can observe that, the scaling factor for a fraction <script type=\"math/tex; mode=display\">\\frac{num}{den}</script> is given by: <script type=\"math/tex; mode=display\">{num*x}/{den*x}</script>, where <script type=\"math/tex; mode=display\">x</script> is the corresponding scaling factor. Note that, <script type=\"math/tex; mode=display\">den*x=lcm</script>. Thus, <script type=\"math/tex; mode=display\">x=lcm/den</script>. Thus, we find out the corresponding scaling factor <script type=\"math/tex; mode=display\">x_i</script> for each fraction.</p>\n<p>After this, we can directly add or subtract the new scaled numerators.</p>\n<p>In the current example, we obtain <script type=\"math/tex; mode=display\">\\frac{12}{6}</script> as the result. Now, we need to convert this into an irreducible fraction. Thus, if we obtain <script type=\"math/tex; mode=display\">\\frac{num_i}{den_i}</script> as the final result, we need to find a largest factor <script type=\"math/tex; mode=display\">y</script>, which divides both <script type=\"math/tex; mode=display\">num_i</script> and <script type=\"math/tex; mode=display\">den_i</script>. Such a number, as we know, is the gcd of <script type=\"math/tex; mode=display\">num_i</script> and <script type=\"math/tex; mode=display\">den_i</script>.</p>\n<p>Thus, to convert the result <script type=\"math/tex; mode=display\">\\frac{num_i}{den_i}</script>, we divide both the numerator and denominator by the gcd of the two numbers <script type=\"math/tex; mode=display\">y</script> to obtain the final irreducible <script type=\"math/tex; mode=display\">\\frac{num_i/y}{den_i/y}</script>.</p>\n<p>Note: A problem with this approach is that we find the lcm of all the denominators in a single go and then reduce the overall fraction at the end. Thus, the lcm value could become very large and could lead to an overflow. But, this solution suffices for the current range of numbers.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">fractionAddition</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">expression</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Character</span> <span class=\"o\">&gt;</span> <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;+&#39;</span> <span class=\"o\">||</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">sign</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">den</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sub</span><span class=\"o\">:</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;\\\\+&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">subsub</span><span class=\"o\">:</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">subsub</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">fraction</span> <span class=\"o\">=</span> <span class=\"n\">subsub</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">);</span>\n                    <span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">fraction</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]));</span>\n                    <span class=\"n\">den</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">fraction</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]));</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"o\">)</span>\n            <span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lcm</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">den</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">lcm</span> <span class=\"o\">=</span> <span class=\"n\">lcm_</span><span class=\"o\">(</span><span class=\"n\">lcm</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">lcm</span> <span class=\"o\">/</span> <span class=\"n\">den</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sign</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;+&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">+=</span> <span class=\"n\">lcm</span> <span class=\"o\">/</span> <span class=\"n\">den</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">res</span> <span class=\"o\">-=</span> <span class=\"n\">lcm</span> <span class=\"o\">/</span> <span class=\"n\">den</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">),</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">lcm</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">/</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">lcm</span> <span class=\"o\">/</span> <span class=\"n\">g</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lcm_</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">/</span> <span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlogx)</script>. Euclidean GCD algorithm takes <script type=\"math/tex; mode=display\">O(log(a.b))</script> time for finding gcd of two numbers <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script>. Here <script type=\"math/tex; mode=display\">n</script> refers to the number of fractions in the input string and <script type=\"math/tex; mode=display\">x</script> is the maximum possible value of denominator.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Size of <script type=\"math/tex; mode=display\">num</script>, <script type=\"math/tex; mode=display\">den</script> and <script type=\"math/tex; mode=display\">sign</script> list grows upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-gcdaccepted\">Approach #2  Using GCD[Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We know that we can continue the process of evaluating the given fractions by considering pairs of fractions at a time and continue the process considering the result obtained and the new fraction to be evaluated this time. We make use of this observation, and thus, instead of segregating the signs, numerators and denominators first, we directly start scanning the given strings and operate on the fractions obtained till now whenever a new sign is encountered.</p>\n<p>We operate on the pairs of fractions, and keep on reducing the result obtained to irreducible fractions on the way. By doing this, we can reduce the chances of the problem of potential overflow possible in case the denominators lead to a large value of lcm.</p>\n<p>We also observed from the last approach, that we need to equalize the denominators of a pair of fractions say:</p>\n<p>\n<script type=\"math/tex; mode=display\">\\frac{a}{b} + \\frac{c}{d}</script>\n</p>\n<p>We used a scaling factor of <script type=\"math/tex; mode=display\">x</script> for the first fraction(both numerator and denominator). Here, <script type=\"math/tex; mode=display\">x=lcm(b,d)/b</script>. For the second fraction, the scaling factor <script type=\"math/tex; mode=display\">y</script> is given by <script type=\"math/tex; mode=display\">y=lcm(b,d)/d</script>. Here, $<script type=\"math/tex; mode=display\">lcm(b,d)=b*d/gcd(b,d)</script>. Thus, instead of finding the lcm and then again determining the scaling factor, we can directly use: <script type=\"math/tex; mode=display\">x=(b*d)/(gcd(b,d)*b) = d/gcd(b,d)</script>, and <script type=\"math/tex; mode=display\">y=(b*d)/(gcd(b,d)*d)</script>. Thus, we need to scale the numerators appropriately and add/subtract them in terms of pairs. The denominators are scaled in the same manner to the lcm of the two denominators involved.</p>\n<p>After evaluting every pair of fractions, we again reduce them to irreducible fractions by diving both the numerator and denominator of the resultant fraction by the gcd of the two.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">fractionAddition</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">expression</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Character</span> <span class=\"o\">&gt;</span> <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"o\">)</span>\n            <span class=\"n\">sign</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"sc\">&#39;+&#39;</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;+&#39;</span> <span class=\"o\">||</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">sign</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">prev_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">prev_den</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sub</span><span class=\"o\">:</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;(\\\\+)|(-)&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">fraction</span> <span class=\"o\">=</span> <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">);</span>\n                <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">fraction</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]));</span>\n                <span class=\"kt\">int</span> <span class=\"n\">den</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">fraction</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]));</span>\n                <span class=\"kt\">int</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">den</span><span class=\"o\">,</span> <span class=\"n\">prev_den</span><span class=\"o\">));</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sign</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;+&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">prev_num</span> <span class=\"o\">=</span> <span class=\"n\">prev_num</span> <span class=\"o\">*</span> <span class=\"n\">den</span> <span class=\"o\">/</span> <span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">prev_den</span> <span class=\"o\">/</span> <span class=\"n\">g</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">prev_num</span> <span class=\"o\">=</span> <span class=\"n\">prev_num</span> <span class=\"o\">*</span> <span class=\"n\">den</span> <span class=\"o\">/</span> <span class=\"n\">g</span> <span class=\"o\">-</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">prev_den</span> <span class=\"o\">/</span> <span class=\"n\">g</span><span class=\"o\">;</span>\n                <span class=\"n\">prev_den</span> <span class=\"o\">=</span> <span class=\"n\">den</span> <span class=\"o\">*</span> <span class=\"n\">prev_den</span> <span class=\"o\">/</span> <span class=\"n\">g</span><span class=\"o\">;</span>\n                <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">prev_den</span><span class=\"o\">,</span> <span class=\"n\">prev_num</span><span class=\"o\">));</span>\n                <span class=\"n\">prev_num</span> <span class=\"o\">/=</span> <span class=\"n\">g</span><span class=\"o\">;</span>\n                <span class=\"n\">prev_den</span> <span class=\"o\">/=</span> <span class=\"n\">g</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">prev_num</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">prev_den</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">gcd</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlogx)</script>. Euclidean GCD algorithm takes <script type=\"math/tex; mode=display\">O(log(a.b))</script> time for finding gcd of two numbers <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script>. Here <script type=\"math/tex; mode=display\">n</script> refers to the number of fractions in the input string and <script type=\"math/tex; mode=display\">x</script> is the maximum possible value of denominator.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Size of <script type=\"math/tex; mode=display\">sign</script> list grows upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(379,'Best Time to Buy and Sell Stock IV',3,'Dynamic Programming',0,0,'<p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p><p>Design an algorithm to find the maximum profit. You may complete at most <b>k</b> transactions.</p><p><b>Note:</b><br/>\nYou may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/Freezen\">@Freezen</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maxProfit(int k, vector<int>& prices) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maxProfit(int k, int[] prices) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxProfit(self, k, prices):\r\n        """\r\n        :type k: int\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maxProfit(int k, int* prices, int pricesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaxProfit(int k, int[] prices) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} k\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(k, prices) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} k\r\n# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(k, prices)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func maxProfit(_ k: Int, _ prices: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(k int, prices []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxProfit(k: Int, prices: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(380,'Guess Number Higher or Lower II',2,'Dynamic Programming,Minimax',0,0,'<p></p><p>We are playing the Guess Game. The game is as follows:</p><p>\n</p><p>I pick a number from <strong>1</strong> to <strong>n</strong>. You have to guess which number I picked.</p><p>Every time you guess wrong, I\'ll tell you whether the number I picked is higher or lower. </p><p>However, when you guess a particular number x,  and you guess wrong, you pay <b>$x</b>. You win the game when you guess the number I picked.</p><p>\n<b>Example:</b>\n</p><pre>\nn = 10, I pick 8.\n\nFirst round:  You guess 5, I tell you that it\'s higher. You pay $5.\nSecond round: You guess 7, I tell you that it\'s higher. You pay $7.\nThird round:  You guess 9, I tell you that it\'s lower. You pay $9.\n\nGame over. 8 is the number I picked.\n\nYou end up paying $5 + $7 + $9 = $21.\n</pre><p>Given a particular <strong>n ≥ 1</strong>, find out how much money you need to have to guarantee a <b>win</b>.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/agave/\">@agave</a> and <a href=\"https://leetcode.com/stefanpochmann/\">@StefanPochmann</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int getMoneyAmount(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int getMoneyAmount(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def getMoneyAmount(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int getMoneyAmount(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int GetMoneyAmount(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar getMoneyAmount = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef get_money_amount(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func getMoneyAmount(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getMoneyAmount(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getMoneyAmount(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(381,'Next Permutation',2,'Array',0,0,'<p></p><p>\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n</p><p>\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\n</p><p>\nThe replacement must be in-place, do not allocate extra memory.\n</p><p>\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br/>\n<code>1,2,3</code> → <code>1,3,2</code><br/>\n<code>3,2,1</code> → <code>1,2,3</code><br/>\n<code>1,1,5</code> → <code>1,5,1</code><br/>\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void nextPermutation(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void nextPermutation(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def nextPermutation(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void nextPermutation(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void NextPermutation(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */\r\nvar nextPermutation = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Void} Do not return anything, modify nums in-place instead.\r\ndef next_permutation(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func nextPermutation(_ nums: inout [Int]) {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nextPermutation(nums []int)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nextPermutation(nums: Array[Int]): Unit = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-single-pass-approach-accepted\">Approach #2 Single Pass Approach [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>We need to find the next lexicographic permutation of the given list of numbers than the number formed by the given array.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we find out every possible permutation of list formed by the elements of the given array and find out the permutation which is\njust larger than the given one. But this one will be a very naive approach, since it requires us to find out every possible permutation\n which will take really long time and the implementation is complex.\n Thus, this approach is not acceptable at all. Hence, we move on directly to the correct approach.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n!)</script>. Total possible permutations is <script type=\"math/tex; mode=display\">n!</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Since an array will be used to store the permutations.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-single-pass-approach-accepted\">Approach #2 Single Pass Approach [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>First, we observe that for any given sequence that is in descending order, no next larger permutation is possible.\n For example, no next permutation is possible for the following array:\n <code>[9, 5, 4, 3, 1]</code></p>\n<p>We need to find the first pair of two successive numbers <script type=\"math/tex; mode=display\">a[i]</script> and <script type=\"math/tex; mode=display\">a[i-1]</script>, from the right, which satisfy\n <script type=\"math/tex; mode=display\">a[i] > a[i-1]</script>. Now, no rearrangements to the right of <script type=\"math/tex; mode=display\">a[i-1]</script> can create a larger permutation since that subarray consists of numbers in descending order.\n Thus, we need to rearrange the numbers to the right of <script type=\"math/tex; mode=display\">a[i-1]</script> including itself.</p>\n<p>Now, what kind of rearrangement will produce the next larger number? We want to create the permutation just larger than the current one. Therefore, we need to replace the number <script type=\"math/tex; mode=display\">a[i-1]</script> with the number which is just larger than itself among the numbers lying to its right section, say <script type=\"math/tex; mode=display\">a[j]</script>.</p>\n<p><img alt=\" Next Permutation \" src=\"https://leetcode.com/media/original_images/31_nums_graph.png\" /></p>\n<p>We swap the numbers <script type=\"math/tex; mode=display\">a[i-1]</script> and <script type=\"math/tex; mode=display\">a[j]</script>. We now have the correct number at index <script type=\"math/tex; mode=display\">i-1</script>. But still the current permutation isn\'t the permutation\n    that we are looking for. We need the smallest permutation that can be formed by using the numbers only to the right of <script type=\"math/tex; mode=display\">a[i-1]</script>. Therefore, we need to place those\n     numbers in ascending order to get their smallest permutation.</p>\n<p>But, recall that while scanning the numbers from the right, we simply kept decrementing the index\n      until we found the pair <script type=\"math/tex; mode=display\">a[i]</script> and <script type=\"math/tex; mode=display\">a[i-1]</script> where,  <script type=\"math/tex; mode=display\">a[i] > a[i-1]</script>. Thus, all numbers to the right of <script type=\"math/tex; mode=display\">a[i-1]</script> were already sorted in descending order.\n      Furthermore, swapping <script type=\"math/tex; mode=display\">a[i-1]</script> and <script type=\"math/tex; mode=display\">a[j]</script> didn\'t change that order.\n      Therefore, we simply need to reverse the numbers following <script type=\"math/tex; mode=display\">a[i-1]</script> to get the next smallest lexicographic permutation.</p>\n<p>The following animation will make things clearer:</p>\n<p><img alt=\"Next Permutation\" src=\"https://leetcode.com/media/original_images/31_Next_Permutation.gif\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">nextPermutation</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">j</span><span class=\"o\">--;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">reverse</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">reverse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">);</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n            <span class=\"n\">j</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. In worst case, only two scans of the whole array are needed.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used. In place replacements are done.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(382,'Evaluate Division',2,'Graph',0,0,'<p></p><p>\nEquations are given in the format <code>A / B = k</code>, where  <code>A</code> and <code>B</code> are variables represented as strings, and <code>k</code> is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return <code>-1.0</code>.\n</p><p><b>Example:</b><br/>\nGiven <code> a / b = 2.0, b / c = 3.0.</code> <br/>queries are: <code> a / c = ?,  b / a = ?, a / e = ?,  a / a = ?, x / x = ? .</code> <br/>return <code> [6.0, 0.5, -1.0, 1.0, -1.0 ].</code>\n</p><p>\nThe input is: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries </code>, where <code>equations.size() == values.size()</code>, and the values are positive. This represents the equations. Return <code> vector&lt;double&gt;</code>.\n</p><p>According to the example above:\n</p><pre>equations = [ [\"a\", \"b\"], [\"b\", \"c\"] ],\nvalues = [2.0, 3.0],\nqueries = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. </pre><p>\nThe input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def calcEquation(self, equations, values, queries):\r\n        """\r\n        :type equations: List[List[str]]\r\n        :type values: List[float]\r\n        :type queries: List[List[str]]\r\n        :rtype: List[float]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\ndouble* calcEquation(char*** equations, int equationsRowSize, int equationsColSize, double* values, int valuesSize, char*** queries, int queriesRowSize, int queriesColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public double[] CalcEquation(string[,] equations, double[] values, string[,] queries) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[][]} equations\r\n * @param {number[]} values\r\n * @param {string[][]} queries\r\n * @return {number[]}\r\n */\r\nvar calcEquation = function(equations, values, queries) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {string[][]} equations\r\n# @param {Float[]} values\r\n# @param {string[][]} queries\r\n# @return {Float[]}\r\ndef calc_equation(equations, values, queries)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func calcEquation(_ equations: [[String]], _ values: [Double], _ queries: [[String]]) -> [Double] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func calcEquation(equations [][]string, values []float64, queries [][]string) []float64 {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def calcEquation(equations: Array[Array[String]], values: Array[Double], queries: Array[Array[String]]): Array[Double] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(383,'Single Number II',2,'Bit Manipulation',0,0,'<p></p><p>\nGiven an array of integers, every element appears <i>three</i> times except for one, which appears exactly once. Find that single one.\n</p><p>\n<b>Note:</b><br/>\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int singleNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def singleNumber(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int singleNumber(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int SingleNumber(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar singleNumber = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef single_number(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func singleNumber(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func singleNumber(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(384,'Populating Next Right Pointers in Each Node',2,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree\n</p><pre>\n    struct TreeLinkNode {\n      TreeLinkNode *left;\n      TreeLinkNode *right;\n      TreeLinkNode *next;\n    }\n</pre><p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p>\n<b>Note:</b>\n</p><ul>\n<li>You may only use constant extra space.</li>\n<li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>\n</ul><p>\nFor example,<br/>\nGiven the following perfect binary tree,<br/>\n</p><pre>\n         1\n       /  \\\n      2    3\n     / \\  / \\\n    4  5  6  7\n</pre><p>\nAfter calling your function, the tree should look like:<br/>\n</p><pre>\n         1 -&gt; NULL\n       /  \\\n      2 -&gt; 3 -&gt; NULL\n     / \\  / \\\n    4-&gt;5-&gt;6-&gt;7 -&gt; NULL\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  TreeLinkNode *left, *right, *next;\r\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void connect(TreeLinkNode *root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * public class TreeLinkNode {\r\n *     int val;\r\n *     TreeLinkNode left, right, next;\r\n *     TreeLinkNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void connect(TreeLinkNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for binary tree with next pointer.\r\n# class TreeLinkNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    # @param root, a tree link node\r\n    # @return nothing\r\n    def connect(self, root):\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  struct TreeLinkNode *left, *right, *next;\r\n * };\r\n *\r\n */\r\nvoid connect(struct TreeLinkNode *root) {\r\n    \r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for binary tree with next pointer.\r\n * function TreeLinkNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {TreeLinkNode} root\r\n * @return {void} Do not return anything, modify tree in-place instead.\r\n */\r\nvar connect = function(root) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(385,'Add Digits',1,'Math',0,0,'<p></p><p>\nGiven a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit. \n</p><p>\nFor example:\n</p><p>\nGiven <code>num = 38</code>, the process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. Since <code>2</code> has only one digit, return it.\n</p><p><b>Follow up:</b><br/>\nCould you do it without any loop/recursion in O(1) runtime?\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int addDigits(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int addDigits(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def addDigits(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int addDigits(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int AddDigits(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nvar addDigits = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Integer}\r\ndef add_digits(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func addDigits(_ num: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func addDigits(num int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def addDigits(num: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(386,'Largest Palindrome Product',1,'',0,0,'<p></p><p>Find the largest palindrome made from the product of two n-digit numbers.</p><p> Since the result could be very large, you should return the largest palindrome mod 1337.</p><p><b>Example:</b>\n</p><p>Input: 2</p><p>Output: 987</p><p>Explanation: 99 x 91 = 9009, 9009 % 1337 = 987\n</p><p><b>Note:</b>\n</p><p>The range of n is [1,8].</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int largestPalindrome(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int largestPalindrome(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def largestPalindrome(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int largestPalindrome(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LargestPalindrome(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar largestPalindrome = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef largest_palindrome(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func largestPalindrome(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func largestPalindrome(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def largestPalindrome(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(387,'Repeated DNA Sequences',2,'Hash Table,Bit Manipulation',0,0,'<p></p><p>\nAll DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p><p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p><p>\nFor example,</p><pre>\nGiven s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\",\n\nReturn:\n[\"AAAAACCCCC\", \"CCCCCAAAAA\"].\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> findRepeatedDnaSequences(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findRepeatedDnaSequences(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findRepeatedDnaSequences(char* s, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> FindRepeatedDnaSequences(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar findRepeatedDnaSequences = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String[]}\r\ndef find_repeated_dna_sequences(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findRepeatedDnaSequences(_ s: String) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findRepeatedDnaSequences(s string) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findRepeatedDnaSequences(s: String): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none');
INSERT INTO `problems` VALUES (388,'Tag Validator',3,'String,Stack',0,0,'<p></p><p>Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:</p><p>\n</p><ol>\n<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li>\n<li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li>\n<li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li>\n<li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li>\n<li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li>\n<li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>&gt;</code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>&gt;</code> should be parsed as TAG_NAME  (not necessarily valid).</li>\n<li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]&gt;</code>. </li>\n<li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>. </li>\n</ol><p><b>Valid Code Examples:</b><br/>\n</p><pre>\n<b>Input:</b> \"&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;\"<br/>\n<b>Output:</b> True<br/>\n<b>Explanation:</b> <br/>\nThe code is wrapped in a closed tag : &lt;DIV&gt; and &lt;/DIV&gt;. <br/>\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. <br/>\nAlthough CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.<br/>\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.<br/>\n\n<b>Input:</b> \"&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;\"<br/>\n<b>Output:</b> True<br/>\n<b>Explanation:</b><br/>\nWe first separate the code into : start_tag|tag_content|end_tag.<br/>\nstart_tag -&gt; <b>\"&lt;DIV&gt;\"</b><br/>\nend_tag -&gt; <b>\"&lt;/DIV&gt;\"</b><br/>\ntag_content could also be separated into : text1|cdata|text2.<br/>\ntext1 -&gt; <b>\"&gt;&gt;  ![cdata[]] \"</b><br/>\ncdata -&gt; <b>\"&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;\"</b>, where the CDATA_CONTENT is <b>\"&lt;div&gt;]&gt;\"</b><br/>\ntext2 -&gt; <b>\"]]&gt;&gt;]\"</b><br/>\n\nThe reason why start_tag is NOT <b>\"&lt;DIV&gt;&gt;&gt;\"</b> is because of the rule 6.\nThe reason why cdata is NOT <b>\"&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;\"</b> is because of the rule 7.\n</pre><p><b>Invalid Code Examples:</b><br/>\n</p><pre>\n<b>Input:</b> \"&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;\"\n<b>Output:</b> False\n<b>Explanation:</b> Unbalanced. If \"&lt;A&gt;\" is closed, then \"&lt;B&gt;\" must be unmatched, and vice versa.\n\n<b>Input:</b> \"&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;\"\n<b>Output:</b> False\n\n<b>Input:</b> \"&lt;DIV&gt;  unmatched &amp;lt  &lt;/DIV&gt;\"\n<b>Output:</b> False\n\n<b>Input:</b> \"&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;\"\n<b>Output:</b> False\n\n<b>Input:</b> \"&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;\"\n<b>Output:</b> False\n\n<b>Input:</b> \"&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;\"\n<b>Output:</b> False\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>For simplicity, you could assume the input code (including the <b>any characters</b> mentioned above) only contain <code>letters</code>, <code>digits</code>, <code>\'&lt;\'</code>,<code>\'&gt;\'</code>,<code>\'/\'</code>,<code>\'!\'</code>,<code>\'[\'</code>,<code>\']\'</code> and <code>\' \'</code>.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isValid(string code) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isValid(String code) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isValid(self, code):\r\n        """\r\n        :type code: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def isValid(self, code):\r\n        """\r\n        :type code: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isValid(char* code) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsValid(string code) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} code\r\n * @return {boolean}\r\n */\r\nvar isValid = function(code) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} code\r\n# @return {Boolean}\r\ndef is_valid(code)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isValid(_ code: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isValid(code string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isValid(code: String): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-stack-accepted\">Approach #1  Using Stack [Accepted]</a></li>\n<li><a href=\"#approach-2-using-regex-accepted\">Approach #2  Using Regex [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-stack-accepted\">Approach #1  Using Stack [Accepted]</h4>\n<p>Summarizing the given problem, we can say that we need to determine whether a tag is valid or not, by checking the following properties.</p>\n<ol>\n<li>\n<p>The code should be wrapped in valid closed tag.</p>\n</li>\n<li>\n<p>The <code>TAG_NAME</code> should be valid.</p>\n</li>\n<li>\n<p>The <code>TAG_CONTENT</code> should be valid.</p>\n</li>\n<li>\n<p>The <strong>cdata</strong> should be valid.</p>\n</li>\n<li>\n<p>All the tags should be closed. i.e. each start-tag should have a corresponding end-tag and vice-versa and the order of the tags should be correct as well.</p>\n</li>\n</ol>\n<p>In order to check the validity of all these, firstly, we need to identify which parts of the given <script type=\"math/tex; mode=display\">code</script> string act as which part from the above mentioned categories. To understand how it\'s done, we\'ll go through the implementation and the reasoning behind it step by step.</p>\n<p>We iterate over the given <script type=\"math/tex; mode=display\">code</script> string. Whenever a <code>&lt;</code> is encountered(unless we are currently inside <code>&lt;![CDATA[...]]&gt;</code>), it indicates the beginning of either a <code>TAG_NAME</code>(start tag or end tag) or the beginning of cdata as per the conditions given in the problem statement. </p>\n<p>If the character immediately following this <code>&lt;</code> is an <code>!</code>, the characters following this <code>&lt;</code> can\'t be a part of a valid <code>TAG_NAME</code>, since only upper-case letters(in case of a start tag) or <code>/</code> followed by upper-case letters(in the case of an end tag). Thus, the choice now narrows down to only <strong>cdata</strong>. Thus, we need to check if the current bunch of characters following <code>&lt;!</code>(including it) constitute a valid <strong>cdata</strong>. For doing this, firstly we find out the first matching <code>]]&gt;</code> following the current <code>&lt;!</code> to mark the ending of <strong>cdata</strong>. If no such matching <code>]]&gt;</code> exists, the <script type=\"math/tex; mode=display\">code</script> string is considered as invalid. Apart from this, the <code>&lt;!</code> should also be immediately followed by <code>CDATA[</code> for the <strong>cdata</strong> to be valid. The characters lying inside the  <code>&lt;![CDATA[</code> and <code>]]&gt;</code> do not have any constraints on them.</p>\n<p>If the character immediately following the <code>&lt;</code> encountered isn\'t an <code>!</code>, this <code>&lt;</code> can only mark the beginnning of <code>TAG_NAME</code>. Now, since a valid start tag can\'t contain anything except upper-case letters, if a <code>/</code> is found after <code>&lt;</code>, the <code>&lt;/</code> pair indicates the beginning of an end tag. Now, when a <code>&lt;</code> refers to the beginning of a <code>TAG_NAME</code>(either start-tag or end-tag), we find out the first closing <code>&gt;</code> following the <code>&lt;</code> to find out the substring(say <script type=\"math/tex; mode=display\">s</script>), that constitutes the <code>TAG_NAME</code>. This <script type=\"math/tex; mode=display\">s</script> should satisfy all the criterion to constitute a valid <code>TAG_NAME</code>. Thus, for every such <script type=\"math/tex; mode=display\">s</script>, we check if it contains all upper-case letters and also check its length(It should be between 1 to 9). If any of the criteria isn\'t fulfilled, <script type=\"math/tex; mode=display\">s</script> doesn\'t constitue a valid <code>TAG_NAME</code>. Hence, the <script type=\"math/tex; mode=display\">code</script> string turns out to be invalid as well.</p>\n<p>Apart from checking the validity of the <code>TAG_NAME</code>, we also need to ensure that the tags always exist in pairs. i.e. for every start-tag, a corresponding end-tag should always exist. Further, we can note that in case of multiple <code>TAG_NAME</code>\'s, the <code>TAG_NAME</code> whose start-tag comes later than the other ones, should have its end-tag appearing before the end-tags of those other <code>TAG_NAME</code>\'s. i.e. the tag which starts later should end first. </p>\n<p>From this, we get the intuition that we can make use of a <script type=\"math/tex; mode=display\">stack</script> to check the existence of matching start and end-tags. Thus, whenever we find out a valid start-tag, as mentioned above, we push its <code>TAG_NAME</code> string onto a <script type=\"math/tex; mode=display\">stack</script>. Now, whenever an end-tag is found, we compare its <code>TAG_NAME</code> with the <code>TAG_NAME</code> at the top the <script type=\"math/tex; mode=display\">stack</script> and remove this element from the <script type=\"math/tex; mode=display\">stack</script>. If the two don\'t match, this implies that either the current end-tag has no corresponding start-tag or there is a problem with the ordering of the tags. The two need to match for the tag-pair to be valid, since there can\'t exist an end-tag without a corresponding start-tag and vice-versa. Thus, if a match isn\'t found, we can conclude that the given <script type=\"math/tex; mode=display\">code</script> string is invalid.</p>\n<p>Now, after the complete <script type=\"math/tex; mode=display\">code</script> string has been traversed, the <script type=\"math/tex; mode=display\">stack</script> should be empty if all the start-tags have their corresponding end-tags as well. If the <script type=\"math/tex; mode=display\">stack</script> isn\'t empty, this implies that some start-tag doesn\'t have the corresponding end-tag, violating the closed-tag\'s validity condition.</p>\n<p>Further, we also need to ensure that the given <script type=\"math/tex; mode=display\">code</script> is completely enclosed within closed tags. For this, we need to ensure that the first <strong>cdata</strong> found is also inside the closed tags. Thus, when we find a possibility of the presence of <strong>cdata</strong>, we proceed further only if we\'ve already found a start tag, indicated by a non-empty stack. Further, to ensure that no data lies after the last end-tag, we need to ensure that the <script type=\"math/tex; mode=display\">stack</script> doesn\'t become empty before we reach the end of the given <script type=\"math/tex; mode=display\">code</script> string, since an empty <script type=\"math/tex; mode=display\">stack</script> indicates that the last end-tag has been encountered.</p>\n<p>The following animation depicts the process.</p>\n<p>!?!../Documents/Tag_Validator_Stack.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">contains_tag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValidTagName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">ending</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">isUpperCase</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ending</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">))</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">contains_tag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValidCdata</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;[CDATA[&quot;</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValid</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">code</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;&lt;&#39;</span> <span class=\"o\">||</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;&gt;&#39;</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">closeindex</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contains_tag</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;&lt;&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;!&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">closeindex</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;]]&gt;&quot;</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">closeindex</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">isValidCdata</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">closeindex</span><span class=\"o\">)))</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;/&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                        <span class=\"n\">i</span><span class=\"o\">++;</span>\n                        <span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"n\">closeindex</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"sc\">&#39;&gt;&#39;</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">closeindex</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">isValidTagName</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">closeindex</span><span class=\"o\">),</span> <span class=\"n\">ending</span><span class=\"o\">))</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">closeindex</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contains_tag</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse over the given <script type=\"math/tex; mode=display\">code</script> string of length <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The stack can grow upto a size of <script type=\"math/tex; mode=display\">n/3</script> in the worst case. e.g. In case of <code>&lt;A&gt;&lt;B&gt;&lt;C&gt;&lt;D&gt;</code>, <script type=\"math/tex; mode=display\">n</script>=12 and number of tags = 12/3 = 4.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-regex-accepted\">Approach #2  Using Regex [Accepted]</h4>\n<p>Instead of manually checking the given <script type=\"math/tex; mode=display\">code</script> string for checking the validity of <code>TAG_NAME</code>, <code>TAG_CONTENT</code> and <strong>cdata</strong>, we can make use of an inbuilt java fuunctionality known as regular expressions.</p>\n<p>A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. They can be used to search, edit, or manipulate text and data. The most common quantifiers used in regular expressions are listed below. A quantifier after a token (such as a character) or group specifies how often that preceding element is allowed to occur.</p>\n<p><code>?</code> The question mark indicates zero or one occurrences of the preceding element. For example, colou?r matches both \"color\" and \"colour\".</p>\n<p><code>*</code> The asterisk indicates zero or more occurrences of the preceding element. For example, ab*c matches \"ac\", \"abc\", \"abbc\", \"abbbc\", and so on.</p>\n<p><code>+</code> The plus sign indicates one or more occurrences of the preceding element. For example, ab+c matches \"abc\", \"abbc\", \"abbbc\", and so on, but not \"ac\".</p>\n<p><code>{n}</code> The preceding item is matched exactly <strong>n</strong> times.</p>\n<p><code>{min,}</code> The preceding item is matched <strong>min</strong> or more times.</p>\n<p><code>{min,max}</code> The preceding item is matched at least <strong>min</strong> times, but not more than <strong>max</strong> times.</p>\n<p><code>|</code> A vertical bar separates alternatives. For example, gray|grey can match \"gray\" or \"grey\".</p>\n<p><code>()</code> Parentheses are used to define the scope and precedence of the operators (among other uses). For example, gray|grey and gr(a|e)y are equivalent patterns which both describe the set of \"gray\" or \"grey\".</p>\n<p><code>[...]</code> Matches any single character in brackets.</p>\n<p><code>[^...]</code>    Matches any single character not in brackets.</p>\n<p>Thus, by making use of regex, we can directly check the validity of the <script type=\"math/tex; mode=display\">code</script> string directly(except the nesting of the inner tags) by using the regex expression below:</p>\n<p><code>&lt;([A-Z]{1,9})&gt;([^&lt;]*((&lt;\\/?[A-Z]{1,9}&gt;)|(&lt;!\\[CDATA\\[(.*?)]]&gt;))?[^&lt;]*)*&lt;\\/\\1&gt;</code></p>\n<p>The image below shows the portion of the string that each part of the expression helps to match:</p>\n<p align=\"center\"><img alt=\"Regex\" src=\"../Figures/591/591_Tag_Validator.PNG\" /></p>\n<p>But, if we make use of back-referencing as mentioned above, the matching process takes a very large amount of CPU time. Thus, we use the regex only to check the validity of the <code>TAG_CONTENT</code>, <code>TAG_NAME</code> and the <strong>cdata</strong>. We check the presence of the outermost closed tags by making use of a <script type=\"math/tex; mode=display\">stack</script> as done in the last approach.</p>\n<p>The rest of the process remains the same as in the last approach, except that we need not manually check the validity of <code>TAG_CONTENT</code>, <code>TAG_NAME</code> and the <strong>cdata</strong>, since it is already done by the regex expression. We only need to check the presence of inner closed tags.</p>\n<p>Check <a href=\"http://regexr.com/\">this</a> link for testing any regular expression on a sample text.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">java.util.regex.*</span><span class=\"o\">;</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n    <span class=\"kt\">boolean</span> <span class=\"n\">contains_tag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValidTagName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">ending</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ending</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">))</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">contains_tag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isValid</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">code</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&lt;[A-Z]{0,9}&gt;([^&lt;]*(&lt;((\\\\/?[A-Z]{1,9}&gt;)|(!\\\\[CDATA\\\\[(.*?)]]&gt;)))?)*&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">Pattern</span><span class=\"o\">.</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"n\">regex</span><span class=\"o\">,</span> <span class=\"n\">code</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">boolean</span> <span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contains_tag</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;&lt;&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;!&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;]]&gt;&quot;</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                    <span class=\"k\">continue</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;/&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">i</span><span class=\"o\">++;</span>\n                    <span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"kt\">int</span> <span class=\"n\">closeindex</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"sc\">&#39;&gt;&#39;</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">closeindex</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">isValidTagName</span><span class=\"o\">(</span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">closeindex</span><span class=\"o\">),</span> <span class=\"n\">ending</span><span class=\"o\">))</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">closeindex</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : Regular Expressions are/can be implemented in the form of Finite State Machines. Thus, the time complexity is dependent on the internal representation. In case of any suggestions, please comment below.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The stack can grow upto a size of <script type=\"math/tex; mode=display\">n/3</script> in the worst case. e.g. In case of <code>&lt;A&gt;&lt;B&gt;&lt;C&gt;&lt;D&gt;</code>, <script type=\"math/tex; mode=display\">n</script>=12 and number of tags = 12/3 = 4.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(389,'Substring with Concatenation of All Words',3,'Hash Table,Two Pointers,String',0,0,'<p></p><p>\nYou are given a string, <b>s</b>, and a list of words, <b>words</b>, that are all of the same length. Find all starting indices of substring(s) in <b>s</b> that is a concatenation of each word in <b>words</b> exactly once and without any intervening characters.\n</p><p>\nFor example, given:<br/>\n<b>s</b>: <code>\"barfoothefoobarman\"</code><br/>\n<b>words</b>: <code>[\"foo\", \"bar\"]</code>\n</p><p>\nYou should return the indices: <code>[0,9]</code>.<br/>\n(order does not matter).\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findSubstring(string s, vector<string>& words) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findSubstring(self, s, words):\r\n        """\r\n        :type s: str\r\n        :type words: List[str]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> FindSubstring(string s, string[] words) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string[]} words\r\n * @return {number[]}\r\n */\r\nvar findSubstring = function(s, words) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String[]} words\r\n# @return {Integer[]}\r\ndef find_substring(s, words)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findSubstring(s string, words []string) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(390,'Distinct Subsequences',3,'Dynamic Programming,String',0,0,'<p></p><p>\nGiven a string <b>S</b> and a string <b>T</b>, count the number of distinct subsequences of <b>S</b> which equals <b>T</b>.\n</p><p>\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ACE\"</code> is a subsequence of <code>\"ABCDE\"</code> while <code>\"AEC\"</code> is not).\n</p><p>\nHere is an example:<br/>\n<b>S</b> = <code>\"rabbbit\"</code>, <b>T</b> = <code>\"rabbit\"</code>\n</p><p>\nReturn <code>3</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numDistinct(string s, string t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numDistinct(String s, String t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numDistinct(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numDistinct(char* s, char* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumDistinct(string s, string t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {number}\r\n */\r\nvar numDistinct = function(s, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} t\r\n# @return {Integer}\r\ndef num_distinct(s, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numDistinct(_ s: String, _ t: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numDistinct(s string, t string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def numDistinct(s: String, t: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(391,'Single Number',1,'Hash Table,Bit Manipulation',0,0,'<p></p><p>Given an array of integers, every element appears <i>twice</i> except for one. Find that single one.</p><p>\n<b>Note:</b><br/>\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int singleNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def singleNumber(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int singleNumber(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int SingleNumber(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar singleNumber = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef single_number(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func singleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func singleNumber(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(392,'Binary Tree Paths',1,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree, return all root-to-leaf paths.\n</p><p>\nFor example, given the following binary tree:\n</p><p>\n</p><pre>\n   1\n /   \\\n2     3\n \\\n  5\n</pre><p>\nAll root-to-leaf paths are:\n</p><pre>[\"1-&gt;2-&gt;5\", \"1-&gt;3\"]</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<string> binaryTreePaths(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def binaryTreePaths(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** binaryTreePaths(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<string> BinaryTreePaths(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {string[]}\r\n */\r\nvar binaryTreePaths = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {String[]}\r\ndef binary_tree_paths(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc binaryTreePaths(root *TreeNode) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def binaryTreePaths(root: TreeNode): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(393,'Counting Bits',2,'Dynamic Programming,Bit Manipulation',0,0,'<p></p><p>Given a non negative integer number <b>num</b>. For every numbers <b>i</b> in the range <b>0 ≤ i ≤ num</b> calculate the number of 1\'s in their binary representation and return them as an array.\n</p><p>\n<b>Example:</b>\nFor <code>num = 5</code> you should return <code>[0,1,1,2,1,2]</code>.\n</p><p>\n<b>Follow up:</b>\n</p><ul>\n<li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>. But can you do it in linear time <b>O(n)</b> /possibly in a single pass?</li>\n<li>Space complexity should be <b>O(n)</b>.</li>\n<li>Can you do it like a boss? Do it without using any builtin function like <b>__builtin_popcount</b>  in c++ or in any other language.</li>\n</ul><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/syedee\">@ syedee </a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> countBits(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] countBits(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countBits(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* countBits(int num, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] CountBits(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {number[]}\r\n */\r\nvar countBits = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Integer[]}\r\ndef count_bits(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countBits(_ num: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countBits(num int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def countBits(num: Int): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(394,'Total Hamming Distance',2,'Bit Manipulation',0,0,'<p></p><p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> 4, 14, 2\n\n<b>Output:</b> 6\n\n<b>Explanation:</b> In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case). So the answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>Elements of the given array are in the range of <code>0 </code> to <code>10^9</code>\n</li><li>Length of the array will not exceed <code>10^4</code>. </li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int totalHammingDistance(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int totalHammingDistance(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def totalHammingDistance(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int totalHammingDistance(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int TotalHammingDistance(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar totalHammingDistance = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef total_hamming_distance(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func totalHammingDistance(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func totalHammingDistance(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def totalHammingDistance(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(395,'Erect the Fence',3,'Geometry',0,0,'<p></p><p>There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the <b>minimum length</b> of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n<b>Output:</b> [[1,1],[2,0],[4,2],[3,3],[2,4]]\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/erect_the_fence_1.png\" width=\"30%\"/>\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [[1,2],[2,2],[4,2]]\n<b>Output:</b> [[1,2],[2,2],[4,2]]\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/erect_the_fence_2.png\" width=\"30%\"/>\nEven you only have trees in a line, you need to use rope to enclose them. \n</pre><p> Note: \n</p><ol>\n<li>All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.</li>\n<li>All input integers will range from 0 to 100. </li>\n<li>The garden has at least one tree. </li>\n<li>All coordinates are distinct. </li>\n<li>Input points have <b>NO</b> order. No order required for output.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * struct Point {\r\n *     int x;\r\n *     int y;\r\n *     Point() : x(0), y(0) {}\r\n *     Point(int a, int b) : x(a), y(b) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<Point> outerTrees(vector<Point>& points) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a point.\n * class Point {\n *     int x;\n *     int y;\n *     Point() { x = 0; y = 0; }\n *     Point(int a, int b) { x = a; y = b; }\n * }\n */\nclass Solution {\n    public List<Point> outerTrees(Point[] points) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a point.\r\n# class Point(object):\r\n#     def __init__(self, a=0, b=0):\r\n#         self.x = a\r\n#         self.y = b\r\n\r\nclass Solution(object):\r\n    def outerTrees(self, points):\r\n        """\r\n        :type points: List[Point]\r\n        :rtype: List[Point]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def outerTrees(self, points):\r\n        """\r\n        :type points: List[Point]\r\n        :rtype: List[Point]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * struct Point {\r\n *     int x;\r\n *     int y;\r\n * }\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct Point* outerTrees(struct Point* points, int pointsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * public class Point {\r\n *     public int x;\r\n *     public int y;\r\n *     public Point() { x = 0; y = 0; }\r\n *     public Point(int a, int b) { x = a; y = b; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<Point> OuterTrees(Point[] points) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * function Point(x, y) {\r\n *     this.x = x;\r\n *     this.y = y;\r\n * }\r\n */\r\n/**\r\n * @param {Point[]} points\r\n * @return {Point[]}\r\n */\r\nvar outerTrees = function(points) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a point.\r\n# class Point\r\n#     attr_accessor :x, :y\r\n#     def initialize(x=0, y=0)\r\n#         @x = x\r\n#         @y = y\r\n#     end\r\n# end\r\n\r\n# @param {Point[]} points\r\n# @return {Point[]}\r\ndef outer_trees(points)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * public class Point {\r\n *   public var x: Int\r\n *   public var y: Int\r\n *   public init(_ x: Int, _ y: Int) {\r\n *     self.x = x\r\n *     self.y = y\r\n *   }\r\n * }\r\n */\r\nclass Solution {\r\n    func outerTrees(_ points: [Point]) -> [Point] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a point.\r\n * type Point struct {\r\n *     X int\r\n *     Y int\r\n * }\r\n */\r\nfunc outerTrees(points []Point) []Point {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a point.\n * class Point(var _x: Int, var _y: Int) {\n *     var x: Int = _x\n *     var y: Int = _y\n * }\n */\nobject Solution {\n    def outerTrees(points: Array[Point]): List[Point] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-jarvis-algorithm-accepted\">Approach #1 Jarvis Algorithm [Accepted]</a></li>\n<li><a href=\"#approach-2-graham-scan-accepted\">Approach #2 Graham Scan [Accepted]</a></li>\n<li><a href=\"#approach-3-monotone-chain-accepted\">Approach #3 Monotone Chain [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-jarvis-algorithm-accepted\">Approach #1 Jarvis Algorithm [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind Jarvis Algorithm is really simple. We start with the leftmost point among the given set of points and try to wrap up all the given points considering the boundary points in counterclockwise direction. </p>\n<p>This means that for every point <script type=\"math/tex; mode=display\">p</script> considered, we try to find out a point <script type=\"math/tex; mode=display\">q</script>, such that this point <script type=\"math/tex; mode=display\">q</script> is the most counterclockwise relative to <script type=\"math/tex; mode=display\">p</script> than all the other points. For checking this, we make use of <code>orientation()</code> function in the current implementation. This function takes three arguments <script type=\"math/tex; mode=display\">p</script>, the current point added in the hull; <script type=\"math/tex; mode=display\">q</script>, the next point being considered to be added in the hull; <script type=\"math/tex; mode=display\">r</script>, any other point in the given point space. This function returns a negative value if the point <script type=\"math/tex; mode=display\">q</script> is more counterclockwise to <script type=\"math/tex; mode=display\">p</script> than the point <script type=\"math/tex; mode=display\">r</script>. </p>\n<p>The following figure shows the concept. The point <script type=\"math/tex; mode=display\">q</script> is more counterclockwise to <script type=\"math/tex; mode=display\">p</script> than the point <script type=\"math/tex; mode=display\">r</script>. </p>\n<p><img alt=\"Erect_Fence\" src=\"../Figures/587_Erect_Fence_Jarvis.PNG\" /></p>\n<p>From the above figure, we can observe that in order for the points <script type=\"math/tex; mode=display\">p</script>, <script type=\"math/tex; mode=display\">q</script> and <script type=\"math/tex; mode=display\">r</script> need to be traversed in the same order in a counterclockwise direction, the cross product of the vectors <script type=\"math/tex; mode=display\">\\vec{pq}</script> and <script type=\"math/tex; mode=display\">\\vec{qr}</script> should be in a direction out of the plane of the screen i.e. it should be positive.</p>\n<p>\n<script type=\"math/tex; mode=display\">\\vec{pq} </script>x<script type=\"math/tex; mode=display\"> \\vec{qr} > 0</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">\\begin{vmatrix} (q_x-p_x) & (q_y-p_y) \\\\ (r_x-q_x) & (r_y-p_y) \\end{vmatrix} > 0</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">(q_x - p_x)*(r_y - q_y) - (q_y - p_y)*(r_x - q_x) > 0</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">(q_y - p_y)*(r_x - q_x) - (r_y - q_y)*(q_x - p_x) < 0</script>\n</p>\n<p>The above result is being calculated by the <code>orientation()</code> function.</p>\n<p>Thus, we scan over all the points <script type=\"math/tex; mode=display\">r</script> and find out the point <script type=\"math/tex; mode=display\">q</script> which is the most counterclockwise relative to <script type=\"math/tex; mode=display\">p</script> and add it to the convex hull. Further, if there exist two points(say <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script>) with the same relative orientation to <script type=\"math/tex; mode=display\">p</script>, i.e. if the points <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> are collinear relative to <script type=\"math/tex; mode=display\">p</script>, we need to consider the point <script type=\"math/tex; mode=display\">i</script> which lies in between the two points <script type=\"math/tex; mode=display\">p</script> and <script type=\"math/tex; mode=display\">j</script>. For considering such a situation, we\'ve made use of a function <code>inBetween()</code> in the current implementation. Even after finding out a point <script type=\"math/tex; mode=display\">q</script>, we need to consider all the other points which are collinear to <script type=\"math/tex; mode=display\">q</script> relative to <script type=\"math/tex; mode=display\">p</script> so as to be able to consider all the points lying on the boundary.</p>\n<p>Thus, we keep on including the points in the hull till we reach the beginning point. </p>\n<p>The following animation depicts the process for a clearer understanding.</p>\n<p>!?!../Documents/587_Erect_Fence_1.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">orientation</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">inBetween</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">&gt;=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">||</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">&gt;=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">;</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&gt;=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&lt;=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">||</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&lt;=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&gt;=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"n\">outerTrees</span><span class=\"o\">(</span><span class=\"n\">Point</span><span class=\"o\">[]</span> <span class=\"n\">points</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"n\">hull</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">points</span><span class=\"o\">)</span>\n                <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;(</span><span class=\"n\">hull</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">left_most</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">left_most</span><span class=\"o\">].</span><span class=\"na\">x</span><span class=\"o\">)</span>\n                <span class=\"n\">left_most</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">left_most</span><span class=\"o\">;</span>\n        <span class=\"k\">do</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">q</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">inBetween</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">q</span><span class=\"o\">]);</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"n\">left_most</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Point</span><span class=\"o\">&gt;(</span><span class=\"n\">hull</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. For every point on the hull we examine all the other points to determine the next point. Here n is number of input points and m is number of output or hull points ($$m &leq; n). </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script>. List <script type=\"math/tex; mode=display\">hull</script> grows upto size <script type=\"math/tex; mode=display\">m</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-graham-scan-accepted\">Approach #2 Graham Scan [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Graham Scan Algorithm is also a standard algorithm for finding the convex hull of a given set of points. Consider the animation below to follow along with the discussion. </p>\n<p>!?!../Documents/587_Erect_Fence_2.json:1000,563!?!</p>\n<p>The method works as follows. Firsly we select an initial point(<script type=\"math/tex; mode=display\">bm</script>) to start the hull with. This point is chosen as the point with the lowest y-coordinate. In case of a tie, we need to choose the point with the lowest x-coordinate, from among all the given set of points. This point is indicated as point 0 in the animation. Then, we sort the given set of points based on their polar angles formed w.r.t. a vertical line drawn throught the intial point. </p>\n<p>This sorting of the points gives us a rough idea of the way in which we should consider the points to be included in the hull while considering the boundary in counter-clockwise order. In order to sort the points, we make use of <code>orientation</code> function which is the same as discussed in the last approach. The points with a lower polar angle relative to the vertical line come first in the sorted array. In case, if the orientation of two points happens to be the same, the points are sorted based on their distance from the beginning point(<script type=\"math/tex; mode=display\">bm</script>). Later on we\'ll be considering the points in the sorted array in the same order. Because of this, we need to do the sorting based on distance for points collinear relative to <script type=\"math/tex; mode=display\">bm</script>, so that all the collinear points lying on the hull are included in the boundary.</p>\n<p>But, we need to consider another important case. In case, the collinear points lie on the closing(last) edge of the hull, we need to consider the points such that the points which lie farther from the initial point <script type=\"math/tex; mode=display\">bm</script> are considered first. Thus, after sorting the array, we traverse the sorted array from the end and reverse the order of the points which are collinear and lie towards the end of the sorted array, since these will be the points which will be considered at the end while forming the hull and thus, will be considered at the end. Thus, after these preprocessing steps, we\'ve got the points correctly arranged in the way that they need to be considered while forming the hull.</p>\n<p>Now, as per the algorithm, we start off by considering the line formed by the first two points(0 and 1 in the animation) in the sorted array. We push the points on this line onto a <script type=\"math/tex; mode=display\">stack</script>. After this, we start traversing over the sorted <script type=\"math/tex; mode=display\">points</script> array from the third point onwards. If the current point being considered appears after taking a left turn(or straight path) relative to the previous line(line\'s direction), we push the point onto the stack, indicating that the point has been temporarily added to the hull boundary.</p>\n<p>This checking of left or right turn is done by making use of <code>orientation</code> again. An orientation greater than 0, considering the points on the line and the current point, indicates a counterclockwise direction or a right turn. A negative orientation indicates a left turn similarly.</p>\n<p>If the current point happens to be occuring by taking a right turn from the previous line\'s direction, it means that the last point included in the hull was incorrect, since it needs to lie inside the boundary and not on the boundary(as is indicated by point 4 in the animation). Thus, we pop off the last point from the stack and consider the second last line\'s direction with the current point. </p>\n<p>Thus, the same process continues, and the popping keeps on continuing till we reach a state where the current point can be included in the hull by taking a right turn. Thus, in this way, we ensure that the hull includes only the boundary points and not the points inside the boundary. After all the points have been traversed, the points lying in the stack constitute the boundary of the convex hull. </p>\n<p>The below code is inspired by <a href=\"http://leetcode.com/yuxiangmusic\">@yuxiangmusic</a> solution.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">orientation</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">distance</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">Point</span> <span class=\"nf\">bottomLeft</span><span class=\"o\">(</span><span class=\"n\">Point</span><span class=\"o\">[]</span> <span class=\"n\">points</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Point</span> <span class=\"n\">bottomLeft</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">points</span><span class=\"o\">)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">bottomLeft</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">)</span>\n                <span class=\"n\">bottomLeft</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">bottomLeft</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"n\">outerTrees</span><span class=\"o\">(</span><span class=\"n\">Point</span><span class=\"o\">[]</span> <span class=\"n\">points</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">);</span>\n        <span class=\"n\">Point</span> <span class=\"n\">bm</span> <span class=\"o\">=</span> <span class=\"n\">bottomLeft</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">);</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">Comparator</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compare</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">double</span> <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">bm</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">bm</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">distance</span><span class=\"o\">(</span><span class=\"n\">bm</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">distance</span><span class=\"o\">(</span><span class=\"n\">bm</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">);</span>\n                <span class=\"k\">else</span>\n                    <span class=\"k\">return</span> <span class=\"n\">diff</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">bm</span><span class=\"o\">,</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"n\">i</span><span class=\"o\">--;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">h</span><span class=\"o\">;</span> <span class=\"n\">l</span><span class=\"o\">++,</span> <span class=\"n\">h</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Point</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">];</span>\n            <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">];</span>\n            <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">Point</span> <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">(),</span> <span class=\"n\">top</span><span class=\"o\">,</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">top</span><span class=\"o\">);</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">stack</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. Sorting the given points takes <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script> time. Further, after sorting the points can be considered in two cases, while being pushed onto the <script type=\"math/tex; mode=display\">stack</script> or while popping from the <script type=\"math/tex; mode=display\">stack</script>. Atmost, every point is touched twice(both push and pop) taking <script type=\"math/tex; mode=display\">2n</script>(<script type=\"math/tex; mode=display\">O(n)</script>) time in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Stack size grows upto <script type=\"math/tex; mode=display\">n</script> in worst case.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-monotone-chain-accepted\">Approach #3 Monotone Chain [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behing Monotone Chain Algorithm is somewhat similar to Graham Scan Algorithm. It mainly differs in the order in which the points are considered while being included in the hull. Instead of sorting the points based on their polar angles as in Graham Scan, we sort the points on the basis of their x-coordinate values. If two points have the same x-coordinate values, the points are sorted based on their y-coordinate values. The reasoning behind this will be explained soon.</p>\n<p>In this algorithm, we consider the hull as being comprised of two sub-boundaries- The upper hull and the lower hull. We form the two portions in a slightly different manner. </p>\n<p>We traverse over the sorted <script type=\"math/tex; mode=display\">points</script> array after adding the initial two points in the hull temporarily(which are pushed over the stack <script type=\"math/tex; mode=display\">hull</script>). For every new point considered, we check if the current point lies in the counter-clockwise direction relative to the last two points. If so, the current point is staightaway pushed onto <script type=\"math/tex; mode=display\">hull</script>. If not(indicated by a positive <code>orientation</code>), we again get the inference that the last point on the <script type=\"math/tex; mode=display\">hull</script> needs to lie inside the boundary and not on the boundary. Thus, we keep on popping the points from <script type=\"math/tex; mode=display\">hull</script> till the current point lies in a counterclockwise direction relative to the top two points on the <script type=\"math/tex; mode=display\">hull</script>. </p>\n<p>Note that this time, we need not consider the case of collinear points explicitly, since the points have already been sorted based on their x-coordinate values. So, the collinear points, if any, will implicitly be considered in the correct order.</p>\n<p>Doing so, we reach a state such that we reach the point with the largest x-coordinate. But, the hull isn\'t complete yet. The portion of the hull formed till now constitutes the lower poriton of the hull. Now, we need to form the upper portion of the hull.</p>\n<p>Thus, we continue the process of finding the next counterclockwise points and popping in case of a conflict, but this time we consider the points in the reverse order of their x-coordinate values. For this, we can simply traverse over the sorted <script type=\"math/tex; mode=display\">points</script> array in the reverse order. We append the new upper hull values obtained to the previous <script type=\"math/tex; mode=display\">hull</script> itself. At the end, <script type=\"math/tex; mode=display\">hull</script> gives the points on the required boundary.</p>\n<p>The following animation depicts the process for a better understanding of the process:</p>\n<p>!?!../Documents/587_Erect_Fence_3.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">orientation</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"n\">outerTrees</span><span class=\"o\">(</span><span class=\"n\">Point</span><span class=\"o\">[]</span> <span class=\"n\">points</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">Comparator</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compare</span><span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">Point</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">y</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"na\">x</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">x</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">});</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Point</span> <span class=\"o\">&gt;</span> <span class=\"n\">hull</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">orientation</span><span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"n\">hull</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">points</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">hull</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. Sorting the given points takes <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script> time. Further, after sorting the points can be considered in two cases, while being pushed onto the <script type=\"math/tex; mode=display\">hull</script> or while popping from the <script type=\"math/tex; mode=display\">hull</script>. Atmost, every point is touched twice(both push and pop) taking <script type=\"math/tex; mode=display\">2n</script>(<script type=\"math/tex; mode=display\">O(n)</script>) time in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">hull</script> stack can grow upto size <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(396,'Divide Two Integers',2,'Math,Binary Search',0,0,'<p></p><p>\nDivide two integers without using multiplication, division and mod operator.\n</p><p>\nIf it is overflow, return MAX_INT.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int divide(int dividend, int divisor) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int divide(int dividend, int divisor) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def divide(self, dividend, divisor):\r\n        """\r\n        :type dividend: int\r\n        :type divisor: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int divide(int dividend, int divisor) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Divide(int dividend, int divisor) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} dividend\r\n * @param {number} divisor\r\n * @return {number}\r\n */\r\nvar divide = function(dividend, divisor) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} dividend\r\n# @param {Integer} divisor\r\n# @return {Integer}\r\ndef divide(dividend, divisor)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func divide(dividend int, divisor int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(397,'Candy',3,'Greedy',0,0,'<p></p><p>\nThere are <i>N</i> children standing in a line. Each child is assigned a rating value. \n</p><p>\nYou are giving candies to these children subjected to the following requirements:\n</p><ul>\n<li>Each child must have at least one candy.</li>\n<li>Children with a higher rating get more candies than their neighbors.</li>\n</ul><p>\nWhat is the minimum candies you must give?\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int candy(vector<int>& ratings) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int candy(int[] ratings) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def candy(self, ratings):\r\n        """\r\n        :type ratings: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int candy(int* ratings, int ratingsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Candy(int[] ratings) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} ratings\r\n * @return {number}\r\n */\r\nvar candy = function(ratings) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} ratings\r\n# @return {Integer}\r\ndef candy(ratings)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func candy(_ ratings: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func candy(ratings []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def candy(ratings: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-two-arrays-accepted\">Approach #2 Using two arrays [Accepted]</a></li>\n<li><a href=\"#approach-3-using-one-array-accepted\">Approach #3 Using one array [Accepted]</a></li>\n<li><a href=\"#approach-4-single-pass-approach-with-constant-space-accepted\">Approach #4 Single Pass Approach with Constant Space [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest approach makes use of a 1-d array, <script type=\"math/tex; mode=display\">candies</script> to keep a track of the candies given to the students. Firstly, we give 1 candy to each student. Then, we start scanning the\narray from left-to-right. At every element encountered, firstly, if the current element\'s ratings, <script type=\"math/tex; mode=display\">ratings[i]</script>, is larger than the previous element(<script type=\"math/tex; mode=display\">ratings[i-1]</script>) and <script type=\"math/tex; mode=display\">candies[i]<=candies[i-1]</script>,\nthen we update <script type=\"math/tex; mode=display\">candies[i]</script> as <script type=\"math/tex; mode=display\">candies[i]=candies[i-1] + 1</script>.Thus, now the candy distribution for these two elements <script type=\"math/tex; mode=display\">candies[i-1]</script> and <script type=\"math/tex; mode=display\">candies[i]</script> becomes correct for the time being(locally).\n In the same step, we also check if the current element\'s ratings, <script type=\"math/tex; mode=display\">ratings[i]</script>, is larger than the next element\'s ratings,\ni.e. <script type=\"math/tex; mode=display\">ratings[i]>ratings[i+1]</script>. If so, we again update <script type=\"math/tex; mode=display\">candies[i]=candies[i+1] + 1</script>. We continue this process for the whole <script type=\"math/tex; mode=display\">ratings</script> array. If in any traversal,\nno updation of the <script type=\"math/tex; mode=display\">candies</script> array occurs, it means we\'ve reached at the final required distribution of the candies and we can stop the traversals. To keep a track of\nthis we make use of a <script type=\"math/tex; mode=display\">flag</script> which is set to <script type=\"math/tex; mode=display\">\\text{True}</script> if any updation occurs in a traversal.</p>\n<p>At the end, we can sum up all the elements of the <script type=\"math/tex; mode=display\">candies</script> array to obtain the required minimum number of candies.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">candy</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ratings</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">candies</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">candy</span> <span class=\"o\">:</span> <span class=\"n\">candies</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">candy</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We need to traverse the array at most <script type=\"math/tex; mode=display\">n</script> times.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. One <script type=\"math/tex; mode=display\">candies</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-two-arrays-accepted\">Approach #2 Using two arrays [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we make use of two 1-d arrays <script type=\"math/tex; mode=display\">left2right</script> and <script type=\"math/tex; mode=display\">right2left</script>. The <script type=\"math/tex; mode=display\">left2right</script> array is used to store the number of candies required by the\ncurrent student taking care of the distribution relative to the left neighbours only. i.e. Assuming the distribution rule is: The student with a higher ratings\nthan its left neighbour should always get more candies than its left neighbour. Similarly, the <script type=\"math/tex; mode=display\">right2left</script> array is used to store the number of candies candies required by the\ncurrent student taking care of the distribution relative to the right neighbours only. i.e. Assuming the distribution rule to be: The student with a higher ratings\nthan its right neighbour should always get more candies than its right neighbour. To do so, firstly we assign 1 candy to each student in both <script type=\"math/tex; mode=display\">left2right</script> and <script type=\"math/tex; mode=display\">right2left</script> array.\n Then, we traverse the array from\nleft-to-right and whenever the current element\'s ratings is larger than the left neighbour we update the\ncurrent element\'s candies in the <script type=\"math/tex; mode=display\">left2right</script> array as <script type=\"math/tex; mode=display\">left2right[i] = left2right[i-1] + 1</script>, since the current element\'s candies are always less than or equal candies than its left neighbour before updation.\nAfter the forward traversal, we traverse the array from left-to-right and\nupdate <script type=\"math/tex; mode=display\">right2left[i]</script> as <script type=\"math/tex; mode=display\">right2left[i] = right2left[i + 1] + 1</script>, whenever the current(<script type=\"math/tex; mode=display\">i^{th}</script>) element has a higher ratings than the\nright(<script type=\"math/tex; mode=display\">(i+1)^{th}</script>) element.</p>\n<p>Now, for the <script type=\"math/tex; mode=display\">i^{th}</script> student in the array, we need to give <script type=\"math/tex; mode=display\">\\text{max}(left2right[i], right2left[i])</script> to it, in order to satisfy both the left and the right neighbour\nrelationship. Thus, at the end, we obtain the minimum number of candies required as:</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\text{minimum_candies}=\\sum_{i=0}^{n-1} \\text{max}(left2right[i], right2left[i]), \\quad\\text{where } n = \\text{length of the ratings array.}\n</script>\n</p>\n<p>The following animation illustrates the method:</p>\n<p><img alt=\"Candy_Two_Arrays\" src=\"../Figures/135_Candy_Two_Pass.gif\" /></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">candy</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ratings</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">left2right</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">right2left</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">left2right</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">right2left</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">left2right</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">left2right</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">right2left</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">right2left</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">left2right</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">right2left</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">left2right</script> and <script type=\"math/tex; mode=display\">right2left</script> arrays are traversed thrice.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Two arrays <script type=\"math/tex; mode=display\">left2right</script> and <script type=\"math/tex; mode=display\">right2left</script> of size <script type=\"math/tex; mode=display\">n</script> are used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-one-array-accepted\">Approach #3 Using one array [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the previous approach, we used two arrays to keep track of the left neighbour and the right neighbour relation individually and later on combined these two. Instead of this, we\ncan make use of a single array <script type=\"math/tex; mode=display\">candies</script> to keep the count of the number of candies to be allocated to the current student. In order to do so, firstly we assign 1 candy to\neach student. Then, we traverse the array from left-to-right and distribute the candies following only the left neighbour relation i.e. whenever the current element\'s ratings is\nlarger than the left neighbour and has less than or equal candies than its left neighbour, we update the\ncurrent element\'s candies in the <script type=\"math/tex; mode=display\">candies</script> array as <script type=\"math/tex; mode=display\">candies[i] = candies[i-1] + 1</script>. While updating we need not compare <script type=\"math/tex; mode=display\">candies[i]</script> and <script type=\"math/tex; mode=display\">candies[i - 1]</script>, since\n <script type=\"math/tex; mode=display\">candies[i] \\leq candies[i - 1]</script> before updation. After this, we traverse the array from right-to-left. Now, we need to\nupdate the <script type=\"math/tex; mode=display\">i^{th}</script> element\'s candies in order to satisfy both the left neighbour and the right neighbour relation. Now, during the backward traversal, if <script type=\"math/tex; mode=display\">ratings[i]>ratings[i + 1]</script>,\nconsidering only the right neighbour criteria, we could\'ve updated <script type=\"math/tex; mode=display\">candies[i]</script> as <script type=\"math/tex; mode=display\">candies[i] = candies[i + 1] + 1</script>. But, this time we need to update the <script type=\"math/tex; mode=display\">candies[i]</script> only\nif <script type=\"math/tex; mode=display\">candies[i] \\leq candies[i + 1]</script>. This happens because, this time we\'ve already altered the <script type=\"math/tex; mode=display\">candies</script> array during the forward traversal and thus <script type=\"math/tex; mode=display\">candies[i]</script> isn\'t\nnecessarily less than or equal to <script type=\"math/tex; mode=display\">candies[i + 1]</script>. Thus, if <script type=\"math/tex; mode=display\">ratings[i] > ratings[i + 1]</script>, we can update <script type=\"math/tex; mode=display\">candies[i]</script> as <script type=\"math/tex; mode=display\">candies[i] = \\text{max}(candies[i], candies[i + 1] + 1)</script>, which makes\n<script type=\"math/tex; mode=display\">candies[i]</script> satisfy both the left neighbour and the right neighbour criteria.</p>\n<p>Again, we need sum up all the elements of the <script type=\"math/tex; mode=display\">candies</script> array to obtain the required result.</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\text{minimum_candies} = \\sum_{i=0}^{n-1} candies[i], \\quad\\text{where } n = \\text{length of the ratings array.}\n</script>\n</p>\n<p><strong>java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">candy</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ratings</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">candies</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The array <script type=\"math/tex; mode=display\">candies</script> of size <script type=\"math/tex; mode=display\">n</script> is traversed thrice.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. An array <script type=\"math/tex; mode=display\">candies</script> of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-single-pass-approach-with-constant-space-accepted\">Approach #4 Single Pass Approach with Constant Space [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach relies on the observation(as demonstrated in the figure below as well) that in order to distribute the candies as per the given criteria using\nthe minimum number of candies, the candies are always distributed in terms of increments of 1. Further, while distributing the candies, the local minimum number of candies\ngiven to a student is 1. Thus, the sub-distributions always take the form: <script type=\"math/tex; mode=display\">\\text{1, 2, 3, ..., n}</script> or <script type=\"math/tex; mode=display\">\\text{n,..., 2, 1}</script>, whose sum is simply given by <script type=\"math/tex; mode=display\">n(n+1)/2</script>.</p>\n<p>Now, we can view the given <script type=\"math/tex; mode=display\">rankings</script> as some\nrising and falling slopes. Whenever the slope is rising, the distribution takes the form: <script type=\"math/tex; mode=display\">\\text{1, 2, 3, ..., m}</script>. Similarly, a falling slope takes the form:\n<script type=\"math/tex; mode=display\">\\text{k,..., 2, 1}</script>. An issue that arises now is that the local peak point can be included in only one of the slopes.\nWhether to include the local peak point(<script type=\"math/tex; mode=display\">\\text{n}</script>) in the rising slope or the falling slope?</p>\n<p>In order to decide it,\nwe can observe that in order to satisfy both the right neighbour and the left neighbour criteria, the peak point\'s count needs to be the max. of the counts determined\nby the rising and the falling slopes. Thus, in order to determine the number of candies required, the peak point needs to be included in the slope which contains more\nnumber of points. The local valley point can also be included in only one of the slopes, but this issue can be resolved easily, since the local valley point will\nalways be assigned a candy count of 1(which can be subtracted from the next slope\'s count calculations).</p>\n<p>Coming to the implementation, we maintain two variables <script type=\"math/tex; mode=display\">old\\_slope</script> and <script type=\"math/tex; mode=display\">new\\_slope</script> to determine the occurence of a peak or a valley. We also use\n<script type=\"math/tex; mode=display\">up</script> and <script type=\"math/tex; mode=display\">down</script> variables to keep a track of the count of elements on the rising slope and on the falling slope respectively(without including the peak element). We always update the total count\nof <script type=\"math/tex; mode=display\">candies</script> at the end of a falling slope following a rising slope (or a mountain). The leveling of the points in <script type=\"math/tex; mode=display\">rankings</script> also works as the end of a mountain. At the end of the mountain, we determine whether to include the peak point in the rising slope or in the falling slope by comparing the <script type=\"math/tex; mode=display\">up</script> and <script type=\"math/tex; mode=display\">down</script> variables up to that point. Thus, the count assigned to the peak element becomes: <script type=\"math/tex; mode=display\">\\text{max}(up, down) + 1</script>. At this point, we can reset the <script type=\"math/tex; mode=display\">up</script> and <script type=\"math/tex; mode=display\">down</script> variables indicating the start of a new mountain.</p>\n<p>The following figure shows the cases that need to be handled for this example:</p>\n<p><code>rankings: [1 2 3 4 5 3 2 1 2 6 5 4 3 3 2 1 1 3 3 3 4 2]</code></p>\n<p><img alt=\"Candy_Two_Arrays\" src=\"../Figures/135_Candy_Constant_Space.PNG\" /></p>\n<p>From this figure, we can see that the candy distributions in the subregions always take the form <script type=\"math/tex; mode=display\">\\text{1, 2, ...n}</script> or <script type=\"math/tex; mode=display\">\\text{n, ..., 2, 1}</script>.\nFor the first mountain comprised by the regions <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script>, while assigning candies to the local peak point(<script type=\"math/tex; mode=display\">pt. 5</script>), it needs to be included in\n<script type=\"math/tex; mode=display\">a</script> to satisfy the left neighbour criteria. The local valley point at the end of region <script type=\"math/tex; mode=display\">b</script>(<script type=\"math/tex; mode=display\">pt. 8</script>) marks the end of the first mountain(region <script type=\"math/tex; mode=display\">c</script>).\n While performing the calculations, we can include this point in either the current or the following mountain. The <script type=\"math/tex; mode=display\">pt. 13</script> marks the end of the second\n mountain due to levelling of the <script type=\"math/tex; mode=display\">pt. 13</script> and <script type=\"math/tex; mode=display\">pt. 14</script>. Since, region <script type=\"math/tex; mode=display\">e</script> has more points than region <script type=\"math/tex; mode=display\">d</script>, the local peak(<script type=\"math/tex; mode=display\">pt. 10</script>) needs to be\n included in region <script type=\"math/tex; mode=display\">e</script> to satisfy the right neighbour criteria. Now, the third mountain <script type=\"math/tex; mode=display\">f</script> can be considered as a mountian with no rising slope(<script type=\"math/tex; mode=display\">up=0</script>)\n but only a falling slope. Similarly, <script type=\"math/tex; mode=display\">pt. 16, 18, 19</script> also act as the mountain ends due to the levelling of the points.</p>\n<p><strong>java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">count</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">candy</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ratings</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">candies</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">down</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">old_slope</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ratings</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">new_slope</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">ratings</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">old_slope</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">new_slope</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">old_slope</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">new_slope</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">candies</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"o\">(</span><span class=\"n\">up</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">(</span><span class=\"n\">down</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">up</span><span class=\"o\">,</span> <span class=\"n\">down</span><span class=\"o\">);</span>\n                <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"n\">down</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">new_slope</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">up</span><span class=\"o\">++;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">new_slope</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">down</span><span class=\"o\">++;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">new_slope</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">candies</span><span class=\"o\">++;</span>\n\n            <span class=\"n\">old_slope</span> <span class=\"o\">=</span> <span class=\"n\">new_slope</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">candies</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"o\">(</span><span class=\"n\">up</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">count</span><span class=\"o\">(</span><span class=\"n\">down</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">up</span><span class=\"o\">,</span> <span class=\"n\">down</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">candies</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">};</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We traverse the <script type=\"math/tex; mode=display\">rankings</script> array once only.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant Extra Space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(398,'House Robber III',2,'Tree,Depth-first Search',0,0,'<p></p><p>\nThe thief has found himself a new place for his thievery again. There is only one entrance to this area, called the \"root.\" Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that \"all houses in this place forms a binary tree\". It will automatically contact the police if two directly-linked houses were broken into on the same night.\n</p><p>\nDetermine the maximum amount of money the thief can rob tonight without alerting the police.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n     <font color=\"red\">3</font>\n    / \\\n   2   3\n    \\   \\ \n     <font color=\"red\">3   1</font>\n</pre>\nMaximum amount of money the thief can rob = <font color=\"red\">3</font> + <font color=\"red\">3</font> + <font color=\"red\">1</font> = <b>7</b>.\n\n\n<p><b>Example 2:</b><br/>\n</p><pre>\n     3\n    / \\\n   <font color=\"red\">4</font>   <font color=\"red\">5</font>\n  / \\   \\ \n 1   3   1\n</pre>\nMaximum amount of money the thief can rob = <font color=\"red\">4</font> + <font color=\"red\">5</font> = <b>9</b>.\n\n\n<p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int rob(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int rob(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def rob(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint rob(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int Rob(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar rob = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef rob(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func rob(_ root: TreeNode?) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rob(root *TreeNode) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def rob(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(399,'Valid Anagram',1,'Hash Table,Sort',0,0,'<p></p><p>Given two strings <i>s</i> and <i>t</i>, write a function to determine if <i>t</i> is an anagram of <i>s</i>.</p><p>For example,<br/>\n<i>s</i> = \"anagram\", <i>t</i> = \"nagaram\", return true.<br/>\n<i>s</i> = \"rat\", <i>t</i> = \"car\", return false.\n</p><p><b>Note:</b><br/>\nYou may assume the string contains only lowercase alphabets.</p><p><b>Follow up:</b><br/>\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isAnagram(string s, string t) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isAnagram(String s, String t) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isAnagram(self, s, t):\r\n        """\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isAnagram(char* s, char* t) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsAnagram(string s, string t) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {boolean}\r\n */\r\nvar isAnagram = function(s, t) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {String} t\r\n# @return {Boolean}\r\ndef is_anagram(s, t)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func isAnagram(_ s: String, _ t: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isAnagram(s string, t string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isAnagram(s: String, t: String): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-sorting-accepted\">Approach #1 (Sorting) [Accepted]</a></li>\n<li><a href=\"#approach-2-hash-table-accepted\">Approach #2 (Hash Table) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-sorting-accepted\">Approach #1 (Sorting) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>An anagram is produced by rearranging the letters of <script type=\"math/tex; mode=display\">s</script> into <script type=\"math/tex; mode=display\">t</script>. Therefore, if <script type=\"math/tex; mode=display\">t</script> is an anagram of <script type=\"math/tex; mode=display\">s</script>, sorting both strings will result in two identical strings. Furthermore, if <script type=\"math/tex; mode=display\">s</script> and <script type=\"math/tex; mode=display\">t</script> have different lengths, <script type=\"math/tex; mode=display\">t</script> must not be an anagram of <script type=\"math/tex; mode=display\">s</script> and we can return early.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAnagram</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n    <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">str2</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">toCharArray</span><span class=\"o\">();</span>\n    <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">str1</span><span class=\"o\">);</span>\n    <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">str2</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">str1</span><span class=\"o\">,</span> <span class=\"n\">str2</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n \\log n)</script>.\nAssume that <script type=\"math/tex; mode=display\">n</script> is the length of <script type=\"math/tex; mode=display\">s</script>, sorting costs <script type=\"math/tex; mode=display\">O(n \\log n)</script> and comparing two strings costs <script type=\"math/tex; mode=display\">O(n)</script>. Sorting time dominates and the overall time complexity is <script type=\"math/tex; mode=display\">O(n \\log n)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nSpace depends on the sorting implementation which, usually, costs <script type=\"math/tex; mode=display\">O(1)</script> auxiliary space if <code>heapsort</code> is used. Note that in Java, <code>toCharArray()</code> makes a copy of the string so it costs <script type=\"math/tex; mode=display\">O(n)</script> extra space, but we ignore this for complexity analysis because:</p>\n<ul>\n<li>It is a language dependent detail.</li>\n<li>It depends on how the function is designed. For example, the function parameter types can be changed to <code>char[]</code>.</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-hash-table-accepted\">Approach #2 (Hash Table) [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>To examine if <script type=\"math/tex; mode=display\">t</script> is a rearrangement of <script type=\"math/tex; mode=display\">s</script>, we can count occurrences of each letter in the two strings and compare them. Since both <script type=\"math/tex; mode=display\">s</script> and <script type=\"math/tex; mode=display\">t</script> contain only letters from <script type=\"math/tex; mode=display\">a-z</script>, a simple counter table of size 26 is suffice.</p>\n<p>Do we need <em>two</em> counter tables for comparison? Actually no, because we could increment the counter for each letter in <script type=\"math/tex; mode=display\">s</script> and decrement the counter for each letter in <script type=\"math/tex; mode=display\">t</script>, then check if the counter reaches back to zero.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAnagram</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">counter</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n        <span class=\"n\">counter</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]--;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">counter</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Or we could first increment the counter for <script type=\"math/tex; mode=display\">s</script>, then decrement the counter for <script type=\"math/tex; mode=display\">t</script>. If at any point the counter drops below zero, we know that <script type=\"math/tex; mode=display\">t</script> contains an extra letter not in <script type=\"math/tex; mode=display\">s</script> and return false immediately.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isAnagram</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">26</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">table</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]++;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">table</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]--;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">table</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;a&#39;</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>.\nTime complexity is <script type=\"math/tex; mode=display\">O(n)</script> because accessing the counter table is a constant time operation.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.\nAlthough we do use extra space, the space complexity is <script type=\"math/tex; mode=display\">O(1)</script> because the table\'s size stays constant no matter how large <script type=\"math/tex; mode=display\">n</script> is.</p>\n</li>\n</ul>\n<p><strong>Follow up</strong></p>\n<p>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>\n<p><strong>Answer</strong></p>\n<p>Use a hash table instead of a fixed size counter. Imagine allocating a large size array to fit the entire range of unicode characters, which could go up to <a href=\"http://stackoverflow.com/a/5928054/490463\">more than 1 million</a>. A hash table is a more generic solution and could adapt to any range of characters.</p>',NULL,1,'none','none','none'),(400,'Reverse Integer',1,'Math',0,0,'<p></p><p>Reverse digits of an integer.</p><p style=\"font-family:monospace\">\n<b>Example1:</b> x =  123, return  321<br/>\n<b>Example2:</b> x = -123, return -321\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show spoilers.</a></p><div class=\"spoilers\"><b>Have you thought about this?</b>\n<p>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p>\n<p>If the integer\'s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>\n<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>\n<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n</div><p>\n<b><font color=\"red\">Note:</font></b><br/>\nThe input is assumed to be a 32-bit signed integer. Your function should <b>return 0 when the reversed integer overflows</b>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int reverse(int x) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int reverse(int x) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reverse(self, x):\r\n        """\r\n        :type x: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int reverse(int x) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Reverse(int x) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} x\r\n * @return {number}\r\n */\r\nvar reverse = function(x) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} x\r\n# @return {Integer}\r\ndef reverse(x)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func reverse(_ x: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverse(x int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(401,'Number Complement',1,'Bit Manipulation',0,0,'<p></p><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p><p><b>Note:</b><br/>\n</p><ol>\n<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\n<li>You could assume no leading zero bit in the integer’s binary representation.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 5\n<b>Output:</b> 2\n<b>Explanation:</b> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> 1\n<b>Output:</b> 0\n<b>Explanation:</b> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findComplement(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findComplement(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findComplement(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findComplement(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindComplement(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nvar findComplement = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Integer}\r\ndef find_complement(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findComplement(_ num: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findComplement(num int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findComplement(num: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(402,'Optimal Division',2,'Math,String',0,0,'<p></p><p>Given a list of <b>positive integers</b>, the adjacent integers will perform the float division. For example, [2,3,4] -&gt; 2 / 3 / 4.</p><p>However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the <b>maximum</b> result, and return the corresponding expression in string format. <b>Your expression should NOT contain redundant parenthesis.</b></p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> [1000,100,10,2]\n<b>Output:</b> \"1000/(100/10/2)\"\n<b>Explanation:</b>\n1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/(<b>(</b>100/10<b>)</b>/2)\" are redundant, <br/>since they don\'t influence the operation priority. So you should return \"1000/(100/10/2)\". \n\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre><p><b>Note:</b>\n</p><ol>\n<li>The length of the input array is [1, 10].</li>\n<li>Elements in the given array will be in range [2, 1000].</li>\n<li>There is only one optimal division for each test case.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    string optimalDivision(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String optimalDivision(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def optimalDivision(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: str\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* optimalDivision(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string OptimalDivision(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {string}\n */\nvar optimalDivision = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {String}\ndef optimal_division(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func optimalDivision(_ nums: [Int]) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func optimalDivision(nums []int) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def optimalDivision(nums: Array[Int]): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-2-using-memorization-accepted\">Approach #2 Using Memorization [Accepted]</a></li>\n<li><a href=\"#approach-3-using-some-math-accepted\">Approach #3 Using some Math [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute Force [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Brute force of this problem is to divide the list into two parts <script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> and call function for these two parts. We will iterate <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">start</script> to <script type=\"math/tex; mode=display\">end</script> so that <script type=\"math/tex; mode=display\">left=(start,i)</script> and <script type=\"math/tex; mode=display\">right=(i+1,end)</script>.</p>\n<p>\n<script type=\"math/tex; mode=display\">left</script> and <script type=\"math/tex; mode=display\">right</script> parts return their maximum and minimum value and corresponding strings.</p>\n<p>Minimum value can be found by dividing minimum of left by maximum of right i.e. <script type=\"math/tex; mode=display\">minVal=left.min/right.max</script>.</p>\n<p>Similarly,Maximum value can be found by dividing maximum of left value by minimum of right value. i.e. <script type=\"math/tex; mode=display\">maxVal=left.max/right.min</script>.</p>\n<p>Now, how to add parenthesis? As associativity of division operator is from left to right i.e. by default left most divide should be done first, we need not have to add paranthesis to the left part, but we must add parenthesis to the right part.</p>\n<p>eg- \"2/(3/4)\" will be formed as leftPart+\"/\"+\"(\"+rightPart+\")\", assuming leftPart is \"2\" and rightPart is\"3/4\".</p>\n<p>One more point, we also don\'t require parenthesis to right part when it contains single digit.</p>\n<p>eg- \"2/3\", here left part is \"2\" and right part is \"3\" (contains single digit) . 2/(3) is not valid.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">optimalDivision</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">T</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">optimal</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">class</span> <span class=\"nc\">T</span> <span class=\"o\">{</span>\n        <span class=\"kt\">float</span> <span class=\"n\">max_val</span><span class=\"o\">,</span> <span class=\"n\">min_val</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">min_str</span><span class=\"o\">,</span> <span class=\"n\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">T</span> <span class=\"nf\">optimal</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">res</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">T</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">T</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">optimal</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">T</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">optimal</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">&gt;</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">max_val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">max_val</span><span class=\"o\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;(&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;)&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">&lt;</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">min_val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">min_val</span><span class=\"o\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;(&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;)&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n!)</script>. Number of permutations of expression after applying brackets will be in <script type=\"math/tex; mode=display\">O(n!)</script> where <script type=\"math/tex; mode=display\">n</script> is the number of items in the list.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>. Depth of recursion tree will be <script type=\"math/tex; mode=display\">O(n)</script> and each node contains string of maximum length <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-memorization-accepted\">Approach #2 Using Memorization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the above approach we called optimal function recursively for ever <script type=\"math/tex; mode=display\">start</script> and <script type=\"math/tex; mode=display\">end</script>. We can notice that there are many redundant calls in the above approach, we can reduce these calls by using memorization to store the result of different function calls. Here, <script type=\"math/tex; mode=display\">memo</script> array is used for this purpose.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">class</span> <span class=\"nc\">T</span> <span class=\"o\">{</span>\n        <span class=\"kt\">float</span> <span class=\"n\">max_val</span><span class=\"o\">,</span> <span class=\"n\">min_val</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">min_str</span><span class=\"o\">,</span> <span class=\"n\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">optimalDivision</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">T</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">T</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">optimal</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">T</span> <span class=\"nf\">optimal</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">][</span><span class=\"n\">end</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">][</span><span class=\"n\">end</span><span class=\"o\">];</span>\n        <span class=\"n\">T</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">==</span> <span class=\"n\">end</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">];</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">][</span><span class=\"n\">end</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">T</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">optimal</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n            <span class=\"n\">T</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">optimal</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">&gt;</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">max_val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">min_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">max_val</span><span class=\"o\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;(&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;)&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">&lt;</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">min_val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">max_val</span> <span class=\"o\">/</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">min_val</span><span class=\"o\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"na\">max_str</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;(&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"na\">min_str</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"o\">?</span> <span class=\"s\">&quot;)&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">][</span><span class=\"n\">end</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n^2</script> is filled and filling of each cell of the <script type=\"math/tex; mode=display\">memo</script> array takes <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n^2</script> where each cell of array contains string of length <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-some-math-accepted\">Approach #3 Using some Math [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Using some simple math we can find the easy solution of this problem. Consider the input in the form of [a,b,c,d], now we have to set priority of\noperations to maximize a/b/c/d. We know that to maximize fraction <script type=\"math/tex; mode=display\">p/q</script>, <script type=\"math/tex; mode=display\">q</script>(denominator) should be minimized. So, to maximize <script type=\"math/tex; mode=display\">a/b/c/d</script>  we have to first minimize b/c/d. Now our objective turns to minimize the expression b/c/d.</p>\n<p>There are two possible combinations of this expression, b/(c/d) and (b/c)/d.</p>\n<div class=\"codehilite\"><pre><span></span>b/(c/d)        (b/c)/d = b/c/d\n(b*d)/c        b/(d*c)\nd/c            1/(d*c)\n</pre></div>\n\n\n<p>Obviously, <script type=\"math/tex; mode=display\">d/c > 1/(d*c)</script> for <script type=\"math/tex; mode=display\">d>1</script>.</p>\n<p>You can see that second combination will always be less than first one for numbers greater than <script type=\"math/tex; mode=display\">1</script>. So, the answer will be a/(b/c/d).\nSimilarly for expression like a/b/c/d/e/f... answer will be a/(b/c/d/e/f...).</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">optimalDivision</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">StringBuilder</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&quot;)&quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single loop to traverse <script type=\"math/tex; mode=display\">nums</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">res</script> variable is used to store the result.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(403,'Palindrome Pairs',3,'Hash Table,String,Trie',0,0,'<p></p><p>\n    Given a list of <b>unique</b> words, find all pairs of <b><i>distinct</i></b> indices <code>(i, j)</code> in the given list, so that the concatenation of the two words, i.e. <code>words[i] + words[j]</code> is a palindrome.\n</p><p>\n<b>Example 1:</b><br/>\n    Given <code>words</code> = <code>[\"bat\", \"tab\", \"cat\"]</code><br/>\n    Return <code>[[0, 1], [1, 0]]</code><br/>\n    The palindromes are <code>[\"battab\", \"tabbat\"]</code><br/>\n</p><p>\n<b>Example 2:</b><br/>\n    Given <code>words</code> = <code>[\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]</code><br/>\n    Return <code>[[0, 1], [1, 0], [3, 2], [2, 4]]</code><br/>\n    The palindromes are <code>[\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"]</code><br/>\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> palindromePairs(vector<string>& words) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<Integer>> palindromePairs(String[] words) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def palindromePairs(self, words):\r\n        """\r\n        :type words: List[str]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** palindromePairs(char** words, int wordsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<int>> PalindromePairs(string[] words) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} words\r\n * @return {number[][]}\r\n */\r\nvar palindromePairs = function(words) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\r\n# @return {Integer[][]}\r\ndef palindrome_pairs(words)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func palindromePairs(_ words: [String]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func palindromePairs(words []string) [][]int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def palindromePairs(words: Array[String]): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(404,'ZigZag Conversion',2,'String',0,0,'<p></p><p>\nThe string <code>\"PAYPALISHIRING\"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n</p><pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\nAnd then read line by line: <code>\"PAHNAPLSIIGYIR\"</code><p>\nWrite the code that will take a string and make this conversion given a number of rows:\n\n</p><pre>string convert(string text, int nRows);</pre><code>convert(\"PAYPALISHIRING\", 3)</code> should return <code>\"PAHNAPLSIIGYIR\"</code>.\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string convert(string s, int numRows) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def convert(self, s, numRows):\r\n        """\r\n        :type s: str\r\n        :type numRows: int\r\n        :rtype: str\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* convert(char* s, int numRows) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string Convert(string s, int numRows) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {number} numRows\r\n * @return {string}\r\n */\r\nvar convert = function(s, numRows) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {Integer} num_rows\r\n# @return {String}\r\ndef convert(s, num_rows)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func convert(_ s: String, _ numRows: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func convert(s string, numRows int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(405,'Palindromic Substrings',2,'Dynamic Programming,String',0,0,'<p></p><p>\nGiven a string, your task is to count how many palindromic substrings in this string.\n</p><p>\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. \n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"abc\"\n<b>Output:</b> 3\n<b>Explanation:</b> Three palindromic strings: \"a\", \"b\", \"c\".\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"aaa\"\n<b>Output:</b> 6\n<b>Explanation:</b> Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The input string length won\'t exceed 1000.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int countSubstrings(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int countSubstrings(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def countSubstrings(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def countSubstrings(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int countSubstrings(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CountSubstrings(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar countSubstrings = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef count_substrings(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func countSubstrings(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countSubstrings(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def countSubstrings(s: String): Int = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(406,'Different Ways to Add Parentheses',2,'Divide and Conquer',0,0,'<p></p><p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p><br/><b>Example 1</b><p>Input: <code>\"2-1-1\"</code>.</p><pre>((2-1)-1) = 0\n(2-(1-1)) = 2</pre><p>Output: <code>[0, 2]</code></p><br/><b>Example 2</b><p>Input: <code>\"2*3-4*5\"</code></p><pre>(2*(3-(4*5))) = -34\n((2*3)-(4*5)) = -14\n((2*(3-4))*5) = -10\n(2*((3-4)*5)) = -10\n(((2*3)-4)*5) = 10</pre><p>Output: <code>[-34, -14, -10, -10, 10]</code></p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> diffWaysToCompute(string input) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<Integer> diffWaysToCompute(String input) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def diffWaysToCompute(self, input):\r\n        """\r\n        :type input: str\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* diffWaysToCompute(char* input, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int> DiffWaysToCompute(string input) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} input\r\n * @return {number[]}\r\n */\r\nvar diffWaysToCompute = function(input) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} input\r\n# @return {Integer[]}\r\ndef diff_ways_to_compute(input)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func diffWaysToCompute(_ input: String) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func diffWaysToCompute(input string) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def diffWaysToCompute(input: String): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(407,'Kth Largest Element in an Array',2,'Heap,Divide and Conquer',0,0,'<p>Find the <b>k</b>th largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\n</p><p>For example,<br/>\nGiven <code>[3,2,1,5,6,4]</code> and k = 2, return 5.\n</p><p><b>Note: </b><br/>\nYou may assume k is always valid, 1 ? k ? array\'s length.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/mithmatt\">@mithmatt</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findKthLargest(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findKthLargest(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findKthLargest(int* nums, int numsSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindKthLargest(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findKthLargest = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef find_kth_largest(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findKthLargest(nums []int, k int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(408,'Self Crossing',3,'Math',0,0,'<p></p><p>\n    You are given an array <i>x</i> of <code>n</code> positive numbers. You start at point <code>(0,0)</code> and moves <code>x[0]</code> metres to the north, then <code>x[1]</code> metres to the west,\n    <code>x[2]</code> metres to the south,\n    <code>x[3]</code> metres to the east and so on. In other words, after each move your direction changes\n    counter-clockwise.\n</p><p>\n    Write a one-pass algorithm with <code>O(1)</code> extra space to determine, if your path crosses itself, or not.\n</p><p>\n<b>Example 1:</b><br/>\n</p><pre>\nGiven <i>x</i> = <code>[2, 1, 1, 2]</code>,\n?????\n?   ?\n???????&gt;\n    ?\n\nReturn <b>true</b> (self crossing)\n</pre><p>\n<b>Example 2:</b><br/>\n</p><pre>\nGiven <i>x</i> = <code>[1, 2, 3, 4]</code>,\n????????\n?      ?\n?\n?\n?????????????&gt;\n\nReturn <b>false</b> (not self crossing)\n</pre><p>\n<b>Example 3:</b><br/>\n</p><pre>\nGiven <i>x</i> = <code>[1, 1, 1, 1]</code>,\n?????\n?   ?\n?????&gt;\n\nReturn <b>true</b> (self crossing)\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isSelfCrossing(vector<int>& x) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isSelfCrossing(int[] x) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isSelfCrossing(self, x):\r\n        """\r\n        :type x: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isSelfCrossing(int* x, int xSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsSelfCrossing(int[] x) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} x\r\n * @return {boolean}\r\n */\r\nvar isSelfCrossing = function(x) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} x\r\n# @return {Boolean}\r\ndef is_self_crossing(x)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isSelfCrossing(_ x: [Int]) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isSelfCrossing(x []int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isSelfCrossing(x: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(409,'Longest Palindromic Substring',2,'String',0,0,'<p></p><p>Given a string <b>s</b>, find the longest palindromic substring in <b>s</b>. You may assume that the maximum length of <b>s</b> is 1000.</p><p><b>Example:</b>\n</p><pre>\n<b>Input:</b> \"babad\"\n\n<b>Output:</b> \"bab\"\n\n<b>Note:</b> \"aba\" is also a valid answer.\n</pre><p><b>Example:</b>\n</p><pre>\n<b>Input:</b> \"cbbd\"\n\n<b>Output:</b> \"bb\"\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string longestPalindrome(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestPalindrome(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* longestPalindrome(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string LongestPalindrome(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar longestPalindrome = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef longest_palindrome(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestPalindrome(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestPalindrome(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-longest-common-substring-accepted\">Approach #1 (Longest Common Substring) [Accepted]</a></li>\n<li><a href=\"#approach-2-brute-force-time-limit-exceeded\">Approach #2 (Brute Force) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-accepted\">Approach #3 (Dynamic Programming) [Accepted]</a></li>\n<li><a href=\"#approach-4-expand-around-center-accepted\">Approach #4 (Expand Around Center) [Accepted]</a></li>\n<li><a href=\"#approach-5-manachers-algorithm-accepted\">Approach #5 (Manacher\'s Algorithm) [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<p>This article is for intermediate readers. It introduces the following ideas:\nPalindrome, Dynamic Programming and String Manipulation. Make sure you understand what a palindrome means. A palindrome is a string which reads the same in both directions. For example, <script type=\"math/tex; mode=display\">\\textrm{\'\'aba\'\'}</script> is a palindome, <script type=\"math/tex; mode=display\">\\textrm{\'\'abc\'\'}</script> is not.</p>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-longest-common-substring-accepted\">Approach #1 (Longest Common Substring) [Accepted]</h4>\n<p><strong>Common mistake</strong></p>\n<p>Some people will be tempted to come up with a quick solution, which is unfortunately flawed (however can be corrected easily):</p>\n<blockquote>\n<p>Reverse <script type=\"math/tex; mode=display\">S</script> and become <script type=\"math/tex; mode=display\">S\'</script>. Find the longest common substring between <script type=\"math/tex; mode=display\">S</script> and <script type=\"math/tex; mode=display\">S\'</script>, which must also be the longest palindromic substring.</p>\n</blockquote>\n<p>This seemed to work, let’s see some examples below.</p>\n<p>For example, <script type=\"math/tex; mode=display\">S = \\textrm{\'\'caba\"}</script>, <script type=\"math/tex; mode=display\">S\' = \\textrm{\'\'abac\'\'}</script>.</p>\n<p>The longest common substring between <script type=\"math/tex; mode=display\">S</script> and <script type=\"math/tex; mode=display\">S\'</script> is <script type=\"math/tex; mode=display\">\\textrm{\'\'aba\'\'}</script>, which is the answer.</p>\n<p>Let’s try another example: <script type=\"math/tex; mode=display\">S = \\textrm{\'\'abacdfgdcaba\'\'}</script>, <script type=\"math/tex; mode=display\">S\' = \\textrm{\'\'abacdgfdcaba\'\'}</script>.</p>\n<p>The longest common substring between <script type=\"math/tex; mode=display\">S</script> and <script type=\"math/tex; mode=display\">S\'</script> is <script type=\"math/tex; mode=display\">\\textrm{\'\'abacd\'\'}</script>. Clearly, this is not a valid palindrome.</p>\n<p><strong>Algorithm</strong></p>\n<p>We could see that the longest common substring method fails when there exists a reversed copy of a non-palindromic substring in some other part of <script type=\"math/tex; mode=display\">S</script>. To rectify this, each time we find a longest common substring candidate, we check if the substring’s indices are the same as the reversed substring’s original indices. If it is, then we attempt to update the longest palindrome found so far; if not, we skip this and find the next candidate.</p>\n<p>This gives us an <script type=\"math/tex; mode=display\">O(n^2)</script> Dynamic Programming solution which uses <script type=\"math/tex; mode=display\">O(n^2)</script> space (could be improved to use <script type=\"math/tex; mode=display\">O(n)</script> space). Please read more about Longest Common Substring <a href=\"http://en.wikipedia.org/wiki/Longest_common_substring\">here</a>.</p>\n<hr />\n<h4 id=\"approach-2-brute-force-time-limit-exceeded\">Approach #2 (Brute Force) [Time Limit Exceeded]</h4>\n<p>The obvious brute force solution is to pick all possible starting and ending positions for a substring, and verify if it is a palindrome.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>.\nAssume that <script type=\"math/tex; mode=display\">n</script> is the length of the input string, there are a total of <script type=\"math/tex; mode=display\">\\binom{n}{2} = \\frac{n(n-1)}{2}</script> such substrings (excluding the trivial solution where a character itself is a palindrome). Since verifying each substring takes <script type=\"math/tex; mode=display\">O(n)</script> time, the run time complexity is <script type=\"math/tex; mode=display\">O(n^3)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-accepted\">Approach #3 (Dynamic Programming) [Accepted]</h4>\n<p>To improve over the brute force solution, we first observe how we can avoid unnecessary re-computation while validating palindromes. Consider the case <script type=\"math/tex; mode=display\">\\textrm{\'\'ababa\'\'}</script>. If we already knew that <script type=\"math/tex; mode=display\">\\textrm{\'\'bab\'\'}</script> is a palindrome, it is obvious that <script type=\"math/tex; mode=display\">\\textrm{\'\'ababa\'\'}</script> must be a palindrome since the two left and right end letters are the same.</p>\n<p>We define <script type=\"math/tex; mode=display\">P(i,j)</script> as following:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nP(i,j) =\n     \\begin{cases}\n       \\text{true,} &\\quad\\text{if the substring } S_i \\dots S_j \\text{ is a palindrome}\\\\\n       \\text{false,} &\\quad\\text{otherwise.} \\\n     \\end{cases}\n</script>\n</p>\n<p>Therefore,</p>\n<p>\n<script type=\"math/tex; mode=display\">\nP(i, j) = ( P(i+1, j-1) \\text{ and } S_i == S_j )\n</script>\n</p>\n<p>The base cases are:</p>\n<p>\n<script type=\"math/tex; mode=display\">\nP(i, i) = true\n</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">\nP(i, i+1) = ( S_i == S_{i+1} )\n</script>\n</p>\n<p>This yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on...</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.\nThis gives us a runtime complexity of <script type=\"math/tex; mode=display\">O(n^2)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.\nIt uses <script type=\"math/tex; mode=display\">O(n^2)</script> space to store the table.</p>\n</li>\n</ul>\n<p><strong>Additional Exercise</strong></p>\n<p>Could you improve the above space complexity further and how?</p>\n<hr />\n<h4 id=\"approach-4-expand-around-center-accepted\">Approach #4 (Expand Around Center) [Accepted]</h4>\n<p>In fact, we could solve it in <script type=\"math/tex; mode=display\">O(n^2)</script> time using only constant space.</p>\n<p>We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only <script type=\"math/tex; mode=display\">2n - 1</script> such centers.</p>\n<p>You might be asking why there are <script type=\"math/tex; mode=display\">2n - 1</script> but not <script type=\"math/tex; mode=display\">n</script> centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as <script type=\"math/tex; mode=display\">\\textrm{\'\'abba\'\'}</script>) and its center are between the two <script type=\"math/tex; mode=display\">\\textrm{\'b\'}</script>s.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">longestPalindrome</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len1</span> <span class=\"o\">=</span> <span class=\"n\">expandAroundCenter</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len2</span> <span class=\"o\">=</span> <span class=\"n\">expandAroundCenter</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">len1</span><span class=\"o\">,</span> <span class=\"n\">len2</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">len</span> <span class=\"o\">&gt;</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">len</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">len</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"nf\">expandAroundCenter</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">R</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">L</span><span class=\"o\">--;</span>\n        <span class=\"n\">R</span><span class=\"o\">++;</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">R</span> <span class=\"o\">-</span> <span class=\"n\">L</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.\nSince expanding a palindrome around its center could take <script type=\"math/tex; mode=display\">O(n)</script> time, the overall complexity is <script type=\"math/tex; mode=display\">O(n^2)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n</li>\n</ul>\n<h4 id=\"approach-5-manachers-algorithm-accepted\">Approach #5 (Manacher\'s Algorithm) [Accepted]</h4>\n<p>There is even an <script type=\"math/tex; mode=display\">O(n)</script> algorithm called Manacher\'s algorithm, explained <a href=\"http://articles.leetcode.com/longest-palindromic-substring-part-ii/\">here in detail</a>. However, it is a non-trivial algorithm, and no one expects you to come up with this algorithm in a 45 minutes coding session. But, please go ahead and understand it, I promise it will be a lot of fun.</p>',NULL,1,'none','none','none'),(410,'Search a 2D Matrix II',2,'Binary Search,Divide and Conquer',0,0,'<p></p><p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following properties:</p><p>\n</p><ul>\n<li>Integers in each row are sorted in ascending from left to right.</li>\n<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul><p>\nFor example,</p><p>\nConsider the following matrix:\n</p><pre>\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre><p>Given <b>target</b> = <code>5</code>, return <code>true</code>.</p><p>Given <b>target</b> = <code>20</code>, return <code>false</code>.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def searchMatrix(self, matrix, target):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :type target: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool searchMatrix(int** matrix, int matrixRowSize, int matrixColSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool SearchMatrix(int[,] matrix, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @param {number} target\r\n * @return {boolean}\r\n */\r\nvar searchMatrix = function(matrix, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @param {Integer} target\r\n# @return {Boolean}\r\ndef search_matrix(matrix, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchMatrix(matrix [][]int, target int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(411,'Longest Palindromic Subsequence',2,'Dynamic Programming',0,0,'<p></p><p>\nGiven a string s, find the longest palindromic subsequence\'s length in s. You may assume that the maximum length of s is 1000.\n</p><p><b>Example 1:</b><br/>\nInput: \n</p><pre>\n\"bbbab\"\n</pre>\nOutput: \n<pre>\n4\n</pre>\nOne possible longest palindromic subsequence is \"bbbb\".\n\n\n<p><b>Example 2:</b><br/>\nInput:\n</p><pre>\n\"cbbd\"\n</pre>\nOutput:\n<pre>\n2\n</pre>\nOne possible longest palindromic subsequence is \"bb\".\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int longestPalindromeSubseq(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int longestPalindromeSubseq(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def longestPalindromeSubseq(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int longestPalindromeSubseq(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LongestPalindromeSubseq(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar longestPalindromeSubseq = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef longest_palindrome_subseq(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func longestPalindromeSubseq(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestPalindromeSubseq(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def longestPalindromeSubseq(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(412,'Maximal Rectangle',3,'Array,Hash Table,Stack,Dynamic Programming',0,0,'<p></p><p>\nGiven a 2D binary matrix filled with 0\'s and 1\'s, find the largest rectangle containing only 1\'s and return its area.\n</p><p>For example, given the following matrix:\n</p><pre>\n1 0 1 0 0\n1 0 <font color=\"red\">1</font> <font color=\"red\">1</font> <font color=\"red\">1</font>\n1 1 <font color=\"red\">1</font> <font color=\"red\">1</font> <font color=\"red\">1</font>\n1 0 0 1 0\n</pre>\nReturn 6.\n\n      ','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maximalRectangle(vector<vector<char>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maximalRectangle(self, matrix):\r\n        """\r\n        :type matrix: List[List[str]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maximalRectangle(char** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaximalRectangle(char[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} matrix\r\n * @return {number}\r\n */\r\nvar maximalRectangle = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} matrix\r\n# @return {Integer}\r\ndef maximal_rectangle(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maximalRectangle(_ matrix: [[Character]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maximalRectangle(matrix [][]byte) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(413,'Find Right Interval',2,'Binary Search',0,0,'<p></p><p>\nGiven a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the \"right\" of i.\n</p><p>\nFor any interval i, you need to store the minimum interval j\'s index, which means that the interval j has the minimum start point to build the \"right\" relationship for interval i. If the interval j doesn\'t exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.\n</p><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume the interval\'s end point is always bigger than its start point.</li>\n<li>You may assume none of these intervals have the same start point.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [ [1,2] ]\n\n<b>Output:</b> [-1]\n\n<b>Explanation:</b> There is only one interval in the collection, so it outputs -1.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [ [3,4], [2,3], [1,2] ]\n\n<b>Output:</b> [-1, 0, 1]\n\n<b>Explanation:</b> There is no satisfied \"right\" interval for [3,4].\nFor [2,3], the interval [3,4] has minimum-\"right\" start point;\nFor [1,2], the interval [2,3] has minimum-\"right\" start point.\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> [ [1,4], [2,3], [3,4] ]\n\n<b>Output:</b> [-1, 2, -1]\n\n<b>Explanation:</b> There is no satisfied \"right\" interval for [1,4] and [3,4].\nFor [2,3], the interval [3,4] has minimum-\"right\" start point.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> findRightInterval(vector<Interval>& intervals) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public int[] findRightInterval(Interval[] intervals) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution(object):\r\n    def findRightInterval(self, intervals):\r\n        """\r\n        :type intervals: List[Interval]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findRightInterval(struct Interval* intervals, int intervalsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     public int start;\r\n *     public int end;\r\n *     public Interval() { start = 0; end = 0; }\r\n *     public Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int[] FindRightInterval(Interval[] intervals) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * function Interval(start, end) {\r\n *     this.start = start;\r\n *     this.end = end;\r\n * }\r\n */\r\n/**\r\n * @param {Interval[]} intervals\r\n * @return {number[]}\r\n */\r\nvar findRightInterval = function(intervals) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval\r\n#     attr_accessor :start, :end\r\n#     def initialize(s=0, e=0)\r\n#         @start = s\r\n#         @end = e\r\n#     end\r\n# end\r\n\r\n# @param {Interval[]} intervals\r\n# @return {Integer[]}\r\ndef find_right_interval(intervals)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *   public var start: Int\r\n *   public var end: Int\r\n *   public init(_ start: Int, _ end: Int) {\r\n *     self.start = start\r\n *     self.end = end\r\n *   }\r\n * }\r\n */\r\nclass Solution {\r\n    func findRightInterval(_ intervals: [Interval]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\nfunc findRightInterval(intervals []Interval) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for an interval.\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\n *   var start: Int = _start\n *   var end: Int = _end\n * }\n */\nobject Solution {\n    def findRightInterval(intervals: Array[Interval]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(414,'Shortest Palindrome',3,'String',0,0,'<p></p><p>\nGiven a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.\n</p><p>For example: </p><p>Given <code>\"aacecaaa\"</code>, return <code>\"aaacecaaa\"</code>.</p><p>Given <code>\"abcd\"</code>, return <code>\"dcbabcd\"</code>.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/ifanchu\">@ifanchu</a> for adding this problem and creating all test cases. Thanks to <a href=\"https://leetcode.com/discuss/user/Freezen\">@Freezen</a> for additional test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string shortestPalindrome(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String shortestPalindrome(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def shortestPalindrome(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* shortestPalindrome(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ShortestPalindrome(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar shortestPalindrome = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String}\r\ndef shortest_palindrome(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func shortestPalindrome(_ s: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func shortestPalindrome(s string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def shortestPalindrome(s: String): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-accepted\">Approach #1 Brute force [Accepted]</a></li>\n<li><a href=\"#approach-2-two-pointers-and-recursion-accepted\">Approach #2 Two pointers and recursion [Accepted]</a></li>\n<li><a href=\"#approach-3-kmp-accepted\">Approach #3 KMP [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-accepted\">Approach #1 Brute force [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>According to the question, we are allowed to insert the characters only at the beginning of the string. Hence, we can find the largest segment from the beginning that is a palindrome, and we can then easily reverse the remaining segment and append to the beginning. This must be the required answer as no shorter palindrome could be found than this by just appending at the beginning.</p>\n<p>For example: Take the string <script type=\"math/tex; mode=display\">\\text{\"abcbabcab\"}</script>. Here, the largest palindrome segment from beginning is <script type=\"math/tex; mode=display\">\\text{\"abcba\"}</script>, and the remaining segment is <script type=\"math/tex; mode=display\">\\text{\"bcab\"}</script>. Hence the required string is reverse of <script type=\"math/tex; mode=display\">\\text{\"bcab\"}</script>( = <script type=\"math/tex; mode=display\">\\text{\"bacb\"}</script>) + original string( = <script type=\"math/tex; mode=display\">\\text{\"abcbabcab\"}</script>) = <script type=\"math/tex; mode=display\">\\text{\"bacbabcbabcab\"}</script>.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Create the reverse of the original string <script type=\"math/tex; mode=display\">s</script>, say <script type=\"math/tex; mode=display\">\\text{rev}</script>. This is used for comparison to find the largest palindrome segment from the front.</li>\n<li>Iterate over the variable <script type=\"math/tex; mode=display\">i</script> from 0 to the <script type=\"math/tex; mode=display\">\\text{size(s)}-1</script>:<ul>\n<li>If <script type=\"math/tex; mode=display\">s[0:n-i] == rev[i:]</script> (i.e. substring of <script type=\"math/tex; mode=display\">s</script> from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">n-i</script> is equal to the substring of <script type=\"math/tex; mode=display\">\\text{rev}</script> from <script type=\"math/tex; mode=display\">i</script> to the end of string). This essentially means that that substring from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">n-i</script> is a palindrome, as <script type=\"math/tex; mode=display\">\\text{rev}</script> is the reverse of <script type=\"math/tex; mode=display\">s</script>.</li>\n<li>Since, we find the larger palindromes first, we can return reverse of largest palindrome + <script type=\"math/tex; mode=display\">s</script> as soon as we get it.</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">string</span> <span class=\"nf\">shortestPalindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">string</span> <span class=\"n\">rev</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>.</p>\n<ul>\n<li>We iterate over the entire length of string <script type=\"math/tex; mode=display\">s</script>.</li>\n<li>In each iteration, we compare the substrings which is linear in size of substrings to be compared.</li>\n<li>Hence, the total time complexity is <script type=\"math/tex; mode=display\">O(n*n) = O(n^2)</script>.</li>\n</ul>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> extra space for the reverse string <script type=\"math/tex; mode=display\">\\text{rev}</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-two-pointers-and-recursion-accepted\">Approach #2 Two pointers and recursion [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>In Approach #1, we found the largest palindrome substring from the string using substring matching which is <script type=\"math/tex; mode=display\">O(n)</script> in length of substring. We could make the process more efficient if we could reduce the size of string to search for the substring without checking the complete substring each time.</p>\n<p>Lets take a string <script type=\"math/tex; mode=display\">\\text{\"abcbabcaba\"}</script>. Let us consider 2 pointers <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script>.\nInitialize <script type=\"math/tex; mode=display\">i = 0</script>. Iterate over <script type=\"math/tex; mode=display\">j</script> from <script type=\"math/tex; mode=display\">n-1</script> to <script type=\"math/tex; mode=display\">0</script>, incrementing <script type=\"math/tex; mode=display\">i</script> each time <script type=\"math/tex; mode=display\">\\text{s[i]==s[j]}</script>. Now, we just need to search in range <script type=\"math/tex; mode=display\">\\text[0,i)</script>. This way, we have reduced the size of string to search for the largest palindrome substring from the beginning. The range <script type=\"math/tex; mode=display\">\\text{[0,i)}</script> must always contain the largest palindrome substring. The proof of correction is that: Say the string was a perfect palindrome, <script type=\"math/tex; mode=display\">i</script> would be incremented <script type=\"math/tex; mode=display\">n</script> times. Had there been other characters at the end, <script type=\"math/tex; mode=display\">i</script> would still be incremented by the size of the palindrome. Hence, even though there is a chance that the range <script type=\"math/tex; mode=display\">\\text{[0,i)}</script> is not always tight, it is ensured that it will always contain the longest palindrome from the beginning.  </p>\n<p>The best case for the algorithm is when the entire string is palindrome and the worst case is string like <script type=\"math/tex; mode=display\">\\text{\"aababababababa\"}</script>, wherein <script type=\"math/tex; mode=display\">i</script> first becomes <script type=\"math/tex; mode=display\">12</script>(check by doing on paper), and we need to recheck in [0,12) corresponding to string <script type=\"math/tex; mode=display\">\\text{\"aabababababa\"}</script>. Again continuing in the same way, we get <script type=\"math/tex; mode=display\">{i=10}</script>.  In such a case, the string is reduced only by as few as 2 elements at each step. Hence, the number of steps in such cases is linear(<script type=\"math/tex; mode=display\">n/2</script>).</p>\n<p>This reduction of length could be easily done with the help of a recursive routine, as shown in the algorithm section.</p>\n<p><strong>Algorithm</strong></p>\n<p>The routine <script type=\"math/tex; mode=display\">\\text{shortestPalindrome}</script> is recursive and takes string <script type=\"math/tex; mode=display\">s</script> as parameter:</p>\n<ul>\n<li>Initialize <script type=\"math/tex; mode=display\">i=0</script>\n</li>\n<li>Iterate over <script type=\"math/tex; mode=display\">j</script> from <script type=\"math/tex; mode=display\">n-1</script> to <script type=\"math/tex; mode=display\">0</script>:<ul>\n<li>If <script type=\"math/tex; mode=display\">\\text{s[i]==s[j]}</script>, increase <script type=\"math/tex; mode=display\">i</script> by <script type=\"math/tex; mode=display\">1</script>\n</li>\n</ul>\n</li>\n<li>If <script type=\"math/tex; mode=display\">i</script> equals the size of <script type=\"math/tex; mode=display\">s</script>, the entire string is palindrome, and hence return the entire string <script type=\"math/tex; mode=display\">s</script>.</li>\n<li>Else:<ul>\n<li>Return reverse of remaining substring after <script type=\"math/tex; mode=display\">i</script> to the end of string + <script type=\"math/tex; mode=display\">\\text{shortestPalindrome}</script> routine on substring from start to index <script type=\"math/tex; mode=display\">i-1</script> + remaining substring after <script type=\"math/tex; mode=display\">i</script> to the end of string.</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">string</span> <span class=\"nf\">shortestPalindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\n            <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n    <span class=\"n\">string</span> <span class=\"n\">remain_rev</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">remain_rev</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">remain_rev</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">remain_rev</span> <span class=\"o\">+</span> <span class=\"n\">shortestPalindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(n^2)</script>.<ul>\n<li>Each iteration of <script type=\"math/tex; mode=display\">\\text{shortestPalindrome}</script> is linear in size of substring and the maximum number of recursive calls can be <script type=\"math/tex; mode=display\">n/2</script> times as shown in the Intuition section.</li>\n<li>Let the time complexity of the algorithm be T(n). Since, at the each step for the worst case, the string can be divide into 2 parts and we require only one part for further computation. Hence, the time complexity for the worst case can be represented as : <script type=\"math/tex; mode=display\">T(n)=T(n-2)+O(n)</script>. So, <script type=\"math/tex; mode=display\">T(n) = O(n) + O(n-2) + O(n-4) + ... + O(1)</script> which is  <script type=\"math/tex; mode=display\">O(n^2)</script>.</li>\n</ul>\n</li>\n</ul>\n<p>Thanks @CONOVER for the time complexity analysis.</p>\n<ul>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script> extra space for <script type=\"math/tex; mode=display\">\\text{remain_rev}</script> string.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-kmp-accepted\">Approach #3 KMP [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>We have seen that the question boils down to  finding the largest palindrome substring from the beginning.</p>\n<p>The people familiar with KMP(Knuth–Morris–Pratt) algorithm may wonder that the task at hand can be easily be compared with the concept of the lookup table in KMP.</p>\n<p><em>KMP Overview:</em></p>\n<p>KMP is a string matching algorithm that runs in <script type=\"math/tex; mode=display\">O(n+m)</script> times, where <script type=\"math/tex; mode=display\">n</script> and <script type=\"math/tex; mode=display\">m</script> are sizes of the text and string to be searched respectively. The key component of KMP is the failure function lookup table,say <script type=\"math/tex; mode=display\">f(s)</script>. The purpose of the lookup table is to store the length of the proper prefix of the string <script type=\"math/tex; mode=display\">b_{1}b_{2}...b_{s}</script> that is also a suffix of <script type=\"math/tex; mode=display\">b_{1}b_{2}...b_{s}</script>. This table is important because if we are trying to match a text string for <script type=\"math/tex; mode=display\">b_{1}b_{2}...b_{n}</script>, and we have matched the first <script type=\"math/tex; mode=display\">s</script> positions, but when we fail, then the value of lookup table for <script type=\"math/tex; mode=display\">s</script> is the longest prefix of <script type=\"math/tex; mode=display\">b_{1}b_{2}...b_{n}</script> that could possibly match the text string upto the point we are at. Thus, we don\'t need to start all over again, and can resume searching from the matching prefix.</p>\n<p>The algorithm to generate the lookup table is easy and inutitive, as given below:</p>\n<div class=\"codehilite\"><pre><span></span>f(0) = 0\nfor(i = 1; i &lt; n; i++)\n{\n    t = f(i-1)\n    while(t &gt; 0 &amp;&amp; b[i] != b[t])\n        t = f(t-1)\n    if(b[i] == b[t]){\n        ++t\n    f(i) = t\n}\n</pre></div>\n\n\n<ul>\n<li>Here, we first set f(0)=0 since, no proper prefix is available.</li>\n<li>Next, iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n-1</script>:<ul>\n<li>Set <script type=\"math/tex; mode=display\">t=f(i-1)</script>\n</li>\n<li>While t&gt;0 and char at <script type=\"math/tex; mode=display\">i</script> doesn\'t match the char at <script type=\"math/tex; mode=display\">t</script> position, set <script type=\"math/tex; mode=display\">t=f(t)</script>, which essentially means that we have problem matching and must consider a shorter prefix, which will be <script type=\"math/tex; mode=display\">b_{f(t-1)}</script>, until we find a match or t becomes 0.</li>\n<li>If <script type=\"math/tex; mode=display\">b_{i}==b_{t}</script>, add 1 to t</li>\n<li>Set <script type=\"math/tex; mode=display\">f(i)=t</script>\n</li>\n</ul>\n</li>\n</ul>\n<p>The lookup table generation is as illustrated below:</p>\n<p align=\"center\"><img alt=\"KMP\" src=\"../Figures/214/shortest_palindrome.png\" width=\"600px\" /></p>\n<p><em>Wait! I get it!!</em></p>\n<p>In Approach #1, we reserved the original string <script type=\"math/tex; mode=display\">s</script> and stored it as <script type=\"math/tex; mode=display\">\\text{rev}</script>. We iterate over <script type=\"math/tex; mode=display\">i</script> from <script type=\"math/tex; mode=display\">0</script> to <script type=\"math/tex; mode=display\">n-1</script> and check for <script type=\"math/tex; mode=display\">s[0:n-i] == rev[i:]</script>.\nPondering over this statement, had the <script type=\"math/tex; mode=display\">\\text{rev}</script> been concatenated to <script type=\"math/tex; mode=display\">s</script>, this statement is just finding the longest prefix that is equal to the suffix. Voila!</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>We use the KMP lookup table generation</li>\n<li>Create <script type=\"math/tex; mode=display\">\\text{new_s}</script> as <script type=\"math/tex; mode=display\">s + \\text{\"#\"} + \\text{reverse(s)}</script> and use the string in the lookup-generation algorithm<ul>\n<li>The \"#\" in the middle is required, since without the #, the  2 strings could mix with each ther, producing wrong answer. For example, take the string <script type=\"math/tex; mode=display\">\\text{\"aaaa\"}</script>. Had we not inserted \"#\" in the middle, the new string would be <script type=\"math/tex; mode=display\">\\text{\"aaaaaaaa\"}</script> and the largest prefix size would be 7 corresponding to \"aaaaaaa\" which would be obviously wrong. Hence, a delimiter is required at the middle.</li>\n</ul>\n</li>\n<li>Return reversed string after the largest palindrome from beginning length(given by <script type=\"math/tex; mode=display\">n-\\text{f[n_new-1]}</script>) + original string <script type=\"math/tex; mode=display\">s</script>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">string</span> <span class=\"nf\">shortestPalindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">string</span> <span class=\"n\">rev</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"n\">string</span> <span class=\"n\">s_new</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"s\">&quot;#&quot;</span> <span class=\"o\">+</span> <span class=\"n\">rev</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n_new</span> <span class=\"o\">=</span> <span class=\"n\">s_new</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n_new</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n_new</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s_new</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s_new</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">])</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s_new</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s_new</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">])</span>\n            <span class=\"o\">++</span><span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">rev</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">n_new</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O(n)</script>.</p>\n<ul>\n<li>In every iteration of the inner while loop, <script type=\"math/tex; mode=display\">t</script> decreases until it reaches 0 or until it matches. After that, it is incremented by one. Therefore, in the worst case, <script type=\"math/tex; mode=display\">t</script> can only be decreased up to <script type=\"math/tex; mode=display\">n</script> times and increased up to <script type=\"math/tex; mode=display\">n</script> times.</li>\n<li>Hence, the algorithm is linear with maximum <script type=\"math/tex; mode=display\">(2 * n) * 2</script> iterations.</li>\n</ul>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(n)</script>. Additional space for the reverse string and the concatenated string.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/abhinavbansal0\">@abhinavbansal0</a>.</p>',NULL,1,'none','none','none'),(415,'Median of Two Sorted Arrays',3,'Binary Search,Array,Divide and Conquer',0,0,'<p></p><p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p><b>Example 1:</b><br/>\n</p><pre>\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMedianSortedArrays(self, nums1, nums2):\r\n        """\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: float\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findMedianSortedArrays(self, nums1, nums2):\r\n        """\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: float\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @return {number}\r\n */\r\nvar findMedianSortedArrays = function(nums1, nums2) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @return {Float}\r\ndef find_median_sorted_arrays(nums1, nums2)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(416,'Increasing Triplet Subsequence',2,'',0,0,'<p></p><p>\nGiven an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\n</p><p>\nFormally the function should:<br/>\n</p><blockquote>Return true if there exists <i>i, j, k </i> <br/>\nsuch that <i>arr[i]</i> &lt; <i>arr[j]</i> &lt; <i>arr[k]</i> given 0 ≤ <i>i</i> &lt; <i>j</i> &lt; <i>k</i> ≤ <i>n</i>-1 \nelse return false.\n</blockquote><p>\nYour algorithm should run in O(<i>n</i>) time complexity and O(<i>1</i>) space complexity.\n</p><p>\n<b>Examples:</b><br/>\nGiven <code>[1, 2, 3, 4, 5]</code>,<br/>\nreturn <code>true</code>.\n</p><p>\nGiven <code>[5, 4, 3, 2, 1]</code>,<br/>\nreturn <code>false</code>.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/DjangoUnchained\">@DjangoUnchained</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool increasingTriplet(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean increasingTriplet(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def increasingTriplet(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool increasingTriplet(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IncreasingTriplet(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar increasingTriplet = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef increasing_triplet(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func increasingTriplet(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func increasingTriplet(nums []int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def increasingTriplet(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(417,'Find Largest Value in Each Tree Row',2,'Tree,Depth-first Search,Breadth-first Search',0,0,'<p></p><p>You need to find the largest value in each row of a binary tree.</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n<b>Output:</b> [1, 3, 9]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> largestValues(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Integer> largestValues(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def largestValues(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* largestValues(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> LargestValues(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar largestValues = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef largest_values(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func largestValues(_ root: TreeNode?) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc largestValues(root *TreeNode) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def largestValues(root: TreeNode): List[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(418,'Non-overlapping Intervals',2,'Greedy',0,0,'<p></p><p>\nGiven a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n</p><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume the interval\'s end point is always bigger than its start point.</li>\n<li>Intervals like [1,2] and [2,3] have borders \"touching\" but they don\'t overlap each other.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<b>Output:</b> 1\n\n<b>Explanation:</b> [1,3] can be removed and the rest of intervals are non-overlapping.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [ [1,2], [1,2], [1,2] ]\n\n<b>Output:</b> 2\n\n<b>Explanation:</b> You need to remove two [1,2] to make the rest of intervals non-overlapping.\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> [ [1,2], [2,3] ]\n\n<b>Output:</b> 0\n\n<b>Explanation:</b> You don\'t need to remove any of the intervals since they\'re already non-overlapping.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int eraseOverlapIntervals(vector<Interval>& intervals) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public int eraseOverlapIntervals(Interval[] intervals) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution(object):\r\n    def eraseOverlapIntervals(self, intervals):\r\n        """\r\n        :type intervals: List[Interval]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\nint eraseOverlapIntervals(struct Interval* intervals, int intervalsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     public int start;\r\n *     public int end;\r\n *     public Interval() { start = 0; end = 0; }\r\n *     public Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int EraseOverlapIntervals(Interval[] intervals) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * function Interval(start, end) {\r\n *     this.start = start;\r\n *     this.end = end;\r\n * }\r\n */\r\n/**\r\n * @param {Interval[]} intervals\r\n * @return {number}\r\n */\r\nvar eraseOverlapIntervals = function(intervals) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for an interval.\r\n# class Interval\r\n#     attr_accessor :start, :end\r\n#     def initialize(s=0, e=0)\r\n#         @start = s\r\n#         @end = e\r\n#     end\r\n# end\r\n\r\n# @param {Interval[]} intervals\r\n# @return {Integer}\r\ndef erase_overlap_intervals(intervals)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *   public var start: Int\r\n *   public var end: Int\r\n *   public init(_ start: Int, _ end: Int) {\r\n *     self.start = start\r\n *     self.end = end\r\n *   }\r\n * }\r\n */\r\nclass Solution {\r\n    func eraseOverlapIntervals(_ intervals: [Interval]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\nfunc eraseOverlapIntervals(intervals []Interval) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for an interval.\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\n *   var start: Int = _start\n *   var end: Int = _end\n * }\n */\nobject Solution {\n    def eraseOverlapIntervals(intervals: Array[Interval]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(419,'House Robber II',2,'Dynamic Programming',0,0,'<p></p><p><b>Note:</b> This is an extension of <a href=\"https://leetcode.com/problems/house-robber/\">House Robber</a>.</p><p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street. </p><p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/Freezen\">@Freezen</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int rob(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def rob(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int rob(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int Rob(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar rob = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef rob(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func rob(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func rob(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def rob(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(420,'Guess Number Higher or Lower',1,'Binary Search',0,0,'<p></p><p>We are playing the Guess Game. The game is as follows:</p><p>\n</p><p>I pick a number from <b>1</b> to <b><i>n</i></b>. You have to guess which number I picked.</p><p>Every time you guess wrong, I\'ll tell you whether the number is higher or lower.</p><p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p><pre>\n-1 : My number is lower\n 1 : My number is higher\n 0 : Congrats! You got it!\n</pre><p><b>Example:</b><br/>\n</p><pre>\nn = 10, I pick 6.\n\nReturn 6.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"// Forward declaration of guess API.\r\n// @param num, your guess\r\n// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\r\nint guess(int num);\r\n\r\nclass Solution {\r\npublic:\r\n    int guessNumber(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/* The guess API is defined in the parent class GuessGame.\r\n   @param num, your guess\r\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\r\n      int guess(int num); */\r\n\r\npublic class Solution extends GuessGame {\r\n    public int guessNumber(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# The guess API is already defined for you.\r\n# @param num, your guess\r\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\r\n# def guess(num):\r\n\r\nclass Solution(object):\r\n    def guessNumber(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-binary-search-accepted\">Approach #2 Binary Search [Accepted]</a></li>\n<li><a href=\"#approach-3-ternary-search-accepted\">Approach #3 Ternary Search [Accepted]</a></li>\n</ul>\n</li>\n<li><a href=\"#follow-up\">Follow up</a><ul>\n<li><a href=\"#comparisons-between-binary-search-and-ternary-search\">Comparisons between Binary Search and Ternary Search</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>We check every number from 1 to n-1 and pass it to the <script type=\"math/tex; mode=display\">guess</script> function. The number\nfor which a 0 is returned is the required answer.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* The guess API is defined in the parent class GuessGame.</span>\n<span class=\"cm\">   @param num, your guess</span>\n<span class=\"cm\">   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>\n<span class=\"cm\">      int guess(int num); */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"kd\">extends</span> <span class=\"n\">GuessGame</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">guessNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">guess</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We scan all the numbers from 1 to n.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-binary-search-accepted\">Approach #2 Binary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can apply Binary Search to find the given number. We start with the mid\nnumber. We pass that number to the <script type=\"math/tex; mode=display\">guess</script> function. If it returns a -1, it implies that the guessed number is larger than the required one. Thus, we use Binary Search for numbers lower than itself. Similarly, if it returns a 1, we use Binary Search\n for numbers higher than itself.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* The guess API is defined in the parent class GuessGame.</span>\n<span class=\"cm\">   @param num, your guess</span>\n<span class=\"cm\">   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>\n<span class=\"cm\">      int guess(int num); */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"kd\">extends</span> <span class=\"n\">GuessGame</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">guessNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">&lt;=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">high</span> <span class=\"o\">-</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">guess</span><span class=\"o\">(</span><span class=\"n\">mid</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">mid</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\log_2 n\\big)</script>. Binary Search is used.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-ternary-search-accepted\">Approach #3 Ternary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In Binary Search, we choose the middle element as the pivot in splitting. In Ternary Search, we choose two pivots (say <script type=\"math/tex; mode=display\">m1</script> and <script type=\"math/tex; mode=display\">m2</script>) such that the given range is divided into three equal parts. If the required number <script type=\"math/tex; mode=display\">num</script> is less than <script type=\"math/tex; mode=display\">m1</script> then we apply ternary search on the left segment of <script type=\"math/tex; mode=display\">m1</script>. If <script type=\"math/tex; mode=display\">num</script> lies between <script type=\"math/tex; mode=display\">m1</script> and <script type=\"math/tex; mode=display\">m2</script>, we apply ternary search between <script type=\"math/tex; mode=display\">m1</script> and <script type=\"math/tex; mode=display\">m2</script>. Otherwise we will search in the segment right to <script type=\"math/tex; mode=display\">m2</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/* The guess API is defined in the parent class GuessGame.</span>\n<span class=\"cm\">   @param num, your guess</span>\n<span class=\"cm\">   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span>\n<span class=\"cm\">      int guess(int num); */</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"kd\">extends</span> <span class=\"n\">GuessGame</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">guessNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">low</span> <span class=\"o\">&lt;=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid1</span> <span class=\"o\">=</span> <span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">high</span> <span class=\"o\">-</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">mid2</span> <span class=\"o\">=</span> <span class=\"n\">high</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">high</span> <span class=\"o\">-</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n            <span class=\"kt\">int</span> <span class=\"n\">res1</span> <span class=\"o\">=</span> <span class=\"n\">guess</span><span class=\"o\">(</span><span class=\"n\">mid1</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">res2</span> <span class=\"o\">=</span> <span class=\"n\">guess</span><span class=\"o\">(</span><span class=\"n\">mid2</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res1</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">mid1</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">mid2</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">mid1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">res2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">mid2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">mid1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">mid2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\log_3 n \\big)</script>. Ternary Search is used.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. No extra space is used.</li>\n</ul>\n<hr />\n<h2 id=\"follow-up\">Follow up</h2>\n<p>It seems that ternary search is able to terminate earlier compared to binary search. But why is binary search more widely used?</p>\n<h4 id=\"comparisons-between-binary-search-and-ternary-search\">Comparisons between Binary Search and Ternary Search</h4>\n<p>Ternary Search is worse than Binary Search. The following outlines the recursive formula to count comparisons of Binary Search in the worst case.</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nT(n) &= T\\bigg(\\frac{n}{2} \\ \\bigg) + 2, \\quad T(1) = 1 \\\\\nT\\bigg(\\frac{n}{2} \\ \\bigg) &= T\\bigg(\\frac{n}{2^2} \\ \\bigg) + 2 \\\\\n\\\\\n\\therefore{} \\quad T(n) &= T\\bigg(\\frac{n}{2^2} \\ \\bigg) + 2 \\times 2 \\\\\n&= T\\bigg(\\frac{n}{2^3} \\ \\bigg) + 3 \\times 2 \\\\\n&= \\ldots \\\\\n&= T\\bigg(\\frac{n}{2^{\\log_2 n}} \\ \\bigg) + 2 \\log_2 n \\\\\n&= T(1) + 2 \\log_2 n \\\\\n&= 1 + 2 \\log_2 n\n\\end{align*}\n</script>\n</p>\n<p>The following outlines the recursive formula to count comparisons of Ternary Search in the worst case.</p>\n<p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nT(n) &= T\\bigg(\\frac{n}{3} \\ \\bigg) + 4, \\quad T(1) = 1 \\\\\nT\\bigg(\\frac{n}{3} \\ \\bigg) &= T\\bigg(\\frac{n}{3^2} \\ \\bigg) + 4 \\\\\n\\\\\n\\therefore{} \\quad T(n) &= T\\bigg(\\frac{n}{3^2} \\ \\bigg) + 2 \\times 4 \\\\\n&= T\\bigg(\\frac{n}{3^3} \\ \\bigg) + 3 \\times 4 \\\\\n&= \\ldots \\\\\n&= T\\bigg(\\frac{n}{3^{\\log_3 n}} \\ \\bigg) + 4 \\log_3 n \\\\\n&= T(1) + 4 \\log_3 n \\\\\n&= 1 + 4 \\log_3 n\n\\end{align*}\n</script>\n</p>\n<p>As shown above, the total comparisons in the worst case for ternary and binary search are <script type=\"math/tex; mode=display\">1 + 4 \\log_3 n</script> and <script type=\"math/tex; mode=display\">1 + 2 \\log_2 n</script> comparisons respectively. To determine which is larger, we can just look at the expression <script type=\"math/tex; mode=display\">2 \\log_3 n</script> and <script type=\"math/tex; mode=display\">\\log_2 n</script> . The expression <script type=\"math/tex; mode=display\">2 \\log_3 n</script> can be written as <script type=\"math/tex; mode=display\">\\frac{2}{\\log_2 3} \\times \\log_2 n</script> . Since the value of <script type=\"math/tex; mode=display\">\\frac{2}{\\log_2 3}</script> is greater than one, Ternary Search does more comparisons than Binary Search in the worst case.</p>\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(421,'Reconstruct Itinerary',2,'Depth-first Search,Graph',0,0,'<p></p><p>Given a list of airline tickets represented by pairs of departure and arrival airports <code>[from, to]</code>, reconstruct the itinerary in order. All of the tickets belong to a man who departs from <code>JFK</code>. Thus, the itinerary must begin with <code>JFK</code>.\n</p><p>\n<b>Note:</b><br/>\n</p><ol>\n<li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary <code>[\"JFK\", \"LGA\"]</code> has a smaller lexical order than <code>[\"JFK\", \"LGB\"]</code>.</li>\n<li>All airports are represented by three capital letters (IATA code).</li>\n<li>You may assume all tickets form at least one valid itinerary.</li>\n</ol><p>\n<b>Example 1:</b><br/>\n<code>tickets</code> = <code>[[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]]</code><br/>\n    Return <code>[\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"]</code>.<br/>\n</p><p>\n<b>Example 2:</b><br/>\n<code>tickets</code> = <code>[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]</code><br/>\n    Return <code>[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]</code>.<br/>\n    Another possible reconstruction is <code>[\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]</code>. But it is larger in lexical order.\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> findItinerary(vector<pair<string, string>> tickets) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> findItinerary(String[][] tickets) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findItinerary(self, tickets):\r\n        """\r\n        :type tickets: List[List[str]]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findItinerary(char*** tickets, int ticketsRowSize, int ticketsColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> FindItinerary(string[,] tickets) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[][]} tickets\r\n * @return {string[]}\r\n */\r\nvar findItinerary = function(tickets) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {string[][]} tickets\r\n# @return {String[]}\r\ndef find_itinerary(tickets)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findItinerary(_ tickets: [[String]]) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findItinerary(tickets [][]string) []string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findItinerary(tickets: Array[Array[String]]): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(422,'Flatten Binary Tree to Linked List',2,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree, flatten it to a linked list in-place.\n</p><p>\nFor example,<br/>\nGiven\n</p><pre>\n         1\n        / \\\n       2   5\n      / \\   \\\n     3   4   6\n</pre>\n\n\nThe flattened tree should look like:<br/><pre>\n   1\n    \\\n     2\n      \\\n       3\n        \\\n         4\n          \\\n           5\n            \\\n             6\n</pre><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show hints.</a></p><div class=\"spoilers\"><b>Hints:</b>\n<p>If you notice carefully in the flattened tree, each node\'s right child points to the next node of a pre-order traversal.</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void flatten(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def flatten(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: void Do not return anything, modify root in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nvoid flatten(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void Flatten(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {void} Do not return anything, modify root in-place instead.\r\n */\r\nvar flatten = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Void} Do not return anything, modify root in-place instead.\r\ndef flatten(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func flatten(_ root: TreeNode?) {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc flatten(root *TreeNode)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def flatten(root: TreeNode): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(423,'Find K Pairs with Smallest Sums',2,'Heap',0,0,'<p></p><p>\nYou are given two integer arrays <b>nums1</b> and <b>nums2</b> sorted in ascending order and an integer <b>k</b>. \n</p><p>Define a pair <b>(u,v)</b> which consists of one element from the first array and one element from the second array.</p><p>Find the k pairs <b>(u<sub>1</sub>,v<sub>1</sub>),(u<sub>2</sub>,v<sub>2</sub>) ...(u<sub>k</sub>,v<sub>k</sub>)</b> with the smallest sums.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\nGiven nums1 = [1,7,11], nums2 = [2,4,6],  k = 3\n\nReturn: [1,2],[1,4],[1,6]\n\nThe first 3 pairs are returned from the sequence:\n[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\nGiven nums1 = [1,1,2], nums2 = [1,2,3],  k = 2\n\nReturn: [1,1],[1,1]\n\nThe first 2 pairs are returned from the sequence:\n[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\nGiven nums1 = [1,2], nums2 = [3],  k = 3 \n\nReturn: [1,3],[2,3]\n\nAll possible pairs are returned from the sequence:\n[1,3],[2,3]\n</pre><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/elmirap/\">@elmirap</a> and <a href=\"https://leetcode.com/stefanpochmann/\">@StefanPochmann</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def kSmallestPairs(self, nums1, nums2, k):\r\n        """\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :type k: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<int[]> KSmallestPairs(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @param {number} k\r\n * @return {number[][]}\r\n */\r\nvar kSmallestPairs = function(nums1, nums2, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @param {Integer} k\r\n# @return {Integer[][]}\r\ndef k_smallest_pairs(nums1, nums2, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func kSmallestPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func kSmallestPairs(nums1 []int, nums2 []int, k int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def kSmallestPairs(nums1: Array[Int], nums2: Array[Int], k: Int): List[Array[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(424,'Gas Station',2,'Greedy',0,0,'<p></p><p>\nThere are <i>N</i> gas stations along a circular route, where the amount of gas at station <i>i</i> is <code>gas[i]</code>.\n</p><p>\nYou have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from station <i>i</i> to its next station (<i>i</i>+1). You begin the journey with an empty tank at one of the gas stations.\n</p><p>\nReturn the starting gas station\'s index if you can travel around the circuit once, otherwise return -1.\n</p><p>\n<b>Note:</b><br/>\nThe solution is guaranteed to be unique.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canCompleteCircuit(self, gas, cost):\r\n        """\r\n        :type gas: List[int]\r\n        :type cost: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CanCompleteCircuit(int[] gas, int[] cost) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} gas\r\n * @param {number[]} cost\r\n * @return {number}\r\n */\r\nvar canCompleteCircuit = function(gas, cost) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} gas\r\n# @param {Integer[]} cost\r\n# @return {Integer}\r\ndef can_complete_circuit(gas, cost)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func canCompleteCircuit(_ gas: [Int], _ cost: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canCompleteCircuit(gas []int, cost []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canCompleteCircuit(gas: Array[Int], cost: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(425,'Delete Operation for Two Strings',2,'String',0,0,'<p></p><p>\nGiven two words <i>word1</i> and <i>word2</i>, find the minimum number of steps required to make <i>word1</i> and <i>word2</i> the same, where in each step you can delete one character in either string.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"sea\", \"eat\"\n<b>Output:</b> 2\n<b>Explanation:</b> You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of given words won\'t exceed 500.</li>\n<li>Characters in given words can only be lower-case letters.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minDistance(String word1, String word2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def minDistance(self, word1, word2):\n        """\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def minDistance(self, word1, word2):\n        """\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minDistance(char* word1, char* word2) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int MinDistance(string word1, string word2) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef min_distance(word1, word2)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minDistance(word1 string, word2 string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-longest-common-subsequence-time-limit-exceeded\">Approach #1 Using Longest Common Subsequence [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-longest-common-subsequence-with-memoization-accepted\">Approach #2 Longest Common Subsequence with Memoization [Accepted]</a></li>\n<li><a href=\"#approach-3-using-longest-common-subsequence-dynamic-programming-accepted\">Approach #3 Using Longest Common Subsequence- Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-4-without-using-lcs-dynamic-programmming-accepted\">Approach #4 Without using LCS Dynamic Programmming [Accepted]:</a></li>\n<li><a href=\"#approach-5-1-d-dynamic-programming-accepted\">Approach #5 1-D Dynamic Programming [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-longest-common-subsequence-time-limit-exceeded\">Approach #1 Using Longest Common Subsequence [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In order to determine the minimum number of delete operations needed, we can make use of the length of the longest common sequence among the two given strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>, say given by <script type=\"math/tex; mode=display\">lcs</script>. If we can find this <script type=\"math/tex; mode=display\">lcs</script> value, we can easily determine the required result as <script type=\"math/tex; mode=display\">m + n - 2*lcs</script>. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the length of the two given strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>.</p>\n<p>The above equation works because in case of complete mismatch(i.e. if the two strings can\'t be equalized at all), the total number of delete operations required will be <script type=\"math/tex; mode=display\">m + n</script>. Now, if there is a common sequence among the two strings of length <script type=\"math/tex; mode=display\">lcs</script>, we need to do <script type=\"math/tex; mode=display\">lcs</script> lesser deletions in both the strings leading to a total of <script type=\"math/tex; mode=display\">2lcs</script> lesser deletions, which then leads to the above equation.</p>\n<p>In order to find the length of the longest common sequence, we make use of a recursive function <code>lcs(s1,s2,i,j)</code> which returns the length of the longest common sequence among the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> considering their lengths upto <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> respectively. For evaluating the function, we check if the characters <script type=\"math/tex; mode=display\">s1[m-1]</script> and <script type=\"math/tex; mode=display\">s2[n-1]</script> for equality. If they match, we can consider the corresponding strings upto 1 lesser lengths since the last characters have already been considered and add 1 to the result to be returned for strings of 1 lesser lengths. Thus, we make the function call <code>lcs(s1, s2, i-1, j-1)</code>. </p>\n<p>If the last characters don\'t match, we have two options, either we can consider the second last character of <script type=\"math/tex; mode=display\">s1</script> and the last character of <script type=\"math/tex; mode=display\">s2</script>, or we can consider the second last character of <script type=\"math/tex; mode=display\">s2</script> and the last character of <script type=\"math/tex; mode=display\">s1</script>. We need to consider the larger result obtained out of the two considerations for getting the required length. </p>\n<p>Thus, the function call <code>lcs(s1,s2,m,n)</code> returns the required <script type=\"math/tex; mode=display\">lcs</script> value.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">minDistance</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">(),</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lcs</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">else</span>\n            <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(2^{max(m,n)})</script>. Size of recursion tree will be <script type=\"math/tex; mode=display\">2^(m+n)</script>. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the lengths of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> respectively.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(\\text{max}(m,n))</script>. The depth of the recursion tree will go upto <script type=\"math/tex; mode=display\">\\text{max}(m,n)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-longest-common-subsequence-with-memoization-accepted\">Approach #2 Longest Common Subsequence with Memoization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can observe that in the last approach, while determining the <script type=\"math/tex; mode=display\">lcs</script> value, a lot of redundant function calls are made, since the same <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> values to be used for the function calls could be obtained going through many different paths. We can remove this redundancy by making use of a <script type=\"math/tex; mode=display\">memo</script> array to store the value to be returned for these function calls if they have been called once with the corresponding parameters. Thus, <script type=\"math/tex; mode=display\">memo[i][j]</script> is used to store the result for the function call <code>lcs(s1,s2,i,j)</code>.</p>\n<p>Thus, by returning the already stored values from the <script type=\"math/tex; mode=display\">memo</script> array, we can prune the search space to a great extent.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">minDistance</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">(),</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">(),</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">lcs</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">),</span> <span class=\"n\">lcs</span><span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">s2</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script> needs to be filled once. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the length of the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> respectively.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script> is used. Also, The depth of the recursion tree will go upto <script type=\"math/tex; mode=display\">\\text{max}(m,n)</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-longest-common-subsequence-dynamic-programming-accepted\">Approach #3 Using Longest Common Subsequence- Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another method to obtain the value of <script type=\"math/tex; mode=display\">lcs</script> is to make use of Dynamic Programming. We\'ll look at the implemenation and carry-on alongside the idea behind it.</p>\n<p>We make use of a 2-D <script type=\"math/tex; mode=display\">dp</script>, in which <script type=\"math/tex; mode=display\">dp[i][j]</script> represents the length of the longest common subsequence among the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> considering their lengths upto <script type=\"math/tex; mode=display\">(i-1)^{th}</script> index and <script type=\"math/tex; mode=display\">(j-1)^{th}</script> index only respectively. We fill the <script type=\"math/tex; mode=display\">dp</script> array in row-by-row order.</p>\n<p>In order to fill the entry for <script type=\"math/tex; mode=display\">dp[i][j]</script>, we can have two cases:</p>\n<ol>\n<li>\n<p>The characters <script type=\"math/tex; mode=display\">s1[i-1]</script> and <script type=\"math/tex; mode=display\">s2[j-1]</script> match with each other. In this case, the entry for <script type=\"math/tex; mode=display\">dp[i][j]</script> will be one more than the entry obtained for the strings considering their lengths upto one lesser index, since the matched character adds one to the length of LCS formed till the current indices. Thus, the <script type=\"math/tex; mode=display\">dp[i][j]</script> entry is updated as <script type=\"math/tex; mode=display\">dp[i][j] = 1 + dp[i-1][j-1]</script>. Note that <script type=\"math/tex; mode=display\">dp[i-1][j-1]</script> has been used because the matched character belongs to both <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>.</p>\n</li>\n<li>\n<p>The characters <script type=\"math/tex; mode=display\">s1[i-1]</script> and <script type=\"math/tex; mode=display\">s2[j-1]</script> don\'t match with each other. In this case, we can\'t increment the current entry as compared to entries corresponding to the previous indices, but we need to replicate the previous entry again to indicate that the length of LCS upto the current indices also remains the same. But, which entry to pick up? Now, since the current character hasn\'t matched, we have got two options. We can remove the current character from consideration from either <script type=\"math/tex; mode=display\">s1</script> or <script type=\"math/tex; mode=display\">s2</script> and use the corresponding <script type=\"math/tex; mode=display\">dp</script> entries given by <script type=\"math/tex; mode=display\">dp[i-1][j]</script> and <script type=\"math/tex; mode=display\">dp[i][j-1]</script> respectively. Since we are considering the length of LCS upto the current indices we need to pick up the larger entry out of these two to update the current <script type=\"math/tex; mode=display\">dp</script> entry.</p>\n</li>\n</ol>\n<p>At the end, again, we obtain the number of deletions required as <script type=\"math/tex; mode=display\">m + n - 2*dp[m][n]</script>, where <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the lengths of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>. <script type=\"math/tex; mode=display\">dp[m][n]</script> now refers to the length of LCS among the two given strings.</p>\n<p>!?!../Documents/583_Delete1.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">minDistance</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">continue</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. We need to fill in the <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script>. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the lengths of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-without-using-lcs-dynamic-programmming-accepted\">Approach #4 Without using LCS Dynamic Programmming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of finding the length of LCS and then determining the number of deletions required, we can make use of Dynamic Programming to directly determine the number of deletions required till the current indices of the strings.</p>\n<p>In order to do so, we make use of a 2-D <script type=\"math/tex; mode=display\">dp</script> array. Now, <script type=\"math/tex; mode=display\">dp[i][j]</script> refers to the number of deletions required to equalize the two strings if we consider the strings\' length upto <script type=\"math/tex; mode=display\">(i-1)^{th}</script> index and <script type=\"math/tex; mode=display\">(j-1)^{th}</script> index for <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> respectively. Again, we fill in the <script type=\"math/tex; mode=display\">dp</script> array in a row-by-row order. Now, in order to fill the entry for <script type=\"math/tex; mode=display\">dp[i][j]</script>, we need to consider two cases only:</p>\n<ol>\n<li>\n<p>The characters <script type=\"math/tex; mode=display\">s1[i-1]</script> and <script type=\"math/tex; mode=display\">s2[j-1]</script> match with each other. In this case, we need to replicate the entry corresponding to <script type=\"math/tex; mode=display\">dp[i-1][j-1]</script> itself. This is because, the matched character doesn\'t need to be deleted from any of the strings.</p>\n</li>\n<li>\n<p>The characters <script type=\"math/tex; mode=display\">s1[i-1]</script> and <script type=\"math/tex; mode=display\">s2[j-1]</script> don\'t match with each other. In this case, we need to delete either the current character of <script type=\"math/tex; mode=display\">s1</script> or <script type=\"math/tex; mode=display\">s2</script>. Thus, an increment of 1 needs to be done relative to the entries corresponding to the previous indices. The two options available at this moment are <script type=\"math/tex; mode=display\">dp[i-1][j]</script> and <script type=\"math/tex; mode=display\">dp[i][j-1]</script>. Since, we are keeping track of the minimum number of deletions required, we pick up the minimum out of these two values.</p>\n</li>\n</ol>\n<p>At the end, <script type=\"math/tex; mode=display\">dp[m][n]</script> gives the required minimum number of deletions. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the lengths of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>.</p>\n<p>!?!../Documents/583_Delete2.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">minDistance</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()][</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. We need to fill in the <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script>. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the lengths of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-1-d-dynamic-programming-accepted\">Approach #5 1-D Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can observe that in the last approach, in order to update the current <script type=\"math/tex; mode=display\">dp</script> entries, we need only the values of the previous row of <script type=\"math/tex; mode=display\">dp</script>. Thus, rather than using a 2-D array, we can do the same job by making use of a 1-D <script type=\"math/tex; mode=display\">dp</script> array.</p>\n<p>Thus, now, <script type=\"math/tex; mode=display\">dp[i]</script> refers to the number of deletions that need to be made in order to equalize the strings <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script> if we consider string <script type=\"math/tex; mode=display\">s1</script> upto the <script type=\"math/tex; mode=display\">(i-1)^{th}</script> index and string <script type=\"math/tex; mode=display\">s2</script> upto the last to current index of <script type=\"math/tex; mode=display\">s2</script>. </p>\n<p>Now, we make the updations for the current row in an array <script type=\"math/tex; mode=display\">temp</script> of the same size as <script type=\"math/tex; mode=display\">dp</script>, and use the <script type=\"math/tex; mode=display\">dp</script> entries as if they correspond to the previous row\'s entries. When, the whole <script type=\"math/tex; mode=display\">temp</script> array has been filled, we copy it the <script type=\"math/tex; mode=display\">dp</script> array so that <script type=\"math/tex; mode=display\">dp</script> array now reflects the new row\'s entries.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">minDistance</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()+</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                    <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">dp</span><span class=\"o\">=</span><span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. We need to fill in the <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script>, <script type=\"math/tex; mode=display\">m</script> times. Here, <script type=\"math/tex; mode=display\">m</script> and <script type=\"math/tex; mode=display\">n</script> refer to the lengths of <script type=\"math/tex; mode=display\">s1</script> and <script type=\"math/tex; mode=display\">s2</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(426,'Heaters',1,'Binary Search',0,0,'<p></p><p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p><p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p><p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p><p><b>Note:</b><br/>\n</p><ol>\n<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\n<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\n<li>As long as a house is in the heaters\' warm radius range, it can be warmed.</li>\n<li>All the heaters follow your radius standard and the warm radius will the same.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3],[2]\n<b>Output:</b> 1\n<b>Explanation:</b> The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,4],[1,4]\n<b>Output:</b> 1\n<b>Explanation:</b> The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findRadius(int[] houses, int[] heaters) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findRadius(self, houses, heaters):\r\n        """\r\n        :type houses: List[int]\r\n        :type heaters: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findRadius(int* houses, int housesSize, int* heaters, int heatersSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindRadius(int[] houses, int[] heaters) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} houses\r\n * @param {number[]} heaters\r\n * @return {number}\r\n */\r\nvar findRadius = function(houses, heaters) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} houses\r\n# @param {Integer[]} heaters\r\n# @return {Integer}\r\ndef find_radius(houses, heaters)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findRadius(_ houses: [Int], _ heaters: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findRadius(houses []int, heaters []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findRadius(houses: Array[Int], heaters: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(427,'Student Attendance Record II',3,'Dynamic Programming',0,0,'<p></p><p>Given a positive integer <b>n</b>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p><p>A student attendance record is a string that only contains the following three characters:</p><p>\n</p><ol>\n<li><b>\'A\'</b> : Absent. </li>\n<li><b>\'L\'</b> : Late.</li>\n<li> <b>\'P\'</b> : Present. </li>\n</ol><p>\nA record is regarded as rewardable if it doesn\'t contain <b>more than one \'A\' (absent)</b> or <b>more than two continuous \'L\' (late)</b>.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> n = 2\n<b>Output:</b> 8 \n<b>Explanation:</b>\nThere are 8 records with length 2 will be regarded as rewardable:\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" won\'t be regarded as rewardable owing to more than one absent times. \n</pre><p><b>Note:</b>\nThe value of <b>n</b> won\'t exceed 100,000.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int checkRecord(int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int checkRecord(int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def checkRecord(self, n):\r\n        """\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int checkRecord(int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int CheckRecord(int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar checkRecord = function(n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @return {Integer}\r\ndef check_record(n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func checkRecord(_ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkRecord(n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def checkRecord(n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(428,'Shortest Unsorted Continuous Subarray',1,'Array',0,0,'<p></p><p>Given an integer array, you need to find one <b>continuous subarray</b> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too. </p><p>You need to find the <b>shortest</b> such subarray and output its length.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [2, 6, 4, 8, 10, 9, 15]\n<b>Output:</b> 5\n<b>Explanation:</b> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>Then length of the input array is in range [1, 10,000].</li>\n<li>The input array may contain duplicates, so ascending order here means <b>&lt;=</b>. </li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findUnsortedSubarray(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: int\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def findUnsortedSubarray(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findUnsortedSubarray(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int FindUnsortedSubarray(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUnsortedSubarray = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {Integer}\ndef find_unsorted_subarray(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findUnsortedSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findUnsortedSubarray(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findUnsortedSubarray(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-sorting-accepted\">Approach #3 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-4-using-stack-accepted\">Approach #4 Using Stack [Accepted]:</a></li>\n<li><a href=\"#approach-5-without-using-extra-space-accepted\">Approach #5 Without Using Extra Space [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the brute force approach, we consider every possible subarray that can be formed from the given array <script type=\"math/tex; mode=display\">nums</script>. For every subarray <script type=\"math/tex; mode=display\">nums[i:j]</script> considered, we need to check whether this is the smallest unsorted subarray or not. Thus, for every such subarray considered, we find out the maximum and minimum values lying in that subarray given by <script type=\"math/tex; mode=display\">max</script> and <script type=\"math/tex; mode=display\">min</script> respectively.</p>\n<p>If the subarrays <script type=\"math/tex; mode=display\">nums[0:i-1]</script> and <script type=\"math/tex; mode=display\">nums[j:n-1]</script> are correctly sorted, then only <script type=\"math/tex; mode=display\">nums[i:j]</script> could be the required subrray. Further, the elements in <script type=\"math/tex; mode=display\">nums[0:i-1]</script> all need to be lesser than the <script type=\"math/tex; mode=display\">min</script> for satisfying the required condition. Similarly, all the elements in <script type=\"math/tex; mode=display\">nums[j:n-1]</script> need to be larger than <script type=\"math/tex; mode=display\">max</script>. We check for these conditions for every possible <script type=\"math/tex; mode=display\">i</script> and <script type=\"math/tex; mode=display\">j</script> selected.</p>\n<p>Further, we also need to check if <script type=\"math/tex; mode=display\">nums[0:i-1]</script> and <script type=\"math/tex; mode=display\">nums[j:n-1]</script> are sorted correctly. If all the above conditions are satisfied, we determine the length of the unsorted subarray as <script type=\"math/tex; mode=display\">j-i</script>. We do the same process for every subarray chosen and determine the length of the smallest unsorted subarray found.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findUnsortedSubarray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">,</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]);</span>\n                    <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">max</span><span class=\"o\">))</span>\n                    <span class=\"k\">continue</span><span class=\"o\">;</span>\n                <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prev</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n                    <span class=\"n\">k</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                    <span class=\"k\">continue</span><span class=\"o\">;</span>\n                <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prev</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">];</span>\n                    <span class=\"n\">k</span><span class=\"o\">++;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. Three nested loops are there.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this approach, we make use of an idea based on selection sort. We can traverse over the given <script type=\"math/tex; mode=display\">nums</script> array choosing the elements <script type=\"math/tex; mode=display\">nums[i]</script>. For every such element chosen, we try to determine its correct position in the sorted array. For this, we compare <script type=\"math/tex; mode=display\">nums[i]</script> with every <script type=\"math/tex; mode=display\">nums[j]</script>, such that <script type=\"math/tex; mode=display\">i < j < n</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of <script type=\"math/tex; mode=display\">nums</script> array.</p>\n<p>If any <script type=\"math/tex; mode=display\">nums[j]</script> happens to be lesser than <script type=\"math/tex; mode=display\">nums[i]</script>, it means both <script type=\"math/tex; mode=display\">nums[i]</script> and <script type=\"math/tex; mode=display\">nums[j]</script> aren\'t at their correct position for the sorted array. Thus, we need to swap the two elements to bring them at their correct positions. Here, instead of swapping, we just note the position of <script type=\"math/tex; mode=display\">nums[i]</script>(given by <script type=\"math/tex; mode=display\">i</script>) and <script type=\"math/tex; mode=display\">nums[j]</script>(given by <script type=\"math/tex; mode=display\">j</script>). These two elements now mark the boundary of the unsorted subarray(atleast for the time being).</p>\n<p>Thus, out of all the <script type=\"math/tex; mode=display\">nums[i]</script> chosen, we determine the leftmost <script type=\"math/tex; mode=display\">nums[i]</script> which isn\'t at its correct position. This marks the left boundary of the smallest unsorted subarray(<script type=\"math/tex; mode=display\">l</script>). Similarly, out of all the <script type=\"math/tex; mode=display\">nums[j]</script>\'s considered for all <script type=\"math/tex; mode=display\">nums[i]</script>\'s we determine the rightmost <script type=\"math/tex; mode=display\">nums[j]</script> which isn\'t at its correct position. This marks the right boundary of the smallest unsorted subarray(<script type=\"math/tex; mode=display\">r</script>).</p>\n<p><img alt=\"Unsorted_subarray\" src=\"../Figures/581/Unsorted_subarray_1.PNG\" /></p>\n<p>Thus, we can determine the length of the smallest unsorted subarray as <script type=\"math/tex; mode=display\">r - l + 1</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findUnsortedSubarray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">);</span>\n                    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. Two nested loops are there.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-sorting-accepted\">Approach #3 Using Sorting [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another very simple idea is as follows. We can sort a copy of the given array <script type=\"math/tex; mode=display\">nums</script>, say given by <script type=\"math/tex; mode=display\">nums\\_sorted</script>. Then, if we compare the elements of <script type=\"math/tex; mode=display\">nums</script> and <script type=\"math/tex; mode=display\">nums\\_sorted</script>, we can determine the leftmost and rightmost elements which mismatch. The subarray lying between them is, then, the required shorted unsorted subarray.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findUnsortedSubarray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">snums</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">clone</span><span class=\"o\">();</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">snums</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">snums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">snums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">snums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">end</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlogn)</script>. Sorting takes <script type=\"math/tex; mode=display\">nlogn</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We are making copy of original array.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-stack-accepted\">Approach #4 Using Stack [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is also based on selective sorting. We need to determine the correct position of the minimum and the maximum element in the unsorted subarray to determine the boundaries of the required unsorted subarray.</p>\n<p>To do so, in this implementation, we make use of a <script type=\"math/tex; mode=display\">stack</script>. We traverse over the <script type=\"math/tex; mode=display\">nums</script> array starting from the beginning. As we go on facing elements in ascending order(a rising slope), we keep on pushing the elements\' indices over the <script type=\"math/tex; mode=display\">stack</script>. This is done because such elements are in the correct sorted order(as it seems till now). As soon as we encounter a falling slope, i.e. an element <script type=\"math/tex; mode=display\">nums[j]</script> which is smaller than the element on the top of the <script type=\"math/tex; mode=display\">stack</script>, we know that <script type=\"math/tex; mode=display\">nums[j]</script> isn\'t at its correct position.</p>\n<p>In order to determine the correct position of <script type=\"math/tex; mode=display\">nums[j]</script>, we keep on popping the elemnents from the top of the <script type=\"math/tex; mode=display\">stack</script> until we reach the stage where the element(corresponding to the index) on the top of the <script type=\"math/tex; mode=display\">stack</script> is lesser than <script type=\"math/tex; mode=display\">nums[j]</script>. Let\'s say the popping stops when the index on <script type=\"math/tex; mode=display\">stack</script>\'s top is <script type=\"math/tex; mode=display\">k</script>. Now, <script type=\"math/tex; mode=display\">nums[j]</script> has found its correct position. It needs to lie at an index <script type=\"math/tex; mode=display\">k + 1</script>.</p>\n<p>We follow the same process while traversing over the whole array, and determine the value of minimum such <script type=\"math/tex; mode=display\">k</script>. This marks the left boundary of the unsorted subarray.</p>\n<p>Similarly, to find the right boundary of the unsorted subarray, we traverse over the <script type=\"math/tex; mode=display\">nums</script> array backwards. This time we keep on pushing the elements if we see a falling slope. As soon as we find a rising slope, we trace forwards now and determine the larger element\'s correct position. We do so for the complete array and thus, determine the right boundary.</p>\n<p>We can look at the figure below for reference. We can observe that the slopes directly indicate the relative ordering. We can also observe that the point <script type=\"math/tex; mode=display\">b</script> needs to lie just after index 0 marking the left boundary and the point <script type=\"math/tex; mode=display\">a</script> needs to lie just before index 7 marking the right boundary of the unsorted subarray.</p>\n<p><img alt=\"Unsorted_subarray\" src=\"../Figures/581/Unsorted_subarray_2.PNG\" /></p>\n<p>Below code is inpired by <a href=\"http://leetcode.com/fallcreek\">@fallcreek</a></p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findUnsortedSubarray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">());</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Stack of size <script type=\"math/tex; mode=display\">n</script> is filled.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Stack size grows upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-without-using-extra-space-accepted\">Approach #5 Without Using Extra Space [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this method is that the correct position of the minimum element in the unsorted subarray helps to determine the required left boundary. Similarly, the correct position of the maximum element in the unsorted subarray helps to determine the required right boundary.</p>\n<p>Thus, firstly we need to determine when the correctly sorted array goes wrong. We keep a track of this by observing rising slope starting from the beginning of the array. Whenever the slope falls, we know that the unsorted array has surely started. Thus, now we determine the minimum element found till the end of the array <script type=\"math/tex; mode=display\">nums</script>, given by <script type=\"math/tex; mode=display\">min</script>.</p>\n<p>Similarly, we scan the array <script type=\"math/tex; mode=display\">nums</script> in the reverse order and when the slope becomes rising instead of falling, we start looking for the maximum element till we reach the beginning of the array, given by <script type=\"math/tex; mode=display\">max</script>.</p>\n<p>Then, we traverse over <script type=\"math/tex; mode=display\">nums</script> and determine the correct position of <script type=\"math/tex; mode=display\">min</script> and <script type=\"math/tex; mode=display\">max</script> by comparing these elements with the other array elements. e.g. To determine the correct position of <script type=\"math/tex; mode=display\">min</script>, we know the initial portion of <script type=\"math/tex; mode=display\">nums</script> is already sorted. Thus, we need to find the first element which is just larger than <script type=\"math/tex; mode=display\">min</script>. Similarly, for <script type=\"math/tex; mode=display\">max</script>\'s position, we need to find the first element which is just smaller than <script type=\"math/tex; mode=display\">max</script> searching in <script type=\"math/tex; mode=display\">nums</script> backwards.</p>\n<p>We can take this figure for reference again:</p>\n<p><img alt=\"Unsorted_subarray\" src=\"../Figures/581/Unsorted_subarray_2.PNG\" /></p>\n<p>We can observe that the point <script type=\"math/tex; mode=display\">b</script> needs to lie just after index 0 marking the left boundary and the point <script type=\"math/tex; mode=display\">a</script> needs to lie just before index 7 marking the right boundary of the unsorted subarray.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findUnsortedSubarray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span>\n                <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">min</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">)</span>\n                <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">l</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">])</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">r</span><span class=\"o\">--)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">])</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Four <script type=\"math/tex; mode=display\">O(n)</script> loops are used.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(429,'Maximum Length of Pair Chain',2,'Dynamic Programming',0,0,'<p></p><p>\nYou are given <code>n</code> pairs of numbers. In every pair, the first number is always smaller than the second number.\n</p><p>\nNow, we define a pair <code>(c, d)</code> can follow another pair <code>(a, b)</code> if and only if <code>b &lt; c</code>. Chain of pairs can be formed in this fashion. \n</p><p>\nGiven a set of pairs, find the length longest chain which can be formed. You needn\'t use up all the given pairs. You can select pairs in any order.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [[1,2], [2,3], [3,4]]\n<b>Output:</b> 2\n<b>Explanation:</b> The longest chain is [1,2] -&gt; [3,4]\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The number of given pairs will be in the range [1, 1000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findLongestChain(vector<vector<int>>& pairs) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findLongestChain(int[][] pairs) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findLongestChain(self, pairs):\r\n        """\r\n        :type pairs: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findLongestChain(self, pairs):\r\n        """\r\n        :type pairs: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findLongestChain(int** pairs, int pairsRowSize, int pairsColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindLongestChain(int[,] pairs) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} pairs\r\n * @return {number}\r\n */\r\nvar findLongestChain = function(pairs) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} pairs\r\n# @return {Integer}\r\ndef find_longest_chain(pairs)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findLongestChain(_ pairs: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findLongestChain(pairs [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findLongestChain(pairs: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}\" }]',NULL,NULL,1,'none','none','none'),(430,'Sliding Window Maximum',3,'Heap',0,0,'<p></p><p>Given an array <i>nums</i>, there is a sliding window of size <i>k</i> which is moving from the very left of the array to the very right. You can only see the <i>k</i> numbers in the window. Each time the sliding window moves right by one position.</p><p>For example,<br/>\nGiven <i>nums</i> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <i>k</i> = 3.</p><pre>\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</pre><p>Therefore, return the max sliding window as <code>[3,3,5,5,6,7]</code>.</p><p><b>Note: </b><br/>\nYou may assume <i>k</i> is always valid, ie: 1 ≤ k ≤ input array\'s size for non-empty array.</p><p><b>Follow up:</b><br/>\nCould you solve it in linear time?</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maxSlidingWindow(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] MaxSlidingWindow(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar maxSlidingWindow = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Integer[]}\r\ndef max_sliding_window(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxSlidingWindow(nums []int, k int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(431,'Ones and Zeroes',2,'Dynamic Programming',0,0,'<p></p><p>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p><p>For now, suppose you are a dominator of <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code> respectively. On the other hand, there is an array with strings consisting of only <code>0s</code> and <code>1s</code>.</p><p>\nNow your task is to find the maximum number of strings that you can form with given <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code>. Each <code>0</code> and <code>1</code> can be used at most <b>once</b>.\n</p><p><b>Note:</b><br/>\n</p><ol>\n<li>The given numbers of <code>0s</code> and <code>1s</code> will both not exceed <code>100</code></li>\n<li>The size of given string array won\'t exceed <code>600</code>.</li>\n</ol><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\n<b>Output:</b> 4\n\n<b>Explanation:</b> This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\n<b>Output:</b> 2\n\n<b>Explanation:</b> You could form \"10\", but then you\'d have nothing left. Better form \"0\" and \"1\".\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMaxForm(vector<string>& strs, int m, int n) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMaxForm(self, strs, m, n):\r\n        """\r\n        :type strs: List[str]\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMaxForm(char** strs, int strsSize, int m, int n) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMaxForm(string[] strs, int m, int n) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} strs\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar findMaxForm = function(strs, m, n) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} strs\r\n# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef find_max_form(strs, m, n)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMaxForm(_ strs: [String], _ m: Int, _ n: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMaxForm(strs []string, m int, n int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMaxForm(strs: Array[String], m: Int, n: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(432,'Out of Boundary Paths',2,'Dynamic Programming,Depth-first Search',0,0,'<p></p><p>There is an <b>m</b> by <b>n</b> grid with a ball. Given the start coordinate <b>(i,j)</b> of the ball, you can move the ball to <b>adjacent</b> cell or cross the grid boundary in four directions (up, down, left, right). However, you can <b>at most</b> move <b>N</b> times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>m = 2, n = 2, N = 2, i = 0, j = 0\n<b>Output:</b> 6\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/out_of_boundary_paths_1.png\" width=\"40%\"/>\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b>m = 1, n = 3, N = 3, i = 0, j = 1\n<b>Output:</b> 12\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/out_of_boundary_paths_2.png\" width=\"37%\"/>\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>Once you move the ball out of boundary, you cannot move it back.</li>\n<li>The length and height of the grid is in range [1,50].</li>\n<li>N is in range [0,50].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int findPaths(int m, int n, int N, int i, int j) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findPaths(int m, int n, int N, int i, int j) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findPaths(self, m, n, N, i, j):\n        """\n        :type m: int\n        :type n: int\n        :type N: int\n        :type i: int\n        :type j: int\n        :rtype: int\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def findPaths(self, m, n, N, i, j):\n        """\n        :type m: int\n        :type n: int\n        :type N: int\n        :type i: int\n        :type j: int\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findPaths(int m, int n, int N, int i, int j) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int FindPaths(int m, int n, int N, int i, int j) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} m\n * @param {number} n\n * @param {number} N\n * @param {number} i\n * @param {number} j\n * @return {number}\n */\nvar findPaths = function(m, n, N, i, j) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} n\n# @param {Integer} i\n# @param {Integer} j\n# @return {Integer}\ndef find_paths(m, n, n, i, j)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findPaths(_ m: Int, _ n: Int, _ N: Int, _ i: Int, _ j: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findPaths(m int, n int, N int, i int, j int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findPaths(m: Int, n: Int, N: Int, i: Int, j: Int): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-recursion-with-memoization-accepted\">Approach #2 Recursion with memoization [Accepted]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"summary\">Summary</h2>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the brute force approach, we try to take one step in every direction and decrement the number of pending moves for each step taken. Whenever we reach out of the boundary while taking the steps, we deduce that one extra path is available to take the ball out. </p>\n<p>In order to implement the same, we make use of a recursive function <code>findPaths(m,n,N,i,j)</code> which takes the current number of moves(<script type=\"math/tex; mode=display\">N</script>) along with the current position(<script type=\"math/tex; mode=display\">(i,j)</script> as some of the parameters and returns the number of moves possible to take the ball out with the current pending moves from the current position. Now, we take a step in every direction and update the corresponding indices involved along with the current number of pending moves. </p>\n<p>Further, if we run out of moves at any moment, we return a 0 indicating that the current set of moves doesn\'t take the ball out of boundary.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPaths</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"n\">m</span> <span class=\"o\">||</span> <span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span> <span class=\"o\">||</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)+</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)+</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)+</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(4^n)</script>. Size of recursion tree will be <script type=\"math/tex; mode=display\">4^n</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of moves allowed.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-recursion-with-memoization-accepted\">Approach #2 Recursion with memoization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the brute force approach, while going through the various branches of the recursion tree, we could reach the same position with the same number of moves left. </p>\n<p>Thus, a lot of redundant function calls are made with the same set of parameters leading to a useless increase in runtime. We can remove this redundancy by making use of a memoization array, <script type=\"math/tex; mode=display\">memo</script>. <script type=\"math/tex; mode=display\">memo[i][j][k]</script> is used to store the number of possible moves leading to a path out of the boundary if the current position is given by the indices <script type=\"math/tex; mode=display\">(i, j)</script> and number of moves left is <script type=\"math/tex; mode=display\">k</script>. </p>\n<p>Thus, now if a function call with some parameters is repeated, the <script type=\"math/tex; mode=display\">memo</script> array will already contain valid values corresponding to that function call resulting in pruning of the search space.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"o\">=</span><span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPaths</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][][]</span> <span class=\"n\">memo</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">memo</span><span class=\"o\">)</span>\n            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">sl</span><span class=\"o\">:</span><span class=\"n\">l</span><span class=\"o\">)</span>\n                <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">fill</span><span class=\"o\">(</span><span class=\"n\">sl</span><span class=\"o\">,-</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPaths</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">,</span><span class=\"kt\">int</span><span class=\"o\">[][][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"n\">m</span> <span class=\"o\">||</span> <span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">n</span> <span class=\"o\">||</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span> <span class=\"o\">||</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">N</span><span class=\"o\">]&gt;=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">N</span><span class=\"o\">];</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">N</span><span class=\"o\">]=((</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">)+</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))%</span><span class=\"n\">M</span><span class=\"o\">+(</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">)+</span><span class=\"n\">findPaths</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))%</span><span class=\"n\">M</span><span class=\"o\">)%</span><span class=\"n\">M</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">N</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(m*n*N)</script>. We need to fill the <script type=\"math/tex; mode=display\">memo</script> array once with dimensions <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">N</script>. Here, <script type=\"math/tex; mode=display\">m</script>, <script type=\"math/tex; mode=display\">n</script> refer to the number of rows and columns of the given grid respectively. <script type=\"math/tex; mode=display\">N</script> refers to the total number of allowed moves.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n*N)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">m*n*N</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-accepted\">Approach #3 Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The idea behind this approach is that if we can reach some position in <script type=\"math/tex; mode=display\">x</script> moves, we can reach all its adjacent positions in <script type=\"math/tex; mode=display\">x+1</script> moves. Based on this idea, we make use of a 2-D <script type=\"math/tex; mode=display\">dp</script> array to store the number of ways in which a particular position can be reached. <script type=\"math/tex; mode=display\">dp[i][j]</script> refers to the number of ways the position corresponding to the indices <script type=\"math/tex; mode=display\">(i,j)</script> can be reached given some particular number of moves.</p>\n<p>Now, if the current <script type=\"math/tex; mode=display\">dp</script> array stores the number of ways the various positions can be reached by making use of <script type=\"math/tex; mode=display\">x-1</script> moves, in order to determine the number of ways the position <script type=\"math/tex; mode=display\">(i,j)</script> can be reached by making use of <script type=\"math/tex; mode=display\">x</script> moves, we need to update the corresponding <script type=\"math/tex; mode=display\">dp</script> entry as <script type=\"math/tex; mode=display\">dp[i][j] = dp[i-1][j] + dp[i+1][j] + dp[i][j-1] + dp[i][j+1]</script> taking care of boundary conditions. This happens because we can reach the index <script type=\"math/tex; mode=display\">(i,j)</script> from any of the four adjacent positions and the total number of ways of reaching the index <script type=\"math/tex; mode=display\">(i,j)</script> in <script type=\"math/tex; mode=display\">x</script> moves is the sum of the ways of reaching the adjacent positions in <script type=\"math/tex; mode=display\">x-1</script> moves. </p>\n<p>But, if we alter the <script type=\"math/tex; mode=display\">dp</script> array, now some of the entries will correspond to <script type=\"math/tex; mode=display\">x-1</script> moves and the updated ones will correspond to <script type=\"math/tex; mode=display\">x</script> moves. Thus, we need to find a way to tackle this issue. So, instead of updating the <script type=\"math/tex; mode=display\">dp</script> array for the current(<script type=\"math/tex; mode=display\">x</script>) moves, we make use of a temporary 2-D array <script type=\"math/tex; mode=display\">temp</script> to store the updated results for <script type=\"math/tex; mode=display\">x</script> moves, making use of the results obtained for <script type=\"math/tex; mode=display\">dp</script> array corresponding to <script type=\"math/tex; mode=display\">x-1</script> moves. After all the entries for all the positions have been considered for <script type=\"math/tex; mode=display\">x</script> moves, we update the <script type=\"math/tex; mode=display\">dp</script> array based on <script type=\"math/tex; mode=display\">temp</script>. Thus, <script type=\"math/tex; mode=display\">dp</script> now contains the entries corresponding to <script type=\"math/tex; mode=display\">x</script> moves.</p>\n<p>Thus, we start off by considering zero move available for which we make an initial entry of <script type=\"math/tex; mode=display\">dp[x][y] = 1</script>(<script type=\"math/tex; mode=display\">(x,y)</script> is the initial position), since we can reach only this position in zero move. Then, we increase the number of moves to 1 and update all the <script type=\"math/tex; mode=display\">dp</script> entries appropriately. We do so for all the moves possible from 1 to N. </p>\n<p>In order to update <script type=\"math/tex; mode=display\">count</script>, which indicates the total number of possible moves which lead an out of boundary path, we need to perform the update only when we reach the boundary. We update the count as <script type=\"math/tex; mode=display\">count = count + dp[i][j]</script>, where <script type=\"math/tex; mode=display\">(i,j)</script> corresponds to one of the boundaries. But, if <script type=\"math/tex; mode=display\">(i,j)</script> is simultaneously a part of multiple boundaries, we need to add the <script type=\"math/tex; mode=display\">dp[i][j]</script> factor multiple times(same as the number of boundaries to which <script type=\"math/tex; mode=display\">(i,j)</script> belongs).</p>\n<p>After we are done with all the <script type=\"math/tex; mode=display\">N</script> moves, <script type=\"math/tex; mode=display\">count</script> gives the required result.</p>\n<p>The following animation illustrates the process:</p>\n<p>!?!../Documents/576_Boundary_Paths.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">findPaths</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000000</span> <span class=\"o\">+</span> <span class=\"mi\">7</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"o\">[][]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">][</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">moves</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">moves</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"o\">;</span> <span class=\"n\">moves</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">];</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                    <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(((</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span> <span class=\"o\">+</span> <span class=\"o\">((</span><span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(N*m*n)</script>. We need to fill the <script type=\"math/tex; mode=display\">dp</script>$ array with dimensions <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script>\n<script type=\"math/tex; mode=display\">N</script> times. Here <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script> refers to the size of the grid and <script type=\"math/tex; mode=display\">N</script> refers to the number of moves available.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m*n)</script>. <script type=\"math/tex; mode=display\">dp</script> and <script type=\"math/tex; mode=display\">temp</script> array of size <script type=\"math/tex; mode=display\">m</script>x<script type=\"math/tex; mode=display\">n</script> are used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(433,'Set Mismatch',1,'Hash Table,Math',0,0,'<p></p><p>\nThe set <code>S</code> originally contains numbers from 1 to <code>n</code>. But unfortunately, due to the data error, one of the numbers in the set got duplicated to <b>another</b> number in the set, which results in repetition of one number and loss of another number. \n</p><p>\nGiven an array <code>nums</code> representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> nums = [1,2,2,4]\n<b>Output:</b> [2,3]\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The given array size will in the range [2, 10000].</li>\n<li>The given array\'s numbers won\'t have any order.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] findErrorNums(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findErrorNums(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: List[int]\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def findErrorNums(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: List[int]\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findErrorNums(int* nums, int numsSize, int* returnSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int[] FindErrorNums(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findErrorNums = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_error_nums(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findErrorNums(_ nums: [Int]) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findErrorNums(nums []int) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findErrorNums(nums: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-sorting-accepted\">Approach #3 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-4-using-map-accepted\">Approach #4 Using map [Accepted]</a></li>\n<li><a href=\"#approach-5-using-extra-arrayaccepted\">Approach #5 Using Extra Array[Accepted]:</a></li>\n<li><a href=\"#approach-6-using-constant-spaceaccepted\">Approach #6 Using Constant Space[Accepted]:</a></li>\n<li><a href=\"#approach-7-using-xor-accepted\">Approach #7 Using XOR [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The most naive solution is to consider each number from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>, and traverse over the whole <script type=\"math/tex; mode=display\">nums</script> array to check if the current number occurs twice in <script type=\"math/tex; mode=display\">nums</script>\nor doesn\'t occur at all. We need to set the duplicate number, <script type=\"math/tex; mode=display\">dup</script> and the missing number, <script type=\"math/tex; mode=display\">missing</script>, appropriately in such cases respectively.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n                <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">dup</span><span class=\"o\">,</span> <span class=\"n\">missing</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We traverse over the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> for each of the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p>In the last approach, we continued the search process, even when we\'ve already found the duplicate and the missing number. But, as per the problem statement, \nwe know that only one number will be repeated and only one number will be missing. Thus, we can optimize the last approach to some extent, by stopping \nthe search process as soon as we find these two required numbers.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n                <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">dup</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">missing</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">dup</span><span class=\"o\">,</span> <span class=\"n\">missing</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We traverse over the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> for each of the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>, in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-sorting-accepted\">Approach #3 Using Sorting [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>One way to further optimize the last approach is to sort the given <script type=\"math/tex; mode=display\">nums</script> array. This way, the numbers which are equal will always lie together. \nFurther, we can easily identify the missing number by checking if every two consecutive elements in the sorted <script type=\"math/tex; mode=display\">nums</script> array are just one count apart or not.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">dup</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">?</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">:</span> <span class=\"n\">missing</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlogn)</script>. Sorting takes <script type=\"math/tex; mode=display\">O(nlogn)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(logn)</script>. Sorting takes <script type=\"math/tex; mode=display\">O(logn)</script> space. </p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-map-accepted\">Approach #4 Using map [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The given problem can also be solved easily if we can somehow keep a track of the number of times each element of the <script type=\"math/tex; mode=display\">nums</script> array occurs. One way to \ndo so is to make an entry for each element of <script type=\"math/tex; mode=display\">nums</script> in a HashMap <script type=\"math/tex; mode=display\">map</script>. This <script type=\"math/tex; mode=display\">map</script> stores the entries in the form <script type=\"math/tex; mode=display\">(num_i, count_i)</script>. Here, <script type=\"math/tex; mode=display\">num</script> refers to\nthe <script type=\"math/tex; mode=display\">i^{th}</script> element in <script type=\"math/tex; mode=display\">nums</script> and <script type=\"math/tex; mode=display\">count_i</script> refers to the number of times this element occurs in <script type=\"math/tex; mode=display\">nums</script>.\n  Whenever, the same element occurs again, we can increment the count corresponding to the \nsame. </p>\n<p>After this, we can consider every number from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>, and check for its presence in <script type=\"math/tex; mode=display\">map</script>. If it isn\'t present, we can update the <script type=\"math/tex; mode=display\">missing</script> variable \nappropriately. But, if the <script type=\"math/tex; mode=display\">count</script> corresponding to the current number is <script type=\"math/tex; mode=display\">2</script>, we can update the <script type=\"math/tex; mode=display\">dup</script> variable with the current number.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Map</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span><span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n                    <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">dup</span><span class=\"o\">,</span> <span class=\"n\">missing</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Traversing over <script type=\"math/tex; mode=display\">nums</script> of size <script type=\"math/tex; mode=display\">n</script> takes <script type=\"math/tex; mode=display\">O(n)</script> time. Considering each number from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script> also takes <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">map</script> can contain atmost <script type=\"math/tex; mode=display\">n</script> entries for each of the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-using-extra-arrayaccepted\">Approach #5 Using Extra Array[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we make use of a <script type=\"math/tex; mode=display\">map</script> to store the elements of <script type=\"math/tex; mode=display\">nums</script> along with their corresponding counts. But, we can note, that each entry in <script type=\"math/tex; mode=display\">map</script> \nrequires two entries. Thus, putting up <script type=\"math/tex; mode=display\">n</script> entries requires <script type=\"math/tex; mode=display\">2n</script> space actually. We can reduce this space required to <script type=\"math/tex; mode=display\">n</script> by making use of an array, <script type=\"math/tex; mode=display\">arr</script> instead.\nNow, the indices of <script type=\"math/tex; mode=display\">arr</script> can be used instead of storing the elements again. Thus, we make use of <script type=\"math/tex; mode=display\">arr</script> in such a way that, <script type=\"math/tex; mode=display\">arr[i]</script> is used to store \nthe number of occurences of the element <script type=\"math/tex; mode=display\">i+1</script>. The rest of the process remains the same as in the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n                <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">dup</span><span class=\"o\">,</span> <span class=\"n\">missing</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Traversing over <script type=\"math/tex; mode=display\">nums</script> of size <script type=\"math/tex; mode=display\">n</script> takes <script type=\"math/tex; mode=display\">O(n)</script> time. Considering each number from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script> also takes <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">arr</script> can contain atmost <script type=\"math/tex; mode=display\">n</script> elements for each of the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-6-using-constant-spaceaccepted\">Approach #6 Using Constant Space[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can save the space used in the last approach, if we can somehow, include the information regarding the duplicacy of an element or absence of an element\n in the <script type=\"math/tex; mode=display\">nums</script> array. Let\'s see how this can be done.</p>\n<p>We know that all the elements in the given <script type=\"math/tex; mode=display\">nums</script> array are positive, and lie in the range <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script> only. Thus, we can pick up each element <script type=\"math/tex; mode=display\">i</script> \n from <script type=\"math/tex; mode=display\">nums</script>. For every number <script type=\"math/tex; mode=display\">i</script> picked up, we can invert the element at the index <script type=\"math/tex; mode=display\">\\left|i\\right|</script>. By doing so,  if one of the elements <script type=\"math/tex; mode=display\">j</script> occurs twice, \nwhen this number is encountered the second time,  the element <script type=\"math/tex; mode=display\">nums[\\left|i\\right|]</script> will be found to be negative. \nThus, while doing the inversions, we can check if a number found is already negative, to find the duplicate number.</p>\n<p>After the inversions have been done, if all the elements in <script type=\"math/tex; mode=display\">nums</script> are present correctly, the resultant <script type=\"math/tex; mode=display\">nums</script> array will have all the elements as \n negative now. But, if one of the numbers, <script type=\"math/tex; mode=display\">j</script> is missing, the element at the <script type=\"math/tex; mode=display\">j^{th}</script> index will be positive. This  can be used to determine the missing number.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">dup</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">);</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">abs</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">dup</span><span class=\"o\">,</span> <span class=\"n\">missing</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Two traversals over the <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> are done.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-7-using-xor-accepted\">Approach #7 Using XOR [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Before we dive into the solution to this problem, let\'s consider a simple problem. Consider an array with <script type=\"math/tex; mode=display\">n-1</script> elements containing numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script> with one number missing out of them. Now, how to we find out this missing element. One of the solutions is to take the XOR of all the elements of this array with all the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>. By doing so, we get the required missing number. This works because XORing a number with itself results in a 0 result. Thus, only the number which is missing can\'t get cancelled with this XORing.</p>\n<p>Now, using this idea as the base, let\'s take it a step forward and use it for the current problem. By taking the XOR of all the elements of the given <script type=\"math/tex; mode=display\">nums</script> array with all the numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>, we will get a result, <script type=\"math/tex; mode=display\">xor</script>, as <script type=\"math/tex; mode=display\">x^y</script>. Here, <script type=\"math/tex; mode=display\">x</script> and <script type=\"math/tex; mode=display\">y</script> refer to the repeated and the missing term in the given <script type=\"math/tex; mode=display\">nums</script> array. This happens on the same grounds as in the first problem discussed above.</p>\n<p>Now, in the resultant <script type=\"math/tex; mode=display\">xor</script>, we\'ll get a 1 in the binary representation only at those bit positions which have a 1 in one out of the numbers <script type=\"math/tex; mode=display\">x</script> and <script type=\"math/tex; mode=display\">y</script>, and a 0 at the same bit position in the other one. In the current solution, we consider the rightmost bit which is 1 in the <script type=\"math/tex; mode=display\">xor</script>, although any bit would work. Let\'s say, this position is called the <script type=\"math/tex; mode=display\">rightmostbit</script>. </p>\n<p>If we divide the elements of the given <script type=\"math/tex; mode=display\">nums</script> array into two parts such that the first set contains the elements which have a 1 at the <script type=\"math/tex; mode=display\">rightmostbit</script> position and the second set contains the elements having a 0 at the same position, we\'ll get one out of <script type=\"math/tex; mode=display\">x</script> or <script type=\"math/tex; mode=display\">y</script> in one set and the other one in the second set. Now, our problem has reduced somewhat to the simple problem discussed above.</p>\n<p>To solve this reduced problem, we can find out the elements from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script> and consider them as a part of the previous sets only, with the allocation of the set depending on a 1 or 0 at the <script type=\"math/tex; mode=display\">righmostbit</script> position. </p>\n<p>Now, if we do the XOR of all the elements of the first set, all the elements will result in an XOR of 0, due to cancellation of the similar terms in both <script type=\"math/tex; mode=display\">nums</script> and the numbers <script type=\"math/tex; mode=display\">(1:n)</script>, except one term, which is either <script type=\"math/tex; mode=display\">x</script> or <script type=\"math/tex; mode=display\">y</script>. </p>\n<p>For the other term, we can do the XOR of all the elements in the second set as well.</p>\n<p>Consider the example <code>[1 2 4 4 5 6]</code></p>\n<p><img alt=\"XOR\" src=\"../Figures/645_Set_Mismatch.PNG\" /></p>\n<p>One more traversal over the <script type=\"math/tex; mode=display\">nums</script> can be used to identify the missing and the repeated number out of the two numbers found.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">findErrorNums</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">xor</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">xor0</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">xor1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span>\n            <span class=\"n\">xor</span> <span class=\"o\">^=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">xor</span> <span class=\"o\">^=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rightmostbit</span> <span class=\"o\">=</span> <span class=\"n\">xor</span> <span class=\"o\">&amp;</span> <span class=\"o\">~(</span><span class=\"n\">xor</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">&amp;</span> <span class=\"n\">rightmostbit</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">xor1</span> <span class=\"o\">^=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">xor0</span> <span class=\"o\">^=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"n\">rightmostbit</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">xor1</span> <span class=\"o\">^=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">xor0</span> <span class=\"o\">^=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">xor0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">xor0</span><span class=\"o\">,</span> <span class=\"n\">xor1</span><span class=\"o\">};</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"n\">xor1</span><span class=\"o\">,</span> <span class=\"n\">xor0</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over <script type=\"math/tex; mode=display\">n</script> elements five times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(434,'Product of Array Except Self',2,'Array',0,0,'<p></p><p>\nGiven an array of <i>n</i> integers where <i>n</i> &gt; 1, <code>nums</code>, return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><p>Solve it <b>without division</b> and in O(<i>n</i>).</p><p>For example, given <code>[1,2,3,4]</code>, return <code>[24,12,8,6]</code>.\n\n</p><p><b>Follow up:</b><br/>\nCould you solve it with constant space complexity? (Note: The output array <b>does not</b> count as extra space for the purpose of space complexity analysis.)</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> productExceptSelf(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def productExceptSelf(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* productExceptSelf(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] ProductExceptSelf(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar productExceptSelf = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef product_except_self(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func productExceptSelf(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(435,'Matchsticks to Square',2,'Depth-first Search',0,0,'<p></p><p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used <b>exactly</b> one time.</p><p> Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,1,2,2,2]\n<b>Output:</b> true\n\n<b>Explanation:</b> You can form a square with length 2, one side of the square came two sticks with length 1.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [3,3,3,3,4]\n<b>Output:</b> false\n\n<b>Explanation:</b> You cannot find a way to form a square with all the matchsticks.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length sum of the given matchsticks is in the range of <code>0</code> to <code>10^9</code>.\n</li><li>The length of the given matchstick array will not exceed <code>15</code>.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool makesquare(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean makesquare(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def makesquare(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool makesquare(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool Makesquare(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar makesquare = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef makesquare(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func makesquare(_ nums: [Int]) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func makesquare(nums []int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def makesquare(nums: Array[Int]): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(436,'Largest Rectangle in Histogram',3,'Array,Stack',0,0,'<p></p><p>\nGiven <i>n</i> non-negative integers representing the histogram\'s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n</p><p>\n<img src=\"https://leetcode.com/static/images/problemset/histogram.png\"/><br/>\n</p><p style=\"font-size: 11px\">Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p><p>\n<img src=\"https://leetcode.com/static/images/problemset/histogram_area.png\"/><br/>\n</p><p style=\"font-size: 11px\">The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p><p>\nFor example,<br/>\nGiven heights = <code>[2,1,5,6,2,3]</code>,<br/>\nreturn <code>10</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int largestRectangleArea(vector<int>& heights) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def largestRectangleArea(self, heights):\r\n        """\r\n        :type heights: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int largestRectangleArea(int* heights, int heightsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int LargestRectangleArea(int[] heights) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} heights\r\n * @return {number}\r\n */\r\nvar largestRectangleArea = function(heights) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} heights\r\n# @return {Integer}\r\ndef largest_rectangle_area(heights)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func largestRectangleArea(_ heights: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func largestRectangleArea(heights []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(437,'Distribute Candies',1,'Hash Table',0,0,'<p>Given an integer array with <b>even</b> length, where different numbers in this array represent different <b>kinds</b> of candies. Each number means one candy of the corresponding kind. You need to distribute these candies <b>equally</b> in number to brother and sister. Return the maximum number of <b>kinds</b> of candies the sister could gain. \n\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> candies = [1,1,2,2,3,3]\n<b>Output:</b> 3\n<b>Explanation:</b>\nThere are three different kinds of candies (1, 2 and 3), and two candies for each kind.\nOptimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. \nThe sister has three different kinds of candies. \n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> candies = [1,1,2,3]\n<b>Output:</b> 2\n<b>Explanation:</b> For example, the sister has candies [2,3] and the brother has candies [1,1]. \nThe sister has two different kinds of candies, the brother has only one kind of candies. \n</pre><p><b>Note:</b>\n</p><ol>\n<li>The length of the given array is in range [2, 10,000], and will be even.</li>\n<li>The number in given array is in range [-100,000, 100,000].</li>\n<ol>\n</ol></ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int distributeCandies(vector<int>& candies) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int distributeCandies(int[] candies) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def distributeCandies(self, candies):\r\n        """\r\n        :type candies: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def distributeCandies(self, candies):\r\n        """\r\n        :type candies: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int distributeCandies(int* candies, int candiesSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int DistributeCandies(int[] candies) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} candies\r\n * @return {number}\r\n */\r\nvar distributeCandies = function(candies) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} candies\r\n# @return {Integer}\r\ndef distribute_candies(candies)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func distributeCandies(_ candies: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func distributeCandies(candies []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def distributeCandies(candies: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]:</a></li>\n<li><a href=\"#approach-3-using-sortingaccepted\">Approach #3  Using sorting[Accepted]</a></li>\n<li><a href=\"#approach-4-using-set-accepted\">Approach #4 Using set [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The brute force approach is really simple. We can generate all the permutations of the given <script type=\"math/tex; mode=display\">nums</script> array representing the candies and determine the number of unique elements in the first half of the generated array.</p>\n<p>In order to determine the number of unique elements in the first half of the array, we put all the required elements in a set and count the number of elements in the set. We count such unique elements in the first half of the generated arrays for all the permutations possible and return the size of the largest set.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">max_kind</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">distributeCandies</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_kind</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">permute</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">max_kind</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max_kind</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n            <span class=\"n\">permute</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">];</span>\n        <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n!)</script>. A total of <script type=\"math/tex; mode=display\">n!</script> permutations are possible for <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script>. </p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of the recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Before looking into the idea behind this approach, firstly we need to observe one point. The maximum no. of unique candies which the girl can obtain could be atmost <script type=\"math/tex; mode=display\">n/2</script>, where <script type=\"math/tex; mode=display\">n</script> refers to the number of candies. Further, in case the number of unique candies are below <script type=\"math/tex; mode=display\">n/2</script>, to maximize the number of unique candies that the girl will obtain, we\'ll assign all the unique candies to the girl. Thus, in such a case, the number of unique candies the girl gets is equal to the total number of unique candies in the given <script type=\"math/tex; mode=display\">candies</script> array. </p>\n<p>Now, let\'s look at the idea behind this approach. We need to find the total number of unique candies in the given <script type=\"math/tex; mode=display\">candies</script> array. One way to find the number of unique candies is to traverse over the given <script type=\"math/tex; mode=display\">candies</script> array. Whenever we encounter an element, say <script type=\"math/tex; mode=display\">candies[j]</script>, we can mark all the elements which are the same as <script type=\"math/tex; mode=display\">candies[j]</script> as invalid and increment the count of unique elements by 1.</p>\n<p>Thus, we need to do such markings for all the elements of <script type=\"math/tex; mode=display\">candies</script> array. At the end, <script type=\"math/tex; mode=display\">count</script> gives the required number of unique candies that can be given to the girl. Further, the value to be returned is given by: <script type=\"math/tex; mode=display\">\\text{min}(\\frac{n}{2}, count)</script>. Instead of finding the <script type=\"math/tex; mode=display\">\\text{min}</script>, we can stop the traversal over the given <script type=\"math/tex; mode=display\">candies</script> array as soon as the <script type=\"math/tex; mode=display\">count</script> exceeds <script type=\"math/tex; mode=display\">\\frac{n}{2}</script>. </p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">distributeCandies</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">candies</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">candies</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"n\">candies</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">candies</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span>\n                        <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. We traverse over all the elements of <script type=\"math/tex; mode=display\">candies</script> for every new element found. In the worst case, we do so for every element of <script type=\"math/tex; mode=display\">candies</script> array. <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">candies</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-sortingaccepted\">Approach #3  Using sorting[Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can sort the given <script type=\"math/tex; mode=display\">candies</script> array and find out the elements which are unique by comparing the adjacent elements of the sorted array. For every new element found(which isn\'t the same as the previous element), we need to update the <script type=\"math/tex; mode=display\">count</script>. At the end, we can return the required result as <script type=\"math/tex; mode=display\">\\text{min}(n/2, count)</script>, as discussed in the previous approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">distributeCandies</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">candies</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">candies</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"n\">candies</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">candies</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(nlogn)</script>. Sorting takes <script type=\"math/tex; mode=display\">O(nlogn)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-set-accepted\">Approach #4 Using set [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another way to find the number of unique elements is to traverse over all the elements of the given <script type=\"math/tex; mode=display\">candies</script> array and keep on putting the elements in a set. By the property of a set, it will contain only unique elements. At the end, we can count the number of elements in the set, given by, say <script type=\"math/tex; mode=display\">count</script>. The value to be returned will again be given by <script type=\"math/tex; mode=display\">\\text{min}(count, n/2)</script>, as discussed in previous approaches. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of the <script type=\"math/tex; mode=display\">candies</script> array.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">distributeCandies</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">candies</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">candy</span><span class=\"o\">:</span> <span class=\"n\">candies</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">candy</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">(),</span> <span class=\"n\">candies</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The entire <script type=\"math/tex; mode=display\">candies</script> array is traversed only once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the size of <script type=\"math/tex; mode=display\">candies</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">set</script> will be of size <script type=\"math/tex; mode=display\">n</script> in the worst case.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(438,'Maximum Average Subarray I',1,'Array',0,0,'<p></p><p>\nGiven an array consisting of <code>n</code> integers, find the contiguous subarray of given length <code>k</code> that has the maximum average value. And you need to output the maximum average value.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,12,-5,-6,50,3], k = 4\n<b>Output:</b> 12.75\n<b>Explanation:</b> Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000.</li>\n<li>Elements of the given array will be in the range [-10,000, 10,000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    double findMaxAverage(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMaxAverage(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def findMaxAverage(self, nums, k):\r\n        """\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"double findMaxAverage(int* nums, int numsSize, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public double FindMaxAverage(int[] nums, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findMaxAverage = function(nums, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Float}\r\ndef find_max_average(nums, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMaxAverage(nums []int, k int) float64 {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-cumulative-sum-accepted\">Approach #2 Cumulative Sum [Accepted]</a></li>\n<li><a href=\"#approach-3-sliding-window-accepted\">Approach #3 Sliding Window [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The naive solution is to consider every possible subarray with length equal to <script type=\"math/tex; mode=display\">k</script>, and to find out the maximum average possible from out of these subarrays chosen.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">double</span> <span class=\"nf\">findMaxAverage</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">double</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">s</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">double</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"n\">k</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. We traverse over subarrays of length <script type=\"math/tex; mode=display\">k</script>  for a total of <script type=\"math/tex; mode=display\">n-k</script> times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-cumulative-sum-accepted\">Approach #2 Cumulative Sum [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We know that in order to obtain the averages of subarrays with length <script type=\"math/tex; mode=display\">k</script>, we need to obtain the sum of these <script type=\"math/tex; mode=display\">k</script> length subarrays. One of the methods of obtaining this sum is to make use of a cumulative sum array, <script type=\"math/tex; mode=display\">sum</script>, which is populated only once. Here, <script type=\"math/tex; mode=display\">sum[i]</script> is used to store the sum of the elements of the given <script type=\"math/tex; mode=display\">nums</script> array from the first element upto the element at the <script type=\"math/tex; mode=display\">i^{th}</script> index.</p>\n<p>Once the <script type=\"math/tex; mode=display\">sum</script> array has been filled up, in order to find the sum of elements from the index <script type=\"math/tex; mode=display\">i</script> to <script type=\"math/tex; mode=display\">i+k</script>, all we need to do is to use: <script type=\"math/tex; mode=display\">sum[i] - sum[i-k]</script>. Thus, now, by doing one more iteration over the <script type=\"math/tex; mode=display\">sum</script> array, we can determine the maximum average possible from the subarrays of length <script type=\"math/tex; mode=display\">k</script>.</p>\n<p>The following animation illustrates the process for a simple example.</p>\n<p>!?!../Documents/643_Maximum_Average.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">double</span> <span class=\"nf\">findMaxAverage</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n        <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"kt\">double</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"n\">k</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">sum</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">k</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"n\">k</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over the <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script> once to fill the <script type=\"math/tex; mode=display\">sum</script> array. Then, we iterate over <script type=\"math/tex; mode=display\">n-k</script> elements of <script type=\"math/tex; mode=display\">sum</script> to determine the required result.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We make use of a <script type=\"math/tex; mode=display\">sum</script> array of length <script type=\"math/tex; mode=display\">n</script> to store the cumulative sum.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-sliding-window-accepted\">Approach #3 Sliding Window [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of creating a cumulative sum array first, and then traversing over it to determine the required sum, we can simply traverse over <script type=\"math/tex; mode=display\">nums</script> just once, and on the go keep on determining the sums possible for the subarrays of length <script type=\"math/tex; mode=display\">k</script>. To understand the idea, assume that we already know the sum of elements from index <script type=\"math/tex; mode=display\">i</script> to index <script type=\"math/tex; mode=display\">i+k</script>, say it is <script type=\"math/tex; mode=display\">x</script>.. Now, to determine the sum of elements from the index <script type=\"math/tex; mode=display\">i+1</script> to the index <script type=\"math/tex; mode=display\">i+k+1</script>, all we need to do is to subtract the element <script type=\"math/tex; mode=display\">nums[i]</script> from <script type=\"math/tex; mode=display\">x</script> and to add the element <script type=\"math/tex; mode=display\">nums[i+k+1]</script> to <script type=\"math/tex; mode=display\">x</script>. We can carry out our process based on this idea and determine the maximum possible average.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">double</span> <span class=\"nf\">findMaxAverage</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">double</span> <span class=\"n\">sum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">k</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">sum</span><span class=\"o\">+=</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"kt\">double</span> <span class=\"n\">res</span><span class=\"o\">=</span><span class=\"n\">sum</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"n\">sum</span><span class=\"o\">+=</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]-</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">];</span>\n                <span class=\"n\">res</span><span class=\"o\">=</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span><span class=\"n\">sum</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">/</span><span class=\"n\">k</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over the given <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script> once only.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(439,'Freedom Trail',3,'Depth-first Search,Divide and Conquer,Dynamic Programming',0,0,'<p></p><p>\nIn the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\", and use the dial to spell a specific keyword in order to open the door. \n</p><p>\nGiven a string <b>ring</b>, which represents the code engraved on the outer ring and another string <b>key</b>, which represents the keyword needs to be spelled. You need to find the <b>minimum</b> number of steps in order to spell all the characters in the keyword.\n</p>\nInitially, the first character of the <b>ring</b> is aligned at 12:00 direction. You need to spell all the characters in the string <b>key</b> one by one by rotating the ring clockwise or anticlockwise to make each character of the string <b>key</b> aligned at 12:00 direction and then by pressing the center button.\n<br/>\n\nAt the stage of rotating the ring to spell the key character <b>key[i]</b>:\n<ol>\n<li>You can rotate the <b>ring</b> clockwise or anticlockwise <b>one place</b>, which counts as 1 step. The final purpose of the rotation is to align one of the string <b>ring\'s</b> characters at the 12:00 direction, where this character must equal to the character <b>key[i]</b>.\n\n</li><li>If the character <b>key[i]</b> has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you\'ve finished all the spelling.</li>\n</ol><p><b>Example:</b><br/>\n</p><center>\n<img src=\"https://leetcode.com/static/images/problemset/ring.jpg\" width=\"26%\"/>\n</center><pre>\n<b>Input:</b> ring = \"godding\", key = \"gd\"\n<b>Output:</b> 4\n<b>Explanation:</b> For the first key character \'g\', since it is already in place, we just need 1 step to spell this character.  For the second key character \'d\', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\". Also, we need 1 more step for spelling. So the final output is 4.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>Length of both ring and <b>key</b> will be in range 1 to 100.</li>\n<li>There are only lowercase letters in both strings and might be some duplcate characters in both strings.</li>\n<li>It\'s guaranteed that string <b>key</b> could always be spelled by rotating the string <b>ring</b>.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int findRotateSteps(string ring, string key) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findRotateSteps(String ring, String key) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findRotateSteps(self, ring, key):\n        """\n        :type ring: str\n        :type key: str\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findRotateSteps(char* ring, char* key) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int FindRotateSteps(string ring, string key) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} ring\n * @param {string} key\n * @return {number}\n */\nvar findRotateSteps = function(ring, key) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} ring\n# @param {String} key\n# @return {Integer}\ndef find_rotate_steps(ring, key)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findRotateSteps(_ ring: String, _ key: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findRotateSteps(ring string, key string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findRotateSteps(ring: String, key: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(440,'Word Search II',3,'Backtracking,Trie',0,0,'<p></p><p>\nGiven a 2D board and a list of words from the dictionary, find all words in the board.\n</p><p>\nEach word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n</p><p>\nFor example,<br/>\nGiven <b>words</b> = <code>[\"oath\",\"pea\",\"eat\",\"rain\"]</code> and <b>board</b> = \n</p><pre>\n[\n  [\'<span style=\"color:#d70\">o</span>\',\'<span style=\"color:#d70\">a</span>\',\'a\',\'n\'],\n  [\'e\',\'<span style=\"color:#d30\">t</span>\',\'<span style=\"color:#d00\">a</span>\',\'<span style=\"color:#d00\">e</span>\'],\n  [\'i\',\'<span style=\"color:#d70\">h</span>\',\'k\',\'r\'],\n  [\'i\',\'f\',\'l\',\'v\']\n]\n</pre>\n\nReturn <code>[\"eat\",\"oath\"]</code>.\n\n\n<p>\n<b>Note:</b><br/>\nYou may assume that all inputs are consist of lowercase letters <code>a-z</code>.\n</p><p class=\"showspoilers\"><a href=\"#\" onclick=\"showSpoilers(this); return false;\">click to show hint.</a></p><div class=\"spoilers\"><p>You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?</p>\n<p>If the current candidate does not exist in all words\' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first.</p>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> findWords(char[][] board, String[] words) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findWords(self, board, words):\r\n        """\r\n        :type board: List[List[str]]\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findWords(char** board, int boardRowSize, int boardColSize, char** words, int wordsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> FindWords(char[,] board, string[] words) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @param {string[]} words\r\n * @return {string[]}\r\n */\r\nvar findWords = function(board, words) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @param {String[]} words\r\n# @return {String[]}\r\ndef find_words(board, words)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findWords(board [][]byte, words []string) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(441,'Concatenated Words',3,'Dynamic Programming,Trie,Depth-first Search',0,0,'<p>Given a list of words (<b>without duplicates</b>), please write a program that returns all concatenated words in the given list of words.\n</p><p>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n\n<b>Output:</b> [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n\n<b>Explanation:</b> \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; <br/> \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; <br/>\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The number of elements of the given array will not exceed <code>10,000 </code>\n</li><li>The length sum of elements in the given array will not exceed <code>600,000</code>. </li>\n<li>All the input string will only include lower case letters.</li>\n<li>The returned elements order does not matter. </li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<String> findAllConcatenatedWordsInADict(String[] words) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findAllConcatenatedWordsInADict(self, words):\r\n        """\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findAllConcatenatedWordsInADict(char** words, int wordsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<string> FindAllConcatenatedWordsInADict(string[] words) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string[]} words\r\n * @return {string[]}\r\n */\r\nvar findAllConcatenatedWordsInADict = function(words) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\r\n# @return {String[]}\r\ndef find_all_concatenated_words_in_a_dict(words)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findAllConcatenatedWordsInADict(_ words: [String]) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findAllConcatenatedWordsInADict(words []string) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findAllConcatenatedWordsInADict(words: Array[String]): List[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(442,'Delete Node in a Linked List',1,'Linked List',0,0,'<p></p><p>\nWrite a function to delete a node (except the tail) in a singly linked list, given only access to that node.\n</p><p>\nSupposed the linked list is <code>1 -&gt; 2 -&gt; 3 -&gt; 4</code> and you are given the third node with value <code>3</code>, the linked list should become <code>1 -&gt; 2 -&gt; 4</code> after calling your function.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void deleteNode(ListNode* node) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public void deleteNode(ListNode node) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteNode(self, node):\r\n        """\r\n        :type node: ListNode\r\n        :rtype: void Do not return anything, modify node in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nvoid deleteNode(struct ListNode* node) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void DeleteNode(ListNode node) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} node\r\n * @return {void} Do not return anything, modify node in-place instead.\r\n */\r\nvar deleteNode = function(node) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} node\r\n# @return {Void} Do not return anything, modify node in-place instead.\r\ndef delete_node(node)\r\n    \r\nend\" }]','<h2 id=\"solution\">Solution</h2>\n<h4 id=\"approach-swap-with-next-node-accepted\">Approach: Swap with Next Node [Accepted]</h4>\n<p>The usual way of deleting a node <code>node</code> from a linked list is to modify the <code>next</code> pointer of the node <em>before</em> it, to point to the node <em>after</em> it.</p>\n<p><img src= \"https://leetcode.com/media/original_images/237_LinkedList.png\" width=\"400\" /></p>\n<p>Since we do not have access to the node <em>before</em> the one we want to delete, we cannot modify the <code>next</code> pointer of that node in any way. Instead, we have to replace the value of the node we want to delete with the value in the node after it, and then delete the node after it.</p>\n<p><img src=\"https://leetcode.com/media/original_images/237_LinkedList2.png\" width=\"400\" /></p>\n<p><img src=\"https://leetcode.com/media/original_images/237_LinkedList3.png\" width=\"400\" /></p>\n<p><img src=\"https://leetcode.com/media/original_images/237_LinkedList4.png\" width=\"330\" /></p>\n<p>Because we know that the node we want to delete is not the tail of the list, we can guarantee that this approach is possible.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">deleteNode</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n    <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Time and space complexity are both <script type=\"math/tex; mode=display\">O(1)</script>.</p>\n<p>Analysis written by: @noran</p>',NULL,1,'none','none','none'),(443,'Remove Duplicates from Sorted List',1,'Linked List',0,0,'<p></p><p>\nGiven a sorted linked list, delete all duplicates such that each element appear only <i>once</i>.\n</p><p>\nFor example,<br/>\nGiven <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br/>\nGiven <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* deleteDuplicates(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteDuplicates(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode DeleteDuplicates(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar deleteDuplicates = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef delete_duplicates(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}\" }]','<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"straight-forward-approach-accepted\">Straight-Forward Approach [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This is a simple problem that merely tests your ability to manipulate list node pointers. Because the input list is sorted, we can determine if a node is a duplicate by comparing its value to the node <em>after</em> it in the list. If it is a duplicate, we change the <code>next</code> pointer of the current node so that it skips the next node and points directly to the one after the next node.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"n\">ListNode</span> <span class=\"nf\">deleteDuplicates</span><span class=\"o\">(</span><span class=\"n\">ListNode</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ListNode</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">current</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">val</span> <span class=\"o\">==</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<p>Because each node in the list is checked exactly once to determine if it is a duplicate or not, the total run time is <script type=\"math/tex; mode=display\">O(n)</script>, where <script type=\"math/tex; mode=display\">n</script> is the number of nodes in the list.</p>\n<p>Space complexity is <script type=\"math/tex; mode=display\">O(1)</script> since no additional space is used.</p>\n<p><strong>Correctness</strong></p>\n<p>We can prove the correctness of this code by defining a <em>loop invariant</em>. A loop invariant is condition that is true before and after every iteration of the loop. In this case, a loop invariant that helps us prove correctness is this:</p>\n<blockquote>\n<p>All nodes in the list up to the pointer <code>current</code> do not contain duplicate elements.</p>\n</blockquote>\n<p>We can prove that this condition is indeed a loop invariant by induction. Before going into the loop, <code>current</code> points to the head of the list. Therefore, the part of the list up to <code>current</code> contains only the head. And so it can not contain any duplicate elements. Now suppose <code>current</code> is now pointing to some node in the list (but not the last element), and the part of the list up to <code>current</code> contains no duplicate elements. After another loop iteration, one of two things happen.</p>\n<ol>\n<li>\n<p><code>current.next</code> was a duplicate of <code>current</code>. In this case, the duplicate node at <code>current.next</code> is deleted, and <code>current</code> stays pointing to the same node as before. Therefore, the condition still holds; there are still no duplicates up to <code>current</code>.</p>\n</li>\n<li>\n<p><code>current.next</code> was not a duplicate of <code>current</code> (and, because the list is sorted, <code>current.next</code> is also not a duplicate of any other element appearing <em>before</em> <code>current</code>). In this case, <code>current</code> moves forward one step to point to <code>current.next</code>. Therefore, the condition still holds; there are no duplicates up to <code>current</code>.</p>\n</li>\n</ol>\n<p>At the last iteration of the loop, <code>current</code> must point to the last element, because afterwards, <code>current.next = null</code>. Therefore, after the loop ends, all elements up to the last element do not contain duplicates.</p>\n<p>Analysis written by: @noran.</p>',NULL,1,'none','none','none'),(444,'Find Bottom Left Tree Value',2,'Tree,Depth-first Search,Breadth-first Search',0,0,'<p></p><p>\nGiven a binary tree, find the leftmost value in the last row of the tree. \n</p><p><b>Example 1:</b><br/>\n</p><pre>\nInput:\n\n    2\n   / \\\n  1   3\n\nOutput:\n1\n</pre><p> <b> Example 2: </b><br/>\n</p><pre>\nInput:\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\nOutput:\n7\n</pre><p><b>Note:</b>\nYou may assume the tree (i.e., the given root node) is not <b>NULL</b>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int findBottomLeftValue(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findBottomLeftValue(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint findBottomLeftValue(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int FindBottomLeftValue(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar findBottomLeftValue = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef find_bottom_left_value(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func findBottomLeftValue(_ root: TreeNode?) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findBottomLeftValue(root *TreeNode) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findBottomLeftValue(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(445,'Solve the Equation',2,'Math',0,0,'<p></p><p>\nSolve a given equation and return the value of <code>x</code> in the form of string \"x=#value\". The equation contains only \'+\', \'-\' operation, the variable <code>x</code> and its coefficient.\n</p><p>\nIf there is no solution for the equation, return \"No solution\".\n</p><p>\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\n</p><p>\nIf there is exactly one solution for the equation, we ensure that the value of <code>x</code> is an integer.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"x+5-3+x=6+x-2\"\n<b>Output:</b> \"x=2\"\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"x=x\"\n<b>Output:</b> \"Infinite solutions\"\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> \"2x=x\"\n<b>Output:</b> \"x=0\"\n</pre><p><b>Example 4:</b><br/>\n</p><pre>\n<b>Input:</b> \"2x+3x-6x=x+2\"\n<b>Output:</b> \"x=-1\"\n</pre><p><b>Example 5:</b><br/>\n</p><pre>\n<b>Input:</b> \"x=x+2\"\n<b>Output:</b> \"No solution\"\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string solveEquation(string equation) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String solveEquation(String equation) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def solveEquation(self, equation):\r\n        """\r\n        :type equation: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def solveEquation(self, equation):\r\n        """\r\n        :type equation: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* solveEquation(char* equation) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string SolveEquation(string equation) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} equation\r\n * @return {string}\r\n */\r\nvar solveEquation = function(equation) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} equation\r\n# @return {String}\r\ndef solve_equation(equation)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func solveEquation(_ equation: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func solveEquation(equation string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def solveEquation(equation: String): String = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-partioning-coefficients-accepted\">Approach #1 Partioning Coefficients [Accepted]</a></li>\n<li><a href=\"#approach-2-using-regex-for-spliting-accepted\">Approach #2 Using regex for spliting [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-partioning-coefficients-accepted\">Approach #1 Partioning Coefficients [Accepted]</h4>\n<p>In the current approach, we start by splitting the given <script type=\"math/tex; mode=display\">equation</script> based on <code>=</code> sign. This way, we\'ve separated the left and right hand side of this equation. Once this is done, we need to extract the individual elements(i.e. <code>x</code>\'s and the numbers) from both sides of the equation. To do so, we make use of <code>breakIt</code> function, in which we traverse over the given equation(either left hand side or right hand side), and put the separated parts into an array. </p>\n<p>Now, the idea is as follows. We treat the given equation as if we\'re bringing all the <code>x</code>\'s on the left hand side and all the rest of the numbers on the right hand side as done below for an example.</p>\n<p><code>x+5-3+x=6+x-2</code></p>\n<p><code>x+x-x=6-2-5+3</code></p>\n<p>Thus, every <code>x</code> in the left hand side of the given equation is treated as positive, while that on the right hand side is treated as negative, in the current implementation. </p>\n<p>Likewise, every number on the left hand side is treated as negative, while that on the right hand side is treated as positive. Thus, by doing so, we obtain all the <code>x</code>\'s in the new <script type=\"math/tex; mode=display\">lhs</script> and all the numbers in the new <script type=\"math/tex; mode=display\">rhs</script> of the original equation. </p>\n<p>Further, in case of an <code>x</code>, we also need to find its corresponding coefficients in order to evaluate the final effective coefficient of <code>x</code> on the left hand side. We also evaluate the final effective number on the right hand side as well.</p>\n<p>Now, in case of a unique solution, the ratio of the effective <script type=\"math/tex; mode=display\">rhs</script> and <script type=\"math/tex; mode=display\">lhs</script> gives the required result. In case of infinite solutions, both the effective <script type=\"math/tex; mode=display\">lhs</script> and <script type=\"math/tex; mode=display\">rhs</script> turns out to be zero e.g. <code>x+1=x+1</code>. In case of no solution, the coefficient of <code>x</code>(<script type=\"math/tex; mode=display\">lhs</script>) turns out to be zero, but the effective number on the <script type=\"math/tex; mode=display\">rhs</script> is non-zero.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">coeff</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;1&quot;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">solveEquation</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">equation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"n\">equation</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;=&quot;</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">breakIt</span><span class=\"o\">(</span><span class=\"n\">lr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">lhs</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">coeff</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">rhs</span> <span class=\"o\">-=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">breakIt</span><span class=\"o\">(</span><span class=\"n\">lr</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">lhs</span> <span class=\"o\">-=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">coeff</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">));</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">rhs</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;Infinite solutions&quot;</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;No solution&quot;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"s\">&quot;x=&quot;</span> <span class=\"o\">+</span> <span class=\"n\">rhs</span> <span class=\"o\">/</span> <span class=\"n\">lhs</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">breakIt</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">String</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;+&#39;</span> <span class=\"o\">||</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">);</span>\n                <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Generating cofficients and findinn $lhs<script type=\"math/tex; mode=display\"> and </script>rhs<script type=\"math/tex; mode=display\"> will take </script>O(n)$$.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. ArrayList <script type=\"math/tex; mode=display\">res</script> size can grow upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-regex-for-spliting-accepted\">Approach #2 Using regex for spliting [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we made use of a new function <code>breakIt</code> to obtain the individual components of either the left hand side or the right hand side. Instead of doing so, we can also make use of splitting based on <code>+</code> or <code>-</code> sign, to obtain the individual elements. The rest of the process remains the same as in the last approach. </p>\n<p>In order to do the splitting, we make use of an expression derived from regular expressions(regex). Simply speaking, regex is a functionality used to match a target string based on some given criteria. The ?=n quantifier, in regex, matches any string that is followed by a specific string <script type=\"math/tex; mode=display\">n</script>. What it\'s saying is that the captured match must be followed by <script type=\"math/tex; mode=display\">n</script> but the <script type=\"math/tex; mode=display\">n</script> itself isn\'t captured.</p>\n<p>By making use of this kind of expression in the <code>split</code> functionality, we make sure that the partitions are obtained such that the <code>+</code> or <code>-</code> sign remains along with the parts(numbers or coefficients) even after the splitting.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">coeff</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;1&quot;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">solveEquation</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">equation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"n\">equation</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;=&quot;</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">lr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;(?=\\\\+)|(?=-)&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n                <span class=\"n\">lhs</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">coeff</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">rhs</span> <span class=\"o\">-=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">lr</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;(?=\\\\+)|(?=-)&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"n\">lhs</span> <span class=\"o\">-=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">coeff</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">));</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">rhs</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;Infinite solutions&quot;</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"s\">&quot;No solution&quot;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span>\n            <span class=\"k\">return</span> <span class=\"s\">&quot;x=&quot;</span> <span class=\"o\">+</span> <span class=\"n\">rhs</span> <span class=\"o\">/</span> <span class=\"n\">lhs</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Generating coefficients and finding $lhs<script type=\"math/tex; mode=display\"> and </script>rhs<script type=\"math/tex; mode=display\"> will take </script>O(n)$$.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. ArrayList <script type=\"math/tex; mode=display\">res</script> size can grow upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(446,'Verify Preorder Serialization of a Binary Tree',2,'Stack',0,0,'<p></p><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node\'s value. If it is a null node, we record using a sentinel value such as <code>#</code>.</p><pre>\n     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre><p>For example, the above binary tree can be serialized to the string <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>, where <code>#</code> represents a null node.\n</p><p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p><p>Each comma separated value in the string must be either an integer or a character <code>\'#\'</code> representing <code>null</code> pointer.</p><p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as <code>\"1,,3\"</code>.</p><p><strong>Example 1:</strong><br/>\n<code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code><br/>\nReturn <code>true</code></p><p><strong>Example 2:</strong><br/>\n<code>\"1,#\"</code><br/>\nReturn <code>false</code></p><p><strong>Example 3:</strong><br/>\n<code>\"9,#,#,1\"</code><br/>\nReturn <code>false</code></p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://leetcode.com/discuss/user/dietpepsi\">@dietpepsi</a> for adding this problem and creating all test cases.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool isValidSerialization(string preorder) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean isValidSerialization(String preorder) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def isValidSerialization(self, preorder):\r\n        """\r\n        :type preorder: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool isValidSerialization(char* preorder) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool IsValidSerialization(string preorder) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} preorder\r\n * @return {boolean}\r\n */\r\nvar isValidSerialization = function(preorder) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} preorder\r\n# @return {Boolean}\r\ndef is_valid_serialization(preorder)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func isValidSerialization(_ preorder: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isValidSerialization(preorder string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def isValidSerialization(preorder: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(447,'Remove Duplicates from Sorted List II',2,'Linked List',0,0,'<p></p><p>\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only <i>distinct</i> numbers from the original list.\n</p><p>\nFor example,<br/>\nGiven <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</code>, return <code>1-&gt;2-&gt;5</code>.<br/>\nGiven <code>1-&gt;1-&gt;1-&gt;2-&gt;3</code>, return <code>2-&gt;3</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* deleteDuplicates(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteDuplicates(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode DeleteDuplicates(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar deleteDuplicates = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef delete_duplicates(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc deleteDuplicates(head *ListNode) *ListNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(448,'Path Sum II',2,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree and a sum, find all root-to-leaf paths where each path\'s sum equals the given sum.\n</p>\n\nFor example:<br/>\nGiven the below binary tree and <code>sum = 22</code>,\n<pre>\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n</pre><p>\nreturn<br/>\n</p><pre>\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> pathSum(TreeNode* root, int sum) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int sum) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def pathSum(self, root, sum):\r\n        """\r\n        :type root: TreeNode\r\n        :type sum: int\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** pathSum(struct TreeNode* root, int sum, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<IList<int>> PathSum(TreeNode root, int sum) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} sum\r\n * @return {number[][]}\r\n */\r\nvar pathSum = function(root, sum) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} sum\r\n# @return {Integer[][]}\r\ndef path_sum(root, sum)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func pathSum(_ root: TreeNode?, _ sum: Int) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc pathSum(root *TreeNode, sum int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def pathSum(root: TreeNode, sum: Int): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(449,'Most Frequent Subtree Sum',2,'Tree,Hash Table',0,0,'<p></p><p>\nGiven the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.\n</p><p><b>Examples 1</b><br/>\nInput:\n</p><pre>\n  5\n /  \\\n2   -3\n</pre>\nreturn [2, -3, 4], since all the values happen only once, return all of them in any order.\n\n\n<p><b>Examples 2</b><br/>\nInput:\n</p><pre>\n  5\n /  \\\n2   -5\n</pre>\nreturn [2], since 2 happens twice, however -5 only occur once.\n\n\n<p><b>Note:</b>\nYou may assume the sum of values in any subtree is in the range of 32-bit signed integer.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findFrequentTreeSum(TreeNode* root) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] findFrequentTreeSum(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findFrequentTreeSum(self, root):\n        """\n        :type root: TreeNode\n        :rtype: List[int]\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findFrequentTreeSum(struct TreeNode* root, int* returnSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int[] FindFrequentTreeSum(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar findFrequentTreeSum = function(root) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer[]}\ndef find_frequent_tree_sum(root)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func findFrequentTreeSum(_ root: TreeNode?) -> [Int] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc findFrequentTreeSum(root *TreeNode) []int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findFrequentTreeSum(root: TreeNode): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(450,'Decode Ways II',3,'Dynamic Programming',0,0,'<p></p><p>\nA message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping way:\n</p><pre>\n\'A\' -&gt; 1\n\'B\' -&gt; 2\n...\n\'Z\' -&gt; 26\n</pre><p>\nBeyond that, now the encoded string can also contain the character \'*\', which can be treated as one of the numbers from 1 to 9.\n</p><p>\nGiven the encoded message containing digits and the character \'*\', return the total number of ways to decode it.\n</p><p>\nAlso, since the answer may be very large, you should return the output mod 10<sup>9</sup> + 7.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"*\"\n<b>Output:</b> 9\n<b>Explanation:</b> The encoded message can be decoded to the string: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"1*\"\n<b>Output:</b> 9 + 9 = 18\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the input string will fit in range [1, 10<sup>5</sup>].</li>\n<li>The input string will only contain the character \'*\' and digits \'0\' - \'9\'.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int numDecodings(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def numDecodings(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def numDecodings(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int numDecodings(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int NumDecodings(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar numDecodings = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef num_decodings(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func numDecodings(_ s: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numDecodings(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def numDecodings(s: String): Int = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursion-with-memoization-stack-overflow\">Approach #1 Using Recursion with memoization [Stack Overflow]</a></li>\n<li><a href=\"#approach-2-dynamic-programming-accepted\">Approach #2 Dynamic Programming [Accepted]</a></li>\n<li><a href=\"#approach-3-constant-space-dynamic-programming-accepted\">Approach #3 Constant Space Dynamic Programming [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursion-with-memoization-stack-overflow\">Approach #1 Using Recursion with memoization [Stack Overflow]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In order to find the solution to the given problem, we need to consider every case possible(for the arrangement of the input digits/characters)\n and what value needs to be considered for each case. Let\'s look at each of the possibilites one by one.</p>\n<p>Firstly, let\'s assume, we have a function <code>ways(s,i)</code> which returns the number of ways to decode the input string <script type=\"math/tex; mode=display\">s</script>, if only the characters upto the \n<script type=\"math/tex; mode=display\">i^{th}</script> index in this string are considered. We start off by calling the function <code>ways(s, s.length()-1)</code> i.e. by considering the full length of this string <script type=\"math/tex; mode=display\">s</script>.</p>\n<p>We started by using the last index of the string <script type=\"math/tex; mode=display\">s</script>. Suppose, currently, we called the function as <code>ways(s,i)</code>. Let\'s look at how we proceed. At every step, we need \nto look at the current character at the last index (<script type=\"math/tex; mode=display\">i</script>) and we need to determine the number of ways of decoding that using this <script type=\"math/tex; mode=display\">i^{th}</script> character could \nadd to the total value. There are the following possiblities for the <script type=\"math/tex; mode=display\">i^{th}</script> character.</p>\n<p>The <script type=\"math/tex; mode=display\">i^{th}</script> character could be  a <code>*</code>. In this case, firstly, we can see that this <code>*</code> could be decoded into any of the digits from <code>1-9</code>. Thus, for every decoding possible \nupto the index <script type=\"math/tex; mode=display\">i-1</script>, this <code>*</code> could be replaced by any of these digits(<code>1-9</code>). Thus, the total number of decodings is 9 times the number of decodings possible \nfor the same string upto the index <script type=\"math/tex; mode=display\">i-1</script>. Thus, this <code>*</code> initially adds a factor of <code>9*ways(s,i-1)</code> to the total value. </p>\n<p align=\"center\"><img alt=\"Decode_Ways\" src=\"../Figures/639/639_Decode_Ways2.png\" /></p>\n<p>Apart from this, this <code>*</code> at the <script type=\"math/tex; mode=display\">i^{th}</script> index could also contribute further to the total number of ways depending upon the character/digit at its preceding\n index. If the preceding character happens to be a <code>1</code>, by combining this <code>1</code> with the current <code>*</code>, we could obtain any of the digits from <code>11-19</code> which could be decoded\n into any of the characters from <code>K-S</code>. We need to note that these decodings are in addition to the ones already obtained above by considering only a single current \n <code>*</code>(<code>1-9</code> decoding to <code>A-J</code>). Thus, this <code>1*</code> pair could be replaced by any of the numbers from <code>11-19</code> irrespective of the decodings done for the previous \n indices(before <script type=\"math/tex; mode=display\">i-1</script>). Thus, this <code>1*</code> pair leads to 8 times the number of decodings possible with the string <script type=\"math/tex; mode=display\">s</script> upto the index <script type=\"math/tex; mode=display\">i-2</script>. Thus, this adds\n a factor of <code>9 * ways(s, i - 2)</code> to the total number of decodings. </p>\n<p>Similarly, a <code>2*</code> pair obtained by a <code>2</code> at the index <script type=\"math/tex; mode=display\">i-1</script> could be considered of the numbers from <code>21-26</code>(decoding into <code>U-Z</code>), adding a total of 6 times the \n number of decodings possible upto the index <script type=\"math/tex; mode=display\">i-2</script>. </p>\n<p align=\"center\"><img alt=\"Decode_Ways\" src=\"../Figures/639/639_Decode_Ways3.PNG\" /></p>\n<p>On the same basis, if the character at the index <script type=\"math/tex; mode=display\">i-1</script> happens to be another <code>*</code>, this <code>**</code> pairing could be considered as \n any of the numbers from <code>11-19</code>(9) and <code>21-26</code>(6). Thus, the total number of decodings will be 15(9+6) times  the number of decodings possible upto the index <script type=\"math/tex; mode=display\">i-2</script>.</p>\n<p>Now, if the <script type=\"math/tex; mode=display\">i^{th}</script> character could be a digit from <code>1-9</code> as well. In this case, the number of decodings that considering this single digit can \n contribute to the total number is equal to the number of decodings that can be contributed by the digits upto the index <script type=\"math/tex; mode=display\">i-1</script>. But, if the <script type=\"math/tex; mode=display\">i^{th}</script> character is<br />\n a <code>0</code>, this <code>0</code> alone can\'t contribute anything to the total number of decodings(but it can only contribute if the digit preceding it is a <code>1</code> or <code>2</code>. We\'ll consider this case below).</p>\n<p>Apart from the value obtained(just above) for the digit at the <script type=\"math/tex; mode=display\">i^{th}</script> index being anyone from <code>0-9</code>, this digit could also pair with the digit at the \n preceding index, contributing a value dependent on the previous digit. If the previous digit happens to be a <code>1</code>, this <code>1</code> can combine with any of the current \ndigits forming a valid number in the range <code>10-19</code>. Thus, in this case, we can consider a pair formed by the current and the preceding digit, and, the number of \ndecodings possible by considering the decoded character to be a one formed using this pair, is equal to the total number of decodings possible by using the digits \nupto the index <script type=\"math/tex; mode=display\">i-2</script> only. </p>\n<p>But, if the previous digit is a <code>2</code>, a valid number for decoding could only be a one from the range <code>20-26</code>. Thus, if the current digit is lesser than 7, again\nthis pairing could add decodings with count equal to the ones possible by using the digits upto the <script type=\"math/tex; mode=display\">(i-2)^{th}</script> index only.</p>\n<p>Further, if the previous digit happens to be a <code>*</code>, the additional number of decodings depend on the current digit again i.e. If the current digit is greater than \n<code>6</code>, this <code>*</code> could lead to pairings only in the range <code>17-19</code>(<code>*</code> can\'t be replaced by <code>2</code> leading to <code>27-29</code>). Thus, additional decodings with count equal to the\ndecodings possible upto the index <script type=\"math/tex; mode=display\">i-2</script>. On the other hand, if the current digit is lesser than 7, this <code>*</code> could be replaced by either a <code>1</code> or a <code>2</code> leading to the \ndecodings <code>10-16</code> and <code>20-26</code> respectively. Thus, the total number of decodings possible by considering this pair is equal to twice the number of decodings possible upto the \nindex <script type=\"math/tex; mode=display\">i-2</script>(since <code>*</code> can now be replaced by two values).</p>\n<p>This way, by considering every possible case, we can obtain the required number of decodings by making use of the recursive function <code>ways</code> as and where necessary.</p>\n<p>By making use of memoization, we can reduce the time complexity owing to duplicate function calls.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numDecodings</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Integer</span><span class=\"o\">[]</span> <span class=\"n\">memo</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">Integer</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n        <span class=\"k\">return</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">ways</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">Integer</span><span class=\"o\">[]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]!=</span><span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">long</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;2&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"mi\">15</span> <span class=\"o\">*</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=(</span><span class=\"kt\">int</span><span class=\"o\">)</span><span class=\"n\">res</span><span class=\"o\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">long</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">?</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;2&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;6&#39;</span><span class=\"o\">)</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)&lt;=</span><span class=\"sc\">&#39;6&#39;</span><span class=\"o\">?</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">ways</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">memo</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span><span class=\"n\">res</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Size of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>, since <script type=\"math/tex; mode=display\">memo</script> array is filled exactly once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of the input \nstring.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The depth of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-dynamic-programming-accepted\">Approach #2 Dynamic Programming [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>From the solutions discussed above, we can observe that the number of decodings possible upto any index, <script type=\"math/tex; mode=display\">i</script>, is dependent only on the characters upto the \nindex <script type=\"math/tex; mode=display\">i</script> and not on any of the characters following it. This leads us to the idea that this problem can be solved by making use of Dynamic Programming.</p>\n<p>We can also easily observe from the recursive solution that, the number of decodings possible upto the index <script type=\"math/tex; mode=display\">i</script> can be determined easily if we know \nthe number of decodings possible upto the index <script type=\"math/tex; mode=display\">i-1</script> and <script type=\"math/tex; mode=display\">i-2</script>. Thus, we fill in the <script type=\"math/tex; mode=display\">dp</script> array in a forward manner. <script type=\"math/tex; mode=display\">dp[i]</script> is used to store the \nnumber of decodings possible by considering the characters in the given string <script type=\"math/tex; mode=display\">s</script> upto the <script type=\"math/tex; mode=display\">(i-1)^{th}</script> index only(including it).</p>\n<p>The equations for filling this <script type=\"math/tex; mode=display\">dp</script> at any step again depend on the current character and the just preceding character. These equations are similar \nto the ones used in the recursive solution.</p>\n<p>The following animation illustrates the process of filling the <script type=\"math/tex; mode=display\">dp</script> for a simple example.</p>\n<p>!?!../Documents/639_Decode_Ways_II.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numDecodings</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">long</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">long</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span> <span class=\"o\">?</span> <span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;2&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">15</span> <span class=\"o\">*</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;2&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;6&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;6&#39;</span> <span class=\"o\">?</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n+1</script> is filled once only. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of the input string.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n+1</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-constant-space-dynamic-programming-accepted\">Approach #3 Constant Space Dynamic Programming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we can observe that only the last two values <script type=\"math/tex; mode=display\">dp[i-2]</script> and <script type=\"math/tex; mode=display\">dp[i-1]</script> are used to fill the entry at <script type=\"math/tex; mode=display\">dp[i-1]</script>. We can save some \nspace in the last approach, if instead of maintaining a whole <script type=\"math/tex; mode=display\">dp</script> array of length <script type=\"math/tex; mode=display\">n</script>, we keep a track of only the required last two values. The rest of the \nprocess remains the same as in the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">numDecodings</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">long</span> <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span> <span class=\"o\">?</span> <span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">long</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">second</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"n\">second</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"n\">first</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;2&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"n\">first</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"mi\">15</span> <span class=\"o\">*</span> <span class=\"n\">first</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">?</span> <span class=\"n\">second</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;1&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"n\">first</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;2&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;6&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"n\">first</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;*&#39;</span><span class=\"o\">)</span>\n                    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;6&#39;</span> <span class=\"o\">?</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">first</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">second</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Single loop upto <script type=\"math/tex; mode=display\">n</script> is required to find the required result. Here, <script type=\"math/tex; mode=display\">n</script> refers to the length of the input string <script type=\"math/tex; mode=display\">s</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(451,'Clone Graph',2,'Depth-first Search,Breadth-first Search,Graph',0,0,'<p></p><p>\nClone an undirected graph. Each node in the graph contains a <code>label</code> and a list of its <code>neighbors</code>.\n</p><div>\n<br/>\n<b>OJ\'s undirected graph serialization:</b>\n<p>\nNodes are labeled uniquely.\n</p>\n\nWe use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.\n\n\n\n<p>\nAs an example, consider the serialized graph <code><font color=\"red\">{<font color=\"black\">0</font>,1,2#</font><font color=\"blue\"><font color=\"black\">1</font>,2#</font><font color=\"green\"><font color=\"black\">2</font>,2}</font></code>.\n</p>\n<p>\nThe graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.\n</p><ol>\n<li>First node is labeled as <code><font color=\"black\">0</font></code>. Connect node <code><font color=\"black\">0</font></code> to both nodes <code><font color=\"red\">1</font></code> and <code><font color=\"red\">2</font></code>.</li>\n<li>Second node is labeled as <code><font color=\"black\">1</font></code>. Connect node <code><font color=\"black\">1</font></code> to node <code><font color=\"blue\">2</font></code>.</li>\n<li>Third node is labeled as <code><font color=\"black\">2</font></code>. Connect node <code><font color=\"black\">2</font></code> to node <code><font color=\"green\">2</font></code> (itself), thus forming a self-cycle.</li>\n</ol>\n<p>\nVisually, the graph looks like the following:\n</p><pre>\n       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n</pre>\n</div>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\r\n * Definition for undirected graph.\r\n * class UndirectedGraphNode {\r\n *     int label;\r\n *     List<UndirectedGraphNode> neighbors;\r\n *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\r\n * };\r\n */\r\npublic class Solution {\r\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\r\n        \r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a undirected graph node\r\n# class UndirectedGraphNode:\r\n#     def __init__(self, x):\r\n#         self.label = x\r\n#         self.neighbors = []\r\n\r\nclass Solution:\r\n    # @param node, a undirected graph node\r\n    # @return a undirected graph node\r\n    def cloneGraph(self, node):\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * #define NEIGHBORS_MAX_SIZE 100\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     struct UndirectedGraphNode *neighbors[NEIGHBORS_MAX_SIZE];\r\n *     int neighborsCount;\r\n * };\r\n */\r\nstruct UndirectedGraphNode *cloneGraph(struct UndirectedGraphNode *graph) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for undirected graph.\r\n * public class UndirectedGraphNode {\r\n *     public int label;\r\n *     public IList<UndirectedGraphNode> neighbors;\r\n *     public UndirectedGraphNode(int x) { label = x; neighbors = new List<UndirectedGraphNode>(); }\r\n * };\r\n */\r\npublic class Solution {\r\n    public UndirectedGraphNode CloneGraph(UndirectedGraphNode node) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for undirected graph.\r\n * function UndirectedGraphNode(label) {\r\n *     this.label = label;\r\n *     this.neighbors = [];   // Array of UndirectedGraphNode\r\n * }\r\n */\r\n\r\n/**\r\n * @param {UndirectedGraphNode} graph\r\n * @return {UndirectedGraphNode}\r\n */\r\nvar cloneGraph = function(graph) {\r\n    \r\n};\" }]',NULL,NULL,1,'none','none','none'),(452,'Search in Rotated Sorted Array II',2,'Array,Binary Search',0,0,'<p></p><blockquote>\n<p><i>Follow up</i> for \"Search in Rotated Sorted Array\":<br/>\nWhat if <i>duplicates</i> are allowed?</p>\n<p>Would this affect the run-time complexity? How and why?</p>\n</blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p><p>Write a function to determine if a given target is in the array.</p><p>The array may contain duplicates.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool search(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean search(int[] nums, int target) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def search(self, nums, target):\r\n        """\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool search(int* nums, int numsSize, int target) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool Search(int[] nums, int target) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {boolean}\r\n */\r\nvar search = function(nums, target) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Boolean}\r\ndef search(nums, target)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func search(_ nums: [Int], _ target: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func search(nums []int, target int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def search(nums: Array[Int], target: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(453,'Path Sum',1,'Tree,Depth-first Search',0,0,'<p></p><p>\nGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\n</p>\n\nFor example:<br/>\nGiven the below binary tree and <code>sum = 22</code>,\n<pre>\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n</pre><p>\nreturn true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool hasPathSum(TreeNode* root, int sum) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean hasPathSum(TreeNode root, int sum) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def hasPathSum(self, root, sum):\r\n        """\r\n        :type root: TreeNode\r\n        :type sum: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool hasPathSum(struct TreeNode* root, int sum) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool HasPathSum(TreeNode root, int sum) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} sum\r\n * @return {boolean}\r\n */\r\nvar hasPathSum = function(root, sum) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} sum\r\n# @return {Boolean}\r\ndef has_path_sum(root, sum)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func hasPathSum(_ root: TreeNode?, _ sum: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc hasPathSum(root *TreeNode, sum int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def hasPathSum(root: TreeNode, sum: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(454,'Perfect Number',1,'Math',0,0,'<p></p><p>We define the Perfect Number is a <b>positive</b> integer that is equal to the sum of all its <b>positive</b> divisors except itself. \n</p>\nNow, given an <b>integer</b> n, write a function that returns true when it is a perfect number and false when it is not.\n\n\n<p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> 28\n<b>Output:</b> True\n<b>Explanation:</b> 28 = 1 + 2 + 4 + 7 + 14\n</pre><p><b>Note:</b>\nThe input number <b>n</b> will not exceed 100,000,000. (1e8)\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool checkPerfectNumber(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean checkPerfectNumber(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def checkPerfectNumber(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool checkPerfectNumber(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CheckPerfectNumber(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {boolean}\r\n */\r\nvar checkPerfectNumber = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {Boolean}\r\ndef check_perfect_number(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func checkPerfectNumber(_ num: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkPerfectNumber(num int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def checkPerfectNumber(num: Int): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-optimal-solution-accepted\">Approach #3 Optimal Solution [Accepted]</a></li>\n<li><a href=\"#approach-4-euclid-euler-theorem-accepted\">Approach #4 Euclid-Euler Theorem [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In brute force approach, we consider every possible number to be a divisor of the given number <script type=\"math/tex; mode=display\">num</script>, by iterating over all the numbers lesser than <script type=\"math/tex; mode=display\">num</script>. Then, we add up all the factors to check if the given number satisfies the Perfect Number property. This approach obviously fails if the number <script type=\"math/tex; mode=display\">num</script> is very large.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkPerfectNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over all the numbers lesser than <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We can little optimize the brute force by breaking the loop when the value of <script type=\"math/tex; mode=display\">sum</script> increase the value of <script type=\"math/tex; mode=display\">num</script>. In that case, we can directly return <script type=\"math/tex; mode=display\">false</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkPerfectNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">&gt;</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. In worst case, we iterate over all the numbers lesser than <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-optimal-solution-accepted\">Approach #3 Optimal Solution [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In this method, instead of iterating over all the integers to find the factors of <script type=\"math/tex; mode=display\">num</script>, we only iterate upto the <script type=\"math/tex; mode=display\">\\sqrt{n}</script>. The reasoning behind this can be understood as follows.</p>\n<p>Consider the given number <script type=\"math/tex; mode=display\">num</script> which can have <script type=\"math/tex; mode=display\">m</script> distinct factors, namely <script type=\"math/tex; mode=display\">n_1, n_2,..., n_m</script>. Now, since the number <script type=\"math/tex; mode=display\">num</script> is divisible by <script type=\"math/tex; mode=display\">n_i</script>, it is also divisible by <script type=\"math/tex; mode=display\">n_j=num/n_1</script> i.e. <script type=\"math/tex; mode=display\">n_i*n_j=num</script>. Also, the largest number in such a pair can only be up to <script type=\"math/tex; mode=display\">\\sqrt{num}</script> (because <script type=\"math/tex; mode=display\">\\sqrt{num} \\times \\sqrt{num}=num</script>). Thus, we can get a significant reduction in the run-time by iterating only upto <script type=\"math/tex; mode=display\">\\sqrt{num}</script> and considering such <script type=\"math/tex; mode=display\">n_i</script>\'s and <script type=\"math/tex; mode=display\">n_j</script>\'s in a single pass directly.</p>\n<p>Further, if <script type=\"math/tex; mode=display\">\\sqrt{num}</script> is also a factor, we have to consider the factor only once while checking for the perfect number property.</p>\n<p>We sum up all such factors and check if the given number is a Perfect Number or not. Another point to be observed is that while considering 1 as such a factor, <script type=\"math/tex; mode=display\">num</script> will also be considered as the other factor. Thus, we need to subtract <script type=\"math/tex; mode=display\">num</script> from the <script type=\"math/tex; mode=display\">sum</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkPerfectNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">num</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">num</span> <span class=\"o\">/</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>Time complexity : <script type=\"math/tex; mode=display\">O(\\sqrt{n})</script>. We iterate only over the range <script type=\"math/tex; mode=display\">1 < i &leq; \\sqrt{num}</script>.</li>\n<li>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-euclid-euler-theorem-accepted\">Approach #4 Euclid-Euler Theorem [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Euclid proved that <script type=\"math/tex; mode=display\">2^{p−1}(2^p − 1)</script> is an even perfect number whenever <script type=\"math/tex; mode=display\">2^p − 1</script> is prime, where <script type=\"math/tex; mode=display\">p</script> is prime.</p>\n<p>For example, the first four perfect numbers are generated by the formula <script type=\"math/tex; mode=display\">2^{p−1}(2^p − 1)</script>, with <script type=\"math/tex; mode=display\">p</script> a prime number, as follows:</p>\n<div class=\"codehilite\"><pre><span></span>for p = 2:   21(22 − 1) = 6\nfor p = 3:   22(23 − 1) = 28\nfor p = 5:   24(25 − 1) = 496\nfor p = 7:   26(27 − 1) = 8128.\n</pre></div>\n\n\n<p>Prime numbers of the form <script type=\"math/tex; mode=display\">2^p − 1</script> are known as Mersenne primes. For <script type=\"math/tex; mode=display\">2^p − 1</script> to be prime, it is necessary that <script type=\"math/tex; mode=display\">p</script> itself be prime. However, not all numbers of the form <script type=\"math/tex; mode=display\">2^p − 1</script> with a prime <script type=\"math/tex; mode=display\">p</script> are prime; for example, <script type=\"math/tex; mode=display\">2^{11} − 1 = 2047 = 23 × 89</script> is not a prime number.</p>\n<p>You can see that for small value of <script type=\"math/tex; mode=display\">p</script>, its related perfect number goes very high. So, we need to evaluate perfect numbers for some primes <script type=\"math/tex; mode=display\">(2, 3, 5, 7, 13, 17, 19, 31)</script> only, as for bigger prime its perfect number will not fit in 64 bits.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">pn</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">checkPerfectNumber</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">primes</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"mi\">17</span><span class=\"o\">,</span><span class=\"mi\">19</span><span class=\"o\">,</span><span class=\"mi\">31</span><span class=\"o\">};</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">prime</span><span class=\"o\">:</span> <span class=\"n\">primes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pn</span><span class=\"o\">(</span><span class=\"n\">prime</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(\\log{n})</script>. Number of primes will be in order <script type=\"math/tex; mode=display\">\\log{num}</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(\\log{n})</script>. Space used to store primes.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(455,'Palindrome Partitioning II',3,'Dynamic Programming',0,0,'<p></p><p>\nGiven a string <i>s</i>, partition <i>s</i> such that every substring of the partition is a palindrome.\n</p><p>\nReturn the minimum cuts needed for a palindrome partitioning of <i>s</i>.\n</p><p>\nFor example, given <i>s</i> = <code>\"aab\"</code>,<br/>\nReturn <code>1</code> since the palindrome partitioning <code>[\"aa\",\"b\"]</code> could be produced using 1 cut.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int minCut(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int minCut(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def minCut(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int minCut(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MinCut(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar minCut = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Integer}\r\ndef min_cut(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func minCut(_ s: String) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minCut(s string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def minCut(s: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(456,'Minimum Depth of Binary Tree',1,'Tree,Depth-first Search,Breadth-first Search',0,0,'<p></p><p>Given a binary tree, find its minimum depth.</p><p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int minDepth(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def minDepth(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint minDepth(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int MinDepth(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar minDepth = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef min_depth(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func minDepth(_ root: TreeNode?) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc minDepth(root *TreeNode) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def minDepth(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(457,'Student Attendance Record I',1,'String',0,0,'<p>You are given a string representing an attendance record for a student. The record only contains the following three characters:\n\n</p><p>\n</p><ol>\n<li><b>\'A\'</b> : Absent. </li>\n<li><b>\'L\'</b> : Late.</li>\n<li> <b>\'P\'</b> : Present. </li>\n</ol><p>\nA student could be rewarded if his attendance record doesn\'t contain <b>more than one \'A\' (absent)</b> or <b>more than two continuous \'L\' (late)</b>.    </p><p>You need to return whether the student could be rewarded according to his attendance record.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"PPALLP\"\n<b>Output:</b> True\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"PPALLL\"\n<b>Output:</b> False\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool checkRecord(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean checkRecord(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def checkRecord(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool checkRecord(char* s) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CheckRecord(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar checkRecord = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {Boolean}\r\ndef check_record(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func checkRecord(_ s: String) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkRecord(s string) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def checkRecord(s: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(458,'Palindrome Partitioning',2,'Backtracking',0,0,'<p></p><p>\nGiven a string <i>s</i>, partition <i>s</i> such that every substring of the partition is a palindrome.\n</p><p>\nReturn all possible palindrome partitioning of <i>s</i>.\n</p><p>\nFor example, given <i>s</i> = <code>\"aab\"</code>,<br/>\n\nReturn\n</p><pre>\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<string>> partition(string s) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public List<List<String>> partition(String s) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def partition(self, s):\r\n        """\r\n        :type s: str\r\n        :rtype: List[List[str]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** partition(char* s, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public IList<IList<string>> Partition(string s) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @return {string[][]}\r\n */\r\nvar partition = function(s) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @return {String[][]}\r\ndef partition(s)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func partition(_ s: String) -> [[String]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func partition(s string) [][]string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def partition(s: String): List[List[String]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(459,'Balanced Binary Tree',1,'Tree,Depth-first Search',0,0,'<p></p><p>Given a binary tree, determine if it is height-balanced.\n</p><p>\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <i>every</i> node never differ by more than 1.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isBalanced(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isBalanced(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isBalanced(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsBalanced(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {boolean}\r\n */\r\nvar isBalanced = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Boolean}\r\ndef is_balanced(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isBalanced(_ root: TreeNode?) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isBalanced(root *TreeNode) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isBalanced(root: TreeNode): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(460,'Friend Circles',2,'Depth-first Search,Union Find',0,0,'<p></p><p>\nThere are <b>N</b> students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a <b>direct</b> friend of B, and B is a <b>direct</b> friend of C, then A is an <b>indirect</b> friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.\n</p><p>\nGiven a <b>N*N</b> matrix <b>M</b> representing the friend relationship between students in the class. If M[i][j] = 1, then the i<sub>th</sub> and j<sub>th</sub> students are <b>direct</b> friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\n<b>Output:</b> 2\n<b>Explanation:</b>The 0<sub>th</sub> and 1<sub>st</sub> students are direct friends, so they are in a friend circle. <br/>The 2<sub>nd</sub> student himself is in a friend circle. So return 2.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\n<b>Output:</b> 1\n<b>Explanation:</b>The 0<sub>th</sub> and 1<sub>st</sub> students are direct friends, the 1<sub>st</sub> and 2<sub>nd</sub> students are direct friends, <br/>so the 0<sub>th</sub> and 2<sub>nd</sub> students are indirect friends. All of them are in the same friend circle, so return 1.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>N is in range [1,200].</li>\n<li>M[i][i] = 1 for all students.</li>\n<li>If M[i][j] = 1, then M[j][i] = 1.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& M) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findCircleNum(int[][] M) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\nclass Solution(object):\n    def findCircleNum(self, M):\n        """\n        :type M: List[List[int]]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findCircleNum(int** M, int MRowSize, int MColSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int FindCircleNum(int[,] M) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[][]} M\n * @return {number}\n */\n\nvar findCircleNum = function(M) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} m\n# @return {Integer}\ndef find_circle_num(m)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findCircleNum(_ M: [[Int]]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findCircleNum(M [][]int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findCircleNum(M: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(461,'Surrounded Regions',2,'Breadth-first Search,Union Find',0,0,'<p></p><p>\nGiven a 2D board containing <code>\'X\'</code> and <code>\'O\'</code> (the <b>letter</b> O), capture all regions surrounded by <code>\'X\'</code>.</p><p>A region is captured by flipping all <code>\'O\'</code>s into <code>\'X\'</code>s in that surrounded region.\n</p><p>\nFor example,<br/>\n</p><pre>\nX X X X\nX O O X\nX X O X\nX O X X\n</pre><p>\nAfter running your function, the board should be:\n</p><pre>\nX X X X\nX X X X\nX X X X\nX O X X\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    void solve(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public void solve(char[][] board) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def solve(self, board):\r\n        """\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"void solve(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public void Solve(char[,] board) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar solve = function(board) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef solve(board)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func solve(_ board: inout [[Character]]) {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func solve(board [][]byte)  {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def solve(board: Array[Array[Char]]): Unit = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(462,'Convert Sorted List to Binary Search Tree',2,'Depth-first Search,Linked List',0,0,'<p></p><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* sortedListToBST(ListNode* head) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\n# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def sortedListToBST(self, head):\r\n        """\r\n        :type head: ListNode\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* sortedListToBST(struct ListNode* head) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode SortedListToBST(ListNode head) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {TreeNode}\r\n */\r\nvar sortedListToBST = function(head) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {TreeNode}\r\ndef sorted_list_to_bst(head)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func sortedListToBST(_ head: ListNode?) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc sortedListToBST(head *ListNode) *TreeNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\n/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sortedListToBST(head: ListNode): TreeNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(463,'Remove Boxes',3,'Dynamic Programming,Depth-first Search',0,0,'<p></p><p>Given several boxes with different colors represented by different positive numbers. <br/>\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k &gt;= 1), remove them and get <code>k*k</code> points.<br/>\nFind the maximum points you can get.\n</p><p><b>Example 1:</b><br/>\nInput: \n</p><pre>\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\n</pre>\nOutput:\n<pre>\n23\n</pre>\nExplanation: \n<pre>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 points) \n----&gt; [1, 1] (3*3=9 points) \n----&gt; [] (2*2=4 points)\n</pre><p><b>Note:</b>\nThe number of boxes <code>n</code> would not exceed 100.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int removeBoxes(vector<int>& boxes) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int removeBoxes(int[] boxes) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def removeBoxes(self, boxes):\n        """\n        :type boxes: List[int]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int removeBoxes(int* boxes, int boxesSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int RemoveBoxes(int[] boxes) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} boxes\n * @return {number}\n */\nvar removeBoxes = function(boxes) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} boxes\n# @return {Integer}\ndef remove_boxes(boxes)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func removeBoxes(_ boxes: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeBoxes(boxes []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeBoxes(boxes: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(464,'Validate IP Address',2,'String',0,0,'<p></p><p>\nWrite a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\n</p><p>\n<b>IPv4</b> addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\".\"), e.g.,<code>172.16.254.1</code>;\n</p><p>\nBesides, leading zeros in the IPv4 is invalid. For example, the address <code>172.16.254.01</code> is invalid.\n</p><p>\n<b>IPv6</b> addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (\":\"). For example, the address <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so <code>2001:db8:85a3:0:0:8A2E:0370:7334</code> is also a valid IPv6 address(Omit leading zeros and using upper cases).\n</p><p>\nHowever, we don\'t replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, <code>2001:0db8:85a3::8A2E:0370:7334</code> is an invalid IPv6 address.\n</p><p>\nBesides, extra leading zeros in the IPv6 is also invalid. For example, the address <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> is invalid.\n</p><p><b>Note:</b>\nYou may assume there is no extra space or special characters in the input string.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"172.16.254.1\"\n\n<b>Output:</b> \"IPv4\"\n\n<b>Explanation:</b> This is a valid IPv4 address, return \"IPv4\".\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n\n<b>Output:</b> \"IPv6\"\n\n<b>Explanation:</b> This is a valid IPv6 address, return \"IPv6\".\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> \"256.256.256.256\"\n\n<b>Output:</b> \"Neither\"\n\n<b>Explanation:</b> This is neither a IPv4 address nor a IPv6 address.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string validIPAddress(string IP) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String validIPAddress(String IP) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def validIPAddress(self, IP):\r\n        """\r\n        :type IP: str\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* validIPAddress(char* IP) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ValidIPAddress(string IP) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} IP\r\n * @return {string}\r\n */\r\nvar validIPAddress = function(IP) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} ip\r\n# @return {String}\r\ndef valid_ip_address(ip)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func validIPAddress(_ IP: String) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func validIPAddress(IP string) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def validIPAddress(IP: String): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(465,'Sum Root to Leaf Numbers',2,'Tree,Depth-first Search',0,0,'<p></p><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p><p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p><p>Find the total sum of all root-to-leaf numbers.</p><p>For example,\n</p><pre>\n    1\n   / \\\n  2   3\n</pre><p>\nThe root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.<br/>\nThe root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\n</p><p>\nReturn the sum = 12 + 13 = <code>25</code>.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int sumNumbers(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int sumNumbers(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def sumNumbers(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint sumNumbers(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int SumNumbers(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar sumNumbers = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef sum_numbers(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func sumNumbers(_ root: TreeNode?) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sumNumbers(root *TreeNode) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sumNumbers(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(466,'Convert Sorted Array to Binary Search Tree',1,'Tree,Depth-first Search',0,0,'<p></p><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def sortedArrayToBST(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: TreeNode\r\n        """\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode SortedArrayToBST(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {number[]} nums\r\n * @return {TreeNode}\r\n */\r\nvar sortedArrayToBST = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {Integer[]} nums\r\n# @return {TreeNode}\r\ndef sorted_array_to_bst(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc sortedArrayToBST(nums []int) *TreeNode {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(467,'Unique Substrings in Wraparound String',2,'Dynamic Programming',0,0,'<p></p><p>Consider the string <code>s</code> to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so <code>s</code> will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".</p><p>Now we have another string <code>p</code>. Your job is to find out how many unique non-empty substrings of <code>p</code> are present in <code>s</code>. In particular, your input is the string <code>p</code> and you need to output the number of different non-empty substrings of <code>p</code> in the string <code>s</code>.</p><p><b>Note:</b> <code>p</code> consists of only lowercase English letters and the size of p might be over 10000.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"a\"\n<b>Output:</b> 1\n\n<b>Explanation:</b> Only the substring \"a\" of string \"a\" is in the string s.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"cac\"\n<b>Output:</b> 2\n<b>Explanation:</b> There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\n</pre><p><b>Example 3:</b><br/>\n</p><pre>\n<b>Input:</b> \"zab\"\n<b>Output:</b> 6\n<b>Explanation:</b> There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findSubstringInWraproundString(string p) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findSubstringInWraproundString(String p) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findSubstringInWraproundString(self, p):\r\n        """\r\n        :type p: str\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findSubstringInWraproundString(char* p) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindSubstringInWraproundString(string p) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} p\r\n * @return {number}\r\n */\r\nvar findSubstringInWraproundString = function(p) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} p\r\n# @return {Integer}\r\ndef find_substring_in_wrapround_string(p)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findSubstringInWraproundString(_ p: String) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findSubstringInWraproundString(p string) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findSubstringInWraproundString(p: String): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(468,'Diameter of Binary Tree',1,'Tree',0,0,'<p></p><p>\nGiven a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <b>longest</b> path between any two nodes in a tree. This path may or may not pass through the root.\n</p><p>\n<b>Example:</b><br/>\nGiven a binary tree <br/>\n</p><pre>\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre><p>\nReturn <b>3</b>, which is the length of the path [4,2,1,3] or [5,2,1,3].\n</p><p><b>Note:</b>\nThe length of path between two nodes is represented by the number of edges between them.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int diameterOfBinaryTree(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def diameterOfBinaryTree(self, root):\n        """\n        :type root: TreeNode\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint diameterOfBinaryTree(struct TreeNode* root) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int DiameterOfBinaryTree(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar diameterOfBinaryTree = function(root) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef diameter_of_binary_tree(root)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func diameterOfBinaryTree(_ root: TreeNode?) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def diameterOfBinaryTree(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(469,'Shopping Offers',2,'Dynamic Programming,Depth-first Search',0,0,'<p></p><p>\nIn LeetCode Store, there are some kinds of items to sell. Each item has a price.\n</p><p>\nHowever, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n</p><p>\nYou are given the each item\'s price, a set of special offers, and the number we need to buy for each item.\nThe job is to output the lowest price you have to pay for <b>exactly</b> certain items as given, where you could make optimal use of the special offers.\n</p><p>\nEach special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.\n</p><p>You could use any of special offers as many times as you want.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [2,5], [[3,0,5],[1,2,10]], [3,2]\n<b>Output:</b> 14\n<b>Explanation:</b> \nThere are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\n<b>Output:</b> 11\n<b>Explanation:</b> \nThe price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>There are at most 6 kinds of items, 100 special offers.</li>\n<li>For each item, you need to buy at most 6 of them.</li>\n<li>You are <b>not</b> allowed to buy more items than you want, even if that would lower the overall price.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def shoppingOffers(self, price, special, needs):\r\n        """\r\n        :type price: List[int]\r\n        :type special: List[List[int]]\r\n        :type needs: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def shoppingOffers(self, price, special, needs):\r\n        """\r\n        :type price: List[int]\r\n        :type special: List[List[int]]\r\n        :type needs: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int shoppingOffers(int* price, int priceSize, int** special, int specialRowSize, int *specialColSizes, int* needs, int needsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ShoppingOffers(IList<int> price, IList<IList<int>> special, IList<int> needs) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} price\r\n * @param {number[][]} special\r\n * @param {number[]} needs\r\n * @return {number}\r\n */\r\nvar shoppingOffers = function(price, special, needs) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} price\r\n# @param {Integer[][]} special\r\n# @param {Integer[]} needs\r\n# @return {Integer}\r\ndef shopping_offers(price, special, needs)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func shoppingOffers(_ price: [Int], _ special: [[Int]], _ needs: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func shoppingOffers(price []int, special [][]int, needs []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def shoppingOffers(price: List[Int], special: List[List[Int]], needs: List[Int]): Int = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</a></li>\n<li><a href=\"#approach-2-using-recursion-with-memoization-accepted\">Approach #2 Using Recursion with memoization [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-recursion-accepted\">Approach #1 Using Recursion [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Before discussing the steps involved in the process, we need to note a few points. Firstly, whenever an offer is used from amongst the ones available in the <script type=\"math/tex; mode=display\">special</script> list, we need to update the <script type=\"math/tex; mode=display\">needs</script> appropriately, such that the number of items in the current offer of each type are deducted from the ones in the corresponding entry in <script type=\"math/tex; mode=display\">needs</script>.</p>\n<p>Further, an offer can be used only if the number of items, of each type, required for using the offer, is lesser than or equal to the ones available in the current <script type=\"math/tex; mode=display\">needs</script>. </p>\n<p>Now, let\'s discuss the algorithm. We make use of a <code>shopping(price,special,needs)</code> function, which takes the <script type=\"math/tex; mode=display\">price</script> and <script type=\"math/tex; mode=display\">special</script> list along with the current(updated) <script type=\"math/tex; mode=display\">needs</script> as the input and returns the minimum cost of buying these items as required by this <script type=\"math/tex; mode=display\">needs</script> list. </p>\n<p>In every call of the function <code>shopping(price,special,needs)</code>, we do as follows:</p>\n<ol>\n<li>\n<p>Determine the cost of buying items as per the <script type=\"math/tex; mode=display\">needs</script> array, without applying any offer. Store the result in <script type=\"math/tex; mode=display\">res</script>.</p>\n</li>\n<li>\n<p>Iterate over every offer in the <script type=\"math/tex; mode=display\">special</script> list. For every offer chosen, repeat steps 3 to 5.</p>\n</li>\n<li>\n<p>Create a copy of the current <script type=\"math/tex; mode=display\">needs</script> in a <script type=\"math/tex; mode=display\">clone</script> list(so that the original needs can be used again, while selecting the next offer).</p>\n</li>\n<li>\n<p>Try to apply the current offer. If possible, update the required number of items in <script type=\"math/tex; mode=display\">clone</script>.</p>\n</li>\n<li>\n<p>If the current offer could be applied, find the minimum cost out of <script type=\"math/tex; mode=display\">res</script> and <script type=\"math/tex; mode=display\">offer_\\current</script> + <code>shopping(price,special,clone)</code>. Here, <script type=\"math/tex; mode=display\">offer_\\current</script> refers to the price that needs to be paid for the current offer. Update the <script type=\"math/tex; mode=display\">res</script> with the minimum value.</p>\n</li>\n<li>\n<p>Return the <script type=\"math/tex; mode=display\">res</script> corresponding to the minimum cost.</p>\n</li>\n</ol>\n<p>We need to note that the <script type=\"math/tex; mode=display\">clone</script> needs to be updated afresh from <script type=\"math/tex; mode=display\">needs</script>(coming to the current function call) when we choose a new offer. This needs to be done, because solely applying the next offer could result in a lesser cost than the one resulting by using the previous offer first.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">shoppingOffers</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">needs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">shopping</span><span class=\"o\">(</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">needs</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">shopping</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">needs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dot</span><span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">,</span> <span class=\"n\">price</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">special</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">needs</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">clone</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"n\">clone</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">needs</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">())</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">shopping</span><span class=\"o\">(</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">clone</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">dot</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<hr />\n<h4 id=\"approach-2-using-recursion-with-memoization-accepted\">Approach #2 Using Recursion with memoization [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we can observe that the same <script type=\"math/tex; mode=display\">needs</script> can be reached by applying the offers in various orders. e.g. We can choose the first offer followed by the second offer or vice-versa. But, both lead to the same requirement of updated <script type=\"math/tex; mode=display\">needs</script> and the cost as well. Thus, instead of repeating the whole process for the same <script type=\"math/tex; mode=display\">needs</script> state through various recursive paths, we can create an entry corresponding to the current set of <script type=\"math/tex; mode=display\">needs</script> in a HashMap, <script type=\"math/tex; mode=display\">map</script>, which stores the minimum cost corresponding to this set of <script type=\"math/tex; mode=display\">needs</script>. Thus, whenever the same call is made again in the future through a different path, we need not repeat the whole process over, and we can directly return the result stored in the <script type=\"math/tex; mode=display\">map</script>.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">shoppingOffers</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">needs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Map</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">shopping</span><span class=\"o\">(</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">needs</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">shopping</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">needs</span><span class=\"o\">,</span> <span class=\"n\">Map</span> <span class=\"o\">&lt;</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"o\">,</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dot</span><span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">,</span> <span class=\"n\">price</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">special</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">needs</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">clone</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"n\">clone</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">diff</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">needs</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">())</span>\n                <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">shopping</span><span class=\"o\">(</span><span class=\"n\">price</span><span class=\"o\">,</span> <span class=\"n\">special</span><span class=\"o\">,</span> <span class=\"n\">clone</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">needs</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">dot</span><span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(470,'Remove Duplicates from Sorted Array II',2,'Array,Two Pointers',0,0,'<p></p><p>\nFollow up for \"Remove Duplicates\":<br/>\nWhat if duplicates are allowed at most <i>twice</i>?</p><p>\nFor example,<br/>\nGiven sorted array <i>nums</i> = <code>[1,1,1,2,2,3]</code>,\n</p><p>\nYour function should return length = <code>5</code>, with the first five elements of <i>nums</i> being <code>1</code>, <code>1</code>, <code>2</code>, <code>2</code> and <code>3</code>. It doesn\'t matter what you leave beyond the new length.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int removeDuplicates(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def removeDuplicates(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int removeDuplicates(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int RemoveDuplicates(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar removeDuplicates = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef remove_duplicates(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeDuplicates(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(471,'Count The Repetitions',3,'Dynamic Programming',0,0,'<p></p><p>Define <code>S = [s,n]</code> as the string S which consists of n connected strings s. For example, <code>[\"abc\", 3]</code> =\"abcabcabc\". </p><p>On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.</p><p>You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 10<sup>6</sup> and 1 ≤ n2 ≤ 10<sup>6</sup>. Now consider the strings S1 and S2, where <code>S1=[s1,n1]</code> and <code>S2=[s2,n2]</code>. Find the maximum integer M such that <code>[S2,M]</code> can be obtained from <code>S1</code>.</p><p><b>Example:</b>\n</p><pre>\nInput:\ns1=\"acb\", n1=4\ns2=\"ab\", n2=2\n\nReturn:\n2\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def getMaxRepetitions(self, s1, n1, s2, n2):\n        """\n        :type s1: str\n        :type n1: int\n        :type s2: str\n        :type n2: int\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int getMaxRepetitions(char* s1, int n1, char* s2, int n2) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int GetMaxRepetitions(string s1, int n1, string s2, int n2) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nvar getMaxRepetitions = function(s1, n1, s2, n2) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s1\n# @param {Integer} n1\n# @param {String} s2\n# @param {Integer} n2\n# @return {Integer}\ndef get_max_repetitions(s1, n1, s2, n2)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func getMaxRepetitions(_ s1: String, _ n1: Int, _ s2: String, _ n2: Int) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getMaxRepetitions(s1 string, n1 int, s2 string, n2 int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def getMaxRepetitions(s1: String, n1: Int, s2: String, n2: Int): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(472,'01 Matrix',2,'Depth-first Search,Breadth-first Search',0,0,'<p></p><p>\nGiven a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\n</p>\nThe distance between two adjacent cells is 1.\n\n<p><b>Example 1: </b><br/>\nInput:\n</p><pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\nOutput:\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre><p><b>Example 2: </b><br/>\nInput:\n</p><pre>\n0 0 0\n0 1 0\n1 1 1\n</pre>\nOutput:\n<pre>\n0 0 0\n0 1 0\n1 2 1\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The number of elements of the given matrix will not exceed 10,000.</li>\n<li>There are at least one 0 in the given matrix.</li>\n<li>The cells are adjacent in only four directions: up, down, left and right.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[][] updateMatrix(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def updateMatrix(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** updateMatrix(int** matrix, int matrixRowSize, int matrixColSize, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[,] UpdateMatrix(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {number[][]}\r\n */\r\nvar updateMatrix = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Integer[][]}\r\ndef update_matrix(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func updateMatrix(_ matrix: [[Int]]) -> [[Int]] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func updateMatrix(matrix [][]int) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def updateMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-bfs-accepted\">Approach #2 Using BFS [Accepted]</a></li>\n<li><a href=\"#approach-3-dp-approach-accepted\">Approach #3 DP Approach [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute force [Time Limit Exceeded]</h4>\n<p><strong>Intuition</strong></p>\n<p>Do what the question says.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Initialize <code>dist[i][j]=INT_MAX</code> for all <code>{i,j}</code> cells.</li>\n<li>Iterate over the matrix.</li>\n<li>If cell is <code>0</code>, <code>dist[i][j]=0</code>,</li>\n<li>Else, for each <code>1</code> cell,<ul>\n<li>Iterate over the entire matrix</li>\n<li>If the cell is <code>0</code>, calculate its distance from current cell as <code>abs(k-i)+abs(l-j)</code>.</li>\n<li>If the distance is smaller than the current distance, update it.</li>\n</ul>\n</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">updateMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;&amp;</span> <span class=\"n\">matrix</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rows</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">dist</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">INT_MAX</span><span class=\"p\">));</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span><span class=\"p\">;</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">int</span> <span class=\"n\">dist_01</span> <span class=\"o\">=</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">);</span>\n                            <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">));</span>\n                        <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity: <script type=\"math/tex; mode=display\">O((r \\cdot c)^2)</script>.\nIterating over the entire matrix for each <code>1</code> in the matrix.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(r \\cdot c)</script>.\nNo extra space required than the <code>vector&lt;vector&lt;int&gt; &gt; dist</code></p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-bfs-accepted\">Approach #2 Using BFS [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p><em>A better brute force</em>:\nLooking over the entire matrix appears wasteful and hence, we can use Breadth First Search(BFS) to limit the search to the nearest <code>0</code> found for each <code>1</code>. As soon as a <code>0</code> appears during the BFS, we know that the <code>0</code> is nearest, and hence, we move to the next <code>1</code>.</p>\n<p><em>Think again</em>:\nBut, in this approach, we will only be able to update the distance of one <code>1</code> using one BFS, which could in fact, result in slightly higher complexity than the Approach #1 brute force.\nBut hey,this could be optimised if we start the BFS from <code>0</code>s and thereby, updating the distances of all the <code>1</code>s in the path.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>For our BFS routine, we keep a queue, <code>q</code> to maintain the queue of cells to be examined next.</li>\n<li>We start by adding all the cells with <code>0</code>s to <code>q</code>.</li>\n<li>Intially, distance for each <code>0</code> cell is <code>0</code> and distance for each <code>1</code> is <code>INT_MAX</code>, which is updated during the BFS.</li>\n<li>Pop the cell from queue, and examine its neighbours. If the new calculated distance for neighbour <code>{i,j}</code> is smaller, we add <code>{i,j}</code> to <code>q</code> and update <code>dist[i][j]</code>.</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">updateMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;&amp;</span> <span class=\"n\">matrix</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rows</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">dist</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">INT_MAX</span><span class=\"p\">));</span>\n    <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">({</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"p\">});</span> <span class=\"c1\">//Put all 0s in the queue.</span>\n            <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">dir</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">{</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">};</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span>\n        <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">new_r</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">dir</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">new_c</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">second</span> <span class=\"o\">+</span> <span class=\"n\">dir</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">new_r</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">new_c</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">new_r</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">new_c</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">new_r</span><span class=\"p\">][</span><span class=\"n\">new_c</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">][</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">new_r</span><span class=\"p\">][</span><span class=\"n\">new_c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">][</span><span class=\"n\">curr</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">({</span> <span class=\"n\">new_r</span><span class=\"p\">,</span> <span class=\"n\">new_c</span> <span class=\"p\">});</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(r \\cdot c)</script>.</li>\n<li>\n<p>Since, the new cells are added to the queue only if their current distance is greater than the calculated distance, cells are not likely to be added multiple times.</p>\n</li>\n<li>\n<p>Space complexity: <script type=\"math/tex; mode=display\">O(r \\cdot c)</script>. Additional <script type=\"math/tex; mode=display\">O(r \\cdot c)</script> for queue than in Approach #1</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dp-approach-accepted\">Approach #3 DP Approach [Accepted]</h4>\n<p><strong>Intuition</strong></p>\n<p>The distance of a cell from <code>0</code> can be calculated if we know the nearest distance for all the neighbours, in which case the distance is minimum distance of any neightbour + 1. And, instantly, the word come to mind DP!!<br />\nFor each <code>1</code>, the minimum path to <code>0</code> can be in any direction. So, we need to check all the 4 direction. In one iteration from top to bottom, we can check left and top directions, and we need another iteration from bottom to top to check for right and bottom direction.</p>\n<p><strong>Algorithm</strong></p>\n<ul>\n<li>Iterate the matrix from top to bottom-left to right:</li>\n<li>Update\n  <script type=\"math/tex; mode=display\">\\text{dist}[i][j]=\\min(\\text{dist}[i][j],\\min(\\text{dist}[i][j-1],\\text{dist}[i-1][j])+1)</script>\n  i.e., minimum of the current dist and distance from top or left neighbour +1, that would have been already calculated previously in the current iteration.</li>\n<li>Now, we need to do the back iteration in the similar manner: from bottom to top-right to left:</li>\n<li>Update\n  <script type=\"math/tex; mode=display\">\\text{dist}[i][j]=\\min(\\text{dist}[i][j],\\min(\\text{dist}[i][j+1],\\text{dist}[i+1][j])+1)</script>\n  i.e. minimum of current dist and distances calculated from bottom and right neighbours, that would be already available in current iteration.</li>\n</ul>\n<p><strong>C++</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">updateMatrix</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;&amp;</span> <span class=\"n\">matrix</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rows</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;</span> <span class=\"n\">dist</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">INT_MAX</span> <span class=\"o\">-</span> <span class=\"mi\">100000</span><span class=\"p\">));</span>\n\n    <span class=\"c1\">//First pass: check for left and top</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">//Second pass: check for bottom and right</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">rows</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">cols</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">rows</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">cols</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity analysis</strong></p>\n<ul>\n<li>Time complexity: <script type=\"math/tex; mode=display\">O(r \\cdot c)</script>. 2 passes of <script type=\"math/tex; mode=display\">r \\cdot c</script> each</li>\n<li>Space complexity: <script type=\"math/tex; mode=display\">O(r \\cdot c)</script>. No additional space required than <code>dist vector&lt;vector&lt;int&gt; &gt;</code></li>\n</ul>\n<hr />\n<p>Analysis written by <a href=\"https://leetcode.com/abhinavbansal0\">@abhinavbansal0</a>.</p>',NULL,1,'none','none','none'),(473,'Relative Ranks',1,'',0,0,'<p></p><p>\nGiven scores of <b>N</b> athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [5, 4, 3, 2, 1]\n<b>Output:</b> [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\n<b>Explanation:</b> The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\". <br/>For the left two athletes, you just need to output their relative ranks according to their scores.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>N is a positive integer and won\'t exceed 10,000.</li>\n<li>All the scores of athletes are guaranteed to be unique.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<string> findRelativeRanks(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String[] findRelativeRanks(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findRelativeRanks(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[str]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findRelativeRanks(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string[] FindRelativeRanks(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {string[]}\r\n */\r\nvar findRelativeRanks = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {String[]}\r\ndef find_relative_ranks(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findRelativeRanks(_ nums: [Int]) -> [String] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findRelativeRanks(nums []int) []string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findRelativeRanks(nums: Array[Int]): Array[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(474,'Word Search',2,'Array,Backtracking',0,0,'<p></p><p>\nGiven a 2D board and a word, find if the word exists in the grid.\n</p><p>\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\n</p><p>\nFor example,<br/>\nGiven <b>board</b> = \n</p><pre>\n[\n  [\'A\',\'B\',\'C\',\'E\'],\n  [\'S\',\'F\',\'C\',\'S\'],\n  [\'A\',\'D\',\'E\',\'E\']\n]\n</pre><b>word</b> = <code>\"ABCCED\"</code>, -> returns <code>true</code>,<br/><b>word</b> = <code>\"SEE\"</code>, -> returns <code>true</code>,<br/><b>word</b> = <code>\"ABCB\"</code>, -> returns <code>false</code>.<br/>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool exist(vector<vector<char>>& board, string word) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def exist(self, board, word):\r\n        """\r\n        :type board: List[List[str]]\r\n        :type word: str\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool exist(char** board, int boardRowSize, int boardColSize, char* word) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool Exist(char[,] board, string word) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {character[][]} board\r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nvar exist = function(board, word) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\r\n# @param {String} word\r\n# @return {Boolean}\r\ndef exist(board, word)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func exist(_ board: [[Character]], _ word: String) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func exist(board [][]byte, word string) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(475,'Reverse String II',1,'String',0,0,'<p></p>\nGiven a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.\n\n\n<p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> s = \"abcdefg\", k = 2\n<b>Output:</b> \"bacdfeg\"\n</pre><b>Restrictions:</b><ol>\n<li> The string consists of lower English letters only.</li>\n<li> Length of the given string and k will in the range [1, 10000]</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string reverseStr(string s, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String reverseStr(String s, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def reverseStr(self, s, k):\r\n        """\r\n        :type s: str\r\n        :type k: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* reverseStr(char* s, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ReverseStr(string s, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {string} s\r\n * @param {number} k\r\n * @return {string}\r\n */\r\nvar reverseStr = function(s, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\r\n# @param {Integer} k\r\n# @return {String}\r\ndef reverse_str(s, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func reverseStr(_ s: String, _ k: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseStr(s string, k int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def reverseStr(s: String, k: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(476,'Can I Win',2,'Dynamic Programming,Minimax',0,0,'<p></p><p>In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins. </p><p>What if we change the game so that players cannot re-use integers? </p><p>For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total &gt;= 100.</p><p>Given an integer <code>maxChoosableInteger</code> and another integer <code>desiredTotal</code>, determine if the first player to move can force a win, assuming both players play optimally. </p><p>You can always assume that <code>maxChoosableInteger</code> will not be larger than 20 and <code>desiredTotal</code> will not be larger than 300.\n</p><p><b>Example</b>\n</p><pre>\n<b>Input:</b>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def canIWin(self, maxChoosableInteger, desiredTotal):\r\n        """\r\n        :type maxChoosableInteger: int\r\n        :type desiredTotal: int\r\n        :rtype: bool\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool canIWin(int maxChoosableInteger, int desiredTotal) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public bool CanIWin(int maxChoosableInteger, int desiredTotal) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} maxChoosableInteger\r\n * @param {number} desiredTotal\r\n * @return {boolean}\r\n */\r\nvar canIWin = function(maxChoosableInteger, desiredTotal) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} max_choosable_integer\r\n# @param {Integer} desired_total\r\n# @return {Boolean}\r\ndef can_i_win(max_choosable_integer, desired_total)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func canIWin(_ maxChoosableInteger: Int, _ desiredTotal: Int) -> Bool {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canIWin(maxChoosableInteger int, desiredTotal int) bool {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(477,'Base 7',1,'',0,0,'<p></p><p>Given an integer, return its base 7 string representation.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 100\n<b>Output:</b> \"202\"\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> -7\n<b>Output:</b> \"-10\"\n</pre><p><b>Note:</b>\nThe input will be in range of [-1e7, 1e7].\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    string convertToBase7(int num) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String convertToBase7(int num) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def convertToBase7(self, num):\r\n        """\r\n        :type num: int\r\n        :rtype: str\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* convertToBase7(int num) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public string ConvertToBase7(int num) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} num\r\n * @return {string}\r\n */\r\nvar convertToBase7 = function(num) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\r\n# @return {String}\r\ndef convert_to_base7(num)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func convertToBase7(_ num: Int) -> String {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func convertToBase7(num int) string {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def convertToBase7(num: Int): String = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(478,'Single Element in a Sorted Array',2,'',0,0,'<p></p><p>\nGiven a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once. \n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,1,2,3,3,4,4,8,8]\n<b>Output:</b> 2\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [3,3,7,7,10,11,11]\n<b>Output:</b> 10\n</pre><p><b>Note:</b>\nYour solution should run in O(log n) time and O(1) space.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int singleNonDuplicate(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        """\n        :type nums: List[int]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int singleNonDuplicate(int* nums, int numsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int SingleNonDuplicate(int[] nums) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNonDuplicate = function(nums) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\n# @return {Integer}\ndef single_non_duplicate(nums)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func singleNonDuplicate(_ nums: [Int]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func singleNonDuplicate(nums []int) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def singleNonDuplicate(nums: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(479,'Binary Tree Level Order Traversal II',1,'Tree,Breadth-first Search',0,0,'<p></p><p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes\' values. (ie, from left to right, level by level from leaf to root).</p><p>\nFor example:<br/>\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br/>\n</p><pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre><p>\nreturn its bottom-up level order traversal as:<br/>\n</p><pre>\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def levelOrderBottom(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[List[int]]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[][]}\r\n */\r\nvar levelOrderBottom = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[][]}\r\ndef level_order_bottom(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func levelOrderBottom(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc levelOrderBottom(root *TreeNode) [][]int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def levelOrderBottom(root: TreeNode): List[List[Int]] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(480,'Average of Levels in Binary Tree',1,'Tree',0,0,'<p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.\n\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<b>Output:</b> [3, 14.5, 11]\n<b>Explanation:</b>\nThe average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The range of node\'s value is in the range of 32-bit signed integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def averageOfLevels(self, root):\n        """\n        :type root: TreeNode\n        :rtype: List[float]\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def averageOfLevels(self, root):\n        """\n        :type root: TreeNode\n        :rtype: List[float]\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* averageOfLevels(struct TreeNode* root, int* returnSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<double> AverageOfLevels(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar averageOfLevels = function(root) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Float[]}\ndef average_of_levels(root)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func averageOfLevels(_ root: TreeNode?) -> list<double> {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc averageOfLevels(root *TreeNode) []float64 {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def averageOfLevels(root: TreeNode): Array[Double] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-depth-first-search-accepted\">Approach #1 Using Depth First Search [Accepted]</a></li>\n<li><a href=\"#approach-2-breadth-first-search-accepted\">Approach #2 Breadth First Search [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-depth-first-search-accepted\">Approach #1 Using Depth First Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>One of the methods to solve the given problem is to make use of Depth First Search. In DFS, we try to exhaust each branch of the given tree during the tree traversal before moving onto the next branch.</p>\n<p>To make use of DFS to solve the given problem, we make use of two lists <script type=\"math/tex; mode=display\">count</script> and <script type=\"math/tex; mode=display\">res</script>. Here, <script type=\"math/tex; mode=display\">count[i]</script> refers to the total number of nodes found at the <script type=\"math/tex; mode=display\">i^{th}</script> level(counting from root at level 0) till now, and <script type=\"math/tex; mode=display\">res[i]</script> refers to the sum of the nodes at the <script type=\"math/tex; mode=display\">i^{th}</script> level encountered till now during the Depth First Search.</p>\n<p>We make use of a function <code>average(t, i, res, count)</code>, which is used to fill the <script type=\"math/tex; mode=display\">res</script> and <script type=\"math/tex; mode=display\">count</script> array if we start the DFS from the node <script type=\"math/tex; mode=display\">t</script> at the <script type=\"math/tex; mode=display\">i^{th}</script> level in the given tree. We start by making the function call <code>average(root, 0, res, count)</code>. After this, we do the following at every step:</p>\n<ol>\n<li>\n<p>Add the value of the current node to the <script type=\"math/tex; mode=display\">res</script>(or <script type=\"math/tex; mode=display\">sum</script>) at the index corresponding to the current level. Also, increment the <script type=\"math/tex; mode=display\">count</script> at the index corresponding to the current level. </p>\n</li>\n<li>\n<p>Call the same function, <code>average</code>, with the left and the right child of the current node. Also, update the current level used in making the function call.</p>\n</li>\n<li>\n<p>Repeat the above steps till all the nodes in the given tree have been considered once.</p>\n</li>\n<li>\n<p>Populate the averages in the resultant array to be returned.</p>\n</li>\n</ol>\n<p>The following animation illustrates the process.</p>\n<p>!?!../Documents/637_Avg_of_Levels_DFS.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Double</span> <span class=\"o\">&gt;</span> <span class=\"n\">averageOfLevels</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Double</span> <span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">average</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">average</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Double</span> <span class=\"o\">&gt;</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n            <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">);</span>\n            <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">average</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n        <span class=\"n\">average</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The whole tree is traversed once only. Here, <script type=\"math/tex; mode=display\">n</script> refers to the total number of nodes in the given binary tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(h)</script>. <script type=\"math/tex; mode=display\">res</script> and <script type=\"math/tex; mode=display\">count</script> array of size <script type=\"math/tex; mode=display\">h</script> are used. Here, <script type=\"math/tex; mode=display\">h</script> refers to the height(maximum number of levels) of the given binary tree. Further, the depth of the recursive tree could go upto <script type=\"math/tex; mode=display\">h</script> only.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-breadth-first-search-accepted\">Approach #2 Breadth First Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another method to solve the given problem is to make use of a Breadth First Search. In BFS, we start by pushing the root node into a <script type=\"math/tex; mode=display\">queue</script>. Then, we remove an element(node) from the front of the <script type=\"math/tex; mode=display\">queue</script>. For every node removed from the <script type=\"math/tex; mode=display\">queue</script>, we add all its children to the back of the same <script type=\"math/tex; mode=display\">queue</script>. We keep on continuing this process till the <script type=\"math/tex; mode=display\">queue</script> becomes empty. In this way, we can traverse the given tree on a level-by-level basis.</p>\n<p>But, in the current implementation, we need to do a slight modification, since we need to separate the nodes on one level from that of the other. </p>\n<p>The steps to be performed are listed below:</p>\n<ol>\n<li>\n<p>Put the root node into the <script type=\"math/tex; mode=display\">queue</script>.</p>\n</li>\n<li>\n<p>Initialize <script type=\"math/tex; mode=display\">sum</script> and <script type=\"math/tex; mode=display\">count</script> as 0 and <script type=\"math/tex; mode=display\">temp</script> as an empty queue.</p>\n</li>\n<li>\n<p>Pop a node from the front of the <script type=\"math/tex; mode=display\">queue</script>. Add this node\'s value to the <script type=\"math/tex; mode=display\">sum</script> corresponding to the current level. Also, update the <script type=\"math/tex; mode=display\">count</script> corresponding to the current level.</p>\n</li>\n<li>\n<p>Put the children nodes of the node last popped into the a <script type=\"math/tex; mode=display\">temp</script> queue(instead of <script type=\"math/tex; mode=display\">queue</script>).</p>\n</li>\n<li>\n<p>Continue steps 3 and 4 till <script type=\"math/tex; mode=display\">queue</script> becomes empty. (An empty <script type=\"math/tex; mode=display\">queue</script> indicates that one level of the tree has been considered).</p>\n</li>\n<li>\n<p>Reinitialize <script type=\"math/tex; mode=display\">queue</script> with its value as <script type=\"math/tex; mode=display\">temp</script>.</p>\n</li>\n<li>\n<p>Populate the <script type=\"math/tex; mode=display\">res</script> array with the average corresponding to the current level.</p>\n</li>\n<li>\n<p>Repeat steps 2 to 7 till the <script type=\"math/tex; mode=display\">queue</script> and <script type=\"math/tex; mode=display\">temp</script> become empty.</p>\n</li>\n</ol>\n<p>At the end, <script type=\"math/tex; mode=display\">res</script> is the required result.</p>\n<p>The following animation illustrates the process.</p>\n<p>!?!../Documents/637_Average_Of_Levels.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Definition for a binary tree node.</span>\n<span class=\"cm\"> * public class TreeNode {</span>\n<span class=\"cm\"> *     int val;</span>\n<span class=\"cm\"> *     TreeNode left;</span>\n<span class=\"cm\"> *     TreeNode right;</span>\n<span class=\"cm\"> *     TreeNode(int x) { val = x; }</span>\n<span class=\"cm\"> * }</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Double</span> <span class=\"o\">&gt;</span> <span class=\"n\">averageOfLevels</span><span class=\"o\">(</span><span class=\"n\">TreeNode</span> <span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">Double</span> <span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">root</span><span class=\"o\">);</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"kt\">long</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"n\">Queue</span> <span class=\"o\">&lt;</span> <span class=\"n\">TreeNode</span> <span class=\"o\">&gt;</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">LinkedList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"n\">TreeNode</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">();</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">val</span><span class=\"o\">;</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">left</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n                    <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">*</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"n\">count</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The whole tree is traversed atmost once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of nodes in the given binary tree.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script>. The size of <script type=\"math/tex; mode=display\">queue</script> or <script type=\"math/tex; mode=display\">temp</script> can grow upto atmost the maximum number of nodes at any level in the given binary tree. Here, <script type=\"math/tex; mode=display\">m</script> refers to the maximum mumber of nodes at any level in the input tree.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(481,'Construct Binary Tree from Inorder and Postorder Traversal',2,'Tree,Array,Depth-first Search',0,0,'<p></p><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p><p><b>Note:</b><br/>\nYou may assume that duplicates do not exist in the tree.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def buildTree(self, inorder, postorder):\r\n        """\r\n        :type inorder: List[int]\r\n        :type postorder: List[int]\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* buildTree(int* inorder, int inorderSize, int* postorder, int postorderSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode BuildTree(int[] inorder, int[] postorder) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {number[]} inorder\r\n * @param {number[]} postorder\r\n * @return {TreeNode}\r\n */\r\nvar buildTree = function(inorder, postorder) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {Integer[]} inorder\r\n# @param {Integer[]} postorder\r\n# @return {TreeNode}\r\ndef build_tree(inorder, postorder)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func buildTree(_ inorder: [Int], _ postorder: [Int]) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(inorder []int, postorder []int) *TreeNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def buildTree(inorder: Array[Int], postorder: Array[Int]): TreeNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(482,'Exclusive Time of Functions',2,'Stack',0,0,'<p></p><p>Given the running logs of <b>n</b> functions that are executed in a nonpreemptive single threaded CPU, find the exclusive time of these functions. </p><p>Each function has a unique id, start from <b>0</b> to <b>n-1</b>. A function may be called recursively or by another function.</p><p>A log is a string has this format : <code>function_id:start_or_end:timestamp</code>. For example, <code>\"0:start:0\"</code> means function 0 starts from the very beginning of time 0. <code>\"0:end:0\"</code> means function 0 ends to the very end of time 0. </p><p>Exclusive time of a function is defined as the time spent within this function, the time spent by calling other functions should not be considered as this function\'s exclusive time. You should return the exclusive time of each function sorted by their function id.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>\nn = 2\nlogs = \n[\"0:start:0\",\n \"1:start:2\",\n \"1:end:5\",\n \"0:end:6\"]\n<b>Output:</b>[3, 4]\n<b>Explanation:</b>\nFunction 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. \nNow function 0 <b>calls function 1</b>, function 1 starts at time 2, executes 4 units of time and end at time 5.\nFunction 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. \nSo function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>Input logs will be sorted by timestamp, NOT log id.</li>\n<li>Your output should be sorted by function id, which means the 0th element of your output corresponds to the exclusive time of function 0.</li>\n<li>Two functions won\'t start or end at the same time.</li>\n<li>Functions could be called recursively, and will always end.</li>\n<li>1 &lt;= n &lt;= 100</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> exclusiveTime(int n, vector<string>& logs) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] exclusiveTime(int n, List<String> logs) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def exclusiveTime(self, n, logs):\r\n        """\r\n        :type n: int\r\n        :type logs: List[str]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def exclusiveTime(self, n, logs):\r\n        """\r\n        :type n: int\r\n        :type logs: List[str]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* exclusiveTime(int n, char** logs, int logsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] ExclusiveTime(int n, IList<string> logs) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {string[]} logs\r\n * @return {number[]}\r\n */\r\nvar exclusiveTime = function(n, logs) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {String[]} logs\r\n# @return {Integer[]}\r\ndef exclusive_time(n, logs)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func exclusiveTime(_ n: Int, _ logs: [String]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func exclusiveTime(n int, logs []string) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def exclusiveTime(n: Int, logs: List[String]): Array[Int] = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-using-stack-time-limit-exceeded\">Approach #1 Using Stack [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-approach-accepted\">Approach #2 Better Approach [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-using-stack-time-limit-exceeded\">Approach #1 Using Stack [Time Limit Exceeded]</h4>\n<p>Before starting off with the solution, let\'s discuss a simple idea. Suppose we have three functions <script type=\"math/tex; mode=display\">func_1</script>, <script type=\"math/tex; mode=display\">func_2</script> and <script type=\"math/tex; mode=display\">func_3</script> such that <script type=\"math/tex; mode=display\">func_1</script> calls <script type=\"math/tex; mode=display\">func_2</script> and then <script type=\"math/tex; mode=display\">func_2</script> calls <script type=\"math/tex; mode=display\">func_3</script>. In this case, <script type=\"math/tex; mode=display\">func_3</script> starts at the end and ends first, <script type=\"math/tex; mode=display\">func_2</script> starts at 2nd position and ends at the 2nd last step. Similarly, <script type=\"math/tex; mode=display\">func_1</script> starts first and ends at the last position. Thus, we can conclude that the function which is entered at the end finishes first and the one which is entered first ends at the last position. </p>\n<p>From the above discussion, we can conclude that we can make use of a <script type=\"math/tex; mode=display\">stack</script> to solve the given problem. We can start by pushing the first function\'s id from the given <script type=\"math/tex; mode=display\">logs</script> list onto the array. We also keep a track of the current <script type=\"math/tex; mode=display\">time</script>. We also make use of a <script type=\"math/tex; mode=display\">res</script> array, such that <script type=\"math/tex; mode=display\">res[i]</script> is to keep a track of the exclusive time spent by the Fucntion with function id <script type=\"math/tex; mode=display\">i</script> till the current time. </p>\n<p>Now, we can move on to the next function in <script type=\"math/tex; mode=display\">logs</script>. The start/end time of the next function will obviously be larger than the start time of the function on the <script type=\"math/tex; mode=display\">stack</script>. We keep on incrementing the current <script type=\"math/tex; mode=display\">time</script> and the exclusive time for the function on the top of the <script type=\"math/tex; mode=display\">stack</script> till the current time becomes equal to the start/end time of the next function in the <script type=\"math/tex; mode=display\">logs</script> list. </p>\n<p>Thus, now, we\'ve reached a point, where the control shifts from the last function to a new function, due to a function call(indicated by a start label for the next function), or the last function could exit(indicated by the end label for the next function). Thus, we can no longer continue with the same old function. </p>\n<p>If the next function includes a start label, we push this function on the top of the <script type=\"math/tex; mode=display\">stack</script>, since the last function would need to be revisited again in the future. On the other hand, if the next function includes an end label, it means the last function on the top of the <script type=\"math/tex; mode=display\">stack</script> is terminating.</p>\n<p>We also know that an end label indicates that this function executes till the end of the given time. Thus, we need to increment the current <script type=\"math/tex; mode=display\">time</script> and the exclusive time of the last function as well to account for this fact. Now, we can remove(pop) this function from the <script type=\"math/tex; mode=display\">stack</script>.  We can continue this process for every function in the <script type=\"math/tex; mode=display\">logs</script> list. </p>\n<p>At the end, the <script type=\"math/tex; mode=display\">res</script> array gives the exclusive times for each function.</p>\n<p>Summarizing the above process, we need to do the following:</p>\n<ol>\n<li>\n<p>Push the function id of the first function in the <script type=\"math/tex; mode=display\">logs</script> list on the <script type=\"math/tex; mode=display\">stack</script>.</p>\n</li>\n<li>\n<p>Keep incrementing the exlusive time(along with the current time) corresponding to the function on the top of the <script type=\"math/tex; mode=display\">stack</script>(in the <script type=\"math/tex; mode=display\">res</script> array), till the current time equals the start/end time corresponding to the next function in the <script type=\"math/tex; mode=display\">logs</script> list.</p>\n</li>\n<li>\n<p>If the next function has a \'start\' label, push this function\'s id onto the stack. Otherwise, increment the last function\'s exclusive time(along with the current time), and pop the function id from the top of the stack.</p>\n</li>\n<li>\n<p>Repeat steps 2 and 3 till all the functions in the <script type=\"math/tex; mode=display\">logs</script> list have been considered.</p>\n</li>\n<li>\n<p>Return the resultant exlcusive time(<script type=\"math/tex; mode=display\">res</script>).</p>\n</li>\n</ol>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">exclusiveTime</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">logs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]);</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"o\">);</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]++;</span>\n                <span class=\"n\">time</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">&quot;start&quot;</span><span class=\"o\">))</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]));</span>\n            <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]++;</span>\n                <span class=\"n\">time</span><span class=\"o\">++;</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(t)</script>. We increment the time till all the functions are done with the execution. Here, <script type=\"math/tex; mode=display\">t</script> refers to the end time of the last function in the <script type=\"math/tex; mode=display\">logs</script> list.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The <script type=\"math/tex; mode=display\">stack</script> can grow upto a depth of atmost <script type=\"math/tex; mode=display\">n/2</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in the given <script type=\"math/tex; mode=display\">logs</script> list.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-approach-accepted\">Approach #2 Better Approach [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, for every function on the top of the <script type=\"math/tex; mode=display\">stack</script>, we incremented the current time and the exclusive time of this same function till the current time became equal to the start/end time of the next function. </p>\n<p>Instead of doing this incrementing step by step, we can directly use the difference between the next function\'s start/stop time and the current function\'s start/stop time. The rest of the process remains the same as in the last approach. </p>\n<p>The following animation illustrates the process.</p>\n<p>!?!../Documents/636_Exclusive_Time_of_Functions.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">exclusiveTime</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">&lt;</span> <span class=\"n\">String</span> <span class=\"o\">&gt;</span> <span class=\"n\">logs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">];</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]));</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]);</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">logs</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">&quot;start&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span>\n                    <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">-</span> <span class=\"n\">prev</span><span class=\"o\">;</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]));</span>\n                <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">-</span> <span class=\"n\">prev</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n                <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. We iterate over the entire <script type=\"math/tex; mode=display\">logs</script> array just once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in the <script type=\"math/tex; mode=display\">logs</script> list.</p>\n</li>\n<li>\n<p>Space complexity : The <script type=\"math/tex; mode=display\">stack</script> can grow upto a depth of atmost <script type=\"math/tex; mode=display\">n/2</script>. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of elements in the given <script type=\"math/tex; mode=display\">logs</script> list.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(483,'Construct Binary Tree from Preorder and Inorder Traversal',2,'Tree,Array,Depth-first Search',0,0,'<p></p><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p><b>Note:</b><br/>\nYou may assume that duplicates do not exist in the tree.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def buildTree(self, preorder, inorder):\r\n        """\r\n        :type preorder: List[int]\r\n        :type inorder: List[int]\r\n        :rtype: TreeNode\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode BuildTree(int[] preorder, int[] inorder) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {number[]} preorder\r\n * @param {number[]} inorder\r\n * @return {TreeNode}\r\n */\r\nvar buildTree = function(preorder, inorder) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {Integer[]} preorder\r\n# @param {Integer[]} inorder\r\n# @return {TreeNode}\r\ndef build_tree(preorder, inorder)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func buildTree(_ preorder: [Int], _ inorder: [Int]) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def buildTree(preorder: Array[Int], inorder: Array[Int]): TreeNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(484,'Island Perimeter',1,'Hash Table',0,0,'<p></p><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn\'t have \"lakes\" (water inside that isn\'t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don\'t exceed 100. Determine the perimeter of the island.</p><p><b>Example:</b>\n</p><pre>\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\nAnswer: 16\nExplanation: The perimeter is the 16 yellow stripes in the image below:\n<img src=\"https://leetcode.com/static/images/problemset/island.png\"/>\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int islandPerimeter(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int islandPerimeter(int[][] grid) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def islandPerimeter(self, grid):\r\n        """\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int islandPerimeter(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int IslandPerimeter(int[,] grid) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar islandPerimeter = function(grid) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef island_perimeter(grid)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func islandPerimeter(_ grid: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func islandPerimeter(grid [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def islandPerimeter(grid: Array[Array[Int]]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(485,'Next Greater Element II',2,'Stack',0,0,'<p></p><p>\nGiven a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn\'t exist, output -1 for this number.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,1]\n<b>Output:</b> [2,-1,2]\n<b>Explanation:</b> The first 1\'s next greater number is 2; The number 2 can\'t find next greater number; The second 1\'s next greater number needs to search circularly, which is also 2.\n</pre><p><b>Note:</b>\nThe length of given array won\'t exceed 10000.\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> nextGreaterElements(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] nextGreaterElements(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def nextGreaterElements(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* nextGreaterElements(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] NextGreaterElements(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar nextGreaterElements = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef next_greater_elements(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func nextGreaterElements(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nextGreaterElements(nums []int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def nextGreaterElements(nums: Array[Int]): Array[Int] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-using-double-length-array-time-limit-exceeded\">Approach #1 Brute Force (using Double Length Array) [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</a></li>\n<li><a href=\"#approach-3-using-stack-accepted\">Approach #3 Using Stack [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-using-double-length-array-time-limit-exceeded\">Approach #1 Brute Force (using Double Length Array) [Time Limit Exceeded]</h4>\n<p>In this method, we make use of an array <script type=\"math/tex; mode=display\">doublenums</script> which is formed by concatenating two copies of the given <script type=\"math/tex; mode=display\">nums</script> array one after the other. Now, when we need to find out the next greater element for <script type=\"math/tex; mode=display\">nums[i]</script>, we can simply scan all the elements <script type=\"math/tex; mode=display\">doublenums[j]</script>, such that <script type=\"math/tex; mode=display\">i < j < length(doublenums)</script>. The first element found satisfying the given condition is the required result for <script type=\"math/tex; mode=display\">nums[i]</script>. If no such element is found, we put a <script type=\"math/tex; mode=display\">\\text{-1}</script> at the appropriate position in the <script type=\"math/tex; mode=display\">res</script> array.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">nextGreaterElements</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">doublenums</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">];</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">doublenums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">doublenums</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">doublenums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">doublenums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">doublenums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">doublenums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. The complete <script type=\"math/tex; mode=display\">doublenums</script> array(of size <script type=\"math/tex; mode=display\">\\text{2n}</script>) is scanned for all the elements of <script type=\"math/tex; mode=display\">nums</script> in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">doublenums</script> array of size <script type=\"math/tex; mode=display\">\\text{2n}</script> is used. <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">\\text{n}</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-accepted\">Approach #2 Better Brute Force [Accepted]</h4>\n<p>Instead of making a double length copy of <script type=\"math/tex; mode=display\">nums</script> array , we can traverse circularly in the <script type=\"math/tex; mode=display\">nums</script> array by making use of the <script type=\"math/tex; mode=display\">\\text{%(modulus)}</script> operator. For every element <script type=\"math/tex; mode=display\">nums[i]</script>, we start searching in the <script type=\"math/tex; mode=display\">nums</script> array(of length <script type=\"math/tex; mode=display\">n</script>) from the index <script type=\"math/tex; mode=display\">(i+1)%n</script> and look at the next(cicularly) <script type=\"math/tex; mode=display\">n-1</script> elements. For <script type=\"math/tex; mode=display\">nums[i]</script> we do so by scanning over <script type=\"math/tex; mode=display\">nums[j]</script>, such that\n<script type=\"math/tex; mode=display\">(i+1)%n &leq; j &leq; (i+(n-1))%n</script>, and we look for the first greater element found. If no such element is found, we put a <script type=\"math/tex; mode=display\">\\text{-1}</script> at the appropriate position in the <script type=\"math/tex; mode=display\">res</script> array.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">nextGreaterElements</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>. The complete <script type=\"math/tex; mode=display\">nums</script> array of size <script type=\"math/tex; mode=display\">n</script> is scanned for all the elements of <script type=\"math/tex; mode=display\">nums</script> in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-stack-accepted\">Approach #3 Using Stack [Accepted]</h4>\n<p>This approach makes use of a stack. This stack stores the indices of the appropriate elements from <script type=\"math/tex; mode=display\">nums</script> array.  The top of the stack refers to the index of the Next Greater Element found so far. We store the indices instead of the elements since there could be duplicates in the <script type=\"math/tex; mode=display\">nums</script> array. The description of the method will make the above statement clearer.</p>\n<p>We start traversing the <script type=\"math/tex; mode=display\">nums</script> array from right towards the left. For an element <script type=\"math/tex; mode=display\">nums[i]</script> encountered, we pop all the elements\n<script type=\"math/tex; mode=display\">stack[top]</script> from the stack such that <script type=\"math/tex; mode=display\">nums\\big[stack[top]\\big] &le; nums[i]</script>. We continue the popping till we encounter a <script type=\"math/tex; mode=display\">stack[top]</script> satisfying <script type=\"math/tex; mode=display\">nums\\big[stack[top]\\big] > nums[i]</script>. Now, it is obvious that the current <script type=\"math/tex; mode=display\">stack[top]</script> only can act as the\nNext Greater Element for <script type=\"math/tex; mode=display\">nums[i]</script>(right now, considering only the elements lying to the right of <script type=\"math/tex; mode=display\">nums[i]</script>).</p>\n<p>If no element remains on the top of the stack, it means no larger element than <script type=\"math/tex; mode=display\">nums[i]</script> exists to its right. Along with this, we also push the index of the element just encountered(<script type=\"math/tex; mode=display\">nums[i]</script>), i.e. <script type=\"math/tex; mode=display\">i</script> over the top of the stack, so that <script type=\"math/tex; mode=display\">nums[i]</script>(or <script type=\"math/tex; mode=display\">stack[top</script>) now acts as the Next Greater Element for the elements lying to its left.</p>\n<p>We go through two such passes over the complete <script type=\"math/tex; mode=display\">nums</script> array. This is done so as to complete a circular traversal over the <script type=\"math/tex; mode=display\">nums</script> array. The first pass could make some wrong entries in the <script type=\"math/tex; mode=display\">res</script> array since it considers only the elements lying to the right of <script type=\"math/tex; mode=display\">nums[i]</script>, without a circular traversal. But, these entries are corrected in the second pass.  </p>\n<p>Further, to ensure the correctness of the method, let\'s look at the following cases.</p>\n<p>Assume that <script type=\"math/tex; mode=display\">nums[j]</script> is the correct Next Greater Element for <script type=\"math/tex; mode=display\">nums[i]</script>, such that <script type=\"math/tex; mode=display\">i < j &le; stack[top]</script>. Now, whenever we encounter <script type=\"math/tex; mode=display\">nums[j]</script>, if <script type=\"math/tex; mode=display\">nums[j] > nums\\big[stack[top]\\big]</script>, it would have already popped the previous <script type=\"math/tex; mode=display\">stack[top]</script> and <script type=\"math/tex; mode=display\">j</script> would have become the topmost element. On the other hand, if  <script type=\"math/tex; mode=display\">nums[j] < nums\\big[stack[top]\\big]</script>, it would have become the topmost element by being pushed above the previous <script type=\"math/tex; mode=display\">stack[top]</script>. In both the cases, if <script type=\"math/tex; mode=display\">nums[j] > nums[i]</script>, it will be correctly determined to be the Next Greater Element.</p>\n<p>The following example makes the procedure clear:</p>\n<!--![Next_Greater_Element_II](../Figures/503_Next_Greater_Element_II.gif)-->\n\n<p>!?!../Documents/503_Next_Greater2.json:1000,563!?!</p>\n<p>As the animation above depicts, after the first pass, there are a number of wrong entries(marked as <script type=\"math/tex; mode=display\">\\text{-1}</script>) in the <script type=\"math/tex; mode=display\">res</script> array, because only the elements lying to the corresponding right(non-circular) have been considered till now. But, after the second pass, the correct values are substituted.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">nextGreaterElements</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"n\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stack</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">empty</span><span class=\"o\">()</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()];</span>\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only two traversals of the <script type=\"math/tex; mode=display\">nums</script> array are done. Further, atmost <script type=\"math/tex; mode=display\">\\text{2n}</script> elements are pushed and popped from the stack.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. A stack of size <script type=\"math/tex; mode=display\">n</script> is used. <script type=\"math/tex; mode=display\">res</script> array of size <script type=\"math/tex; mode=display\">n</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(486,'Minimum Time Difference',2,'String',0,0,'<p>Given a list of 24-hour clock time points in \"Hour:Minutes\" format, find the minimum <b>minutes</b> difference between any two time points in the list. \n\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [\"23:59\",\"00:00\"]\n<b>Output:</b> 1\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The number of time points in the given list is at least 2 and won\'t exceed 20000.</li>\n<li>The input time is legal and ranges from 00:00 to 23:59.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    int findMinDifference(vector<string>& timePoints) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMinDifference(List<String> timePoints) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findMinDifference(self, timePoints):\n        """\n        :type timePoints: List[str]\n        :rtype: int\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMinDifference(char** timePoints, int timePointsSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public int FindMinDifference(IList<string> timePoints) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string[]} timePoints\n * @return {number}\n */\nvar findMinDifference = function(timePoints) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} time_points\n# @return {Integer}\ndef find_min_difference(time_points)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findMinDifference(_ timePoints: [String]) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMinDifference(timePoints []string) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMinDifference(timePoints: List[String]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(487,'Maximum Depth of Binary Tree',1,'Tree,Depth-first Search',0,0,'<p></p><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int maxDepth(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def maxDepth(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint maxDepth(struct TreeNode* root) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int MaxDepth(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar maxDepth = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef max_depth(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func maxDepth(_ root: TreeNode?) -> Int {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxDepth(root *TreeNode) int {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def maxDepth(root: TreeNode): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(488,'IPO',3,'Heap,Greedy',0,0,'<p></p><p>\nSuppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most <b>k</b> distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most <b>k</b> distinct projects. \n</p><p>\nYou are given several projects. For each project <b>i</b>, it has a pure profit <b>P<sub>i</sub></b> and a minimum capital of <b>C<sub>i</sub></b> is needed to start the corresponding project. Initially, you have <b>W</b> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n</p><p>\nTo sum up, pick a list of at most <b>k</b> distinct projects from given projects to maximize your final capital, and output your final maximized capital.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\n\n<b>Output:</b> 4\n\n<b>Explanation:</b> Since your initial capital is 0, you can only start the project indexed 0.\n             After finishing it you will obtain profit 1 and your capital becomes 1.\n             With capital 1, you can either start the project indexed 1 or the project indexed 2.\n             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\n             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>You may assume all numbers in the input are non-negative integers.</li>\n<li>The length of Profits array and Capital array will not exceed 50,000.</li>\n<li>The answer is guaranteed to fit in a 32-bit signed integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int findMaximizedCapital(int k, int W, vector<int>& Profits, vector<int>& Capital) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int findMaximizedCapital(int k, int W, int[] Profits, int[] Capital) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findMaximizedCapital(self, k, W, Profits, Capital):\r\n        """\r\n        :type k: int\r\n        :type W: int\r\n        :type Profits: List[int]\r\n        :type Capital: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int findMaximizedCapital(int k, int W, int* Profits, int ProfitsSize, int* Capital, int CapitalSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int FindMaximizedCapital(int k, int W, int[] Profits, int[] Capital) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} k\r\n * @param {number} W\r\n * @param {number[]} Profits\r\n * @param {number[]} Capital\r\n * @return {number}\r\n */\r\nvar findMaximizedCapital = function(k, W, Profits, Capital) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} k\r\n# @param {Integer} w\r\n# @param {Integer[]} profits\r\n# @param {Integer[]} capital\r\n# @return {Integer}\r\ndef find_maximized_capital(k, w, profits, capital)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findMaximizedCapital(_ k: Int, _ W: Int, _ Profits: [Int], _ Capital: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMaximizedCapital(k int, W int, Profits []int, Capital []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findMaximizedCapital(k: Int, W: Int, Profits: Array[Int], Capital: Array[Int]): Int = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(489,'Convert BST to Greater Tree',1,'Tree',0,0,'<p></p><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p><p>\n<b>Example:</b>\n</p><pre>\n<b>Input:</b> The root of a Binary Search Tree like this:\n              5\n            /   \\\n           2     13\n\n<b>Output:</b> The root of a Greater Tree like this:\n             18\n            /   \\\n          20     13\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode convertBST(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def convertBST(self, root):\n        """\n        :type root: TreeNode\n        :rtype: TreeNode\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* convertBST(struct TreeNode* root) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConvertBST(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar convertBST = function(root) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {TreeNode}\ndef convert_bst(root)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func convertBST(_ root: TreeNode?) -> TreeNode? {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc convertBST(root *TreeNode) *TreeNode {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def convertBST(root: TreeNode): TreeNode = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(490,'Find Mode in Binary Search Tree',1,'Tree',0,0,'<p></p><p>Given a binary search tree (BST) with duplicates, find all the <a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\" target=\"_blank\">mode(s)</a> (the most frequently occurred element) in the given BST.</p><p>\nAssume a BST is defined as follows:\n</p><ul>\n<li>The left subtree of a node contains only nodes with keys <b>less than or equal to</b> the node\'s key.</li>\n<li>The right subtree of a node contains only nodes with keys <b>greater than or equal to</b> the node\'s key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul><p>\nFor example:<br/>\nGiven BST <code>[1,null,2,2]</code>,<br/>\n</p><pre>\n   1\n    \\\n     2\n    /\n   2\n</pre><p>\nreturn <code>[2]</code>.\n</p><p><b>Note:</b>\nIf a tree has more than one mode, you can return them in any order.\n</p><p><b>Follow up:</b>\nCould you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\n</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> findMode(TreeNode* root) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] findMode(TreeNode root) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findMode(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findMode(struct TreeNode* root, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int[] FindMode(TreeNode root) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar findMode = function(root) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef find_mode(root)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func findMode(_ root: TreeNode?) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findMode(root *TreeNode) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findMode(root: TreeNode): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(491,'Complex Number Multiplication',2,'Math,String',0,0,'<p></p><p>\nGiven two strings representing two <a href=\"https://en.wikipedia.org/wiki/Complex_number\">complex numbers</a>.</p><p>\nYou need to return a string representing their multiplication. Note i<sup>2</sup> = -1 according to the definition.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> \"1+1i\", \"1+1i\"\n<b>Output:</b> \"0+2i\"\n<b>Explanation:</b> (1 + i) * (1 + i) = 1 + i<sup>2</sup> + 2 * i = 2i, and you need convert it to the form of 0+2i.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> \"1+-1i\", \"1+-1i\"\n<b>Output:</b> \"0+-2i\"\n<b>Explanation:</b> (1 - i) * (1 - i) = 1 + i<sup>2</sup> - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n</pre><p><b>Note:</b>\n</p><ol>\n<li>The input strings will not have extra blank.</li>\n<li>The input strings will be given in the form of <b>a+bi</b>, where the integer <b>a</b> and <b>b</b> will both belong to the range of [-100, 100]. And <b>the output should be also in this form</b>.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    string complexNumberMultiply(string a, string b) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String complexNumberMultiply(String a, String b) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def complexNumberMultiply(self, a, b):\n        """\n        :type a: str\n        :type b: str\n        :rtype: str\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"char* complexNumberMultiply(char* a, char* b) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string ComplexNumberMultiply(string a, string b) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar complexNumberMultiply = function(a, b) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} a\n# @param {String} b\n# @return {String}\ndef complex_number_multiply(a, b)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func complexNumberMultiply(_ a: String, _ b: String) -> String {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func complexNumberMultiply(a string, b string) string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def complexNumberMultiply(a: String, b: String): String = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-simple-solutionaccepted\">Approach #1 Simple Solution[Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-simple-solutionaccepted\">Approach #1 Simple Solution[Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Multiplication of two complex numbers can be done as:</p>\n<p>\n<script type=\"math/tex; mode=display\">\n(a+ib) \\times (x+iy)=ax+i^2by+i(bx+ay)=ax-by+i(bx+ay)\n</script>\n</p>\n<p>We simply split up the real and the imaginary parts of the given complex strings based on the \'+\' and the \'i\' symbols. We store the real parts of the two strings <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> as <script type=\"math/tex; mode=display\">x[0]</script> and <script type=\"math/tex; mode=display\">y[0]</script> respectively and the imaginary parts as <script type=\"math/tex; mode=display\">x[1]</script> and <script type=\"math/tex; mode=display\">y[1]</script> respectively. Then, we multiply the real and the imaginary parts as required after converting the extracted parts into integers. Then, we again form the return string in the required format and return the result.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">complexNumberMultiply</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">x</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;\\\\+|i&quot;</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">y</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;\\\\+|i&quot;</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a_real</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a_img</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">b_real</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">b_img</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">a_real</span> <span class=\"o\">*</span> <span class=\"n\">b_real</span> <span class=\"o\">-</span> <span class=\"n\">a_img</span> <span class=\"o\">*</span> <span class=\"n\">b_img</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&quot;+&quot;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">a_real</span> <span class=\"o\">*</span> <span class=\"n\">b_img</span> <span class=\"o\">+</span> <span class=\"n\">a_img</span> <span class=\"o\">*</span> <span class=\"n\">b_real</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"s\">&quot;i&quot;</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Here splitting takes constant time as length of the string is very small <script type=\"math/tex; mode=display\">(<20)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(492,'Sum of Square Numbers',1,'Math',0,0,'<p></p><p>\nGiven a non-negative integer <code>c</code>, your task is to decide whether there\'re two integers <code>a</code> and <code>b</code> such that a<sup>2</sup> + b<sup>2</sup> = c.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> 5\n<b>Output:</b> True\n<b>Explanation:</b> 1 * 1 + 2 * 2 = 5\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> 3\n<b>Output:</b> False\n</pre>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public boolean judgeSquareSum(int c) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def judgeSquareSum(self, c):\n        """\n        :type c: int\n        :rtype: bool\n        """\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\n    def judgeSquareSum(self, c):\n        """\n        :type c: int\n        :rtype: bool\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"bool judgeSquareSum(int c) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public bool JudgeSquareSum(int c) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {number} c\n * @return {boolean}\n */\nvar judgeSquareSum = function(c) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} c\n# @return {Boolean}\ndef judge_square_sum(c)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func judgeSquareSum(_ c: Int) -> Bool {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func judgeSquareSum(c int) bool {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def judgeSquareSum(c: Int): Boolean = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-sqrt-function-accepted\">Approach #3 Using sqrt function [Accepted]</a></li>\n<li><a href=\"#approach-4-using-binary-search-accepted\">Approach #4 Using Binary Search [Accepted]</a></li>\n<li><a href=\"#approach-5-fermat-theorem-accepted\">Approach #5 Fermat Theorem [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest solution would be to consider every possible combination of integers <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> and check if the sum of their squares equals <script type=\"math/tex; mode=display\">c</script>. Now, both <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> can lie within the range <script type=\"math/tex; mode=display\">(0,\\sqrt{c})</script>. Thus, we need to check for the values of <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> in this range only.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">b</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(c)</script>. Two loops upto <script type=\"math/tex; mode=display\">\\sqrt{c}</script>. Here, <script type=\"math/tex; mode=display\">c</script> refers to the given integer(sum of squares).</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p>We can improve the last solution, if we make the following observation. For any particular <script type=\"math/tex; mode=display\">a</script> chosen, the value of <script type=\"math/tex; mode=display\">b</script> required to satisfy the equation <script type=\"math/tex; mode=display\">a^2 + b^2 = c</script> will be such that <script type=\"math/tex; mode=display\">b^2 = c - a^2</script>. Thus, we need to traverse over the range <script type=\"math/tex; mode=display\">(0, \\sqrt{c})</script> only for considering the various values of <script type=\"math/tex; mode=display\">a</script>. For every current value of <script type=\"math/tex; mode=display\">a</script> chosen, we can determine the corresponding <script type=\"math/tex; mode=display\">b^2</script> value and check if it is a perfect square or not. If it happens to be a perfect square, <script type=\"math/tex; mode=display\">c</script> is a sum of squares of two integers, otherwise not.</p>\n<p>Now, to determine, if the number <script type=\"math/tex; mode=display\">c - a^2</script> is a perfect square or not, we can make use of the following theorem: \"The square of <script type=\"math/tex; mode=display\">n^{th}</script> positive integer can be represented as a sum of first <script type=\"math/tex; mode=display\">n</script> odd positive integers.\" Or in mathematical terms:</p>\n<p>\n<script type=\"math/tex; mode=display\">n^2 = 1 + 3 + 5 + ... + (2*n-1) = \\sum_{1}^{n} (2*i - 1)</script>.</p>\n<p>To look at the proof of this statement, look at the L.H.S. of the above statement.</p>\n<p>\n<script type=\"math/tex; mode=display\">1 + 3 + 5 + ... + (2*n-1)=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">(2*1-1) + (2*2-1) + (2*3-1) + ... + (2*n-1)=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">2*(1+2+3+....+n) - (1+1+...n times)=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">2*n*(n+1)/2 - n=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">n*(n+1) - n=</script>\n</p>\n<p>\n<script type=\"math/tex; mode=display\">n^2 + n - n = n^2</script>\n</p>\n<p>This completes the proof of the above statement.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span>  <span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(c)</script>. The total number of times the <script type=\"math/tex; mode=display\">sum</script> is updated is: <script type=\"math/tex; mode=display\">1+2+3+...(\\sqrt{c} times) = \\sqrt{c}(\\sqrt{c}+1)/2 = O(c)</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-sqrt-function-accepted\">Approach #3 Using sqrt function [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Instead of finding if <script type=\"math/tex; mode=display\">c - a^2</script> is a perfect square using sum of odd numbers, as done in the last approach, we can make use of the inbuilt <script type=\"math/tex; mode=display\">sqrt</script> function and check if <script type=\"math/tex; mode=display\">\\sqrt{c - a^2}</script> turns out to be an integer. If it happens for any value of <script type=\"math/tex; mode=display\">a</script> in the range <script type=\"math/tex; mode=display\">[0, \\sqrt{c}]</script>, we can return a True value immediately.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">double</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">sqrt</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\sqrt{c}log(c)\\big)</script>. We iterate over <script type=\"math/tex; mode=display\">\\sqrt{c}</script> values for choosing <script type=\"math/tex; mode=display\">a</script>. For every <script type=\"math/tex; mode=display\">a</script> chosen, finding square root of <script type=\"math/tex; mode=display\">c - a^2</script> takes <script type=\"math/tex; mode=display\">O\\big(log(c)\\big)</script> time in the worst case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-binary-search-accepted\">Approach #4 Using Binary Search [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another method to check if <script type=\"math/tex; mode=display\">c - a^2</script> is a perfect square, is by making use of Binary Search. The method remains same as that of a typical Binary Search to find a number.\nThe only difference lies in that we need to find an integer, <script type=\"math/tex; mode=display\">mid</script> in the range <script type=\"math/tex; mode=display\">[0, c - a^2]</script>, such that this number is the square root of <script type=\"math/tex; mode=display\">c - a^2</script>.\nOr in other words, we need to find an integer, <script type=\"math/tex; mode=display\">mid</script>, in the range <script type=\"math/tex; mode=display\">[0, c - a^2]</script>, such that <script type=\"math/tex; mode=display\">mid</script>x<script type=\"math/tex; mode=display\">mid = c - a^2</script>.</p>\n<p>The following animation illustrates the search process for a particular value of <script type=\"math/tex; mode=display\">c - a^2 = 36</script>.</p>\n<p>!?!../Documents/633_Sum_of_Squares.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">a</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">binary_search</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">binary_search</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"kt\">long</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">*</span> <span class=\"n\">mid</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">*</span> <span class=\"n\">mid</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">binary_search</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">binary_search</span><span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\sqrt{c}log(c)\\big)</script>. Binary search taking <script type=\"math/tex; mode=display\">O\\big(log(c)\\big)</script> in the worst case is done for <script type=\"math/tex; mode=display\">\\sqrt{c}</script> values of <script type=\"math/tex; mode=display\">a</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log(c))</script>. Binary Search will take <script type=\"math/tex; mode=display\">O(log(c))</script> space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-fermat-theorem-accepted\">Approach #5 Fermat Theorem [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is based on the following statement, which is based on Fermat\'s Theorem:</p>\n<p>\"Any positive number <script type=\"math/tex; mode=display\">n</script> is expressible as a sum of two squares if and only if the prime factorization of <script type=\"math/tex; mode=display\">n</script>, every prime of the form <script type=\"math/tex; mode=display\">(4k+3)</script> occurs an even number of times.\"</p>\n<p>By making use of the above theorem, we can directly find out if the given number <script type=\"math/tex; mode=display\">c</script> can be expressed as a sum of two squares.</p>\n<p>To do so we simply find all the prime factors of the given number <script type=\"math/tex; mode=display\">c</script>, which could range from <script type=\"math/tex; mode=display\">[2,\\sqrt{c}]</script> along with the count of those factors, by repeated division. \nIf at any step, we find out that the number of occurences of any prime factor of the form <script type=\"math/tex; mode=display\">(4k+3)</script> occurs an odd number of times, we can return a False value.</p>\n<p>In case, <script type=\"math/tex; mode=display\">c</script> itself is a prime number, it won\'t be divisible by any of the primes in the <script type=\"math/tex; mode=display\">[2,\\sqrt{c}]</script>. Thus, we need to check if <script type=\"math/tex; mode=display\">c</script> can be expressed in the form of\n<script type=\"math/tex; mode=display\">4k+3</script>. If so, we need to return a False value, indicating that this prime occurs an odd number(1) of times. </p>\n<p>Otherwise, we can return a True value.</p>\n<p>The proof of this theorem includes the knowledge of advanced mathematics and is beyond the scope of this article. However, interested reader can refer to <a href=\"http://wstein.org/edu/124/lectures/lecture21/lecture21/node2.html\">this</a> documentation.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">judgeSquareSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"n\">c</span> <span class=\"o\">/=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">count</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(\\sqrt{c}log(c)\\big)</script>. We find the factors of <script type=\"math/tex; mode=display\">c</script> and their count using repeated division. We check for the factors in the range <script type=\"math/tex; mode=display\">[0, \\sqrt{c}]</script>.\nThe maximum number of times a factor can occur(repeated division can be done) is <script type=\"math/tex; mode=display\">log(n)</script>(considering 2 as the only factor, <script type=\"math/tex; mode=display\">c=2^x</script>. Thus, <script type=\"math/tex; mode=display\">x=log(c)</script>).</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(493,'Encode and Decode TinyURL',2,'Hash Table,Math',0,0,'<p></p><blockquote>Note: This is a companion problem to the <a href=\"https://leetcode.com/problemset/system-design/\">System Design</a> problem: <a href=\"https://leetcode.com/problems/design-tinyurl/\">Design TinyURL</a>.</blockquote><p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p><p>Design the <code>encode</code> and <code>decode</code> methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n\r\n    // Encodes a URL to a shortened URL.\r\n    string encode(string longUrl) {\r\n        \r\n    }\r\n\r\n    // Decodes a shortened URL to its original URL.\r\n    string decode(string shortUrl) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Solution object will be instantiated and called as such:\r\n// Solution solution;\r\n// solution.decode(solution.encode(url));\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"public class Codec {\r\n\r\n    // Encodes a URL to a shortened URL.\r\n    public String encode(String longUrl) {\r\n        \r\n    }\r\n\r\n    // Decodes a shortened URL to its original URL.\r\n    public String decode(String shortUrl) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(url));\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Codec:\r\n\r\n    def encode(self, longUrl):\r\n        """Encodes a URL to a shortened URL.\r\n        \r\n        :type longUrl: str\r\n        :rtype: str\r\n        """\r\n        \r\n\r\n    def decode(self, shortUrl):\r\n        """Decodes a shortened URL to its original URL.\r\n        \r\n        :type shortUrl: str\r\n        :rtype: str\r\n        """\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.decode(codec.encode(url))\" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/** Encodes a URL to a shortened URL. */\r\nchar* encode(char* longUrl) {\r\n    \r\n}\r\n\r\n/** Decodes a shortened URL to its original URL. */\r\nchar* decode(char* shortUrl) {\r\n    \r\n}\r\n\r\n// Your functions will be called as such:\r\n// char* s = encode(s);\r\n// decode(s);\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Codec {\r\n\r\n    // Encodes a URL to a shortened URL\r\n    public string encode(string longUrl) {\r\n        \r\n    }\r\n\r\n    // Decodes a shortened URL to its original URL.\r\n    public string decode(string shortUrl) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(url));\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * Encodes a URL to a shortened URL.\r\n *\r\n * @param {string} longUrl\r\n * @return {string}\r\n */\r\nvar encode = function(longUrl) {\r\n    \r\n};\r\n\r\n/**\r\n * Decodes a shortened URL to its original URL.\r\n *\r\n * @param {string} shortUrl\r\n * @return {string}\r\n */\r\nvar decode = function(shortUrl) {\r\n    \r\n};\r\n\r\n/**\r\n * Your functions will be called as such:\r\n * decode(encode(url));\r\n */\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Encodes a URL to a shortened URL.\r\n#\r\n# @param {string} longUrl\r\n# @return {string}\r\ndef encode(longUrl)\r\n    \r\nend\r\n\r\n# Decodes a shortened URL to its original URL.\r\n#\r\n# @param {string} shortUrl\r\n# @return {string}\r\ndef decode(shortUrl)\r\n    \r\nend\r\n\r\n\r\n# Your functions will be called as such:\r\n# decode(encode(url))\" }]',NULL,NULL,1,'none','none','none'),(494,'Design TinyURL',2,'',0,0,'<p></p><blockquote>Note: For the coding companion problem, please see: <a href=\"https://leetcode.com/problems/encode-and-decode-tinyurl/\">Encode and Decode TinyURL</a>.</blockquote><p>How would you design a URL shortening service that is similar to <a href=\"https://en.wikipedia.org/wiki/TinyURL\" target=\"_blank\">TinyURL</a>?</p><p><b>Background:</b><br/>\nTinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.\n</p><p><b>Requirements:</b><br/>\n</p><ol>\n<li>For instance, \"http://tinyurl.com/<span class=\"hilight\">4e9iAk</span>\" is the tiny url for the page <code>\"https://leetcode.com/problems/design-tinyurl\"</code>. The <b>identifier</b> (<span class=\"hilight\">the highlighted part</span>) can be any string with 6 alphanumeric characters containing <code>0-9</code>, <code>a-z</code>, <code>A-Z</code>.</li>\n<li>Each shortened URL must be unique; that is, no two different URLs can be shortened to the same URL.</li>\n</ol><p><b>Note about Questions:</b><br/>Below are just a small subset of questions to get you started. In real world, there could be many follow ups and questions possible and the discussion is open-ended (No one true or correct way to solve a problem). If you have more ideas or questions, please ask in Discuss and we may compile it here!</p><p><b>Questions:</b><br/>\n</p><ol>\n<li>How many unique identifiers possible? Will you run out of unique URLs?</li>\n<li>Should the identifier be increment or not? Which is easier to design? Pros and cons?</li>\n<li>Mapping an identifier to an URL and its reversal - Does this problem ring a bell to you?</li>\n<li>How do you store the URLs? Does a simple flat file database work?</li>\n<li>What is the bottleneck of the system? Is it <b>read-heavy</b> or <b>write-heavy</b>?</li>\n<li>Estimate the maximum number of URLs a single machine can store.</li>\n<li>Estimate the maximum number of queries per second (QPS) for decoding a shortened URL in a single machine.</li>\n<li>How would you scale the service? For example, a viral link which is shared in social media could result in a peak QPS at a moment\'s notice.</li>\n<li>How could you handle redundancy? i,e, if a server is down, how could you ensure the service is still operational?</li>\n<li>Keep URLs forever or prune, pros/cons? How we do pruning? (Contributed by @alex_svetkin)</li>\n<li>What API would you provide to a third-party developer? (Contributed by @alex_svetkin)</li>\n<li>If you can enable caching, what would you cache and what\'s the expiry time? (Contributed by @Humandroid)</li>\n</ol><style>\n.hilight {\n  color: #d14;\n  background-color: #f7f7f9;\n  padding: 1px 3px;\n  border: 1px solid #e1e1e8\"\n}\n</style>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"// You can type code here and execute it.\r\n\r\nint main() {\r\n    cout << "Hello world!" << endl;\r\n\r\n    return 0;\r\n}\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"// You can type code here and execute it.\r\n\r\nclass Main {\r\n    public static void main(String[] args) {\r\n        System.out.println("Hello World!");\r\n    }\r\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# You can type code here and execute it.\r\n\r\nprint "Hello World!"\" }]',NULL,NULL,1,'none','none','none'),(495,'Keyboard Row',1,'Hash Table',0,0,'<p></p><p>Given a List of words, return the words that can be typed using letters of <b>alphabet</b> on only one row\'s of American keyboard like the image below. </p><br/><p>\n<img alt=\"American keyboard\" src=\"https://leetcode.com/static/images/problemset/keyboard.png\"/>\n</p><br/><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\n<b>Output:</b> [\"Alaska\", \"Dad\"]\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>You may use one character in the keyboard more than once.</li>\n<li>You may assume the input string will only contain letters of alphabet.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n        \n    }\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public String[] findWords(String[] words) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\n    def findWords(self, words):\n        """\n        :type words: List[str]\n        :rtype: List[str]\n        """\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findWords(char** words, int wordsSize, int* returnSize) {\n    \n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\n    public string[] FindWords(string[] words) {\n        \n    }\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(words) {\n    \n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\n# @return {String[]}\ndef find_words(words)\n    \nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\n    func findWords(_ words: [String]) -> [String] {\n        \n    }\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findWords(words []string) []string {\n    \n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findWords(words: Array[String]): Array[String] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none');
INSERT INTO `problems` VALUES (496,'Smallest Range',3,'Hash Table,Two Pointers,String',0,0,'<p></p><p>You have <code>k</code> lists of sorted integers in ascending order. Find the <b>smallest</b> range that includes at least one number from each of the <code>k</code> lists. </p><p>We define the range [a,b] is smaller than range [c,d] if <code>b-a &lt; d-c</code> or <code>a &lt; c</code> if <code>b-a == d-c</code>.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b>[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n<b>Output:</b> [20,24]\n<b>Explanation:</b> \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n</pre><p>\n<b>Note:</b><br/>\n</p><ol>\n<li>The given list may contain duplicates, so ascending order means &gt;= here.</li>\n<li>1 &lt;= <code>k</code> &lt;= 3500</li>\n<li> -10<sup>5</sup> &lt;= <code>value of elements</code> &lt;= 10<sup>5</sup>.</li>\n<li><b>For Java users, please note that the input type has been changed to List&lt;List&lt;Integer&gt;&gt;. And after you reset the code template, you\'ll see this point.</b></li>\n</ol><br/>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> smallestRange(vector<vector<int>>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def smallestRange(self, nums):\r\n        """\r\n        :type nums: List[List[int]]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def smallestRange(self, nums):\r\n        """\r\n        :type nums: List[List[int]]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* smallestRange(int** nums, int numsRowSize, int *numsColSizes, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] SmallestRange(IList<IList<int>> nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} nums\r\n * @return {number[]}\r\n */\r\nvar smallestRange = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} nums\r\n# @return {Integer[]}\r\ndef smallest_range(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func smallestRange(_ nums: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func smallestRange(nums [][]int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def smallestRange(nums: List[List[Int]]): Array[Int] = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-using-pointers-time-limit-exceeded\">Approach #3  Using Pointers [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-4-using-priority-queue-accepted\">Approach #4 Using Priority Queue [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The naive approach is to consider every pair of elements, <script type=\"math/tex; mode=display\">nums[i][j]</script> and <script type=\"math/tex; mode=display\">nums[k][l]</script> from amongst the given \nlists and consider the range formed by these elements. For every range currently considered, we can traverse over all the \nlists to find if atleast one element from these lists can be included in the current range. If so, we store the end-points of the current range \nand compare it with the previous minimum range found, if any, satisfying the required criteria, to find the smaller range from among them.</p>\n<p>Once all the element pairs have been considered as the ranges, we can obtain the required minimum range.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">smallestRange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">i</span> <span class=\"o\">?</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">);</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">l</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">l</span><span class=\"o\">]);</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">l</span><span class=\"o\">]);</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">;</span>\n                        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">m</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">n</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">min</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">max</span><span class=\"o\">)</span>\n                                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                            <span class=\"o\">}</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">)</span>\n                                <span class=\"k\">break</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">miny</span> <span class=\"o\">-</span> <span class=\"n\">minx</span> <span class=\"o\">&gt;</span> <span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">miny</span> <span class=\"o\">-</span> <span class=\"n\">minx</span> <span class=\"o\">==</span> <span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">minx</span> <span class=\"o\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                                <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n                                <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">minx</span><span class=\"o\">,</span> <span class=\"n\">miny</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. Considering every possible range(element pair) requires <script type=\"math/tex; mode=display\">O(n^2)</script> time. For each range considered, \nwe need to traverse over all the elements of the given lists in the worst case requiring another <script type=\"math/tex; mode=display\">O(n)</script> time. Here, <script type=\"math/tex; mode=display\">n</script> refers to the \ntotal number of elements in the given lists.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-better-brute-force-time-limit-exceeded\">Approach #2 Better Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we consider every possible range and then traverse over every list to check if atleast one of the \nelements from these lists lies in the required range. Instead of doing this traversal for every range, we can make use \nof Binary Search to find the index of the element just larger than(or equal to) the lower limit of the range currently \nconsidered. </p>\n<p>If all the elements in the current list are lesser than this lower limit, we\'ll get the index as <script type=\"math/tex; mode=display\">nums[k].length</script>\n for the <script type=\"math/tex; mode=display\">k^{th}</script> list being currently checked. In this case, none of the elements of the current list lies in the\ncurrent range.</p>\n<p>On the other hand, if all the elements in this list are larger than this lower limit, we\'ll get the index of the first element(minimum) in the current list. If this element happens to be larger than the upper limit  of the range currently considered, then also, none of the elements of the current list lies within the current range.</p>\n<p>Whenever a range is found which satisfies the required criteria, we can compare it with the minimum range found so far \n to determine the required minimum range.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">smallestRange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">i</span> <span class=\"o\">?</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">);</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">l</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">l</span><span class=\"o\">]);</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">l</span><span class=\"o\">]);</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">;</span>\n                        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">m</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">m</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">binarySearch</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">],</span> <span class=\"n\">min</span><span class=\"o\">);</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                                <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">min</span> <span class=\"o\">||</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">max</span><span class=\"o\">)</span>\n                                <span class=\"k\">break</span><span class=\"o\">;</span>\n                        <span class=\"o\">}</span>\n                        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">miny</span> <span class=\"o\">-</span> <span class=\"n\">minx</span> <span class=\"o\">&gt;</span> <span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">miny</span> <span class=\"o\">-</span> <span class=\"n\">minx</span> <span class=\"o\">==</span> <span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">min</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">minx</span> <span class=\"o\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                                <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n                                <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"o\">;</span>\n                            <span class=\"o\">}</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">minx</span><span class=\"o\">,</span> <span class=\"n\">miny</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(n^2log(k)\\big)</script>. The time required to consider every possible range is <script type=\"math/tex; mode=display\">O(n^2)</script>. For every range currently considered, \na Binary Search requiring <script type=\"math/tex; mode=display\">O\\big(log(k)\\big)</script> time is required. Here, <script type=\"math/tex; mode=display\">n</script> refers to the total number of elements in the given \nlists and <script type=\"math/tex; mode=display\">k</script> refers to the average length of each list.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-using-pointers-time-limit-exceeded\">Approach #3  Using Pointers [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We\'ll discuss about the implementation used in the current approach along with the idea behind it. </p>\n<p>This approach makes use of an array of pointers, <script type=\"math/tex; mode=display\">next</script>, whose length is equal to the number of given lists. In this \narray, <script type=\"math/tex; mode=display\">next[i]</script> refers to the element which needs to be considered next in the <script type=\"math/tex; mode=display\">(i-1)^{th}</script> list. The meaning of this will become \nmore clearer when we look at the process.</p>\n<p>We start by initializing all the elements of <script type=\"math/tex; mode=display\">next</script> to 0. Thus, currently, we are considering the first(minimum) element \namong all the lists. Now, we find out the index of the list containing the maximum(<script type=\"math/tex; mode=display\">max_i</script>) and minimum(<script type=\"math/tex; mode=display\">min_i</script>) \nelements from amongst the elements currently pointed by <script type=\"math/tex; mode=display\">next</script>. The range formed by these maximum and minimum elements surely<br />\ncontains atleast one element from each list. </p>\n<p>But, now our objective is to minimize this range. To do so, there are two options: Either decrease the maximum value or increase the \nminimum value. </p>\n<p>Now, the maximum value can\'t be reduced any further, since it already corresponds to the minimum value in one of the lists. \nReducing it any further will lead to the exclusion of all the elements of this list(containing the last maximum value) \nfrom the new range. </p>\n<p>Thus, the only option left in our hand is to try to increase the minimum value. To do so, we now need to consider the\n next element in the list containing the last minimum value. Thus, we increment the entry at the corresponding index\n  in <script type=\"math/tex; mode=display\">next</script>, to indicate that the next element in this list now needs to be considered. </p>\n<p>Thus, at every step, we find the maximum and minimum values being pointed currently, update the <script type=\"math/tex; mode=display\">next</script> values \n  appropriately, and also find out the range formed by these maximum and minimum values to find out the smallest range \n satisfying the given criteria. </p>\n<p>While doing this process, if any of the lists gets completely exhausted, it means that the minimum value being increased for \n minimizing the range being considered can\'t be increased any further, without causing the exclusion of all the elements in atleast \n one of the lists. Thus, we can stop the search process whenever any list gets completely exhausted.</p>\n<p>We can also stop the process, when all the elements of the given lists have been exhausted.</p>\n<p>Summarizing the statements above, the process becomes:</p>\n<ol>\n<li>\n<p>Initialize <script type=\"math/tex; mode=display\">next</script> array(pointers) with all 0\'s.</p>\n</li>\n<li>\n<p>Find the indices of the lists containing the minimum(<script type=\"math/tex; mode=display\">min_i</script>) and the maximum(<script type=\"math/tex; mode=display\">max_i</script>) elements amongst the elements pointed by the <script type=\"math/tex; mode=display\">next</script> array.</p>\n</li>\n<li>\n<p>If the range formed by the maximum and minimum elements found above is larger than the previous maximum range, update the boundary values used for the maximum range.</p>\n</li>\n<li>\n<p>Increment the pointer <script type=\"math/tex; mode=display\">nums[min_i]</script>.</p>\n</li>\n<li>\n<p>Repeat steps 2 to 4 till any of the lists gets exhausted.</p>\n</li>\n</ol>\n<p>The animation below illustrates the process for a visual understanding of the process.</p>\n<p>!?!../Documents/632_Smallest_Range.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">smallestRange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">flag</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">flag</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">min_i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]]</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]])</span>\n                        <span class=\"n\">min_i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">;</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">]]</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]])</span>\n                        <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">miny</span> <span class=\"o\">-</span> <span class=\"n\">minx</span> <span class=\"o\">&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">]]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">]];</span>\n                    <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]];</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]++;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"n\">minx</span><span class=\"o\">,</span> <span class=\"n\">miny</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*m)</script>. In the worst case, we need to traverse over <script type=\"math/tex; mode=display\">next</script> array(of length <script type=\"math/tex; mode=display\">m</script>) for all the elements of the given lists.\nHere, <script type=\"math/tex; mode=display\">n</script> refers to the total number of elements in all the lists. <script type=\"math/tex; mode=display\">m</script> refers to the total number of lists.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script>. <script type=\"math/tex; mode=display\">next</script> array of size <script type=\"math/tex; mode=display\">m</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-using-priority-queue-accepted\">Approach #4 Using Priority Queue [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, at each step, we update the pointer corresponding to the current minimum element and traverse over the whole\n<script type=\"math/tex; mode=display\">next</script> array to determine the new maximum and minimum values. We can do some optimization here, by making use of a simple observation.</p>\n<p>Whenever we update a single entry of <script type=\"math/tex; mode=display\">next</script> to consider the new maximum and minimum values(if we already know the last maximum \nand minimum values), all the elements to be considered for finding the maximum and minimum values remain the same except the new element \nbeing pointed by a single updated entry in <script type=\"math/tex; mode=display\">next</script>.  This new entry is certainly larger than the last minimum value(since that was the \nreasoning behind the updation). </p>\n<p>Thus, we can\'t be sure whether this is the new minimum element or not. But, since it is larger than the last \nvalue being considered, it could be a potential competitor for the new maximum value. Thus, we can directly compare it with the last \nmaximum value to determine the current maximum value.</p>\n<p>Now, we\'re left with finding the minimum value iteratively at every step. To avoid this iterative process, a better idea \nis to make use of a Min-Heap, which stores the values being pointed currently by the <script type=\"math/tex; mode=display\">next</script> array. Thus, the minimum value always \nlies at the top of this heap, and we need not do the iterative search process. </p>\n<p>At every step, we remove the minimum element from this heap and find out the range formed by the current maximum and minimum values, and \ncompare it with the minimum range found so far to determine the required minimum range. We also update the increment the index in <script type=\"math/tex; mode=display\">next</script> \ncorresponding to the list containing this minimum entry and add this element to the heap as well.</p>\n<p>The rest of the process remains the same as the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">smallestRange</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"n\">PriorityQueue</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">min_queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PriorityQueue</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]]</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]]);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">min_queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n            <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">flag</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">flag</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">min_i</span> <span class=\"o\">=</span> <span class=\"n\">min_queue</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">miny</span> <span class=\"o\">-</span> <span class=\"n\">minx</span> <span class=\"o\">&gt;</span> <span class=\"n\">max</span> <span class=\"o\">-</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">minx</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]];</span>\n                    <span class=\"n\">miny</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]++;</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">min_queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">min_i</span><span class=\"o\">);</span>\n                <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">max</span><span class=\"o\">,</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">][</span><span class=\"n\">next</span><span class=\"o\">[</span><span class=\"n\">min_i</span><span class=\"o\">]]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span> <span class=\"n\">minx</span><span class=\"o\">,</span> <span class=\"n\">miny</span><span class=\"o\">};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(n*log(m)\\big)</script>. Heapification of <script type=\"math/tex; mode=display\">m</script> elements requires <script type=\"math/tex; mode=display\">O\\big(log(m)\\big)</script> time. This step could be done \nfor all the elements of the given lists in the worst case. Here, <script type=\"math/tex; mode=display\">n</script> refers to the total number of elements in \nall the lists. <script type=\"math/tex; mode=display\">m</script> refers to the total number of lists.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(m)</script>. <script type=\"math/tex; mode=display\">next</script> array of size <script type=\"math/tex; mode=display\">m</script> is used. A Min-Heap with <script type=\"math/tex; mode=display\">m</script> elements is also used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(497,'Diagonal Traverse',2,'',0,0,'<p></p><p>\nGiven a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image. \n</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n<b>Output:</b>  [1,2,4,7,5,3,6,8,9]\n<b>Explanation:</b>\n<img src=\"https://leetcode.com/static/images/problemset/diagonal_traverse.png\" width=\"20%\"/>\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The total number of elements of the given matrix will not exceed 10,000.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int[] findDiagonalOrder(int[][] matrix) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def findDiagonalOrder(self, matrix):\r\n        """\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[int]\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findDiagonalOrder(int** matrix, int matrixRowSize, int matrixColSize, int* returnSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int[] FindDiagonalOrder(int[,] matrix) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} matrix\r\n * @return {number[]}\r\n */\r\nvar findDiagonalOrder = function(matrix) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\r\n# @return {Integer[]}\r\ndef find_diagonal_order(matrix)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func findDiagonalOrder(_ matrix: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findDiagonalOrder(matrix [][]int) []int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def findDiagonalOrder(matrix: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}\" }]',NULL,NULL,1,'none','none','none'),(498,'Course Schedule III',3,'Greedy',0,0,'<p></p><p>\nThere are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. Each course has some duration(course length)  <code>t</code> and closed on <code>d<sub>th</sub></code> day. A course should be taken <b>continuously</b> for <code>t</code> days and must be finished before or on the <code>d<sub>th</sub></code> day. You will start at the <code>1<sub>st</sub></code> day.\n</p><p>\nGiven <code>n</code> online courses represented by pairs <code>(t,d)</code>, your task is to find the maximal number of courses that can be taken.\n</p><p><b>Example:</b><br/>\n</p><pre>\n<b>Input:</b> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\n<b>Output:</b> 3\n<b>Explanation:</b> \nThere\'re totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The integer 1 &lt;= d, t, n &lt;= 10,000. </li>\n<li>You can\'t take two courses simultaneously.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int scheduleCourse(vector<vector<int>>& courses) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int scheduleCourse(int[][] courses) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def scheduleCourse(self, courses):\r\n        """\r\n        :type courses: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def scheduleCourse(self, courses):\r\n        """\r\n        :type courses: List[List[int]]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int scheduleCourse(int** courses, int coursesRowSize, int coursesColSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int ScheduleCourse(int[,] courses) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[][]} courses\r\n * @return {number}\r\n */\r\nvar scheduleCourse = function(courses) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} courses\r\n# @return {Integer}\r\ndef schedule_course(courses)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func scheduleCourse(_ courses: [[Int]]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func scheduleCourse(courses [][]int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def scheduleCourse(courses: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-recursion-with-memoizationtime-limit-exceeded\">Approach #2 Using Recursion with memoization[Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-iterative-solution-time-limit-exceeded\">Approach #3  Iterative Solution [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-4-optimized-iterative-accepted\">Approach #4  Optimized Iterative [Accepted]</a></li>\n<li><a href=\"#approach-5-using-extra-list-accepted\">Approach #5 Using Extra List [Accepted]</a></li>\n<li><a href=\"#approach-6-using-priority-queue-accepted\">Approach #6 Using Priority Queue [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>The most naive solution will be to consider every possible permutation of the given courses and to try to take as much courses as possible by  taking the courses in a serial order in every permutation. We can find out the maximum number of courses that can be taken from out of values obtained from these permutations.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big((n+1)!\\big)</script>. A total of <script type=\"math/tex; mode=display\">n!</script> permutations are possible for the <script type=\"math/tex; mode=display\">courses</script> array of length <script type=\"math/tex; mode=display\">n</script>. For every permutation, we scan over the <script type=\"math/tex; mode=display\">n</script> elements of the permutation to find the number of courses that can be taken in each case.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Each permutation needs <script type=\"math/tex; mode=display\">n</script> space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-recursion-with-memoizationtime-limit-exceeded\">Approach #2 Using Recursion with memoization[Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Before we move on to the better approaches, let\'s discuss one basic idea to solve the given problem. Suppose, we are considering only two courses <script type=\"math/tex; mode=display\">(a,x)</script> and <script type=\"math/tex; mode=display\">(b,y)</script>. Let\'s assume <script type=\"math/tex; mode=display\">y>x</script>. Now, we\'ll look at the various relative values which <script type=\"math/tex; mode=display\">a</script> and <script type=\"math/tex; mode=display\">b</script> can take, and which course should be taken first in each of these cases. In all the cases, we assume that the course\'s duration is always lesser than its end day i.e. <script type=\"math/tex; mode=display\">a<x</script> and <script type=\"math/tex; mode=display\">b<y</script>.</p>\n<ol>\n<li>\n<script type=\"math/tex; mode=display\">(a+b) &le; x</script>: In this case, we can take the courses in any order. Both the courses can be taken irrespective of the order in which the courses are taken.</li>\n</ol>\n<p align=\"center\"><img alt=\"Courses\" src=\"../Figures/630/630_Course_Schedule_III_1.PNG\" /></p>\n<ol>\n<li>\n<script type=\"math/tex; mode=display\">(a+b)>x</script>, <script type=\"math/tex; mode=display\">a>b</script>, <script type=\"math/tex; mode=display\">(a+b) &leq; y</script>: In this case, as is evident from the figure, both the courses can be taken only by taking course <script type=\"math/tex; mode=display\">a</script> before <script type=\"math/tex; mode=display\">b</script>.</li>\n</ol>\n<p align=\"center\"><img alt=\"Courses\" src=\"../Figures/630/630_Course_Schedule_III_2.PNG\" /></p>\n<ol>\n<li>\n<script type=\"math/tex; mode=display\">(a+b)>x</script>, <script type=\"math/tex; mode=display\">b>a</script>, <script type=\"math/tex; mode=display\">(a+b) &leq; y</script>: In this case also, both the courses can be taken only by taking course <script type=\"math/tex; mode=display\">a</script> before <script type=\"math/tex; mode=display\">b</script>.</li>\n</ol>\n<p align=\"center\"><img alt=\"Courses\" src=\"../Figures/630/630_Course_Schedule_III_3.PNG\" /></p>\n<ol>\n<li>\n<script type=\"math/tex; mode=display\">(a+b)>y</script>: In this case, irrespective of the order in which we take the courses, only one course can be taken.</li>\n</ol>\n<p align=\"center\"><img alt=\"Courses\" src=\"../Figures/630/630_Course_Schedule_III_4.PNG\" /></p>\n<p>From the above example, we can conclude that it is always profitable to take the course with a smaller end day prior to a course with a larger end day. This is because, the course with a smaller duration, if can be taken, can surely be taken only if it is taken prior to a course with a larger end day. </p>\n<p>Based on this idea, firstly, we sort the given <script type=\"math/tex; mode=display\">courses</script> array based on their end days. Then, we try to take the courses in a serial order from this sorted <script type=\"math/tex; mode=display\">courses</script> array. </p>\n<p>In order to solve the given problem, we make use of a recursive function <code>schedule(courses, i, time)</code> which returns the maximum number of courses that can be taken starting from the <script type=\"math/tex; mode=display\">i^{th}</script> course(starting from 0), given the time aleady consumed by the other courses is <script type=\"math/tex; mode=display\">time</script>, i.e. the current time is <script type=\"math/tex; mode=display\">time</script>, given a <script type=\"math/tex; mode=display\">courses</script> array as the schedule.</p>\n<p>Now, in each function call to <code>schedule(courses, i, time)</code>, we try to include the current course in the taken courses. But, this can be done only if <script type=\"math/tex; mode=display\">time + duration_i < end\\_day_i</script>. Here, <script type=\"math/tex; mode=display\">duration_i</script> refers to the duration of the <script type=\"math/tex; mode=display\">i^{th}</script> course and <script type=\"math/tex; mode=display\">end\\_day_i</script> refers to the end day of the <script type=\"math/tex; mode=display\">i^{th}</script> course. </p>\n<p>If the course can be taken, we increment the number of courses taken and obtain the number of courses that can be taken by passing the updated time and courses\' index. i.e. we make the function call <code>schedule(courses, i + 1, time + duration_i)</code>. Let\'s say, we store the number of courses that can be taken by taking the current course in <script type=\"math/tex; mode=display\">taken</script> variable.</p>\n<p>Further, for every current course, we also leave the current course, and find the number of courses that can be taken thereof. Now, we need not update the time, but we need to update the courses\' index. Thus, we make the function call, <code>schedule(courses, i + 1, time)</code>. Let\'s say, we store the count obtained in <script type=\"math/tex; mode=display\">not\\_taken</script> variable. </p>\n<p>While returning the number of courses at the end of each function call, we return the maximum value out of <script type=\"math/tex; mode=display\">taken</script> and <script type=\"math/tex; mode=display\">not\\_taken</script>.</p>\n<p>Thus, the function call <code>schedule(courses, 0, 0)</code> gives the required result.</p>\n<p>In order to remove this redundancy, we make use of a memoization array <script type=\"math/tex; mode=display\">memo</script>, such that <script type=\"math/tex; mode=display\">memo[i][j]</script> is used to store the result of the function call <code>schedule(courses, i, time)</code>. Thus, whenever the same function call is made again, we can return the result directly from the <script type=\"math/tex; mode=display\">memo</script> array. This helps to prune the search space to a great extent.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">scheduleCourse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"n\">Integer</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Integer</span><span class=\"o\">[</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">][</span><span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">return</span> <span class=\"n\">schedule</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">schedule</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"n\">Integer</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">time</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">time</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">taken</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">+</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n            <span class=\"n\">taken</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">schedule</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">time</span> <span class=\"o\">+</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">not_taken</span> <span class=\"o\">=</span> <span class=\"n\">schedule</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">time</span><span class=\"o\">,</span> <span class=\"n\">memo</span><span class=\"o\">);</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">time</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">taken</span><span class=\"o\">,</span> <span class=\"n\">not_taken</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">time</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*d)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">d</script> is filled once. Here, <script type=\"math/tex; mode=display\">n</script> refers to the number of courses in the given <script type=\"math/tex; mode=display\">courses</script> array and <script type=\"math/tex; mode=display\">d</script> refers to the maximum value of the end day from all the end days in the <script type=\"math/tex; mode=display\">courses</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n*d)</script>. <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">d</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-iterative-solution-time-limit-exceeded\">Approach #3  Iterative Solution [Time Limit Exceeded]</h4>\n<p>For the current approach, the idea goes as follows. As discussed in the previous approaches, we need to sort the given <script type=\"math/tex; mode=display\">courses</script> array based on the end days. Thus, we consider the courses in the ascending order of their end days. We keep a track of the current time in a <script type=\"math/tex; mode=display\">time</script> variable. Along with this, we also keep a track of the number of courses taken till now in <script type=\"math/tex; mode=display\">count</script> variable.</p>\n<p>For each course being considered currently(let\'s say <script type=\"math/tex; mode=display\">i^{th}</script> course), we try to take this course. But, to be able to do so, the current course should end before its corresponding end day i.e. <script type=\"math/tex; mode=display\">time + duration_i &leq; end\\day_i</script>. Here, <script type=\"math/tex; mode=display\">duration_i</script> refers to the duration of the <script type=\"math/tex; mode=display\">i^{th}</script> course and <script type=\"math/tex; mode=display\">end\\_day_i</script> refers to the end day of the <script type=\"math/tex; mode=display\">i^{th}</script> course. </p>\n<p>If this course can be taken, we update the current time to <script type=\"math/tex; mode=display\">time + duration_i</script> and also increment the current <script type=\"math/tex; mode=display\">count</script> value to indicate that one more course has been taken. </p>\n<p>But, if we aren\'t able to take the current course i.e. <script type=\"math/tex; mode=display\">time + duration_i > end\\_day_i</script>, we can try to take this course by removing some other course from amongst the courses that have already been taken. But, the current course can fit in by removing some other course, only if the duration of the course(<script type=\"math/tex; mode=display\">j^{th}</script>) being removed <script type=\"math/tex; mode=display\">duration_j</script> is larger than the current course\'s duration, <script type=\"math/tex; mode=display\">duration_i</script> i.e. <script type=\"math/tex; mode=display\">duration_j > duration_i</script>. </p>\n<p>We are sure of the fact that by removing the <script type=\"math/tex; mode=display\">j^{th}</script> course, we can fit in the current course, because, <script type=\"math/tex; mode=display\">course_j</script> was already fitting in the duration available till now. Since, <script type=\"math/tex; mode=display\">duration_i < duration_j</script>, the current course can surely take its place. Thus, we look for a course from amongst the taken courses having a duration larger than the current course.</p>\n<p>But why are we doing this replacement? The answer to this question is as follows. By replacing the <script type=\"math/tex; mode=display\">j^{th}</script> course, with the <script type=\"math/tex; mode=display\">i^{th}</script> course of a relatively smaller duration, we can increase the time available for upcoming courses to be taken. An extra <script type=\"math/tex; mode=display\">duration_j - duration_i</script> time can be made available by doing so. </p>\n<p>Now, for this saving in time to be maximum, the course taken for the replacement should be the one with the maximum duration. Thus, from amongst the courses that have been taken till now, we find the course having the maximum duration which should be more than the duration of the current course(which can\'t be taken). </p>\n<p>Let\'s say, this course be called as <script type=\"math/tex; mode=display\">max\\_i</script>. Thus, now, a saving of <script type=\"math/tex; mode=display\">duration_{max\\_i} - duration_i</script> can be achived, which could help later in fitting in more courses to be taken.</p>\n<p>If such a course, <script type=\"math/tex; mode=display\">max\\_i</script>, is found, we remove this course from the taken courses and consider the current course as taekn. We also mark this course with <script type=\"math/tex; mode=display\">\\text{-1}</script> to indicate that this course has not been taken and should not be considered in the future again for replacement. </p>\n<p>But, if such a course isn\'t found, we can\'t take the current course at any cost. Thus, we mark the current course with <script type=\"math/tex; mode=display\">\\text{-1}</script> to indicate that the current course has not been taken.</p>\n<p>At the end, the value of <script type=\"math/tex; mode=display\">count</script> gives the required result.</p>\n<p>The following animation illustrates the process.</p>\n<p>!?!../Documents/630_Course_Schedule_III.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">scheduleCourse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">+</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n                <span class=\"n\">count</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">])</span>\n                        <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2)</script>.  We iterate over the <script type=\"math/tex; mode=display\">count</script> array of size <script type=\"math/tex; mode=display\">n</script> once. For every element currently considered, we could scan backwards till the first element, giving <script type=\"math/tex; mode=display\">O(n^2)</script> complexity. Sorting the <script type=\"math/tex; mode=display\">count</script> array takes <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script> time for <script type=\"math/tex; mode=display\">count</script> array.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-optimized-iterative-accepted\">Approach #4  Optimized Iterative [Accepted]</h4>\n<p>In the last approach, we\'ve seen that, in the case of current course which can\'t be taken direclty, i.e. for <script type=\"math/tex; mode=display\">time + duration_i > end\\_day_i</script>, we need to traverse back in the <script type=\"math/tex; mode=display\">courses</script> array till the beginning to find a course with the maximum duration which is larger than the current course\'s duration. This backward traversal also goes through the courses which aren\'t  taken and thus, can\'t be replaced, and have been marked as <script type=\"math/tex; mode=display\">\\text{-1}</script>. </p>\n<p>We can bring in some optimization here. For this, we should search among only those courses which have been taken(and not the ones which haven\'t been taken). </p>\n<p>To do so, as we iterate over the <script type=\"math/tex; mode=display\">courses</script> array, we also keep on updating it, such that the first <script type=\"math/tex; mode=display\">count</script> number of elements in this array now correspond to only those <script type=\"math/tex; mode=display\">count</script> number of courses which have been taken till now. </p>\n<p>Thus, whenever we update the <script type=\"math/tex; mode=display\">count</script> to indicate that one more course has been taken, we also update the <script type=\"math/tex; mode=display\">courses[count]</script> entry to \nreflect the current course that has just been taken. </p>\n<p>Whenever, we find a course for which <script type=\"math/tex; mode=display\">time + duration_i > end\\_day_i</script>, we find a <script type=\"math/tex; mode=display\">max_i</script> course from only amongst these first <script type=\"math/tex; mode=display\">count</script> number of courses in the <script type=\"math/tex; mode=display\">courses</script> array, which indicate the courses that have been taken till now. </p>\n<p>Also, instead of marking this <script type=\"math/tex; mode=display\">max_i^{th}</script> course with a <script type=\"math/tex; mode=display\">\\text{-1}</script>, we can simply replace this course with the current course. Thus, the first <script type=\"math/tex; mode=display\">count</script> courses still reflect the courses that have been taken till now.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">scheduleCourse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">+</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n                <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">])</span>\n                        <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n                    <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">max_i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">courses</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*count)</script>. We iterate over a total of <script type=\"math/tex; mode=display\">n</script> elements of the <script type=\"math/tex; mode=display\">courses</script> array. For every element, we can traverse backwards upto atmost <script type=\"math/tex; mode=display\">count</script>(final value) number of elements.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-using-extra-list-accepted\">Approach #5 Using Extra List [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>In the last approach, we updated the <script type=\"math/tex; mode=display\">course</script> array itself so that the first <script type=\"math/tex; mode=display\">count</script> elements indicate the <script type=\"math/tex; mode=display\">count</script> number of courses that have been taken till now. If it is required to retain the <script type=\"math/tex; mode=display\">courses</script> array as such, we can do the same job by maintaining a separate list <script type=\"math/tex; mode=display\">valid\\_list</script> which is the list of those courses that have been taken till now. </p>\n<p>Thus, to find the <script type=\"math/tex; mode=display\">max_i</script> course, we need to search in this list only. Further, when replacing this <script type=\"math/tex; mode=display\">max_i^{th}</script> course with the current course, we can replace this <script type=\"math/tex; mode=display\">max_i</script> course in the list with current course directly. The rest of the method remains the same as the last approach.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">scheduleCourse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">valid_list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n                <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">max_i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>\n                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">max_i</span><span class=\"o\">))</span>\n                        <span class=\"n\">max_i</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">max_i</span><span class=\"o\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                    <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">max_i</span><span class=\"o\">);</span>\n                    <span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">max_i</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">valid_list</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*m)</script>. We iterate over a total of <script type=\"math/tex; mode=display\">n</script> elements of the <script type=\"math/tex; mode=display\">courses</script> array. For every element, we can traverse over atmost <script type=\"math/tex; mode=display\">m</script> number of elements. Here, <script type=\"math/tex; mode=display\">m</script> refers to the final length of the <script type=\"math/tex; mode=display\">valid\\_list</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The <script type=\"math/tex; mode=display\">valid\\_list</script> can contain atmost <script type=\"math/tex; mode=display\">n</script> courses.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-6-using-priority-queue-accepted\">Approach #6 Using Priority Queue [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>This approach is inspired by <a href=\"http://leetcode.com/stomach_ache\">@stomach_ache</a></p>\n<p>In the last few approaches, we\'ve seen that we needed to traverse over the courses which have been taken to find the course(with the maximum duration) which can be replaced by the current course(if it can\'t be taken directly). These traversals can be saved, if we make use of a Priority Queue, <script type=\"math/tex; mode=display\">queue</script>(which is implemented as a Max-Heap) which contains the durations of all the courses that have been taken till now. </p>\n<p>The iteration over the sorted <script type=\"math/tex; mode=display\">courses</script> remains the same as in the last approaches. Whenver the current course(<script type=\"math/tex; mode=display\">i^{th}</script> course) can be taken(<script type=\"math/tex; mode=display\">time + duration_i &leq; end\\_day_i</script>), it is added to the <script type=\"math/tex; mode=display\">queue</script> and the value of the current time is updated to <script type=\"math/tex; mode=display\">time + duration_i</script>. </p>\n<p>If the current course can\'t be taken directly, as in the previous appraoches, we need to find a course whose duration <script type=\"math/tex; mode=display\">duration_j</script> is maximum from amongst the courses taken till now. Now, since we are maintaing a Max-Heap, <script type=\"math/tex; mode=display\">queue</script>, we can obtain this duration directly from this <script type=\"math/tex; mode=display\">queue</script>. If the duration <script type=\"math/tex; mode=display\">duration_j > duration_i</script>, we can replace the <script type=\"math/tex; mode=display\">j^{th}</script> course, with the current one. </p>\n<p>Thus, we remove the <script type=\"math/tex; mode=display\">duration_j</script> from the <script type=\"math/tex; mode=display\">queue</script> and add the current course\'s duration <script type=\"math/tex; mode=display\">duration_i</script> to the <script type=\"math/tex; mode=display\">queue</script>. We also need to make proper adjustments to the <script type=\"math/tex; mode=display\">time</script> to account for this replacement done.</p>\n<p>At the end, the number of elements in the <script type=\"math/tex; mode=display\">queue</script> represent the number of courses that have been taken till now.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">scheduleCourse</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">courses</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"n\">PriorityQueue</span> <span class=\"o\">&lt;</span> <span class=\"n\">Integer</span> <span class=\"o\">&gt;</span> <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PriorityQueue</span> <span class=\"o\">&lt;</span> <span class=\"o\">&gt;</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">courses</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n                <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">peek</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">poll</span><span class=\"o\">();</span>\n                <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">offer</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. At most <script type=\"math/tex; mode=display\">n</script> elements are added to the <script type=\"math/tex; mode=display\">queue</script>. Adding each element is followed by heapification, which takes <script type=\"math/tex; mode=display\">O\\big(log(n)\\big)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. The <script type=\"math/tex; mode=display\">queue</script> containing the durations of the  courses taken can have atmost <script type=\"math/tex; mode=display\">n</script> elements</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(499,'K Inverse Pairs Array',3,'Dynamic Programming',0,0,'<p></p><p>\nGiven two integers <code>n</code> and <code>k</code>, find how many different arrays consist of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> inverse pairs. \n</p><p>\nWe define an inverse pair as following:\nFor <code>i<sub>th</sub></code> and <code>j<sub>th</sub></code> element in the array, if <code>i</code> &lt; <code>j</code> and <code>a[i]</code> &gt; <code>a[j]</code> then it\'s an inverse pair; Otherwise, it\'s not.\n</p><p>\nSince the answer may be very large, the answer should be modulo 10<sup>9</sup> + 7.\n</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> n = 3, k = 0\n<b>Output:</b> 1\n<b>Explanation:</b> \nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> n = 3, k = 1\n<b>Output:</b> 2\n<b>Explanation:</b> \nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The integer <code>n</code> is in the range [1, 1000] and <code>k</code> is in the range [0, 1000].</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int kInversePairs(int n, int k) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int kInversePairs(int n, int k) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def kInversePairs(self, n, k):\r\n        """\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def kInversePairs(self, n, k):\r\n        """\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int kInversePairs(int n, int k) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int KInversePairs(int n, int k) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar kInversePairs = function(n, k) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef k_inverse_pairs(n, k)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func kInversePairs(_ n: Int, _ k: Int) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func kInversePairs(n int, k int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\r\n    def kInversePairs(n: Int, k: Int): Int = {\r\n        \r\n    }\r\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-recursion-with-memoization-time-limit-exceeded\">Approach #2 Using Recursion with memoization [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-3-dynamic-programming-time-limit-exceeded\">Approach #3 Dynamic Programming [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-4-dynamic-programming-with-cumulative-sumaccepted\">Approach #4 Dynamic Programming with Cumulative Sum[Accepted]:</a></li>\n<li><a href=\"#approach-5-another-optimized-dynamic-programming-approachaccepted\">Approach #5 Another Optimized Dynamic Programming Approach[Accepted]:</a></li>\n<li><a href=\"#approach-6-once-again-memoization-accepted\">Approach #6 Once Again Memoization [Accepted]:</a></li>\n<li><a href=\"#approach-7-1-d-dynamic-programmming-accepted\">Approach #7 1-D dynamic Programmming [Accepted]:</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The most naive solution is to generate every permutation of the array consisting of numbers from <script type=\"math/tex; mode=display\">1</script> to <script type=\"math/tex; mode=display\">n</script>. Then, we can find out the number of inverse pairs in every array to determine if it is equal to 1. We can find out the count of permutations with the required number of inverse pairs. But, this solution is very terrible in terms of time complexity. Thus, we move on to the better approaches directly.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(n!*nlog(n)\\big)</script>. A total of <script type=\"math/tex; mode=display\">n!</script> permutations will be generated. We need <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script> time to find the number of inverse pairs in every such permutation, by making use of merge sort. Here, <script type=\"math/tex; mode=display\">n</script> refers to the given integer <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Each array generated during the permutations will require <script type=\"math/tex; mode=display\">n</script> space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-recursion-with-memoization-time-limit-exceeded\">Approach #2 Using Recursion with memoization [Time Limit Exceeded]</h4>\n<p>Before we discuss the solution, let\'s look at the idea behind it. Let\'s say, <script type=\"math/tex; mode=display\">n</script> represents the given number defining the upper limit of the elements in the arrays being considered and <script type=\"math/tex; mode=display\">k</script> represents the number of inverse pairs in the current array.</p>\n<p>Let\'s start with a simple example with <script type=\"math/tex; mode=display\">n=4</script>, no <script type=\"math/tex; mode=display\">k</script> is defined right now. Now, for <script type=\"math/tex; mode=display\">k=0</script>, the only possible arrangement for the given array <script type=\"math/tex; mode=display\">a_0</script> will be <code>[1,2,3,4]</code>, since all the greater elements lie after the smaller elements. Now, in order to generate an arrangement with any arbitrary <script type=\"math/tex; mode=display\">k</script> value, we need to shift, an arbitrary number of elements(let\'s say <script type=\"math/tex; mode=display\">x</script> elements) in the array <script type=\"math/tex; mode=display\">a_0</script> towards the left, with each displacement(shift) being <script type=\"math/tex; mode=display\">s_1, s_2, ...., s_x</script>, such that the sum of these shifts equals <script type=\"math/tex; mode=display\">k</script>.</p>\n<p>To see what we mean by the above statement, let\'s look at the case for <code>[1,2,4,3]</code>. The number of inverse pairs in this array is 1. This array is obtained by shifting the number 4 by one position towards the left. </p>\n<p>Similarly, consider the case for <code>[2,4,1,3]</code>. This array can be obtained from <script type=\"math/tex; mode=display\">a_0</script> by shifting 2 by one position towards the left first and then shifting 4 by 2 positions towards the left. Thus, the total number of displacements is 3, which is equal to the number of inverse pairs in the new array. </p>\n<p>This rule of displacements holds true because, whenever a number is shifted <script type=\"math/tex; mode=display\">y</script> times towards the left starting from the array <script type=\"math/tex; mode=display\">a_0</script>, after the shift, <script type=\"math/tex; mode=display\">y</script> numbers smaller than it lie towards its right, giving a total of <script type=\"math/tex; mode=display\">y</script> inverse pairs. </p>\n<p>Now, let\'s say, we start with the one of the arrangements <script type=\"math/tex; mode=display\">a_3</script>\n<code>[2,4,1,3]</code>, with <script type=\"math/tex; mode=display\">k=3</script>. Now, if we want to add a new number 5 to this array to consider an array with <script type=\"math/tex; mode=display\">n=5</script>, let\'s say, initially, we append it to the end of <script type=\"math/tex; mode=display\">a_3</script>. Now, the new array will be <code>[2,4,1,3,5]</code>. Since, the largest number is added at the end, the new number 5 doesn\'t add any new inverse pair to the total set of inverse pairs relative to the ones in <script type=\"math/tex; mode=display\">a_3</script>(3). </p>\n<p>Now, all the numbers in <script type=\"math/tex; mode=display\">a_3</script> are smaller than 5. Thus, if we add 5 at a position <script type=\"math/tex; mode=display\">y</script> steps from the right, <script type=\"math/tex; mode=display\">y</script> smaller numbers will lie towards its right. Thus, a total of <script type=\"math/tex; mode=display\">y</script> inverse pairs will exist with 5 being one of the elements in these pairs. </p>\n<p>Thus, adding 5 at <script type=\"math/tex; mode=display\">y</script> steps from the right adds a total of <script type=\"math/tex; mode=display\">y</script> inverse pairs to the total set of inverse pairs in <script type=\"math/tex; mode=display\">a_3</script> giving a total of <script type=\"math/tex; mode=display\">3+y</script> inverse pairs now.</p>\n<p>Looking at the same statement from another point of view, we can say that, if we know the number of inverse pairs(say <script type=\"math/tex; mode=display\">x</script>) in any arbitrary array <script type=\"math/tex; mode=display\">b</script> with some <script type=\"math/tex; mode=display\">n</script>, we can add a new element <script type=\"math/tex; mode=display\">n+1</script> to this array <script type=\"math/tex; mode=display\">b</script> at a position <script type=\"math/tex; mode=display\">p</script> steps from the right, such that <script type=\"math/tex; mode=display\">x+p=k</script> to generate an array with a total of <script type=\"math/tex; mode=display\">k</script> inverse pairs. </p>\n<p>Extending this idea further, suppose we know the number of arrangements of an array with <script type=\"math/tex; mode=display\">n-1</script> elements, with the number of inverse pairs being <script type=\"math/tex; mode=display\">0, 1, 2,..., k</script>, let\'s say being equal to <script type=\"math/tex; mode=display\">count_0, count_1, count_2,.., count_k</script>. Now, we can determine the number of arrangements of an array with <script type=\"math/tex; mode=display\">n</script> elements with exactly <script type=\"math/tex; mode=display\">k</script> inverse pairs easily. </p>\n<p>To generate the arrangements with exactly <script type=\"math/tex; mode=display\">k</script> inverse pairs and <script type=\"math/tex; mode=display\">n</script> elements, we can add the new number <script type=\"math/tex; mode=display\">n</script> to all the arrangements with <script type=\"math/tex; mode=display\">k</script> inverse pairs at the last position. For the arrangements with <script type=\"math/tex; mode=display\">k-1</script> inverse pairs , we can add <script type=\"math/tex; mode=display\">n</script> at a position 1 step from the right. </p>\n<p>Similarly, for an element with <script type=\"math/tex; mode=display\">k-i</script> number of inverse pairs, we can add this new number <script type=\"math/tex; mode=display\">n</script> at a position <script type=\"math/tex; mode=display\">i</script> steps from the right. Each of these updations to the arrays leads to a new arrangement, each with the number of inverse pairs being equal to <script type=\"math/tex; mode=display\">k</script>. </p>\n<p>The following image shows an example of how this is done for n=5 and k=4:</p>\n<p align=\"center\"><img alt=\"Inversions\" src=\"../Figures/629/629_kinverse.PNG\" /></p>\n<p>Thus, to obtain the number of arrangements with exactly <script type=\"math/tex; mode=display\">k</script> inverse pairs and <script type=\"math/tex; mode=display\">n</script> numbers will be given by <script type=\"math/tex; mode=display\">count_0 + count_1 + ... + count_k</script>.</p>\n<p>From the above discussion, we can obtain the recursive formula for finding the number of arrangements with exactly <script type=\"math/tex; mode=display\">k</script> inverse pairs as follows. Let\'s say <script type=\"math/tex; mode=display\">count(i,j)</script> represents the number of arrangements with <script type=\"math/tex; mode=display\">i</script> elements and exactly <script type=\"math/tex; mode=display\">j</script> inverse pairs.</p>\n<ol>\n<li>\n<p>If <script type=\"math/tex; mode=display\">n=0</script>, no inverse pairs exist. Thus, <script type=\"math/tex; mode=display\">count(0,k)=0</script>.</p>\n</li>\n<li>\n<p>If <script type=\"math/tex; mode=display\">k=0</script>, only one arrangement is possible, which is all numbers sorted in ascending order. Thus, <script type=\"math/tex; mode=display\">count(n,0)=1</script>.</p>\n</li>\n<li>\n<p>Otherwise, <script type=\"math/tex; mode=display\">count(n,k) = \\sum_{i=0}^{min(k,n-1)} count(n-1, k-i)</script>. </p>\n</li>\n</ol>\n<p>Note that the upper limit on the summation is <script type=\"math/tex; mode=display\">\\text{min}(k,n-1)</script>. This is because for <script type=\"math/tex; mode=display\">i>k</script>, <script type=\"math/tex; mode=display\">k-i<0</script>. No arrangement exists with negative number of inverse pairs. The reason for the other factor can be seen as follows. </p>\n<p>To generate a new arrangement adding <script type=\"math/tex; mode=display\">k-i</script> new inverse pairs after adding the <script type=\"math/tex; mode=display\">n^{th}</script> number, we need to add this number at the <script type=\"math/tex; mode=display\">i^{th}</script> position from the right. For an array with size <script type=\"math/tex; mode=display\">n</script>, only <script type=\"math/tex; mode=display\">n-1</script> maximum shifts are possible.</p>\n<p>We need to take the modulus at every step to keep the answer within integral limits.</p>\n<p>We can see that a lot of duplicate function calls are made in the normal recursive solution. We can remove this redundancy by making use of a memoization array which stores the result for any function call <code>kInversePairs(i,j)</code> in <script type=\"math/tex; mode=display\">memo[i][j]</script>. Thus, whenver a duplicate function call is made again, we can return the result directly from this memoization array. This prunes the search space to a great extent.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"n\">Integer</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Integer</span><span class=\"o\">[</span><span class=\"mi\">1001</span><span class=\"o\">][</span><span class=\"mi\">1001</span><span class=\"o\">];</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">kInversePairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">inv</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"n\">inv</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">+</span> <span class=\"n\">kInversePairs</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">inv</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">inv</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2*k)</script>. The function <code>kInversePairs</code> is called <script type=\"math/tex; mode=display\">n^2</script> times to fill the <script type=\"math/tex; mode=display\">memo</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">k</script>. Each function call itself takes <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n)</script>. <script type=\"math/tex; mode=display\">memo</script> array of constant size <script type=\"math/tex; mode=display\">1001</script>x<script type=\"math/tex; mode=display\">1001</script> is used. The depth of recursion tree can go upto <script type=\"math/tex; mode=display\">n</script>. </p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-dynamic-programming-time-limit-exceeded\">Approach #3 Dynamic Programming [Time Limit Exceeded]</h4>\n<p><strong>Algorithm</strong></p>\n<p>As we\'ve seen in the discussion above, the solution for if we know the solutions for <script type=\"math/tex; mode=display\">count(n-1,0)</script>, <script type=\"math/tex; mode=display\">count(n-1, 1)</script>..., <script type=\"math/tex; mode=display\">count(n-1,k)</script>, we can directly obtain the solution for <script type=\"math/tex; mode=display\">count(n,k)</script> as <script type=\"math/tex; mode=display\">count(n,k)=\\sum_{0}^{min(k,n-1)} count(n-1, k-i)</script>.</p>\n<p>From this, we deduce that we can make use of Dynamic Programming to solve the given problem. To solve the given problem, we make use of a 2-D <script type=\"math/tex; mode=display\">dp</script>, where <script type=\"math/tex; mode=display\">dp[i][j]</script> is used to store the number of arrangements with <script type=\"math/tex; mode=display\">i</script> elements and exactly <script type=\"math/tex; mode=display\">j</script> inverse pairs. Based on the discussions above, the <script type=\"math/tex; mode=display\">dp</script> updation equations become:</p>\n<ol>\n<li>\n<p>If <script type=\"math/tex; mode=display\">n=0</script>, no inverse pairs exist. Thus, <script type=\"math/tex; mode=display\">dp[0][k]=0</script>.</p>\n</li>\n<li>\n<p>If <script type=\"math/tex; mode=display\">k=0</script>, only one arrangement is possible, which is all numbers sorted in ascending order. Thus, <script type=\"math/tex; mode=display\">dp[n][0]=1</script>.</p>\n</li>\n<li>\n<p>Otherwise, <script type=\"math/tex; mode=display\">dp[i,j] = \\sum_{p=0}^{min(j,i-1)} count(i-1, j-p)</script>.</p>\n</li>\n</ol>\n<p>Again, the limit <script type=\"math/tex; mode=display\">\\text{min}(j, i-1)</script> is used to account for the cases where the number of inverse pairs needed becomes negative(<script type=\"math/tex; mode=display\">p>j</script>) or the case where the new inverse pairs needed by adding the <script type=\"math/tex; mode=display\">n^{th}</script> number is more than <script type=\"math/tex; mode=display\">n-1</script> which isn\'t possible, since the new number can be added at <script type=\"math/tex; mode=display\">(n-1)^{th}</script> position at most from the right.</p>\n<p>We start filling the <script type=\"math/tex; mode=display\">dp</script> in a row-wise order starting from the first row. At the end, the value of <script type=\"math/tex; mode=display\">dp[n][k]</script> gives the required result.</p>\n<p>The following animation shows how the <script type=\"math/tex; mode=display\">dp</script> is filled for n=4 and k=5:</p>\n<p>!?!../Documents/629_dp4.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">kInversePairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">p</span> <span class=\"o\">&lt;=</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">min</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"n\">p</span><span class=\"o\">++)</span>\n                        <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">%</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^2*k)</script>. <script type=\"math/tex; mode=display\">dp</script> of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">k</script> is filled once. Filling each <script type=\"math/tex; mode=display\">dp</script> entry takes <script type=\"math/tex; mode=display\">O(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">k</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-4-dynamic-programming-with-cumulative-sumaccepted\">Approach #4 Dynamic Programming with Cumulative Sum[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>From the last approach, we\'ve observed that we need to traverse back to some limit in the previous row of the <script type=\"math/tex; mode=display\">dp</script> array to fill in the current <script type=\"math/tex; mode=display\">dp</script> entry. Instead of doing this traversal to find the sum of the required elements, we can ease the process if we fill the cumulative sum upto the current element in a row in any <script type=\"math/tex; mode=display\">dp</script> entry, instead of the actual value. </p>\n<p>Thus, now, <script type=\"math/tex; mode=display\">dp[i][j]=count(i,j)+\\sum_{k=0}^{j-1} dp[i][k]</script>. Here, <script type=\"math/tex; mode=display\">count(i,j)</script> refers to the number of arrangements with <script type=\"math/tex; mode=display\">i</script> elements and exactly <script type=\"math/tex; mode=display\">j</script> inverse pairs. Thus, each entry contains the sum of all the previous elements in the same row along with its own result.</p>\n<p>Now, we need to determine the value of <script type=\"math/tex; mode=display\">count(i,j)</script> to be added to the sum of previous elements in a row, in order to update the <script type=\"math/tex; mode=display\">dp[i][j]</script> entry. But, we need not traverse back in the previous row , since it contains entries representing the cumulative sums now.\nThus, to obtain the sum of elements from <script type=\"math/tex; mode=display\">dp[i-1][j-i+1]</script>  to <script type=\"math/tex; mode=display\">dp[i-1][j]</script>(including both), we can directly use <script type=\"math/tex; mode=display\">dp[i-1][j] - dp[i-1][j-i]</script>. </p>\n<p>Now, to reflect the condition <script type=\"math/tex; mode=display\">\\text{min}(j, i-1)</script> used in the previous approaches, we can note that, we need to take the sum of only <script type=\"math/tex; mode=display\">i</script> elements in the previous row, if <script type=\"math/tex; mode=display\">i</script> elements exist till we reach the end of the array while traversing backwards. Otherwise, we simply take the sum of all the elements. </p>\n<p>Only <script type=\"math/tex; mode=display\">i</script> elements are considered because for generating <script type=\"math/tex; mode=display\">j</script> new inverse pairs, by adding <script type=\"math/tex; mode=display\">i</script> as the new number at the <script type=\"math/tex; mode=display\">j^{th}</script> position, <script type=\"math/tex; mode=display\">j</script> could reach only upto <script type=\"math/tex; mode=display\">i-1</script>, as discussed in the last approaches as well. Thus, we need to consider the sum of elements from <script type=\"math/tex; mode=display\">dp[i-1][j-(i-1)]</script> to  <script type=\"math/tex; mode=display\">dp[i-1][j]</script>(including both) using <script type=\"math/tex; mode=display\">dp[i-1][j] - dp[i-1][j-i]</script> if <script type=\"math/tex; mode=display\">j-i &geq; 0</script>.</p>\n<p>Otherwise, we add all the elements of the previous row upto the current column <script type=\"math/tex; mode=display\">j</script> being considered. In other words, we can use <script type=\"math/tex; mode=display\">dp[i-1][j]</script> directly as the required sum.</p>\n<p>At the end, while returning the result, we need to return <script type=\"math/tex; mode=display\">dp[n][k]-dp[n][k-1]</script> to obtain the required result from the cumulative sums. </p>\n<p>The following animation illustrates the process of filling the <script type=\"math/tex; mode=display\">dp</script> array.</p>\n<p>!?!../Documents/629_dp5.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">kInversePairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">((</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">((</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">k</script> is filled once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">k</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-5-another-optimized-dynamic-programming-approachaccepted\">Approach #5 Another Optimized Dynamic Programming Approach[Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another way to use the Dynamic Programming Approach could be if we can somehow directly store the required <script type=\"math/tex; mode=display\">count(i,j)</script> in <script type=\"math/tex; mode=display\">dp[i][j]</script> entry, but still we should not need to traverse back in the previous row to find the sum of the required elements. </p>\n<p>To do so, we can note that for the <script type=\"math/tex; mode=display\">i^{th}</script> row, we need to add the elements from <script type=\"math/tex; mode=display\">dp[i-1][j-i+1]</script> to <script type=\"math/tex; mode=display\">dp[i-1][j]</script>(including both) if <script type=\"math/tex; mode=display\">(j-1) > 0</script>. Otherwise, we need to add all the elements from <script type=\"math/tex; mode=display\">dp[i-1][0]</script> to <script type=\"math/tex; mode=display\">dp[i-1][j]</script>. This has already been discussed previously. </p>\n<p>Now, when we go for filling in <script type=\"math/tex; mode=display\">dp[i][j+1]</script> after filling <script type=\"math/tex; mode=display\">dp[i][j]</script>, we know <script type=\"math/tex; mode=display\">dp[i][j]</script> already corresponds to the sum of the elements from <script type=\"math/tex; mode=display\">dp[i-1][j-i+1]</script> to <script type=\"math/tex; mode=display\">dp[i-1][j]</script>. But, for filling <script type=\"math/tex; mode=display\">dp[i][j+1]</script>, we require the sum of the elements from <script type=\"math/tex; mode=display\">dp[i-1][(j-i+1)+1]</script> to <script type=\"math/tex; mode=display\">dp[i-1][j+1]</script>. </p>\n<p>We can observe that this sum only excludes <script type=\"math/tex; mode=display\">dp[i-1][j-i+1]</script> from the previous sum(<script type=\"math/tex; mode=display\">dp[i][j]</script>) and requires addition of only one new element(<script type=\"math/tex; mode=display\">dp[i-1][j+1]</script>) to the to this sum. If the value <script type=\"math/tex; mode=display\">j-i+1<0</script>, we need not remove any value.</p>\n<p>Thus, we can directly obtain <script type=\"math/tex; mode=display\">dp[i][j]</script> value as <script type=\"math/tex; mode=display\">dp[i][j] = dp[i-1][j] - dp[i-1][j-i] + dp[i-1][j]</script>, if <script type=\"math/tex; mode=display\">j-i &geq; 0</script>. Otherwise, we can use:  <script type=\"math/tex; mode=display\">dp[i][j] = dp[i-1][j] + dp[i-1][j]</script>. </p>\n<p>We can also note that, since, here <script type=\"math/tex; mode=display\">j</script> represents the number of inverse pairs that need to be currently considered, we can place another upper limit on <script type=\"math/tex; mode=display\">j</script> as well. The maximum number of inverse pairs for any arbitrary <script type=\"math/tex; mode=display\">n</script> occur only when the array is sorted in descending order leading to <code>[n,n-1,....,3,2,1]</code> as the arrangement. </p>\n<p>This arrangement has a total of <script type=\"math/tex; mode=display\">n*(n-1)/2</script> inverse pairs. Thus, for an array with <script type=\"math/tex; mode=display\">i</script> as the number of elements, the maximum number of inverse pairs possible is <script type=\"math/tex; mode=display\">i*(i-1)/2</script> only. Thus, for fillling in the <script type=\"math/tex; mode=display\">i^{th}</script> row of <script type=\"math/tex; mode=display\">dp</script>, we can place this limit on <script type=\"math/tex; mode=display\">j</script>\'s value.</p>\n<p>The following animation shows the <script type=\"math/tex; mode=display\">dp</script> filling process.</p>\n<p>!?!../Documents/629_dp6.json:1000,563!?!</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">kInversePairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">((</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                    <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">(n+1)</script>x<script type=\"math/tex; mode=display\">(k+1)</script> is filled once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">(n+1)</script>x<script type=\"math/tex; mode=display\">(k+1)</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-6-once-again-memoization-accepted\">Approach #6 Once Again Memoization [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>The Dynamic Programming solution discussed in Approach 5 can also be written down in the form of a recursive solution. But, again, that will include a lot of duplicate function calls. Thus, a better solution would be to use memoization to store the results of the previous function calls.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"n\">Integer</span><span class=\"o\">[][]</span> <span class=\"n\">memo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Integer</span><span class=\"o\">[</span><span class=\"mi\">1001</span><span class=\"o\">][</span><span class=\"mi\">1001</span><span class=\"o\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">kInversePairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">((</span><span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">inv</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n        <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">memo</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">k</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">n</script>x<script type=\"math/tex; mode=display\">k</script> entries in the <script type=\"math/tex; mode=display\">memo</script> array are filled once.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. <script type=\"math/tex; mode=display\">memo</script> array of constant size <script type=\"math/tex; mode=display\">1001</script>x<script type=\"math/tex; mode=display\">1001</script> is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-7-1-d-dynamic-programmming-accepted\">Approach #7 1-D dynamic Programmming [Accepted]:</h4>\n<p><strong>Algorithm</strong></p>\n<p>From the Dynamic Programming solution, we can also note that we only need the values of the previous row in the <script type=\"math/tex; mode=display\">dp</script> array, and not any other row. Thus, instead of storing the whole 2-D <script type=\"math/tex; mode=display\">dp</script> in memory, we can make use of a 1-D <script type=\"math/tex; mode=display\">dp</script> to store the previous row\'s entries only. The updations can be done in a 1-D <script type=\"math/tex; mode=display\">temp</script> array of the same size as <script type=\"math/tex; mode=display\">dp</script> and <script type=\"math/tex; mode=display\">dp</script> can be updated using this <script type=\"math/tex; mode=display\">temp</script> everytime a row is finished.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">kInversePairs</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">1000000007</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">k</span> <span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">((</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n                <span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">((</span><span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">dp</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">%</span> <span class=\"n\">M</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n*k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">k+1</script> is filled <script type=\"math/tex; mode=display\">n+1</script> times.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(k)</script>. <script type=\"math/tex; mode=display\">dp</script> array of size <script type=\"math/tex; mode=display\">(k+1)</script> is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none'),(500,'Maximum Product of Three Numbers',1,'Array,Math',0,0,'<p></p><p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p><p><b>Example 1:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3]\n<b>Output:</b> 6\n</pre><p><b>Example 2:</b><br/>\n</p><pre>\n<b>Input:</b> [1,2,3,4]\n<b>Output:</b> 24\n</pre><p><b>Note:</b><br/>\n</p><ol>\n<li>The length of the given array will be in range [3,10<sup>4</sup>] and all elements are in the range [-1000, 1000].</li>\n<li>Multiplication of any three numbers in the input won\'t exceed the range of 32-bit signed integer.</li>\n</ol>','[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\r\npublic:\r\n    int maximumProduct(vector<int>& nums) {\r\n        \r\n    }\r\n};\" },{\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\n    public int maximumProduct(int[] nums) {\n        \n    }\n}\" },{\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\r\n    def maximumProduct(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\r\n    def maximumProduct(self, nums):\r\n        """\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        """\r\n        \" },{\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"int maximumProduct(int* nums, int numsSize) {\r\n    \r\n}\" },{\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\r\n    public int MaximumProduct(int[] nums) {\r\n        \r\n    }\r\n}\" },{\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maximumProduct = function(nums) {\r\n    \r\n};\" },{\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef maximum_product(nums)\r\n    \r\nend\" },{\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\r\n    func maximumProduct(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}\" },{\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maximumProduct(nums []int) int {\r\n    \r\n}\" },{\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\n    def maximumProduct(nums: Array[Int]): Int = {\n        \n    }\n}\" }]','<div class=\"toc\">\n<ul>\n<li><a href=\"#solution\">Solution</a><ul>\n<li><a href=\"#approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</a></li>\n<li><a href=\"#approach-2-using-sorting-accepted\">Approach #2 Using Sorting [Accepted]</a></li>\n<li><a href=\"#approach-3-single-scan-accepted\">Approach #3 Single Scan [Accepted]</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"solution\">Solution</h2>\n<hr />\n<h4 id=\"approach-1-brute-force-time-limit-exceeded\">Approach #1 Brute Force [Time Limit Exceeded]</h4>\n<p>The simplest solution is to consider every triplet out of the given <script type=\"math/tex; mode=display\">nums</script> array and check their product and find out the maximum product out of them.</p>\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n^3)</script>. We need to consider every triplet from <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script>.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-2-using-sorting-accepted\">Approach #2 Using Sorting [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>Another solution could be to sort the given <script type=\"math/tex; mode=display\">nums</script> array(in ascending order) and find out the product of the last three numbers. </p>\n<p>But, we can note that this product will be maximum only if all the numbers in <script type=\"math/tex; mode=display\">nums</script> array are positive. But, in the given problem statement, negative elements could exist as well. </p>\n<p>Thus, it could also be possible that two negative numbers lying at the left extreme end could also contribute to lead to a larger product if the third number in the triplet being considered is the largest positive number in the <script type=\"math/tex; mode=display\">nums</script> array. </p>\n<p>Thus, either the product <script type=\"math/tex; mode=display\">nums[0]</script>x<script type=\"math/tex; mode=display\">nums[1]</script>x<script type=\"math/tex; mode=display\">nums[n-1]</script> or <script type=\"math/tex; mode=display\">nums[n-3]</script>x<script type=\"math/tex; mode=display\">nums[n-2]</script>x<script type=\"math/tex; mode=display\">nums[n-1]</script> will give the required result. Thus, we need to find the larger one from out of these values.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximumProduct</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">*</span> <span class=\"n\">nums</span><span class=\"o\">[</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O\\big(nlog(n)\\big)</script>. Sorting the <script type=\"math/tex; mode=display\">nums</script> array takes <script type=\"math/tex; mode=display\">nlog(n)</script> time.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(log(n)))</script>. Sorting takes O(logn) space.</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"approach-3-single-scan-accepted\">Approach #3 Single Scan [Accepted]</h4>\n<p><strong>Algorithm</strong></p>\n<p>We need not necessarily sort the given <script type=\"math/tex; mode=display\">nums</script> array to find the maximum product. Instead, we can only find the required 2 smallest values(<script type=\"math/tex; mode=display\">min1</script> and <script type=\"math/tex; mode=display\">min2</script>) and the three largest values(<script type=\"math/tex; mode=display\">max1, max2, max3</script>) in the <script type=\"math/tex; mode=display\">nums</script> array, by iterating over the <script type=\"math/tex; mode=display\">nums</script> array only once. </p>\n<p>At the end, again we can find out the larger value out of <script type=\"math/tex; mode=display\">min1</script>x<script type=\"math/tex; mode=display\">min2</script>x<script type=\"math/tex; mode=display\">max1</script> and <script type=\"math/tex; mode=display\">max1</script>x<script type=\"math/tex; mode=display\">max2</script>x<script type=\"math/tex; mode=display\">max3</script> to find the required maximum product.</p>\n<p><strong>Java</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">maximumProduct</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">min1</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">,</span> <span class=\"n\">min2</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">max1</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max2</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">,</span> <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nums</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">min2</span> <span class=\"o\">=</span> <span class=\"n\">min1</span><span class=\"o\">;</span>\n                <span class=\"n\">min1</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"n\">min2</span><span class=\"o\">)</span> <span class=\"o\">{</span>     <span class=\"c1\">// n lies between min1 and min2</span>\n                <span class=\"n\">min2</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max1</span><span class=\"o\">)</span> <span class=\"o\">{</span>            <span class=\"c1\">// n is greater than max1, max2 and max3</span>\n                <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">max2</span><span class=\"o\">;</span>\n                <span class=\"n\">max2</span> <span class=\"o\">=</span> <span class=\"n\">max1</span><span class=\"o\">;</span>\n                <span class=\"n\">max1</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max2</span><span class=\"o\">)</span> <span class=\"o\">{</span>     <span class=\"c1\">// n lies betweeen max1 and max2</span>\n                <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">max2</span><span class=\"o\">;</span>\n                <span class=\"n\">max2</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max3</span><span class=\"o\">)</span> <span class=\"o\">{</span>     <span class=\"c1\">// n lies betwen max2 and max3</span>\n                <span class=\"n\">max3</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">max</span><span class=\"o\">(</span><span class=\"n\">min1</span> <span class=\"o\">*</span> <span class=\"n\">min2</span> <span class=\"o\">*</span> <span class=\"n\">max1</span><span class=\"o\">,</span> <span class=\"n\">max1</span> <span class=\"o\">*</span> <span class=\"n\">max2</span> <span class=\"o\">*</span> <span class=\"n\">max3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><strong>Complexity Analysis</strong></p>\n<ul>\n<li>\n<p>Time complexity : <script type=\"math/tex; mode=display\">O(n)</script>. Only one iteration over the <script type=\"math/tex; mode=display\">nums</script> array of length <script type=\"math/tex; mode=display\">n</script> is required.</p>\n</li>\n<li>\n<p>Space complexity : <script type=\"math/tex; mode=display\">O(1)</script>. Constant extra space is used.</p>\n</li>\n</ul>\n<hr />\n<p>Analysis written by: <a href=\"https://leetcode.com/vinod23\">@vinod23</a></p>',NULL,1,'none','none','none');
/*!40000 ALTER TABLE `problems` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_accept_codes`
--

DROP TABLE IF EXISTS `user_accept_codes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_accept_codes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL,
  `code` text,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `problem_id` (`problem_id`),
  CONSTRAINT `user_accept_codes_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_accept_codes_ibfk_2` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_accept_codes`
--

LOCK TABLES `user_accept_codes` WRITE;
/*!40000 ALTER TABLE `user_accept_codes` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_accept_codes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_collections`
--

DROP TABLE IF EXISTS `user_collections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_collections` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `problem_id` (`problem_id`),
  CONSTRAINT `user_collections_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_collections_ibfk_2` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_collections`
--

LOCK TABLES `user_collections` WRITE;
/*!40000 ALTER TABLE `user_collections` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_collections` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_infos`
--

DROP TABLE IF EXISTS `user_infos`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_infos` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `realname` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `profile` text,
  `school` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `about_me` varchar(512) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tag` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `login_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `ix_user_infos_user_id` (`user_id`),
  CONSTRAINT `user_infos_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_infos`
--

LOCK TABLES `user_infos` WRITE;
/*!40000 ALTER TABLE `user_infos` DISABLE KEYS */;
INSERT INTO `user_infos` VALUES (1,1,'admin',null,'WYU','IT','aa,bb','2017-09-26 10:24:01','2017-11-10 15:39:47');
/*!40000 ALTER TABLE `user_infos` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_join_contests`
--

DROP TABLE IF EXISTS `user_join_contests`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_join_contests` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `contest_id` int(11) DEFAULT NULL,
  `is_join` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `contest_id` (`contest_id`),
  CONSTRAINT `user_join_contests_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_join_contests_ibfk_2` FOREIGN KEY (`contest_id`) REFERENCES `contests` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_join_contests`
--

LOCK TABLES `user_join_contests` WRITE;
/*!40000 ALTER TABLE `user_join_contests` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_join_contests` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_like_problems`
--

DROP TABLE IF EXISTS `user_like_problems`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_like_problems` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL,
  `is_like` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `problem_id` (`problem_id`),
  CONSTRAINT `user_like_problems_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_like_problems_ibfk_2` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_like_problems`
--

LOCK TABLES `user_like_problems` WRITE;
/*!40000 ALTER TABLE `user_like_problems` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_like_problems` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_notes`
--

DROP TABLE IF EXISTS `user_notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_notes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL,
  `text` text,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `problem_id` (`problem_id`),
  CONSTRAINT `user_notes_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_notes_ibfk_2` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_notes`
--

LOCK TABLES `user_notes` WRITE;
/*!40000 ALTER TABLE `user_notes` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_notes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_roles`
--

DROP TABLE IF EXISTS `user_roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  `permissions` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `ix_user_roles_default` (`default`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_roles`
--

LOCK TABLES `user_roles` WRITE;
/*!40000 ALTER TABLE `user_roles` DISABLE KEYS */;
INSERT INTO `user_roles` VALUES (1,'moderator',0,15),(2,'user',1,7),(3,'administrator',0,255),(4,'sponsor',0,23);
/*!40000 ALTER TABLE `user_roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_submit_codes`
--

DROP TABLE IF EXISTS `user_submit_codes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_submit_codes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL,
  `code_id` int(11) DEFAULT NULL,
  `status` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `language` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `time_used` float NOT NULL,
  `memory_used` float NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `problem_id` (`problem_id`),
  KEY `code_id` (`code_id`),
  CONSTRAINT `user_submit_codes_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_submit_codes_ibfk_2` FOREIGN KEY (`problem_id`) REFERENCES `problems` (`id`),
  CONSTRAINT `user_submit_codes_ibfk_3` FOREIGN KEY (`code_id`) REFERENCES `user_accept_codes` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_submit_codes`
--

LOCK TABLES `user_submit_codes` WRITE;
/*!40000 ALTER TABLE `user_submit_codes` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_submit_codes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `username` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `password_hash` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `role_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ix_users_username` (`username`),
  UNIQUE KEY `ix_users_email` (`email`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `users_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `user_roles` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'admin@admin.com','admin','$6$rounds=656000$khFoO5sqQNdlJepJ$saqeDpCUFhJk8jl6o9vhgInf58MeIh/L5f.4pi//UvNEVe33uLShatCQvqyLOdTWpa7t82F0HRY8lkZHP8qzJ1',3);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-05-16 17:32:35
