{"version":3,"sources":["webpack:///static/js/3.1ec39f0bdb75d46c4d39.js","webpack:///./~/codemirror/addon/edit/closetag.js","webpack:///src/components/notes/notes.vue","webpack:///./~/codemirror/addon/search/matchesonscrollbar.js","webpack:///src/components/description/description.vue","webpack:///./src/components/hints/hints.vue?bc10","webpack:///src/components/description/myeditor.vue","webpack:///src/components/solution/solution.vue","webpack:///./src/common/js/problem.js?e44c","webpack:///./src/components/hints/hints.vue?9025","webpack:///./~/codemirror/keymap/sublime.js","webpack:///./src/components/description/description.vue","webpack:///./src/components/hints/hints.vue?ca96","webpack:///./src/components/description/description.vue?714a","webpack:///./src/components/description/myeditor.vue?cf39","webpack:///./src/components/description/myeditor.vue?25fe","webpack:///./~/codemirror/addon/search/search.js","webpack:///./src/components/description/description.vue?ab40","webpack:///./src/components/description/myeditor.vue?b8a0","webpack:///./src/components/problem-detail/problem-detail.vue?0244","webpack:///./src/components/problem-detail/problem-detail.vue?d96a","webpack:///./~/codemirror/keymap/vim.js","webpack:///./src/components/solution/solution.vue?99d5","webpack:///./~/codemirror/addon/fold/foldgutter.js","webpack:///(webpack)/buildin/amd-define.js","webpack:///./~/codemirror/addon/dialog/dialog.css?ae99","webpack:///./src/components/problem-detail/problem-detail.vue","webpack:///./~/codemirror/addon/hint/javascript-hint.js","webpack:///./~/codemirror/addon/search/match-highlighter.js","webpack:///./src/components/solution/solution.vue","webpack:///./src/components/problem-detail/problem-detail.vue?3a10","webpack:///./~/codemirror/addon/scroll/annotatescrollbar.js","webpack:///./src/components/description/myeditor.vue","webpack:///./~/codemirror/addon/dialog/dialog.css","webpack:///./~/codemirror/addon/dialog/dialog.js","webpack:///./src/components/notes/notes.vue?0fae","webpack:///./~/codemirror/addon/fold/foldcode.js","webpack:///./~/codemirror/addon/fold/xml-fold.js","webpack:///./~/codemirror/addon/fold/indent-fold.js","webpack:///./~/codemirror/addon/selection/mark-selection.js","webpack:///./src/components/description/description.vue?2216","webpack:///./~/codemirror/addon/fold/foldgutter.css?9068","webpack:///./~/codemirror/addon/comment/comment.js","webpack:///./src/components/solution/solution.vue?9b94","webpack:///./~/codemirror/addon/selection/active-line.js","webpack:///./src/components/notes/notes.vue?6f3e","webpack:///./~/codemirror/addon/edit/closebrackets.js","webpack:///./~/codemirror/addon/search/searchcursor.js","webpack:///./~/codemirror/addon/fold/markdown-fold.js","webpack:///./~/codemirror/addon/fold/foldgutter.css","webpack:///./~/codemirror/addon/fold/brace-fold.js","webpack:///./src/components/notes/notes.vue","webpack:///./src/components/notes/notes.vue?da57","webpack:///./~/codemirror/addon/hint/show-hint.js","webpack:///./~/file-saver/FileSaver.js","webpack:///./src/components/hints/hints.vue","webpack:///(webpack)/buildin/amd-options.js","webpack:///./src/common/js/ReturnResult.js","webpack:///./~/codemirror/addon/fold/comment-fold.js","webpack:///./~/codemirror/keymap/emacs.js","webpack:///./src/components/solution/solution.vue?5c0b","webpack:///./~/codemirror/addon/edit/matchbrackets.js","webpack:///src/components/problem-detail/problem-detail.vue"],"names":["webpackJsonp","+/ra","module","exports","__webpack_require__","mod","CodeMirror","autoCloseGT","cm","getOption","Pass","ranges","listSelections","replacements","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","mode","name","tagName","opt","html","configuration","dontCloseTags","htmlDontClose","indentTags","htmlIndent","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","indexOf","closingTagExists","indent","text","newPos","Pos","line","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","start","replacement","context","getLine","replaceSelections","autoCloseSlash","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","cx","onCx","prev","to","next","defineOption","val","old","Init","removeKeyMap","map","whenClosing","whenOpening","addKeyMap","commands","closeTag","+onj","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default","n","__WEBPACK_IMPORTED_MODULE_1_axios__","__WEBPACK_IMPORTED_MODULE_1_axios___default","__WEBPACK_IMPORTED_MODULE_2_common_js_data__","__WEBPACK_IMPORTED_MODULE_3_vuex__","props","String","default","data","note","noteDialogVisible","fileType","noteName","this","created","_this","_checkLogin","url","problem","id","a","get","then","response","msg","result","methods","_showSaveNoteDialog","saveNoteConfirm","FileSaver","blob","Blob","saveAs","undefined","$notify","title","message","_saveNote","_this2","put","user","user_id","computed","/A6h","SearchAnnotation","query","caseFold","options","annotateOptions","listenForChanges","prop","className","annotation","annotateScrollbar","gap","from","firstLine","matches","update","findMatches","self","on","changeHandler","_cm","change","onChange","offsetLine","changeStart","sizeChange","max","defineExtension","prototype","match","splice","cursor","getSearchCursor","maxMatches","findNext","startLine","endLine","changeEnd","newFrom","newTo","clearTimeout","setTimeout","updateAfterChange","clear","off","0CT/","__WEBPACK_IMPORTED_MODULE_0_components_description_myeditor__","Object","components","MyEditor","1LpH","content","locals","2hzx","__WEBPACK_IMPORTED_MODULE_1_codemirror_mode_javascript_javascript__","__WEBPACK_IMPORTED_MODULE_2_codemirror_mode_go_go__","__WEBPACK_IMPORTED_MODULE_3_codemirror_mode_python_python__","__WEBPACK_IMPORTED_MODULE_4_codemirror_mode_ruby_ruby__","__WEBPACK_IMPORTED_MODULE_5_codemirror_mode_clike_clike__","__WEBPACK_IMPORTED_MODULE_6_codemirror_theme_ambiance_css__","__WEBPACK_IMPORTED_MODULE_7_codemirror_theme_base16_dark_css__","__WEBPACK_IMPORTED_MODULE_8_codemirror_theme_cobalt_css__","__WEBPACK_IMPORTED_MODULE_9_codemirror_theme_paraiso_light_css__","__WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_dark_css__","__WEBPACK_IMPORTED_MODULE_11_codemirror_theme_rubyblue_css__","__WEBPACK_IMPORTED_MODULE_12_codemirror_theme_solarized_css__","__WEBPACK_IMPORTED_MODULE_13_codemirror_theme_mbo_css__","__WEBPACK_IMPORTED_MODULE_14_common_js_data__","__WEBPACK_IMPORTED_MODULE_15_axios__","__WEBPACK_IMPORTED_MODULE_15_axios___default","__WEBPACK_IMPORTED_MODULE_16_vuex__","__WEBPACK_IMPORTED_MODULE_17_common_js_ReturnResult__","code","templateCodes","Languages","editorModes","selectLanguage","editorThemes","selectTheme","keyMaps","selectkeyMap","editorOptions","tabSize","theme","lineNumbers","keyMap","foldGutter","gutters","styleSelectedText","highlightSelectionMatches","showToken","fullscreenLoading","_getTempletCode","handleCommandLangage","command","console","log","JSON","parse","templet","find","item","defaultCode","handleCommandKeyMap","handleCommandTheme","onClickSubmit","post","language","push","mytitle","memory_used","toFixed","output","status","time_used","_showLoading","mag","error","onClickRun","_this3","patch","onClickCustom","str","_this4","47LY","solution","mounted","_getSolution","5Ey+","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default","Problem","_ref","level","description","accepted","submitted","like_nums","hate_nums","6rPU","render","_vm","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v","esExports","7Xsf","findPosSubword","doc","dir","clipPos","cat","isWordChar","toUpperCase","moveSubword","extendSelectionsBy","range","display","shift","extend","insertLine","above","isReadOnly","operation","len","newSelection","last","at","execCommand","wordAt","word","addCursorToSelection","newRanges","newAnchor","findPosV","newHead","newRange","isSelectedRange","selectBetweenBrackets","opening","scanForBracket","closing","mirror","sortLines","caseSensitive","selected","toSort","lines","getRange","sort","b","au","bu","modifyWordOrSelection","indices","cmpPos","getTarget","getCursor","findAndGoTo","forward","target","cur","findPrevious","setSelection","sublime","fallthrough","cmds","mac","macDefault","ctrl","goSubwordCombo","scrollLineCombo","getScrollInfo","somethingSelected","visibleBottomLine","lineAtHeight","top","clientHeight","scrollTo","defaultTextHeight","visibleTopLine","lineRanges","scroll","extended","fullWord","sublimeFindFullWord","RegExp","found","addSelection","addCursorToLineCombo","swapLineCombo","linesToMove","newSels","scrollIntoView","toggleComment","joined","offset","obj","actual","exec","rangeCount","marks","sublimeBookmarks","current","unshift","pop","findMarks","j","sublimeBookmark","k","markText","clearWhenEmpty","cK","cursors","indentUnit","toStartOfLine","column","countColumn","deletePos","findPosH","prevIndent","findColumn","sublimeMark","setBookmark","tmp","sublimeKilled","setCursor","replaceSelection","cursorCoords","bottom","selectLinesCombo","primaryIndex","normalizeKeyMap","8eAg","injectStyle","ssrContext","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_description_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4dfc5728_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_description_vue__","normalizeComponent","__vue_styles__","Component","8f5d","version","sources","names","mappings","file","sourcesContent","sourceRoot","AF7c","ArdA","C3SF","attrs","trigger","menu-align","_s","slot","_l","index","key","ref","model","value","callback","$$v","expression","click","directives","rawName","modifiers","fullscreen","lock","element-loading-text","src","width","height","CK2l","searchOverlay","caseInsensitive","replace","global","source","ignoreCase","token","stream","lastIndex","skipToEnd","SearchState","posFrom","posTo","lastQuery","overlay","getSearchState","search","queryCaseInsensitive","multiline","persistentDialog","deflt","onEnter","onKeyDown","openDialog","selectValueOnOpen","closeOnEnter","onClose","clearSearch","dialog","shortText","f","prompt","confirmDialog","fs","openConfirm","confirm","parseString","_","parseQuery","isRE","startSearch","queryText","removeOverlay","addOverlay","showMatchesOnScrollbar","annotate","doSearch","rev","persistent","immediate","q","getSelection","hiding","searchNext","event","e_stop","style","opacity","shiftKey","document","querySelector","wrapper","getBoundingClientRect","queryDialog","keyName","extra","cmd","replaceAll","all","dialogText","replaceQueryDialog","replacementQueryDialog","advance","doReplaceConfirm","doReplace","findPersistent","findPersistentNext","findPersistentPrev","findPrev","D/Ep","domProps","innerHTML","_e","ExgV","FVxK","Fvbh","Hyg2","defaultKeymap","keys","toKeys","action","motion","motionArgs","linewise","toJumplist","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultExCommandMap","shortName","possiblyAsync","excludeFromCommandHistory","Vim","enterVimMode","setOption","signal","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","vim","detachVimMap","rmClass","getWrapperElement","attach","attachVimMap","addClass","cmKey","vimKey","cmKeyToVimKey","findKey","pieces","split","lastPiece","hasCharacter","piece","specialKeys","isUpperCase","join","onPasteFn","insertMode","offsetCursor","actions","enterInsertMode","makeKeyRange","size","fromCharCode","isLine","isLowerCase","isMatchableSymbol","isNumber","numberRegex","isWhiteSpaceString","inArray","arr","defaultValue","aliases","Error","cfg","option","scope","local","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","createInsertModeChanges","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","resetVimGlobalState","vimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","createCircularJumpList","macroModeState","lastCharacterSearch","increment","selectedCharacter","registerController","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","prefixRepeat","motionRepeat","keyBuffer","registerName","clearInputState","reason","Register","insertModeChanges","searchQueries","defineRegister","register","registers","validRegisters","unnamedRegister","historyBuffer","iterator","initialPrefix","defineMotion","fn","motions","fillArray","times","defineOperator","operators","defineAction","clipCursorToContent","includeLineBreak","maxCh","lineLength","copyArgs","args","ret","hasOwnProperty","offsetCh","getOffset","commandMatches","partial","full","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","lastChar","repeatFn","repeat","copyCursor","cursorEqual","cur1","cur2","cursorIsBefore","cursorMin","arguments","apply","Array","call","cursorMax","cursorIsBetween","cur3","cur1before2","cur2before3","lineNum","trim","s","escapeRegex","extendLineToColumn","endCh","spaces","selectBlock","selectionEnd","selections","isClipped","curHead","primIndex","getIndex","wasClipped","base","baseCh","headCh","newDir","selectForInsert","lineHead","atAnchor","atHead","getSelectedAreaRange","selectionStart","block","anchorMark","headMark","updateLastSelection","posFromIndex","indexFromPos","expandSelection","updateCmSelection","cmSel","makeCmSelection","primary","updateFakeCursor","exclusive","headOffset","anchorOffset","left","right","getHead","exitVisualMode","moveHead","clipToLine","curStart","curEnd","selection","expandSelectionToLine","findFirstNonWhiteSpaceCharacter","firstNonWS","expandWordUnderCursor","_forward","noSymbol","idx","wordCharTest","bigWordCharTest","wordStart","recordJumpPosition","oldCur","newCur","add","recordLastCharacterSearch","findSymbol","symb","lineCount","curCh","lineText","nextCh","lastCh","reverseSymb",")","}","(","{","depth","curMoveThrough","symbolToMode","init","findSymbolModes","isComplete","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","moveToWord","words","eodCh","shortCircuit","firstWord","lastWord","moveToCharacter","character","charIdxInLine","moveToColumn","updateMark","markName","validMarks","includeChar","lastIndexOf","findParagraph","isEmpty","isBoundary","any","startState","selectCompanionObject","bracketRegexp","[","]","openSym","curChar","bracketRegex","findBeginningAndEnd","chars","firstIndex","searchState_","template","onKeyUp","splitBySlash","argString","slashes","findUnescapedSlashes","tokens","substring","escapeNextChar","c","translateRegex","specials","unescape","out","specialComesNext","translateRegexReplace","charUnescapes","unescapeRegexReplace","StringStream","eol","peek","matched","matcher","unescapes","smartCase","getRegister","setText","regexPart","forceIgnoreCase","showConfirm","openNotification","duration","alert","makePrompt","prefix","desc","raw","showPrompt","regexEqual","r1","r2","updateSearchQuery","rawQuery","highlightSearchMatches","getQuery","setQuery","matchSol","sol","backUp","searchState","getOverlay","getScrollbarAnnotate","setScrollbarAnnotate","setOverlay","clearSearchHighlight","isInRange","getUserVisibleLines","scrollInfo","coordsChar","bottomY","getMarkPos","history","done","mark","lineStart","lineEnd","searchCursor","replaceWith","newText","lastPos","close","focus","exMode","onPromptKeyDown","_value","savedCallback","exitInsertMode","insertModeChangeRegister","lastChange","selLength","inVisualBlock","changes","InsertModeKey","onKeyEventTargetKeyDown","repeatLastEdit","repeatOverride","toggleOverwrite","logInsertModeChange","_mapCommand","mapCommand","executeMacroRegister","exCommandDispatcher","processCommand","imc","handleKey","repeatInsertModeChanges","logKey","pushText","pushInsertModeChanges","logSearchQuery","pushSearchQuery","changeObj","expectCursorActivityForChange","origin","maybeReset","overwrite","curOp","isVimOp","handleExternalSelection","onKeyFound","lookupKey","repeatForInsert","repeatCommand","isAction","commandDispatcher","processAction","evalInput","repeatInsert","changeObject","cachedInputState","keyHandler","binding","lastSel","Shift","Ctrl","Alt","Cmd","Mod","Enter","Backspace","Delete","Insert","upperCaseAlphabet","lowerCaseAlphabet","numbers","concat","useNextSlot","pointer","trashMark","buffer","curMark","markPos","tail","move","inc","cachedCursor","exitMacroRecordMode","enterMacroRecordMode","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","lhs","rhs","ctx","unmap","defineEx","func","exCommands","commandMap_","handleMacroRecording","handleEsc","doKeyToKey","keysAreChars","matchCommand","thisMatch","window","here","keysMatcher","pushRepeatDigit","handleEx","input","getRepeat","parseInt","toString","isValidRegister","shiftNumericRegisters_","nextMatch","up","element","pushInput","reset","bestMatch","processMotion","processOperator","processOperatorMotion","processSearch","processEx","repeatIsExplicit","recordLastEdit","handleQuery","onPromptClose","originalScrollPos","onPromptKeyUp","parsedQuery","originalQuery","setReversed","promptPrefix","searchPromptDesc","isKeyword","exArgs","origHead","origAnchor","oldHead","oldAnchor","noRepeat","motionResult","Infinity","lineOffset","abs","chOffset","operatorMoveTo","actionCommand","moveToTopLine","_head","moveToMiddleLine","floor","moveToBottomLine","expandToLine","isReversed","goToMark","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","moveByCharacters","moveByLines","moveByDisplayLines","moveByScroll","moveToEol","first","moveToStartOfLine","charCoords","res","hitSide","lastCharCoords","goalCoords","resCoords","moveByPage","moveByParagraph","scrollbox","orig","dest","moveByWords","moveTillCharacter","moveToSymbol","retval","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","symbol","getTokenTypeAt","findMatchingBracket","moveToLineOrEdgeOfDocument","textObjectManipulation","mirroredPairs","selfPaired","'","\"","repeatLastCharacterSearch","lastSearch","moveH","finalHead","lastState","prevLineEnd","Number","MAX_VALUE","wasLastLine","newlineAndIndent","delete","changeCase","getSelections","swapped","toSwap","yank","endPos","jumpListWalk","lineHeight","delta","ceil","newBottom","scrollToCursor","y","replayMacro","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineAndIndentContinueComment","paste","whitespaceLength","tabs","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","lastSelectionCurEnd","selectedArea","selectedText","emptyStrings","undo","redo","setRegister","setMark","replaceTo","replaceWithStr","incrementNumberToken","numberStr","lineStr","re","number","*","/","m","M","#","bracket","section","comment","method","preprocess","reversed","\\n","\\r","\\t","\\/","\\\\","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","mapping","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","setOptionReturn","setlocal","setglobal","regArgs","regInfo","compareFn","reverse","anum","bnum","radix","comparePatternFn","unique","pattern","err","eatSpace","opts","decimal","hex","octal","substr","numPart","textPart","matchPart","textOld","matchedLines","nextCommand","substitute","trailing","flagsPart","count","replacePart","startPos","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","detach","IlaS","Kk9m","State","parseOptions","gutter","indicatorOpen","indicatorFolded","isFolded","__isFold","marker","spec","createElement","cloneNode","updateFoldInfo","minSize","foldOption","eachLine","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","folded","foldCode","rangeFinder","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","LGuY","LxZp","McHp","defineProperty","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_problem_detail_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4ad8a6d2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_problem_detail_vue__","Mixr","forEach","arrayContains","scriptHint","editor","keywords","getToken","tprop","list","getCompletions","javascriptHint","javascriptKeywords","getCoffeeScriptToken","coffeescriptHint","coffeescriptKeywords","forAllProps","getOwnPropertyNames","getPrototypeOf","o","maybeAdd","gatherCompletions","stringProps","arrayProps","Function","funcProps","globalScope","additionalContext","useGlobalScope","jQuery","v","localVars","globalVars","registerHelper","OkRY","defaults","timeout","matchesonscroll","active","cursorActivity","matchHighlighter","hasFocus","scheduleHighlight","onFocus","highlightMatches","delay","hasBoundary","makeOverlay","searchFor","wordsOnly","isWord","minChars","chr","boundariesAround","skipTo","P830","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_solution_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6701a6dc_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_solution_vue__","PdbZ","sm","lg","md","xs","align","problemDetail","getFavoriteSrc","tab","label","QSKu","Annotation","scheduleRedraw","doRedraw","redraw","buttonHeight","scrollButtonHeight","annotations","doUpdate","div","appendChild","cssText","computeScale","resizeHandler","hScale","barHeight","getScrollerElement","scrollHeight","compute","getY","curLine","curLineObj","getLineHandle","widgets","wrapping","singleLineH","heightAtLine","frag","createDocumentFragment","anns","barWidth","nextTop","ann","setAttribute","textContent","parentNode","removeChild","RKlR","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_myeditor_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_58438f59_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_myeditor_vue__","RkAk","RkhK","dialogDiv","wrap","closeNotification","newVal","currentNotificationClose","inp","closed","me","button","getElementsByTagName","select","onInput","keyCode","blur","closeOnBlur","callbacks","buttons","blurring","e_preventDefault","doneTimer","SVHh","visible","update:visible","$event","label-width","default_open","placeholder","THjC","doFold","force","allowFolded","finder","findMarksAt","cleared","myWidget","makeWidget","myRange","replacedWith","clearOnEnter","widget","createTextNode","foldOptions","defaultOptions","newFoldFunction","toggleFold","fold","unfold","foldAll","unfoldAll","funcs","helpers","getHelpers","auto","minFoldSize","scanUp","TQy8","cmp","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","toNextTag","toPrevTag","findMatchingClose","stack","startCh","findMatchingOpen","nameStartChar","openTag","findMatchingTag","open","findEnclosingTag","U3HU","lineIndent","lineNo","spaceTo","myIndent","lastLineInFold","U80t","markedSelection","coverRange","addAt","array","cls","markedSelectionStyle","CHUNK_SIZE","atEnd","coverStart","coverEnd","XRep","Yokd","Z6qg","nonWS","probablyInsideString","useInnerComments","getModeAt","noOptions","minLine","uncomment","lineComment","commentString","blockCommentStart","fullLines","blockComment","pad","padding","blankLines","commentBlankLines","baseString","whitespace","cut","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","didSomething","lineString","insideStart","insideEnd","lastStart","firstEnd","almostLastStart","openEnd","foundEnd","ZfUv","aGTD","clearActiveLines","activeLines","removeLineClass","WRAP_CLASS","BACK_CLASS","GUTT_CLASS","sameArray","updateActiveLines","nonEmpty","getLineHandleVisualStart","addLineClass","selectionChange","aOIS","aX1R","conf","getConfig","closeBrackets","override","handleBackspace","pairs","around","charsAround","handleEnter","explode","contractSelection","inverted","handleChar","triples","identical","curType","enteringString","isClosingBracket","stringStartsAfter","sels","triggerElectric","type1","bind","bp3c","c+I8","regexpFlags","regexp","flags","ensureGlobal","maybeMultiline","searchRegexpForward","searchRegexpForwardMultiline","chunk","before","inside","lastMatchIn","cutOff","newMatch","searchRegexpBackward","searchRegexpBackwardMultiline","adjustPos","foldFunc","mid","searchStringForward","noFold","cutFrom","searchStringBackward","topString","SearchCursor","atOccurrence","normalize","splitLines","defineDocExtension","dxBS","isHeader","tokentype","headerLevel","maxDepth","lastLineNo","nextNextLine","engA","fo6W","findOpening","openCh","pass","tokenType","startToken","endToken","outer","nextOpen","hasImport","semi","has","hasInclude","j09L","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_notes_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c64ce914_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_notes_vue__","jCel","jQeI","Completion","debounce","tick","startLen","activityFunc","isNewCompletion","nw","hintOptions","hint","resolve","getText","completion","handle","addBinding","bound","baseMap","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","pick","Tab","Esc","custom","customKeys","extraKeys","getHintElement","hintsElement","el","nodeName","Widget","picked","hints","selectedHint","completions","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","displayText","hintId","alignWithWord","below","winW","innerWidth","body","offsetWidth","documentElement","winH","innerHeight","offsetHeight","container","box","overlapY","scrolls","startScroll","overlapX","node","firstChild","nextSibling","paddingRight","nativeBarWidth","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onScroll","curScroll","newTop","point","pageYOffset","scrollTop","t","srcElement","completeOnSingleClick","applicableHelpers","supportsSelection","fetchHints","async","resolveAutoHints","resolved","run","app","getHelper","fromList","anyword","showHint","getHints","newOpts","completionActive","requestAnimationFrame","cancelAnimationFrame","closeCharacters","disable","myTick","finishUpdate","completeSingle","childNodes","offsetTop","term","autocomplete","lDdF","__WEBPACK_AMD_DEFINE_RESULT__","view","navigator","userAgent","get_URL","URL","webkitURL","save_link","createElementNS","can_use_save_link","MouseEvent","dispatchEvent","is_safari","HTMLElement","safari","is_chrome_ios","throw_outside","ex","setImmediate","revoke","revoker","revokeObjectURL","remove","dispatch","filesaver","event_types","listener","auto_bom","no_auto_bom","object_url","dispatch_all","readyState","INIT","createObjectURL","href","download","DONE","FileReader","reader","onloadend","location","readAsDataURL","FS_proto","msSaveOrOpenBlob","abort","WRITING","onwritestart","onprogress","onwrite","onabort","onerror","onwriteend","lUyH","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_hints_vue__","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_hints_vue___default","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_062a844c_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_hints_vue__","nErl","__webpack_amd_options__","qnSv","ReturnResult","soCA","registerGlobalHelper","tjx/","posEq","addToRing","killRing","growRingTop","getFromRing","popFromRing","kill","mayGrow","lastKill","isClean","gen","changeGeneration","byChar","byWord","byLine","goalColumn","byPage","byParagraph","no","sawText","fst","lst","bySentence","sawWord","byExpr","strict","getPrefix","precise","digits","emacsPrefix","clearPrefix","repeated","findEnd","by","extendSelection","killTo","killRegion","addPrefix","digit","maybeClearPrefix","maybeDuplicateInput","arg","emacsPrefixMap","prefixPreservingKeys","dup","one","txt","addPrefixMap","prefixMap","maybeRemovePrefixMap","setExtending","getExtending","clearMark","getInput","operateOnWord","op","toEnclosingExpr","quit","regPrefix","d","Alt-G","Ctrl-X","Ctrl-Q","Ctrl-U","emacs","Ctrl-W","Ctrl-K","Alt-W","Ctrl-Y","Alt-Y","Ctrl-Space","Ctrl-Shift-2","Ctrl-F","Ctrl-B","Right","Left","Ctrl-D","Ctrl-H","Alt-F","Alt-B","Alt-D","Alt-Backspace","Ctrl-N","Ctrl-P","Ctrl-A","Ctrl-E","Alt-V","Ctrl-V","Ctrl-Up","Ctrl-Down","Alt-A","Alt-E","Alt-K","Ctrl-Alt-K","Ctrl-Alt-Backspace","Ctrl-Alt-F","Ctrl-Alt-B","Shift-Ctrl-Alt-2","Ctrl-Alt-T","leftStart","leftEnd","rightEnd","rightStart","Ctrl-Alt-U","Alt-Space","Ctrl-O","Ctrl-T","Alt-C","w","letter","Alt-U","Alt-L","Alt-;","Ctrl-/","Shift-Ctrl--","Ctrl-Z","Cmd-Z","Shift-Alt-,","Shift-Alt-.","Ctrl-S","Ctrl-R","Ctrl-G","Shift-Alt-5","Alt-/","Ctrl-J","Alt-G G","num","isNaN","Ctrl-X Tab","indentSelection","Ctrl-X Ctrl-X","Ctrl-X Ctrl-S","Ctrl-X Ctrl-W","Ctrl-X S","Ctrl-X F","Ctrl-X U","Ctrl-X K","Ctrl-X Delete","Ctrl-X H","Ctrl-Q Tab","umNi","vq+x","where","config","afterCursor","matching","maxScanLen","maxScanLineLength","maxScanLines","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","ie_lt8","focused","doMatchBrackets","currentlyHighlighted","documentMode","oldConfig","x494","__WEBPACK_IMPORTED_MODULE_1_vuex__","__WEBPACK_IMPORTED_MODULE_2_axios__","__WEBPACK_IMPORTED_MODULE_2_axios___default","__WEBPACK_IMPORTED_MODULE_3_components_description_description__","__WEBPACK_IMPORTED_MODULE_4_components_solution_solution__","__WEBPACK_IMPORTED_MODULE_5_components_hints_hints__","__WEBPACK_IMPORTED_MODULE_6_components_notes_notes__","__WEBPACK_IMPORTED_MODULE_7_common_js_problem__","__WEBPACK_IMPORTED_MODULE_8_common_js_data__","loading","_getProblemDetail","$router","hasCollect","deleteFavoriteList","saveFavoriteList","collectionList","findIndex","Description","Solution","Hints","Notes"],"mappings":"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","file":"static/js/3.1ec39f0bdb75d46c4d39.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ \"+/ra\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"TQy8\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"+onj\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vuex__ = __webpack_require__(\"NYxO\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    name: String,\n    default: 'CodeNut笔记'\n  },\n  data: function data() {\n    return {\n      note: '',\n      noteDialogVisible: false,\n      fileType: '1',\n      noteName: this.name + '笔记'\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    if (this._checkLogin()) {\n      var url = __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/notes';\n      __WEBPACK_IMPORTED_MODULE_1_axios___default.a.get(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this.note = response.data.result[0].text;\n        }\n      }, function (response) {});\n    }\n  },\n\n  methods: {\n    _showSaveNoteDialog: function _showSaveNoteDialog() {\n      this.noteDialogVisible = true;\n    },\n    saveNoteConfirm: function saveNoteConfirm() {\n      var FileSaver = __webpack_require__(\"lDdF\");\n      var blob = new Blob([this.note], { type: 'text/plain;charset=utf-8' });\n      if (this.fileType === '1') {\n        // Save as .txt\n        FileSaver.saveAs(blob, this.noteName + '.txt');\n      } else if (this.fileType === '2') {\n        FileSaver.saveAs(blob, this.noteName + '.md');\n      } else if (this.fileType === '0') {\n        if (this.note === '' || this.note === undefined) {\n          this.$notify({\n            title: '警告',\n            type: 'warning',\n            message: '笔记不能为空哦!'\n          });\n        } else {\n          if (this._checkLogin()) {\n            this._saveNote();\n          }\n        }\n      }\n      this.noteDialogVisible = false;\n    },\n    _saveNote: function _saveNote() {\n      var _this2 = this;\n\n      var url = __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/notes';\n      __WEBPACK_IMPORTED_MODULE_1_axios___default.a.put(url, {\n        text: this.note\n      }).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this2.$notify({\n            title: '成功',\n            type: 'success',\n            message: '保存笔记成功!'\n          });\n        }\n      }, function (response) {\n        _this2._saveNote();\n      });\n    },\n    _checkLogin: function _checkLogin() {\n      if (this.user.user_id == null) {\n        this.$notify({\n          title: '警告',\n          message: '请先登录！',\n          type: 'warning'\n        });\n        return false;\n      } else {\n        return true;\n      }\n    }\n  },\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_vuex__[\"c\" /* mapGetters */])(['problem', 'user']))\n});\n\n/***/ }),\n\n/***/ \"/A6h\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"QSKu\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../scroll/annotatescrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function(query, caseFold, options) {\n    if (typeof options == \"string\") options = {className: options};\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {listenForChanges: false};\n    for (var prop in options) annotateOptions[prop] = options[prop];\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {from: cm.firstLine(), to: cm.lastLine() + 1};\n    this.matches = [];\n    this.update = null;\n\n    this.findMatches();\n    this.annotation.update(this.matches);\n\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function(_cm, change) { self.onChange(change); });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function() {\n    if (!this.gap) return;\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), this.caseFold);\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n    while (cursor.findNext()) {\n      var match = {from: cursor.from(), to: cursor.to()};\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function(change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {from: change.from.line, to: endLine + 1};\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function() { self.updateAfterChange(); }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function() {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function() {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});\n\n\n/***/ }),\n\n/***/ \"0CT/\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_components_description_myeditor__ = __webpack_require__(\"RKlR\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//  import Editor from 'components/editor/vueeditor'\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    data: {\n      type: Object,\n      default: {}\n    }\n  },\n  components: {\n    MyEditor: __WEBPACK_IMPORTED_MODULE_0_components_description_myeditor__[\"a\" /* default */]\n  }\n});\n\n/***/ }),\n\n/***/ \"1LpH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"8f5d\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"0c6bc646\", content, true);\n\n/***/ }),\n\n/***/ \"2hzx\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_codemirror_mode_javascript_javascript__ = __webpack_require__(\"5IAE\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_codemirror_mode_javascript_javascript___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_codemirror_mode_javascript_javascript__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_codemirror_mode_go_go__ = __webpack_require__(\"CQVp\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_codemirror_mode_go_go___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_codemirror_mode_go_go__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_codemirror_mode_python_python__ = __webpack_require__(\"tWbI\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_codemirror_mode_python_python___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_codemirror_mode_python_python__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_codemirror_mode_ruby_ruby__ = __webpack_require__(\"uOPQ\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_codemirror_mode_ruby_ruby___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_codemirror_mode_ruby_ruby__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_codemirror_mode_clike_clike__ = __webpack_require__(\"6S2o\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_codemirror_mode_clike_clike___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_codemirror_mode_clike_clike__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_codemirror_theme_ambiance_css__ = __webpack_require__(\"vX90\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_codemirror_theme_ambiance_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_codemirror_theme_ambiance_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_codemirror_theme_base16_dark_css__ = __webpack_require__(\"jGSh\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_codemirror_theme_base16_dark_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_codemirror_theme_base16_dark_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_codemirror_theme_cobalt_css__ = __webpack_require__(\"t9xi\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_codemirror_theme_cobalt_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_codemirror_theme_cobalt_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_codemirror_theme_paraiso_light_css__ = __webpack_require__(\"Y0SK\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_codemirror_theme_paraiso_light_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_codemirror_theme_paraiso_light_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_dark_css__ = __webpack_require__(\"BR0Y\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_dark_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_dark_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_codemirror_theme_rubyblue_css__ = __webpack_require__(\"0tbE\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_codemirror_theme_rubyblue_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_codemirror_theme_rubyblue_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_codemirror_theme_solarized_css__ = __webpack_require__(\"Xdwu\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_codemirror_theme_solarized_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_codemirror_theme_solarized_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_codemirror_theme_mbo_css__ = __webpack_require__(\"1XTk\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_codemirror_theme_mbo_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_codemirror_theme_mbo_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_vuex__ = __webpack_require__(\"NYxO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_common_js_ReturnResult__ = __webpack_require__(\"qnSv\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// require active-line.js\n__webpack_require__(\"aGTD\");\n\n// closebrackets\n__webpack_require__(\"aX1R\");\n\n// styleSelectedText\n__webpack_require__(\"U80t\");\n__webpack_require__(\"c+I8\");\n\n// hint\n__webpack_require__(\"jQeI\");\n__webpack_require__(\"Mixr\");\n__webpack_require__(\"aGTD\");\n\n// highlightSelectionMatches\n__webpack_require__(\"QSKu\");\n__webpack_require__(\"/A6h\");\n__webpack_require__(\"c+I8\");\n__webpack_require__(\"OkRY\");\n\n// keyMap\n__webpack_require__(\"6S2o\");\n__webpack_require__(\"vq+x\");\n__webpack_require__(\"Z6qg\");\n__webpack_require__(\"RkhK\");\n__webpack_require__(\"LxZp\");\n__webpack_require__(\"c+I8\");\n__webpack_require__(\"CK2l\");\n__webpack_require__(\"7Xsf\");\n__webpack_require__(\"tjx/\");\n__webpack_require__(\"Hyg2\");\n\n// foldGutter\n__webpack_require__(\"Yokd\");\n__webpack_require__(\"fo6W\");\n__webpack_require__(\"soCA\");\n__webpack_require__(\"THjC\");\n__webpack_require__(\"Kk9m\");\n__webpack_require__(\"U3HU\");\n__webpack_require__(\"dxBS\");\n__webpack_require__(\"TQy8\");\n\n// autoCloseTags\n__webpack_require__(\"+/ra\");\n\n// 语法高亮，自行替换为你需要的语言\n\n\n\n\n\n\n// Theme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      code: '',\n      templateCodes: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"h\" /* templateCodes */],\n      Languages: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"e\" /* languages */],\n      editorModes: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"f\" /* editorModes */],\n      selectLanguage: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"e\" /* languages */][0],\n      editorThemes: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"d\" /* editorThemes */],\n      selectTheme: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"d\" /* editorThemes */][0],\n      keyMaps: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"i\" /* keyMaps */],\n      selectkeyMap: __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"i\" /* keyMaps */][0],\n      editorOptions: {\n        tabSize: 4,\n        mode: 'text/x-csrc',\n        theme: 'default',\n        lineNumbers: true,\n        line: true,\n        keyMap: 'sublime',\n        foldGutter: true,\n        gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n        // 选中文本自动高亮，及高亮方式\n        styleSelectedText: true,\n        highlightSelectionMatches: { showToken: /\\w/, annotateScrollbar: true\n          // 如果有hint方面的配置，也应该出现在这里\n        } },\n      result: [],\n      fullscreenLoading: false\n    };\n  },\n  created: function created() {\n    this._getTempletCode(this.selectLanguage);\n  },\n\n  methods: {\n    handleCommandLangage: function handleCommandLangage(command) {\n      // 这里的command 是 index\n      console.log('xuan ' + command);\n      this.editorOptions.mode = this.editorModes[command];\n      this.selectLanguage = this.Languages[command];\n      this._getTempletCode(this.selectLanguage);\n    },\n    _getTempletCode: function _getTempletCode(selectLanguage) {\n      var _this = this;\n\n      var url = __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/codes';\n      __WEBPACK_IMPORTED_MODULE_15_axios___default.a.get(url).then(function (response) {\n        var result = JSON.parse(response.data.result[0].code);\n        console.log(result);\n        var templet = result.find(function (item) {\n          if (item) {\n            return item.text === selectLanguage;\n          }\n        });\n        if (templet && templet.defaultCode) {\n          _this.code = templet.defaultCode;\n        } else {\n          _this.code = '';\n        }\n      }, function (response) {});\n    },\n    handleCommandKeyMap: function handleCommandKeyMap(command) {\n      this.editorOptions.keyMap = command;\n      this.selectkeyMap = command;\n      console.log(this.editorOptions);\n    },\n    handleCommandTheme: function handleCommandTheme(command) {\n      console.log('click on item ' + command);\n      this.editorOptions.theme = command;\n      this.selectTheme = command;\n    },\n    onClickSubmit: function onClickSubmit() {\n      var _this2 = this;\n\n      if (!this._checkLogin()) {\n        return;\n      }\n      var url = __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/codes';\n      __WEBPACK_IMPORTED_MODULE_15_axios___default.a.post(url, {\n        language: this.selectLanguage,\n        code: this.code\n      }).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this2.result.push(new __WEBPACK_IMPORTED_MODULE_17_common_js_ReturnResult__[\"a\" /* default */]({\n            mytitle: 'SubmitResult',\n            memory_used: response.data.result[0].memory_used.toFixed(4) + ' M',\n            output: response.data.result[0].output,\n            status: response.data.result[0].status,\n            time_used: response.data.result[0].time_used.toFixed(4) + ' s'\n          }));\n          _this2._showLoading();\n          console.log(_this2.result);\n        } else if (response.data.mag === __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"c\" /* MSG_NO */]) {\n          _this2.$notify.error({\n            title: '错误',\n            message: response.data.error\n          });\n        }\n      }, function (response) {});\n    },\n    onClickRun: function onClickRun() {\n      var _this3 = this;\n\n      if (!this._checkLogin()) {\n        return;\n      }\n      console.log(this.code);\n      var url = __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/codes';\n      __WEBPACK_IMPORTED_MODULE_15_axios___default.a.patch(url, {\n        language: this.selectLanguage,\n        code: this.code\n      }).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this3.result.push(new __WEBPACK_IMPORTED_MODULE_17_common_js_ReturnResult__[\"a\" /* default */]({\n            mytitle: 'RunResult',\n            memory_used: response.data.result[0].memory_used.toFixed(4) + ' M',\n            output: response.data.result[0].output,\n            status: response.data.result[0].status,\n            time_used: response.data.result[0].time_used.toFixed(4) + ' s'\n          }));\n          _this3._showLoading();\n          console.log(response.data.result[0]);\n        } else if (response.data.mag === __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"c\" /* MSG_NO */]) {\n          _this3.$notify.error({\n            title: '错误',\n            message: response.data.error\n          });\n        }\n      }, function (response) {});\n    },\n    onClickCustom: function onClickCustom() {\n      var url = __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/codes';\n      __WEBPACK_IMPORTED_MODULE_15_axios___default.a.get(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_14_common_js_data__[\"b\" /* MSG_OK */]) {\n          var str = JSON.parse(response.data.result[0].code);\n          console.log(str);\n        }\n      }, function (response) {});\n    },\n    _checkLogin: function _checkLogin() {\n      if (this.user.user_id == null || this.user.user_id === '') {\n        this.$notify({\n          title: '警告',\n          message: '请先登录！',\n          type: 'warning'\n        });\n        return false;\n      } else {\n        return true;\n      }\n    },\n    _showLoading: function _showLoading() {\n      var _this4 = this;\n\n      this.fullscreenLoading = true;\n      setTimeout(function () {\n        _this4.fullscreenLoading = false;\n      }, 2000);\n    }\n  },\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16_vuex__[\"c\" /* mapGetters */])(['problem', 'user']))\n});\n\n/***/ }),\n\n/***/ \"47LY\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vuex__ = __webpack_require__(\"NYxO\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      solution: {}\n    };\n  },\n  mounted: function mounted() {\n    this._getSolution();\n  },\n\n  methods: {\n    _getSolution: function _getSolution() {\n      var _this = this;\n\n      console.log(this.id + '1111111111');\n      var url = __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/solutions';\n      __WEBPACK_IMPORTED_MODULE_1_axios___default.a.get(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"b\" /* MSG_OK */]) {\n          console.log(response.data.result[0]);\n          _this.solution = response.data.result[0].solution;\n        }\n      }, function (response) {});\n    }\n  },\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_vuex__[\"c\" /* mapGetters */])(['problem']))\n});\n\n/***/ }),\n\n/***/ \"5Ey+\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(\"Zrlr\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);\n\n\n/**\n * Created by qinzhen on 2017/9/17.\n */\nvar Problem = function Problem(_ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      tag = _ref.tag,\n      level = _ref.level,\n      description = _ref.description,\n      accepted = _ref.accepted,\n      submitted = _ref.submitted,\n      like_nums = _ref.like_nums,\n      hate_nums = _ref.hate_nums;\n\n  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Problem);\n\n  this.id = id;\n  this.title = title;\n  this.tag = tag;\n  this.level = level;\n  this.description = description;\n  this.accepted = accepted;\n  this.submitted = submitted;\n  this.like_nums = like_nums;\n  this.hate_nums = hate_nums;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Problem);\n\n/***/ }),\n\n/***/ \"6rPU\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"hint-wrapper\"\n  }, [_c('div', {\n    staticClass: \"placeholder-text\"\n  }, [_c('div', {\n    staticClass: \"text\"\n  }, [_vm._v(\"We do not have any hints for this question at the moment.\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"suggest\"\n  }, [_vm._v(\"Do you have one or more hints?\")])])])\n}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"7Xsf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// A rough approximation of Sublime Text's keybindings\n// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"vq+x\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var map = CodeMirror.keyMap.sublime = {fallthrough: \"default\"};\n  var cmds = CodeMirror.commands;\n  var Pos = CodeMirror.Pos;\n  var mac = CodeMirror.keyMap[\"default\"] == CodeMirror.keyMap.macDefault;\n  var ctrl = mac ? \"Cmd-\" : \"Ctrl-\";\n\n  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.\n  function findPosSubword(doc, start, dir) {\n    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n    var line = doc.getLine(start.line);\n    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n    var state = \"start\", type;\n    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n      var cat = next != \"_\" && CodeMirror.isWordChar(next) ? \"w\" : \"o\";\n      if (cat == \"w\" && next.toUpperCase() == next) cat = \"W\";\n      if (state == \"start\") {\n        if (cat != \"o\") { state = \"in\"; type = cat; }\n      } else if (state == \"in\") {\n        if (type != cat) {\n          if (type == \"w\" && cat == \"W\" && dir < 0) pos--;\n          if (type == \"W\" && cat == \"w\" && dir > 0) { type = \"w\"; continue; }\n          break;\n        }\n      }\n    }\n    return Pos(start.line, pos);\n  }\n\n  function moveSubword(cm, dir) {\n    cm.extendSelectionsBy(function(range) {\n      if (cm.display.shift || cm.doc.extend || range.empty())\n        return findPosSubword(cm.doc, range.head, dir);\n      else\n        return dir < 0 ? range.from() : range.to();\n    });\n  }\n\n  var goSubwordCombo = mac ? \"Ctrl-\" : \"Alt-\";\n\n  cmds[map[goSubwordCombo + \"Left\"] = \"goSubwordLeft\"] = function(cm) { moveSubword(cm, -1); };\n  cmds[map[goSubwordCombo + \"Right\"] = \"goSubwordRight\"] = function(cm) { moveSubword(cm, 1); };\n\n  if (mac) map[\"Cmd-Left\"] = \"goLineStartSmart\";\n\n  var scrollLineCombo = mac ? \"Ctrl-Alt-\" : \"Ctrl-\";\n\n  cmds[map[scrollLineCombo + \"Up\"] = \"scrollLineUp\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, \"local\");\n      if (cm.getCursor().line >= visibleBottomLine)\n        cm.execCommand(\"goLineUp\");\n    }\n    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n  };\n  cmds[map[scrollLineCombo + \"Down\"] = \"scrollLineDown\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleTopLine = cm.lineAtHeight(info.top, \"local\")+1;\n      if (cm.getCursor().line <= visibleTopLine)\n        cm.execCommand(\"goLineDown\");\n    }\n    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"L\"] = \"splitSelectionByLine\"] = function(cm) {\n    var ranges = cm.listSelections(), lineRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      for (var line = from.line; line <= to.line; ++line)\n        if (!(to.line > from.line && line == to.line && to.ch == 0))\n          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n                           head: line == to.line ? to : Pos(line)});\n    }\n    cm.setSelections(lineRanges, 0);\n  };\n\n  map[\"Shift-Tab\"] = \"indentLess\";\n\n  cmds[map[\"Esc\"] = \"singleSelectionTop\"] = function(cm) {\n    var range = cm.listSelections()[0];\n    cm.setSelection(range.anchor, range.head, {scroll: false});\n  };\n\n  cmds[map[ctrl + \"L\"] = \"selectLine\"] = function(cm) {\n    var ranges = cm.listSelections(), extended = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      extended.push({anchor: Pos(range.from().line, 0),\n                     head: Pos(range.to().line + 1, 0)});\n    }\n    cm.setSelections(extended);\n  };\n\n  map[\"Shift-Ctrl-K\"] = \"deleteLine\";\n\n  function insertLine(cm, above) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    cm.operation(function() {\n      var len = cm.listSelections().length, newSelection = [], last = -1;\n      for (var i = 0; i < len; i++) {\n        var head = cm.listSelections()[i].head;\n        if (head.line <= last) continue;\n        var at = Pos(head.line + (above ? 0 : 1), 0);\n        cm.replaceRange(\"\\n\", at, null, \"+insertLine\");\n        cm.indentLine(at.line, null, true);\n        newSelection.push({head: at, anchor: at});\n        last = head.line + 1;\n      }\n      cm.setSelections(newSelection);\n    });\n    cm.execCommand(\"indentAuto\");\n  }\n\n  cmds[map[ctrl + \"Enter\"] = \"insertLineAfter\"] = function(cm) { return insertLine(cm, false); };\n\n  cmds[map[\"Shift-\" + ctrl + \"Enter\"] = \"insertLineBefore\"] = function(cm) { return insertLine(cm, true); };\n\n  function wordAt(cm, pos) {\n    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n  }\n\n  cmds[map[ctrl + \"D\"] = \"selectNextOccurrence\"] = function(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      cm.setSelection(word.from, word.to);\n      fullWord = true;\n    } else {\n      var text = cm.getRange(from, to);\n      var query = fullWord ? new RegExp(\"\\\\b\" + text + \"\\\\b\") : text;\n      var cur = cm.getSearchCursor(query, to);\n      var found = cur.findNext();\n      if (!found) {\n        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n        found = cur.findNext();\n      }\n      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n        return CodeMirror.Pass\n      cm.addSelection(cur.from(), cur.to());\n    }\n    if (fullWord)\n      cm.state.sublimeFindFullWord = cm.doc.sel;\n  };\n\n  function addCursorToSelection(cm, dir) {\n    var ranges = cm.listSelections(), newRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var newAnchor = cm.findPosV(range.anchor, dir, \"line\");\n      var newHead = cm.findPosV(range.head, dir, \"line\");\n      var newRange = {anchor: newAnchor, head: newHead};\n      newRanges.push(range);\n      newRanges.push(newRange);\n    }\n    cm.setSelections(newRanges);\n  }\n\n  var addCursorToLineCombo = mac ? \"Shift-Cmd\" : 'Alt-Ctrl';\n  cmds[map[addCursorToLineCombo + \"Up\"] = \"addCursorToPrevLine\"] = function(cm) { addCursorToSelection(cm, -1); };\n  cmds[map[addCursorToLineCombo + \"Down\"] = \"addCursorToNextLine\"] = function(cm) { addCursorToSelection(cm, 1); };\n\n  function isSelectedRange(ranges, from, to) {\n    for (var i = 0; i < ranges.length; i++)\n      if (ranges[i].from() == from && ranges[i].to() == to) return true\n    return false\n  }\n\n  var mirror = \"(){}[]\";\n  function selectBetweenBrackets(cm) {\n    var ranges = cm.listSelections(), newRanges = []\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n      if (!opening) return false;\n      for (;;) {\n        var closing = cm.scanForBracket(pos, 1);\n        if (!closing) return false;\n        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n          newRanges.push({anchor: Pos(opening.pos.line, opening.pos.ch + 1),\n                          head: closing.pos});\n          break;\n        }\n        pos = Pos(closing.pos.line, closing.pos.ch + 1);\n      }\n    }\n    cm.setSelections(newRanges);\n    return true;\n  }\n\n  cmds[map[\"Shift-\" + ctrl + \"Space\"] = \"selectScope\"] = function(cm) {\n    selectBetweenBrackets(cm) || cm.execCommand(\"selectAll\");\n  };\n  cmds[map[\"Shift-\" + ctrl + \"M\"] = \"selectBetweenBrackets\"] = function(cm) {\n    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n  };\n\n  cmds[map[ctrl + \"M\"] = \"goToBracket\"] = function(cm) {\n    cm.extendSelectionsBy(function(range) {\n      var next = cm.scanForBracket(range.head, 1);\n      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n      var prev = cm.scanForBracket(range.head, -1);\n      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n    });\n  };\n\n  var swapLineCombo = mac ? \"Cmd-Ctrl-\" : \"Shift-Ctrl-\";\n\n  cmds[map[swapLineCombo + \"Up\"] = \"swapLineUp\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n                    head: Pos(range.head.line - 1, range.head.ch)});\n      if (range.to().ch == 0 && !range.empty()) --to;\n      if (from > at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = 0; i < linesToMove.length; i += 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        if (to > cm.lastLine())\n          cm.replaceRange(\"\\n\" + line, Pos(cm.lastLine()), null, \"+swapLine\");\n        else\n          cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.setSelections(newSels);\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[swapLineCombo + \"Down\"] = \"swapLineDown\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n      if (range.to().ch == 0 && !range.empty()) from--;\n      if (from < at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        if (from == cm.lastLine())\n          cm.replaceRange(\"\", Pos(from - 1), Pos(from), \"+swapLine\");\n        else\n          cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[ctrl + \"/\"] = \"toggleCommentIndented\"] = function(cm) {\n    cm.toggleComment({ indent: true });\n  }\n\n  cmds[map[ctrl + \"J\"] = \"joinLines\"] = function(cm) {\n    var ranges = cm.listSelections(), joined = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from();\n      var start = from.line, end = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n        end = ranges[++i].to().line;\n      joined.push({start: start, end: end, anchor: !range.empty() && from});\n    }\n    cm.operation(function() {\n      var offset = 0, ranges = [];\n      for (var i = 0; i < joined.length; i++) {\n        var obj = joined[i];\n        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n        for (var line = obj.start; line <= obj.end; line++) {\n          var actual = line - offset;\n          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n          if (actual < cm.lastLine()) {\n            cm.replaceRange(\" \", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n            ++offset;\n          }\n        }\n        ranges.push({anchor: anchor || head, head: head});\n      }\n      cm.setSelections(ranges, 0);\n    });\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"D\"] = \"duplicateLine\"] = function(cm) {\n    cm.operation(function() {\n      var rangeCount = cm.listSelections().length;\n      for (var i = 0; i < rangeCount; i++) {\n        var range = cm.listSelections()[i];\n        if (range.empty())\n          cm.replaceRange(cm.getLine(range.head.line) + \"\\n\", Pos(range.head.line, 0));\n        else\n          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  if (!mac) map[ctrl + \"T\"] = \"transposeChars\";\n\n  function sortLines(cm, caseSensitive) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), toSort = [], selected;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      if (range.empty()) continue;\n      var from = range.from().line, to = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n        to = ranges[++i].to().line;\n      if (!ranges[i].to().ch) to--;\n      toSort.push(from, to);\n    }\n    if (toSort.length) selected = true;\n    else toSort.push(cm.firstLine(), cm.lastLine());\n\n    cm.operation(function() {\n      var ranges = [];\n      for (var i = 0; i < toSort.length; i += 2) {\n        var from = toSort[i], to = toSort[i + 1];\n        var start = Pos(from, 0), end = Pos(to);\n        var lines = cm.getRange(start, end, false);\n        if (caseSensitive)\n          lines.sort();\n        else\n          lines.sort(function(a, b) {\n            var au = a.toUpperCase(), bu = b.toUpperCase();\n            if (au != bu) { a = au; b = bu; }\n            return a < b ? -1 : a == b ? 0 : 1;\n          });\n        cm.replaceRange(lines, start, end);\n        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});\n      }\n      if (selected) cm.setSelections(ranges, 0);\n    });\n  }\n\n  cmds[map[\"F9\"] = \"sortLines\"] = function(cm) { sortLines(cm, true); };\n  cmds[map[ctrl + \"F9\"] = \"sortLinesInsensitive\"] = function(cm) { sortLines(cm, false); };\n\n  cmds[map[\"F2\"] = \"nextBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      var current = marks.shift();\n      var found = current.find();\n      if (found) {\n        marks.push(current);\n        return cm.setSelection(found.from, found.to);\n      }\n    }\n  };\n\n  cmds[map[\"Shift-F2\"] = \"prevBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      marks.unshift(marks.pop());\n      var found = marks[marks.length - 1].find();\n      if (!found)\n        marks.pop();\n      else\n        return cm.setSelection(found.from, found.to);\n    }\n  };\n\n  cmds[map[ctrl + \"F2\"] = \"toggleBookmark\"] = function(cm) {\n    var ranges = cm.listSelections();\n    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      var found = cm.findMarks(from, to);\n      for (var j = 0; j < found.length; j++) {\n        if (found[j].sublimeBookmark) {\n          found[j].clear();\n          for (var k = 0; k < marks.length; k++)\n            if (marks[k] == found[j])\n              marks.splice(k--, 1);\n          break;\n        }\n      }\n      if (j == found.length)\n        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n    }\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"F2\"] = \"clearBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    marks.length = 0;\n  };\n\n  cmds[map[\"Alt-F2\"] = \"selectBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks, ranges = [];\n    if (marks) for (var i = 0; i < marks.length; i++) {\n      var found = marks[i].find();\n      if (!found)\n        marks.splice(i--, 0);\n      else\n        ranges.push({anchor: found.from, head: found.to});\n    }\n    if (ranges.length)\n      cm.setSelections(ranges, 0);\n  };\n\n  map[\"Alt-Q\"] = \"wrapLines\";\n\n  var cK = ctrl + \"K \";\n\n  function modifyWordOrSelection(cm, mod) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), indices = [], replacements = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) { indices.push(i); replacements.push(\"\"); }\n        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n      }\n      cm.replaceSelections(replacements, \"around\", \"case\");\n      for (var i = indices.length - 1, at; i >= 0; i--) {\n        var range = ranges[indices[i]];\n        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n        var word = wordAt(cm, range.head);\n        at = word.from;\n        cm.replaceRange(mod(word.word), word.from, word.to);\n      }\n    });\n  }\n\n  map[cK + ctrl + \"Backspace\"] = \"delLineLeft\";\n\n  cmds[map[\"Backspace\"] = \"smartBackspace\"] = function(cm) {\n    if (cm.somethingSelected()) return CodeMirror.Pass;\n\n    cm.operation(function() {\n      var cursors = cm.listSelections();\n      var indentUnit = cm.getOption(\"indentUnit\");\n\n      for (var i = cursors.length - 1; i >= 0; i--) {\n        var cursor = cursors[i].head;\n        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption(\"tabSize\"));\n\n        // Delete by one character by default\n        var deletePos = cm.findPosH(cursor, -1, \"char\", false);\n\n        if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n          var prevIndent = new Pos(cursor.line,\n            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n\n          // Smart delete only if we found a valid prevIndent location\n          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;\n        }\n\n        cm.replaceRange(\"\", deletePos, cursor, \"+delete\");\n      }\n    });\n  };\n\n  cmds[map[cK + ctrl + \"K\"] = \"delLineRight\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(\"\", ranges[i].anchor, Pos(ranges[i].to().line), \"+delete\");\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[cK + ctrl + \"U\"] = \"upcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n  };\n  cmds[map[cK + ctrl + \"L\"] = \"downcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n  };\n\n  cmds[map[cK + ctrl + \"Space\"] = \"setSublimeMark\"] = function(cm) {\n    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n  };\n  cmds[map[cK + ctrl + \"A\"] = \"selectToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) cm.setSelection(cm.getCursor(), found);\n  };\n  cmds[map[cK + ctrl + \"W\"] = \"deleteToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      var from = cm.getCursor(), to = found;\n      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n      cm.state.sublimeKilled = cm.getRange(from, to);\n      cm.replaceRange(\"\", from, to);\n    }\n  };\n  cmds[map[cK + ctrl + \"X\"] = \"swapWithSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n      cm.setCursor(found);\n    }\n  };\n  cmds[map[cK + ctrl + \"Y\"] = \"sublimeYank\"] = function(cm) {\n    if (cm.state.sublimeKilled != null)\n      cm.replaceSelection(cm.state.sublimeKilled, null, \"paste\");\n  };\n\n  map[cK + ctrl + \"G\"] = \"clearBookmarks\";\n  cmds[map[cK + ctrl + \"C\"] = \"showInCenter\"] = function(cm) {\n    var pos = cm.cursorCoords(null, \"local\");\n    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n  };\n\n  var selectLinesCombo = mac ? \"Ctrl-Shift-\" : \"Ctrl-Alt-\";\n  cmds[map[selectLinesCombo + \"Up\"] = \"selectLinesUpward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line > cm.firstLine())\n          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n      }\n    });\n  };\n  cmds[map[selectLinesCombo + \"Down\"] = \"selectLinesDownward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line < cm.lastLine())\n          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n      }\n    });\n  };\n\n  function getTarget(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      from = word.from;\n      to = word.to;\n    }\n    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n  }\n\n  function findAndGoTo(cm, forward) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var query = target.query;\n    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n\n    if (forward ? cur.findNext() : cur.findPrevious()) {\n      cm.setSelection(cur.from(), cur.to());\n    } else {\n      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n                                              : cm.clipPos(Pos(cm.lastLine())));\n      if (forward ? cur.findNext() : cur.findPrevious())\n        cm.setSelection(cur.from(), cur.to());\n      else if (target.word)\n        cm.setSelection(target.from, target.to);\n    }\n  };\n  cmds[map[ctrl + \"F3\"] = \"findUnder\"] = function(cm) { findAndGoTo(cm, true); };\n  cmds[map[\"Shift-\" + ctrl + \"F3\"] = \"findUnderPrevious\"] = function(cm) { findAndGoTo(cm,false); };\n  cmds[map[\"Alt-F3\"] = \"findAllUnder\"] = function(cm) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var cur = cm.getSearchCursor(target.query);\n    var matches = [];\n    var primaryIndex = -1;\n    while (cur.findNext()) {\n      matches.push({anchor: cur.from(), head: cur.to()});\n      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n        primaryIndex++;\n    }\n    cm.setSelections(matches, primaryIndex);\n  };\n\n  map[\"Shift-\" + ctrl + \"[\"] = \"fold\";\n  map[\"Shift-\" + ctrl + \"]\"] = \"unfold\";\n  map[cK + ctrl + \"0\"] = map[cK + ctrl + \"J\"] = \"unfoldAll\";\n\n  map[ctrl + \"I\"] = \"findIncremental\";\n  map[\"Shift-\" + ctrl + \"I\"] = \"findIncrementalReverse\";\n  map[ctrl + \"H\"] = \"replace\";\n  map[\"F3\"] = \"findNext\";\n  map[\"Shift-F3\"] = \"findPrev\";\n\n  CodeMirror.normalizeKeyMap(map);\n});\n\n\n/***/ }),\n\n/***/ \"8eAg\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_description_vue__ = __webpack_require__(\"0CT/\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4dfc5728_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_description_vue__ = __webpack_require__(\"D/Ep\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"AF7c\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_description_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4dfc5728_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_description_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"8f5d\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".hint-wrapper{width:100%;height:100%}.hint-wrapper .placeholder-text{padding:8rem 4rem;text-align:center;font-size:1.5rem;color:#dadada}.hint-wrapper .placeholder-text .suggest{margin-top:30px;color:gray}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/hints/hints.vue\"],\"names\":[],\"mappings\":\"AACA,cACE,WAAY,AACZ,WAAa,CACd,AACD,gCACE,kBAAmB,AACnB,kBAAmB,AACnB,iBAAkB,AAClB,aAAe,CAChB,AACD,yCACE,gBAAiB,AACjB,UAAe,CAChB\",\"file\":\"hints.vue\",\"sourcesContent\":[\"\\n.hint-wrapper {\\n  width: 100%;\\n  height: 100%;\\n}\\n.hint-wrapper .placeholder-text {\\n  padding: 8rem 4rem;\\n  text-align: center;\\n  font-size: 1.5rem;\\n  color: #dadada;\\n}\\n.hint-wrapper .placeholder-text .suggest {\\n  margin-top: 30px;\\n  color: #808080;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"AF7c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"XRep\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"20d5e0bc\", content, true);\n\n/***/ }),\n\n/***/ \"ArdA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"ExgV\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"722f1804\", content, true);\n\n/***/ }),\n\n/***/ \"C3SF\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"myeditor\"\n  }, [_c('div', {\n    staticClass: \"myeditor-header\"\n  }, [_c('el-dropdown', {\n    staticClass: \"language-dropdown\",\n    attrs: {\n      \"trigger\": \"click\",\n      \"menu-align\": \"start\"\n    },\n    on: {\n      \"command\": _vm.handleCommandLangage\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(_vm._s(_vm.selectLanguage)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": index\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n        \")])\n  }))], 1), _vm._v(\" \"), _c('el-dropdown', {\n    staticClass: \"el-dropdown-theme\",\n    attrs: {\n      \"menu-align\": \"start\",\n      \"trigger\": \"click\"\n    },\n    on: {\n      \"command\": _vm.handleCommandTheme\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(\"\\n        \" + _vm._s(_vm.selectTheme)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.editorThemes), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": item\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n        \")])\n  }))], 1), _vm._v(\" \"), _c('el-dropdown', {\n    staticClass: \"el-dropdown-keyMap\",\n    attrs: {\n      \"menu-align\": \"start\",\n      \"trigger\": \"click\"\n    },\n    on: {\n      \"command\": _vm.handleCommandKeyMap\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(\"\\n        \" + _vm._s(_vm.selectkeyMap)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.keyMaps), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": item\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n        \")])\n  }))], 1)], 1), _vm._v(\" \"), _c('codemirror', {\n    ref: \"myEditor\",\n    attrs: {\n      \"options\": _vm.editorOptions\n    },\n    model: {\n      value: (_vm.code),\n      callback: function($$v) {\n        _vm.code = $$v\n      },\n      expression: \"code\"\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"myeditor-footer\"\n  }, [_c('el-button', {\n    staticClass: \"custom-button\",\n    attrs: {\n      \"type\": \"success\"\n    },\n    on: {\n      \"click\": _vm.onClickCustom\n    }\n  }, [_vm._v(\"\\n      Custom\"), _c('i', {\n    staticClass: \"el-icon-upload el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"submit-button\",\n    attrs: {\n      \"type\": \"success\"\n    },\n    on: {\n      \"click\": _vm.onClickSubmit\n    }\n  }, [_vm._v(\"\\n      Submit\"), _c('i', {\n    staticClass: \"el-icon-upload el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"run-button\",\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.onClickRun\n    }\n  }, [_vm._v(\"Run\\n    \")])], 1), _vm._v(\" \"), _vm._l((_vm.result), function(item, index) {\n    return _c('div', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (_vm.result !== []),\n        expression: \"result!==[]\"\n      }, {\n        name: \"loading\",\n        rawName: \"v-loading.fullscreen.lock\",\n        value: (_vm.fullscreenLoading),\n        expression: \"fullscreenLoading\",\n        modifiers: {\n          \"fullscreen\": true,\n          \"lock\": true\n        }\n      }],\n      key: index,\n      staticClass: \"result-wrapper\",\n      attrs: {\n        \"element-loading-text\": \"正在运行中...\"\n      }\n    }, [_c('div', {\n      staticClass: \"result-type\"\n    }, [_c('el-tag', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (item.mytitle === 'SubmitResult'),\n        expression: \"item.mytitle === 'SubmitResult'\"\n      }],\n      attrs: {\n        \"type\": \"success\"\n      }\n    }, [_vm._v(_vm._s(item.mytitle))]), _vm._v(\" \"), _c('el-tag', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (item.mytitle === 'RunResult'),\n        expression: \"item.mytitle === 'RunResult'\"\n      }],\n      attrs: {\n        \"type\": \"warning\"\n      }\n    }, [_vm._v(_vm._s(item.mytitle))])], 1), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"程序输出\")]), _vm._v(\" \" + _vm._s(item.output) + \"\\n    \")]), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"耗费内存\")]), _vm._v(\" \" + _vm._s(item.memory_used) + \"\\n    \")]), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"耗费时间\")]), _vm._v(\" \" + _vm._s(item.time_used) + \"\\n    \")]), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"运行状态\")]), _vm._v(\" \" + _vm._s(item.status) + \"\\n    \")]), _vm._v(\" \"), _c('img', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (index === (_vm.result.length - 1)),\n        expression: \"index === (result.length-1)\"\n      }],\n      staticClass: \"result-item-img\",\n      attrs: {\n        \"src\": \"static/target.png\",\n        \"width\": \"32\",\n        \"height\": \"32\"\n      }\n    })])\n  })], 2)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"CK2l\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"RkhK\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  var queryDialog =\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  var replaceQueryDialog =\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n\n\n/***/ }),\n\n/***/ \"D/Ep\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in\"\n    }\n  }, [_c('div', [(_vm.data.description) ? _c('div', {\n    staticClass: \"description\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.data.description)\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('my-editor')], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"ExgV\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".myeditor{margin-top:20px}.myeditor .myeditor-header{margin-bottom:12px}.myeditor .language-dropdown .el-dropdown-menu__item{padding:0 5px}.myeditor .el-dropdown-theme{float:right}.myeditor .el-dropdown-keyMap{float:right;margin-right:8px}.myeditor .CodeMirror{height:400px}.myeditor .myeditor-footer{padding:20px 0 0;height:100px;width:100%}.myeditor .myeditor-footer .custom-button{float:left;margin-right:10px;width:150px}.myeditor .myeditor-footer .run-button{float:right;margin-right:10px;width:150px}.myeditor .myeditor-footer .submit-button{float:right;width:150px}.myeditor .result-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;margin-top:-1px;padding:10px 0;border-bottom:1px solid #ddd;border-top:1px solid #ddd}.myeditor .result-wrapper .result-type{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;display:inline-block}.myeditor .result-wrapper .result-type .el-tag{margin-top:4px;font-size:18px}.myeditor .result-wrapper .result-item{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.myeditor .result-wrapper .result-item .result-item-text{font-size:18px;font-weight:600;margin:0 5px;line-height:30px;color:#9e9e9e}.myeditor .result-wrapper .result-item-img{vertical-align:middle}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/description/myeditor.vue\"],\"names\":[],\"mappings\":\"AACA,UACE,eAAiB,CAClB,AACD,2BACE,kBAAoB,CACrB,AACD,qDACE,aAAe,CAChB,AACD,6BACE,WAAa,CACd,AACD,8BACE,YAAa,AACb,gBAAkB,CACnB,AACD,sBACE,YAAc,CACf,AACD,2BACE,iBAAoB,AACpB,aAAc,AACd,UAAY,CACb,AACD,0CACE,WAAY,AACZ,kBAAmB,AACnB,WAAa,CACd,AACD,uCACE,YAAa,AACb,kBAAmB,AACnB,WAAa,CACd,AACD,0CACE,YAAa,AACb,WAAa,CACd,AACD,0BACE,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,gBAAiB,AACjB,eAAgB,AAChB,6BAA8B,AAC9B,yBAA2B,CAC5B,AACD,uCACE,mBAAoB,AAChB,kBAAmB,AACf,cAAe,AACvB,oBAAsB,CACvB,AACD,+CACE,eAAgB,AAChB,cAAgB,CACjB,AACD,uCACE,mBAAoB,AAChB,kBAAmB,AACf,aAAe,CACxB,AACD,yDACE,eAAgB,AAChB,gBAAiB,AACjB,aAAc,AACd,iBAAkB,AAClB,aAAe,CAChB,AACD,2CACE,qBAAuB,CACxB\",\"file\":\"myeditor.vue\",\"sourcesContent\":[\"\\n.myeditor {\\n  margin-top: 20px;\\n}\\n.myeditor .myeditor-header {\\n  margin-bottom: 12px;\\n}\\n.myeditor .language-dropdown .el-dropdown-menu__item {\\n  padding: 0 5px;\\n}\\n.myeditor .el-dropdown-theme {\\n  float: right;\\n}\\n.myeditor .el-dropdown-keyMap {\\n  float: right;\\n  margin-right: 8px;\\n}\\n.myeditor .CodeMirror {\\n  height: 400px;\\n}\\n.myeditor .myeditor-footer {\\n  padding: 20px 0 0 0;\\n  height: 100px;\\n  width: 100%;\\n}\\n.myeditor .myeditor-footer .custom-button {\\n  float: left;\\n  margin-right: 10px;\\n  width: 150px;\\n}\\n.myeditor .myeditor-footer .run-button {\\n  float: right;\\n  margin-right: 10px;\\n  width: 150px;\\n}\\n.myeditor .myeditor-footer .submit-button {\\n  float: right;\\n  width: 150px;\\n}\\n.myeditor .result-wrapper {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  margin-top: -1px;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #ddd;\\n  border-top: 1px solid #ddd;\\n}\\n.myeditor .result-wrapper .result-type {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1 1 auto;\\n          flex: 1 1 auto;\\n  display: inline-block;\\n}\\n.myeditor .result-wrapper .result-type .el-tag {\\n  margin-top: 4px;\\n  font-size: 18px;\\n}\\n.myeditor .result-wrapper .result-item {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1 1 auto;\\n          flex: 1 1 auto;\\n}\\n.myeditor .result-wrapper .result-item .result-item-text {\\n  font-size: 18px;\\n  font-weight: 600;\\n  margin: 0 5px;\\n  line-height: 30px;\\n  color: #9e9e9e;\\n}\\n.myeditor .result-wrapper .result-item-img {\\n  vertical-align: middle;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"FVxK\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".problem[data-v-4ad8a6d2]{-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto}.problem .problem-header .collection[data-v-4ad8a6d2]{float:right;margin-top:5px;vertical-align:bottom}.problem .problem-header h3[data-v-4ad8a6d2]{display:inline-block;margin-bottom:10px;font-weight:500;line-height:1;font-size:24px}.container[data-v-4ad8a6d2]{margin-top:32px}.container .el-tabs__content[data-v-4ad8a6d2]{min-height:800px}.grid-content[data-v-4ad8a6d2]{border-radius:4px;min-height:36px}.bg-purple[data-v-4ad8a6d2]{background:#d3dce6}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/problem-detail/problem-detail.vue\"],\"names\":[],\"mappings\":\"AACA,0BACE,mBAAoB,AAChB,kBAAmB,AACf,aAAe,CACxB,AACD,sDACE,YAAa,AACb,eAAgB,AAChB,qBAAuB,CACxB,AACD,6CACE,qBAAsB,AACtB,mBAAoB,AACpB,gBAAiB,AACjB,cAAe,AACf,cAAgB,CACjB,AACD,4BACE,eAAiB,CAClB,AACD,8CACE,gBAAkB,CACnB,AACD,+BACE,kBAAmB,AACnB,eAAiB,CAClB,AACD,4BACE,kBAAoB,CACrB\",\"file\":\"problem-detail.vue\",\"sourcesContent\":[\"\\n.problem[data-v-4ad8a6d2] {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1 0 auto;\\n          flex: 1 0 auto;\\n}\\n.problem .problem-header .collection[data-v-4ad8a6d2] {\\n  float: right;\\n  margin-top: 5px;\\n  vertical-align: bottom;\\n}\\n.problem .problem-header h3[data-v-4ad8a6d2] {\\n  display: inline-block;\\n  margin-bottom: 10px;\\n  font-weight: 500;\\n  line-height: 1;\\n  font-size: 24px;\\n}\\n.container[data-v-4ad8a6d2] {\\n  margin-top: 32px;\\n}\\n.container .el-tabs__content[data-v-4ad8a6d2] {\\n  min-height: 800px;\\n}\\n.grid-content[data-v-4ad8a6d2] {\\n  border-radius: 4px;\\n  min-height: 36px;\\n}\\n.bg-purple[data-v-4ad8a6d2] {\\n  background: #d3dce6;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"Fvbh\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"FVxK\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"b2eb1a16\", content, true);\n\n/***/ }),\n\n/***/ \"Hyg2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"RkhK\"), __webpack_require__(\"vq+x\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        vim.lastHPos = Infinity;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch));\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '['};\n        var selfPaired = {'\\'': true, '\"': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */);\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n');\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i];\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /-?\\d+/g;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        var token;\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0];\n          start = match.index;\n          end = start + token.length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1;\n          var number = parseInt(token) + (increment * actionArgs.repeat);\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          numberStr = number.toString();\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1;\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      };\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm);\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done;\n        var event = history[history.length - 2];\n        return event && event.ranges && event.ranges[0].head;\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySlash(argString) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart);\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            regexPart = regexPart + '/' + flagsPart;\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); };\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = [];\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;\n        var changes = lastChange.changes;\n        var text = [];\n        var i = 0;\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i]);\n          if (changes[i] instanceof InsertModeKey) {\n             i++;\n          } else {\n             i+= selLength;\n          }\n        }\n        lastChange.changes = text;\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      };\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n            } else {\n                lastChange.changes.push(text);\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    };\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim;\n        var lastSel = vim.lastSelection;\n        var offset = getOffset(lastSel.anchor, lastSel.head);\n        selectForInsert(cm, head, offset.line + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n\n\n/***/ }),\n\n/***/ \"IlaS\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in\"\n    }\n  }, [_c('div', [(_vm.solution) ? _c('div', {\n    staticClass: \"solution\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.solution)\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.solution || _vm.solution === {}),\n      expression: \"!solution || solution === {}\"\n    }],\n    staticClass: \"nodata\"\n  }, [_vm._v(\"\\n      No solution at the moment\\n    \")])])])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"Kk9m\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"THjC\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"LGuY\":\n/***/ (function(module, exports) {\n\nmodule.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n/***/ }),\n\n/***/ \"LxZp\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"RkAk\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"e2c66042\", content, true);\n\n/***/ }),\n\n/***/ \"McHp\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_problem_detail_vue__ = __webpack_require__(\"x494\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4ad8a6d2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_problem_detail_vue__ = __webpack_require__(\"PdbZ\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"Fvbh\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4ad8a6d2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_problem_detail_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4ad8a6d2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_problem_detail_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"Mixr\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var Pos = CodeMirror.Pos;\n\n  function forEach(arr, f) {\n    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);\n  }\n\n  function arrayContains(arr, item) {\n    if (!Array.prototype.indexOf) {\n      var i = arr.length;\n      while (i--) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return arr.indexOf(item) != -1;\n  }\n\n  function scriptHint(editor, keywords, getToken, options) {\n    // Find the token at the cursor\n    var cur = editor.getCursor(), token = getToken(editor, cur);\n    if (/\\b(?:string|comment)\\b/.test(token.type)) return;\n    token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;\n\n    // If it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n      token = {start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n               type: token.string == \".\" ? \"property\" : null};\n    } else if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var tprop = token;\n    // If it is a property, find out what it is a property of.\n    while (tprop.type == \"property\") {\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (tprop.string != \".\") return;\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (!context) var context = [];\n      context.push(tprop);\n    }\n    return {list: getCompletions(token, context, keywords, options),\n            from: Pos(cur.line, token.start),\n            to: Pos(cur.line, token.end)};\n  }\n\n  function javascriptHint(editor, options) {\n    return scriptHint(editor, javascriptKeywords,\n                      function (e, cur) {return e.getTokenAt(cur);},\n                      options);\n  };\n  CodeMirror.registerHelper(\"hint\", \"javascript\", javascriptHint);\n\n  function getCoffeeScriptToken(editor, cur) {\n  // This getToken, it is for coffeescript, imitates the behavior of\n  // getTokenAt method in javascript.js, that is, returning \"property\"\n  // type and treat \".\" as indepenent token.\n    var token = editor.getTokenAt(cur);\n    if (cur.ch == token.start + 1 && token.string.charAt(0) == '.') {\n      token.end = token.start;\n      token.string = '.';\n      token.type = \"property\";\n    }\n    else if (/^\\.[\\w$_]*$/.test(token.string)) {\n      token.type = \"property\";\n      token.start++;\n      token.string = token.string.replace(/\\./, '');\n    }\n    return token;\n  }\n\n  function coffeescriptHint(editor, options) {\n    return scriptHint(editor, coffeescriptKeywords, getCoffeeScriptToken, options);\n  }\n  CodeMirror.registerHelper(\"hint\", \"coffeescript\", coffeescriptHint);\n\n  var stringProps = (\"charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight \" +\n                     \"toUpperCase toLowerCase split concat match replace search\").split(\" \");\n  var arrayProps = (\"length concat join splice push pop shift unshift slice reverse sort indexOf \" +\n                    \"lastIndexOf every some filter forEach map reduce reduceRight \").split(\" \");\n  var funcProps = \"prototype apply call bind\".split(\" \");\n  var javascriptKeywords = (\"break case catch continue debugger default delete do else false finally for function \" +\n                  \"if in instanceof new null return switch throw true try typeof var void while with\").split(\" \");\n  var coffeescriptKeywords = (\"and break catch class continue delete do else extends false finally for \" +\n                  \"if in instanceof isnt new no not null of off on or return switch then throw true try typeof until void while with yes\").split(\" \");\n\n  function forAllProps(obj, callback) {\n    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n      for (var name in obj) callback(name)\n    } else {\n      for (var o = obj; o; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(callback)\n    }\n  }\n\n  function getCompletions(token, context, keywords, options) {\n    var found = [], start = token.string, global = options && options.globalScope || window;\n    function maybeAdd(str) {\n      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);\n    }\n    function gatherCompletions(obj) {\n      if (typeof obj == \"string\") forEach(stringProps, maybeAdd);\n      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);\n      else if (obj instanceof Function) forEach(funcProps, maybeAdd);\n      forAllProps(obj, maybeAdd)\n    }\n\n    if (context && context.length) {\n      // If this is a property, see if it belongs to some object we can\n      // find in the current environment.\n      var obj = context.pop(), base;\n      if (obj.type && obj.type.indexOf(\"variable\") === 0) {\n        if (options && options.additionalContext)\n          base = options.additionalContext[obj.string];\n        if (!options || options.useGlobalScope !== false)\n          base = base || global[obj.string];\n      } else if (obj.type == \"string\") {\n        base = \"\";\n      } else if (obj.type == \"atom\") {\n        base = 1;\n      } else if (obj.type == \"function\") {\n        if (global.jQuery != null && (obj.string == '$' || obj.string == 'jQuery') &&\n            (typeof global.jQuery == 'function'))\n          base = global.jQuery();\n        else if (global._ != null && (obj.string == '_') && (typeof global._ == 'function'))\n          base = global._();\n      }\n      while (base != null && context.length)\n        base = base[context.pop().string];\n      if (base != null) gatherCompletions(base);\n    } else {\n      // If not, just look in the global object and any local scope\n      // (reading into JS mode internals to get at the local and global variables)\n      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);\n      for (var v = token.state.globalVars; v; v = v.next) maybeAdd(v.name);\n      if (!options || options.useGlobalScope !== false)\n        gatherCompletions(global);\n      forEach(keywords, maybeAdd);\n    }\n    return found;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"OkRY\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"/A6h\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp(\"\\\\b\" + query + \"\\\\b\") : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n\n\n/***/ }),\n\n/***/ \"P830\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_solution_vue__ = __webpack_require__(\"47LY\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6701a6dc_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_solution_vue__ = __webpack_require__(\"IlaS\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"ZfUv\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_solution_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6701a6dc_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_solution_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"PdbZ\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('div', {\n    staticClass: \"problem\"\n  }, [_c('el-row', [_c('el-col', {\n    attrs: {\n      \"sm\": 0,\n      \"lg\": 2,\n      \"md\": 1,\n      \"xs\": 0\n    }\n  }, [_c('div', {\n    staticClass: \"grid-content\"\n  })]), _vm._v(\" \"), _c('el-col', {\n    attrs: {\n      \"sm\": 24,\n      \"lg\": 20,\n      \"md\": 22,\n      \"xs\": 24\n    }\n  }, [_c('div', {\n    staticClass: \"problem-header\"\n  }, [_c('h3', {\n    attrs: {\n      \"align\": \"left\"\n    }\n  }, [_vm._v(_vm._s(_vm.problemDetail.title))]), _vm._v(\" \"), _c('img', {\n    staticClass: \"collection\",\n    attrs: {\n      \"width\": \"56\",\n      \"height\": \"56\",\n      \"src\": _vm.getFavoriteSrc(_vm.problemDetail)\n    },\n    on: {\n      \"click\": _vm.collection\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"container\"\n  }, [_c('el-tabs', {\n    attrs: {\n      \"type\": \"card\"\n    },\n    model: {\n      value: (_vm.tab),\n      callback: function($$v) {\n        _vm.tab = $$v\n      },\n      expression: \"tab\"\n    }\n  }, [_c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Description\",\n      \"name\": \"description\"\n    }\n  }, [_c('description', {\n    attrs: {\n      \"data\": _vm.problemDetail\n    }\n  })], 1), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Solution\",\n      \"name\": \"solution\"\n    }\n  }, [_c('solution')], 1), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Hints\",\n      \"name\": \"third\"\n    }\n  }, [_c('hints')], 1), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Notes\",\n      \"name\": \"fourth\"\n    }\n  }, [_c('notes', {\n    attrs: {\n      \"name\": _vm.problem.title\n    }\n  })], 1)], 1)], 1)]), _vm._v(\" \"), _c('el-col', {\n    attrs: {\n      \"sm\": 0,\n      \"lg\": 2,\n      \"md\": 1,\n      \"xs\": 0\n    }\n  }, [_c('div', {\n    staticClass: \"grid-content\"\n  })])], 1)], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"QSKu\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n\n\n/***/ }),\n\n/***/ \"RKlR\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_myeditor_vue__ = __webpack_require__(\"2hzx\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_58438f59_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_myeditor_vue__ = __webpack_require__(\"C3SF\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"ArdA\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_myeditor_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_58438f59_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_myeditor_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"RkAk\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".CodeMirror-dialog{position:absolute;left:0;right:0;background:inherit;z-index:15;padding:.1em .8em;overflow:hidden;color:inherit}.CodeMirror-dialog-top{border-bottom:1px solid #eee;top:0}.CodeMirror-dialog-bottom{border-top:1px solid #eee;bottom:0}.CodeMirror-dialog input{border:none;outline:none;background:transparent;width:20em;color:inherit;font-family:monospace}.CodeMirror-dialog button{font-size:70%}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/dialog/dialog.css\"],\"names\":[],\"mappings\":\"AAAA,mBACE,kBAAmB,AACnB,OAAQ,AAAC,QAAS,AAClB,mBAAoB,AACpB,WAAY,AACZ,kBAAmB,AACnB,gBAAiB,AACjB,aAAe,CAChB,AAED,uBACE,6BAA8B,AAC9B,KAAO,CACR,AAED,0BACE,0BAA2B,AAC3B,QAAU,CACX,AAED,yBACE,YAAa,AACb,aAAc,AACd,uBAAwB,AACxB,WAAY,AACZ,cAAe,AACf,qBAAuB,CACxB,AAED,0BACE,aAAe,CAChB\",\"file\":\"dialog.css\",\"sourcesContent\":[\".CodeMirror-dialog {\\n  position: absolute;\\n  left: 0; right: 0;\\n  background: inherit;\\n  z-index: 15;\\n  padding: .1em .8em;\\n  overflow: hidden;\\n  color: inherit;\\n}\\n\\n.CodeMirror-dialog-top {\\n  border-bottom: 1px solid #eee;\\n  top: 0;\\n}\\n\\n.CodeMirror-dialog-bottom {\\n  border-top: 1px solid #eee;\\n  bottom: 0;\\n}\\n\\n.CodeMirror-dialog input {\\n  border: none;\\n  outline: none;\\n  background: transparent;\\n  width: 20em;\\n  color: inherit;\\n  font-family: monospace;\\n}\\n\\n.CodeMirror-dialog button {\\n  font-size: 70%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"RkhK\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n\n\n/***/ }),\n\n/***/ \"SVHh\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in\"\n    }\n  }, [_c('div', {\n    staticClass: \"notes\"\n  }, [_c('el-dialog', {\n    attrs: {\n      \"title\": \"保存笔记\",\n      \"visible\": _vm.noteDialogVisible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.noteDialogVisible = $event\n      }\n    }\n  }, [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"label-width\": \"60px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"文件名:\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: (_vm.noteName),\n      callback: function($$v) {\n        _vm.noteName = $$v\n      },\n      expression: \"noteName\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-radio-group', {\n    model: {\n      value: (_vm.fileType),\n      callback: function($$v) {\n        _vm.fileType = $$v\n      },\n      expression: \"fileType\"\n    }\n  }, [_c('el-radio', {\n    attrs: {\n      \"label\": \"0\"\n    }\n  }, [_vm._v(\"保存至云端\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": \"1\"\n    }\n  }, [_vm._v(\"以txt格式保存\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": \"2\"\n    }\n  }, [_vm._v(\"以markdown格式保存\")])], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"dialog-footer\",\n    slot: \"footer\"\n  }, [_c('el-button', {\n    on: {\n      \"click\": function($event) {\n        _vm.noteDialogVisible = false\n      }\n    }\n  }, [_vm._v(\"取 消\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.saveNoteConfirm\n    }\n  }, [_vm._v(\"保 存\")])], 1)], 1), _vm._v(\" \"), _c('mavon-editor', {\n    attrs: {\n      \"default_open\": \"edit\",\n      \"placeholder\": \"记录学习笔记\"\n    },\n    on: {\n      \"save\": _vm._showSaveNoteDialog\n    },\n    model: {\n      value: (_vm.note),\n      callback: function($$v) {\n        _vm.note = $$v\n      },\n      expression: \"note\"\n    }\n  })], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"THjC\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n\n/***/ }),\n\n/***/ \"TQy8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n\n/***/ }),\n\n/***/ \"U3HU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"U80t\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line < CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n\n\n/***/ }),\n\n/***/ \"XRep\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".description{border-bottom:1px solid #ddd}.description p{margin:0 0 10px;display:block;font-size:16px;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}.description pre{display:block;padding:9.5px;margin:0 0 10px;overflow:auto;font-size:14px;line-height:1.9;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f2f2f2;border:1px solid #ccc;border-radius:4px;font-family:Menlo,Monaco,Consolas,Courier New,monospace}.description pre .nf{color:#900;font-weight:700}.description pre .na{color:teal}.description pre .kt{color:#458;font-weight:700}.description pre .o{font-weight:700}.description code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px;font-family:Menlo,Monaco,Consolas,Courier New,monospace}.description b{font-weight:700}.description ol{margin-top:10px}.description ol li{font-size:16px}.editor .ql-editor{min-height:300px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/description/description.vue\"],\"names\":[],\"mappings\":\"AACA,aACE,4BAA8B,CAC/B,AACD,eACE,gBAAiB,AACjB,cAAe,AACf,eAAgB,AAChB,0BAA2B,AAC3B,yBAA0B,AAC1B,uBAA0B,AAC1B,oBAAwB,CACzB,AACD,iBACE,cAAe,AACf,cAAe,AACf,gBAAiB,AACjB,cAAe,AACf,eAAgB,AAChB,gBAAiB,AACjB,WAAY,AACZ,qBAAsB,AACtB,qBAAsB,AACtB,yBAA0B,AAC1B,sBAAuB,AACvB,kBAAmB,AACnB,uDAA+D,CAChE,AACD,qBACE,WAAY,AACZ,eAAkB,CACnB,AACD,qBACE,UAAe,CAChB,AACD,qBACE,WAAY,AACZ,eAAkB,CACnB,AACD,oBACE,eAAkB,CACnB,AACD,kBACE,gBAAiB,AACjB,cAAe,AACf,cAAe,AACf,yBAA0B,AAC1B,kBAAmB,AACnB,uDAA+D,CAChE,AACD,eACE,eAAiB,CAClB,AACD,gBACE,eAAiB,CAClB,AACD,mBACE,cAAgB,CACjB,AACD,mBACE,gBAAkB,CACnB\",\"file\":\"description.vue\",\"sourcesContent\":[\"\\n.description {\\n  border-bottom: 1px solid #ddd;\\n}\\n.description p {\\n  margin: 0 0 10px;\\n  display: block;\\n  font-size: 16px;\\n  -webkit-margin-before: 1em;\\n  -webkit-margin-after: 1em;\\n  -webkit-margin-start: 0px;\\n  -webkit-margin-end: 0px;\\n}\\n.description pre {\\n  display: block;\\n  padding: 9.5px;\\n  margin: 0 0 10px;\\n  overflow: auto;\\n  font-size: 14px;\\n  line-height: 1.9;\\n  color: #333;\\n  word-break: break-all;\\n  word-wrap: break-word;\\n  background-color: #f2f2f2;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n  font-family: Menlo, Monaco, Consolas, \\\"Courier New\\\", monospace;\\n}\\n.description pre .nf {\\n  color: #900;\\n  font-weight: bold;\\n}\\n.description pre .na {\\n  color: #008080;\\n}\\n.description pre .kt {\\n  color: #458;\\n  font-weight: bold;\\n}\\n.description pre .o {\\n  font-weight: bold;\\n}\\n.description code {\\n  padding: 2px 4px;\\n  font-size: 90%;\\n  color: #c7254e;\\n  background-color: #f9f2f4;\\n  border-radius: 4px;\\n  font-family: Menlo, Monaco, Consolas, \\\"Courier New\\\", monospace;\\n}\\n.description b {\\n  font-weight: 700;\\n}\\n.description ol {\\n  margin-top: 10px;\\n}\\n.description ol li {\\n  font-size: 16px;\\n}\\n.editor .ql-editor {\\n  min-height: 300px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"Yokd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"engA\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"da13b76a\", content, true);\n\n/***/ }),\n\n/***/ \"Z6qg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.indexOf(endString);\n    }\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n\n\n/***/ }),\n\n/***/ \"ZfUv\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"umNi\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"ee1aa648\", content, true);\n\n/***/ }),\n\n/***/ \"aGTD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"aOIS\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".notes[data-v-c64ce914]{margin-top:25px;height:590px}.notes .v-note-wrapper[data-v-c64ce914]{height:500px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/notes/notes.vue\"],\"names\":[],\"mappings\":\"AACA,wBACE,gBAAiB,AACjB,YAAc,CACf,AACD,wCACE,YAAc,CACf\",\"file\":\"notes.vue\",\"sourcesContent\":[\"\\n.notes[data-v-c64ce914] {\\n  margin-top: 25px;\\n  height: 590px;\\n}\\n.notes .v-note-wrapper[data-v-c64ce914] {\\n  height: 500px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"aX1R\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type) || stringStartsAfter(cm, pos)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch\n  }\n});\n\n\n/***/ }),\n\n/***/ \"bp3c\":\n/***/ (function(module, exports) {\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/***/ }),\n\n/***/ \"c+I8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureGlobal(regexp) {\n    return regexp.global ? regexp : new RegExp(regexp.source, regexpFlags(regexp) + \"g\")\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (end.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureGlobal(query)\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n\n\n/***/ }),\n\n/***/ \"dxBS\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"engA\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".CodeMirror-foldmarker{color:blue;text-shadow:#b9f 1px 1px 2px,#b9f -1px -1px 2px,#b9f 1px -1px 2px,#b9f -1px 1px 2px;font-family:arial;line-height:.3;cursor:pointer}.CodeMirror-foldgutter{width:.7em}.CodeMirror-foldgutter-folded,.CodeMirror-foldgutter-open{cursor:pointer}.CodeMirror-foldgutter-open:after{content:\\\"\\\\25BE\\\"}.CodeMirror-foldgutter-folded:after{content:\\\"\\\\25B8\\\"}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/fold/foldgutter.css\"],\"names\":[],\"mappings\":\"AAAA,uBACE,WAAY,AACZ,oFAAwF,AACxF,kBAAmB,AACnB,eAAgB,AAChB,cAAgB,CACjB,AACD,uBACE,UAAY,CACb,AACD,0DAEE,cAAgB,CACjB,AACD,kCACE,eAAiB,CAClB,AACD,oCACE,eAAiB,CAClB\",\"file\":\"foldgutter.css\",\"sourcesContent\":[\".CodeMirror-foldmarker {\\n  color: blue;\\n  text-shadow: #b9f 1px 1px 2px, #b9f -1px -1px 2px, #b9f 1px -1px 2px, #b9f -1px 1px 2px;\\n  font-family: arial;\\n  line-height: .3;\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter {\\n  width: .7em;\\n}\\n.CodeMirror-foldgutter-open,\\n.CodeMirror-foldgutter-folded {\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter-open:after {\\n  content: \\\"\\\\25BE\\\";\\n}\\n.CodeMirror-foldgutter-folded:after {\\n  content: \\\"\\\\25B8\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"fo6W\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"j09L\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_notes_vue__ = __webpack_require__(\"+onj\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c64ce914_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_notes_vue__ = __webpack_require__(\"SVHh\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"jCel\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-c64ce914\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_notes_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c64ce914_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_notes_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"jCel\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"aOIS\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"30ccd70a\", content, true);\n\n/***/ }),\n\n/***/ \"jQeI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n\n/***/ }),\n\n/***/ \"lDdF\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.2\n * 2016-06-16 18:25:19\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = saveAs || (function(view) {\n\t\"use strict\";\n\t// IE <10 is explicitly unsupported\n\tif (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\treturn;\n\t}\n\tvar\n\t\t  doc = view.document\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet\n\t\t, get_URL = function() {\n\t\t\treturn view.URL || view.webkitURL || view;\n\t\t}\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t, can_use_save_link = \"download\" in save_link\n\t\t, click = function(node) {\n\t\t\tvar event = new MouseEvent(\"click\");\n\t\t\tnode.dispatchEvent(event);\n\t\t}\n\t\t, is_safari = /constructor/i.test(view.HTMLElement) || view.safari\n\t\t, is_chrome_ios =/CriOS\\/[\\d]+/.test(navigator.userAgent)\n\t\t, throw_outside = function(ex) {\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\tthrow ex;\n\t\t\t}, 0);\n\t\t}\n\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t// the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n\t\t, arbitrary_revoke_timeout = 1000 * 40 // in ms\n\t\t, revoke = function(file) {\n\t\t\tvar revoker = function() {\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\tget_URL().revokeObjectURL(file);\n\t\t\t\t} else { // file is a File\n\t\t\t\t\tfile.remove();\n\t\t\t\t}\n\t\t\t};\n\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);\n\t\t}\n\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\tevent_types = [].concat(event_types);\n\t\t\tvar i = event_types.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, auto_bom = function(blob) {\n\t\t\t// prepend BOM for UTF-8 XML and text/* types (including HTML)\n\t\t\t// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n\t\t\tif (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n\t\t\t\treturn new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});\n\t\t\t}\n\t\t\treturn blob;\n\t\t}\n\t\t, FileSaver = function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\tvar\n\t\t\t\t  filesaver = this\n\t\t\t\t, type = blob.type\n\t\t\t\t, force = type === force_saveable_type\n\t\t\t\t, object_url\n\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t}\n\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t, fs_error = function() {\n\t\t\t\t\tif ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\n\t\t\t\t\t\t// Safari doesn't allow downloading of blob urls\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\tvar url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n\t\t\t\t\t\t\tvar popup = view.open(url, '_blank');\n\t\t\t\t\t\t\tif(!popup) view.location.href = url;\n\t\t\t\t\t\t\turl=undefined; // release reference before dispatching\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\tif (!object_url) {\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\t\t}\n\t\t\t\t\tif (force) {\n\t\t\t\t\t\tview.location.href = object_url;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar opened = view.open(object_url, \"_blank\");\n\t\t\t\t\t\tif (!opened) {\n\t\t\t\t\t\t\t// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n\t\t\t\t\t\t\tview.location.href = object_url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t}\n\t\t\t;\n\t\t\tfilesaver.readyState = filesaver.INIT;\n\n\t\t\tif (can_use_save_link) {\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsave_link.href = object_url;\n\t\t\t\t\tsave_link.download = name;\n\t\t\t\t\tclick(save_link);\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfs_error();\n\t\t}\n\t\t, FS_proto = FileSaver.prototype\n\t\t, saveAs = function(blob, name, no_auto_bom) {\n\t\t\treturn new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\n\t\t}\n\t;\n\t// IE 10+ (native saveAs)\n\tif (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n\t\treturn function(blob, name, no_auto_bom) {\n\t\t\tname = name || blob.name || \"download\";\n\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name);\n\t\t};\n\t}\n\n\tFS_proto.abort = function(){};\n\tFS_proto.readyState = FS_proto.INIT = 0;\n\tFS_proto.WRITING = 1;\n\tFS_proto.DONE = 2;\n\n\tFS_proto.error =\n\tFS_proto.onwritestart =\n\tFS_proto.onprogress =\n\tFS_proto.onwrite =\n\tFS_proto.onabort =\n\tFS_proto.onerror =\n\tFS_proto.onwriteend =\n\t\tnull;\n\n\treturn saveAs;\n}(\n\t   typeof self !== \"undefined\" && self\n\t|| typeof window !== \"undefined\" && window\n\t|| this.content\n));\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports.saveAs = saveAs;\n} else if ((\"function\" !== \"undefined\" && __webpack_require__(\"LGuY\") !== null) && (__webpack_require__(\"nErl\") !== null)) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n    return saveAs;\n  }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n/***/ }),\n\n/***/ \"lUyH\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_hints_vue__ = __webpack_require__(\"bp3c\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_hints_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_hints_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_062a844c_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_hints_vue__ = __webpack_require__(\"6rPU\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"1LpH\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_hints_vue___default.a,\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_062a844c_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_hints_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"nErl\":\n/***/ (function(module, exports) {\n\n/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/***/ }),\n\n/***/ \"qnSv\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(\"Zrlr\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);\n\n\n/**\n * Created by qinzhen on 2017/9/30.\n */\nvar ReturnResult = function ReturnResult(_ref) {\n  var mytitle = _ref.mytitle,\n      memory_used = _ref.memory_used,\n      output = _ref.output,\n      status = _ref.status,\n      time_used = _ref.time_used;\n\n  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, ReturnResult);\n\n  this.mytitle = mytitle;\n  this.memory_used = memory_used;\n  this.output = output;\n  this.status = status;\n  this.time_used = time_used;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReturnResult);\n\n/***/ }),\n\n/***/ \"soCA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"tjx/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  // Kill 'ring'\n\n  var killRing = [];\n  function addToRing(str) {\n    killRing.push(str);\n    if (killRing.length > 50) killRing.shift();\n  }\n  function growRingTop(str) {\n    if (!killRing.length) return addToRing(str);\n    killRing[killRing.length - 1] += str;\n  }\n  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || \"\"; }\n  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }\n\n  var lastKill = null;\n\n  function kill(cm, from, to, mayGrow, text) {\n    if (text == null) text = cm.getRange(from, to);\n\n    if (mayGrow && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))\n      growRingTop(text);\n    else\n      addToRing(text);\n    cm.replaceRange(\"\", from, to, \"+delete\");\n\n    if (mayGrow) lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};\n    else lastKill = null;\n  }\n\n  // Boundaries of various units\n\n  function byChar(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"char\", true);\n  }\n\n  function byWord(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"word\", true);\n  }\n\n  function byLine(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"line\", cm.doc.sel.goalColumn);\n  }\n\n  function byPage(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"page\", cm.doc.sel.goalColumn);\n  }\n\n  function byParagraph(cm, pos, dir) {\n    var no = pos.line, line = cm.getLine(no);\n    var sawText = /\\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));\n    var fst = cm.firstLine(), lst = cm.lastLine();\n    for (;;) {\n      no += dir;\n      if (no < fst || no > lst)\n        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));\n      line = cm.getLine(no);\n      var hasText = /\\S/.test(line);\n      if (hasText) sawText = true;\n      else if (sawText) return Pos(no, 0);\n    }\n  }\n\n  function bySentence(cm, pos, dir) {\n    var line = pos.line, ch = pos.ch;\n    var text = cm.getLine(pos.line), sawWord = false;\n    for (;;) {\n      var next = text.charAt(ch + (dir < 0 ? -1 : 0));\n      if (!next) { // End/beginning of line reached\n        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);\n        text = cm.getLine(line + dir);\n        if (!/\\S/.test(text)) return Pos(line, ch);\n        line += dir;\n        ch = dir < 0 ? text.length : 0;\n        continue;\n      }\n      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));\n      if (!sawWord) sawWord = /\\w/.test(next);\n      ch += dir;\n    }\n  }\n\n  function byExpr(cm, pos, dir) {\n    var wrap;\n    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))\n        && wrap.match && (wrap.forward ? 1 : -1) == dir)\n      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;\n\n    for (var first = true;; first = false) {\n      var token = cm.getTokenAt(pos);\n      var after = Pos(pos.line, dir < 0 ? token.start : token.end);\n      if (first && dir > 0 && token.end == pos.ch || !/\\w/.test(token.string)) {\n        var newPos = cm.findPosH(after, dir, \"char\");\n        if (posEq(after, newPos)) return pos;\n        else pos = newPos;\n      } else {\n        return after;\n      }\n    }\n  }\n\n  // Prefixes (only crudely supported)\n\n  function getPrefix(cm, precise) {\n    var digits = cm.state.emacsPrefix;\n    if (!digits) return precise ? null : 1;\n    clearPrefix(cm);\n    return digits == \"-\" ? -1 : Number(digits);\n  }\n\n  function repeated(cmd) {\n    var f = typeof cmd == \"string\" ? function(cm) { cm.execCommand(cmd); } : cmd;\n    return function(cm) {\n      var prefix = getPrefix(cm);\n      f(cm);\n      for (var i = 1; i < prefix; ++i) f(cm);\n    };\n  }\n\n  function findEnd(cm, pos, by, dir) {\n    var prefix = getPrefix(cm);\n    if (prefix < 0) { dir = -dir; prefix = -prefix; }\n    for (var i = 0; i < prefix; ++i) {\n      var newPos = by(cm, pos, dir);\n      if (posEq(newPos, pos)) break;\n      pos = newPos;\n    }\n    return pos;\n  }\n\n  function move(by, dir) {\n    var f = function(cm) {\n      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));\n    };\n    f.motion = true;\n    return f;\n  }\n\n  function killTo(cm, by, dir) {\n    var selections = cm.listSelections(), cursor;\n    var i = selections.length;\n    while (i--) {\n      cursor = selections[i].head;\n      kill(cm, cursor, findEnd(cm, cursor, by, dir), true);\n    }\n  }\n\n  function killRegion(cm) {\n    if (cm.somethingSelected()) {\n      var selections = cm.listSelections(), selection;\n      var i = selections.length;\n      while (i--) {\n        selection = selections[i];\n        kill(cm, selection.anchor, selection.head);\n      }\n      return true;\n    }\n  }\n\n  function addPrefix(cm, digit) {\n    if (cm.state.emacsPrefix) {\n      if (digit != \"-\") cm.state.emacsPrefix += digit;\n      return;\n    }\n    // Not active yet\n    cm.state.emacsPrefix = digit;\n    cm.on(\"keyHandled\", maybeClearPrefix);\n    cm.on(\"inputRead\", maybeDuplicateInput);\n  }\n\n  var prefixPreservingKeys = {\"Alt-G\": true, \"Ctrl-X\": true, \"Ctrl-Q\": true, \"Ctrl-U\": true};\n\n  function maybeClearPrefix(cm, arg) {\n    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))\n      clearPrefix(cm);\n  }\n\n  function clearPrefix(cm) {\n    cm.state.emacsPrefix = null;\n    cm.off(\"keyHandled\", maybeClearPrefix);\n    cm.off(\"inputRead\", maybeDuplicateInput);\n  }\n\n  function maybeDuplicateInput(cm, event) {\n    var dup = getPrefix(cm);\n    if (dup > 1 && event.origin == \"+input\") {\n      var one = event.text.join(\"\\n\"), txt = \"\";\n      for (var i = 1; i < dup; ++i) txt += one;\n      cm.replaceSelection(txt);\n    }\n  }\n\n  function addPrefixMap(cm) {\n    cm.state.emacsPrefixMap = true;\n    cm.addKeyMap(prefixMap);\n    cm.on(\"keyHandled\", maybeRemovePrefixMap);\n    cm.on(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  function maybeRemovePrefixMap(cm, arg) {\n    if (typeof arg == \"string\" && (/^\\d$/.test(arg) || arg == \"Ctrl-U\")) return;\n    cm.removeKeyMap(prefixMap);\n    cm.state.emacsPrefixMap = false;\n    cm.off(\"keyHandled\", maybeRemovePrefixMap);\n    cm.off(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  // Utilities\n\n  function setMark(cm) {\n    cm.setCursor(cm.getCursor());\n    cm.setExtending(!cm.getExtending());\n    cm.on(\"change\", function() { cm.setExtending(false); });\n  }\n\n  function clearMark(cm) {\n    cm.setExtending(false);\n    cm.setCursor(cm.getCursor());\n  }\n\n  function getInput(cm, msg, f) {\n    if (cm.openDialog)\n      cm.openDialog(msg + \": <input type=\\\"text\\\" style=\\\"width: 10em\\\"/>\", f, {bottom: true});\n    else\n      f(prompt(msg, \"\"));\n  }\n\n  function operateOnWord(cm, op) {\n    var start = cm.getCursor(), end = cm.findPosH(start, 1, \"word\");\n    cm.replaceRange(op(cm.getRange(start, end)), start, end);\n    cm.setCursor(end);\n  }\n\n  function toEnclosingExpr(cm) {\n    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;\n    var stack = [];\n    while (line >= cm.firstLine()) {\n      var text = cm.getLine(line);\n      for (var i = ch == null ? text.length : ch; i > 0;) {\n        var ch = text.charAt(--i);\n        if (ch == \")\")\n          stack.push(\"(\");\n        else if (ch == \"]\")\n          stack.push(\"[\");\n        else if (ch == \"}\")\n          stack.push(\"{\");\n        else if (/[\\(\\{\\[]/.test(ch) && (!stack.length || stack.pop() != ch))\n          return cm.extendSelection(Pos(line, i));\n      }\n      --line; ch = null;\n    }\n  }\n\n  function quit(cm) {\n    cm.execCommand(\"clearSearch\");\n    clearMark(cm);\n  }\n\n  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};\n\n  // Actual keymap\n\n  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({\n    \"Ctrl-W\": function(cm) {kill(cm, cm.getCursor(\"start\"), cm.getCursor(\"end\"));},\n    \"Ctrl-K\": repeated(function(cm) {\n      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));\n      var text = cm.getRange(start, end);\n      if (!/\\S/.test(text)) {\n        text += \"\\n\";\n        end = Pos(start.line + 1, 0);\n      }\n      kill(cm, start, end, true, text);\n    }),\n    \"Alt-W\": function(cm) {\n      addToRing(cm.getSelection());\n      clearMark(cm);\n    },\n    \"Ctrl-Y\": function(cm) {\n      var start = cm.getCursor();\n      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, \"paste\");\n      cm.setSelection(start, cm.getCursor());\n    },\n    \"Alt-Y\": function(cm) {cm.replaceSelection(popFromRing(), \"around\", \"paste\");},\n\n    \"Ctrl-Space\": setMark, \"Ctrl-Shift-2\": setMark,\n\n    \"Ctrl-F\": move(byChar, 1), \"Ctrl-B\": move(byChar, -1),\n    \"Right\": move(byChar, 1), \"Left\": move(byChar, -1),\n    \"Ctrl-D\": function(cm) { killTo(cm, byChar, 1); },\n    \"Delete\": function(cm) { killRegion(cm) || killTo(cm, byChar, 1); },\n    \"Ctrl-H\": function(cm) { killTo(cm, byChar, -1); },\n    \"Backspace\": function(cm) { killRegion(cm) || killTo(cm, byChar, -1); },\n\n    \"Alt-F\": move(byWord, 1), \"Alt-B\": move(byWord, -1),\n    \"Alt-D\": function(cm) { killTo(cm, byWord, 1); },\n    \"Alt-Backspace\": function(cm) { killTo(cm, byWord, -1); },\n\n    \"Ctrl-N\": move(byLine, 1), \"Ctrl-P\": move(byLine, -1),\n    \"Down\": move(byLine, 1), \"Up\": move(byLine, -1),\n    \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStart\",\n\n    \"Alt-V\": move(byPage, -1), \"Ctrl-V\": move(byPage, 1),\n    \"PageUp\": move(byPage, -1), \"PageDown\": move(byPage, 1),\n\n    \"Ctrl-Up\": move(byParagraph, -1), \"Ctrl-Down\": move(byParagraph, 1),\n\n    \"Alt-A\": move(bySentence, -1), \"Alt-E\": move(bySentence, 1),\n    \"Alt-K\": function(cm) { killTo(cm, bySentence, 1); },\n\n    \"Ctrl-Alt-K\": function(cm) { killTo(cm, byExpr, 1); },\n    \"Ctrl-Alt-Backspace\": function(cm) { killTo(cm, byExpr, -1); },\n    \"Ctrl-Alt-F\": move(byExpr, 1), \"Ctrl-Alt-B\": move(byExpr, -1),\n\n    \"Shift-Ctrl-Alt-2\": function(cm) {\n      var cursor = cm.getCursor();\n      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);\n    },\n    \"Ctrl-Alt-T\": function(cm) {\n      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);\n      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);\n      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +\n                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);\n    },\n    \"Ctrl-Alt-U\": repeated(toEnclosingExpr),\n\n    \"Alt-Space\": function(cm) {\n      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);\n      while (from && /\\s/.test(text.charAt(from - 1))) --from;\n      while (to < text.length && /\\s/.test(text.charAt(to))) ++to;\n      cm.replaceRange(\" \", Pos(pos.line, from), Pos(pos.line, to));\n    },\n    \"Ctrl-O\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"start\"); }),\n    \"Ctrl-T\": repeated(function(cm) {\n      cm.execCommand(\"transposeChars\");\n    }),\n\n    \"Alt-C\": repeated(function(cm) {\n      operateOnWord(cm, function(w) {\n        var letter = w.search(/\\w/);\n        if (letter == -1) return w;\n        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();\n      });\n    }),\n    \"Alt-U\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toUpperCase(); });\n    }),\n    \"Alt-L\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toLowerCase(); });\n    }),\n\n    \"Alt-;\": \"toggleComment\",\n\n    \"Ctrl-/\": repeated(\"undo\"), \"Shift-Ctrl--\": repeated(\"undo\"),\n    \"Ctrl-Z\": repeated(\"undo\"), \"Cmd-Z\": repeated(\"undo\"),\n    \"Shift-Alt-,\": \"goDocStart\", \"Shift-Alt-.\": \"goDocEnd\",\n    \"Ctrl-S\": \"findPersistentNext\", \"Ctrl-R\": \"findPersistentPrev\", \"Ctrl-G\": quit, \"Shift-Alt-5\": \"replace\",\n    \"Alt-/\": \"autocomplete\",\n    \"Enter\": \"newlineAndIndent\",\n    \"Ctrl-J\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"end\"); }),\n    \"Tab\": \"indentAuto\",\n\n    \"Alt-G G\": function(cm) {\n      var prefix = getPrefix(cm, true);\n      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);\n\n      getInput(cm, \"Goto line\", function(str) {\n        var num;\n        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)\n          cm.setCursor(num - 1);\n      });\n    },\n\n    \"Ctrl-X Tab\": function(cm) {\n      cm.indentSelection(getPrefix(cm, true) || cm.getOption(\"indentUnit\"));\n    },\n    \"Ctrl-X Ctrl-X\": function(cm) {\n      cm.setSelection(cm.getCursor(\"head\"), cm.getCursor(\"anchor\"));\n    },\n    \"Ctrl-X Ctrl-S\": \"save\",\n    \"Ctrl-X Ctrl-W\": \"save\",\n    \"Ctrl-X S\": \"saveAll\",\n    \"Ctrl-X F\": \"open\",\n    \"Ctrl-X U\": repeated(\"undo\"),\n    \"Ctrl-X K\": \"close\",\n    \"Ctrl-X Delete\": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), true); },\n    \"Ctrl-X H\": \"selectAll\",\n\n    \"Ctrl-Q Tab\": repeated(\"insertTab\"),\n    \"Ctrl-U\": addPrefixMap\n  });\n\n  var prefixMap = {\"Ctrl-G\": clearPrefix};\n  function regPrefix(d) {\n    prefixMap[d] = function(cm) { addPrefix(cm, d); };\n    keyMap[\"Ctrl-\" + d] = function(cm) { addPrefix(cm, d); };\n    prefixPreservingKeys[\"Ctrl-\" + d] = true;\n  }\n  for (var i = 0; i < 10; ++i) regPrefix(String(i));\n  regPrefix(\"-\");\n});\n\n\n/***/ }),\n\n/***/ \"umNi\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".solution{background:#f2f2f2;line-height:1.7}.solution .toc{display:table;border:1px solid #aaa;background-color:#f9f9f9;padding:7px 25px 3px 7px;margin-top:50px;font-size:95%}.solution .toc ul{margin-top:0;margin-bottom:10px}.solution .toc a{href:\\\"#\\\";color:#08c;text-decoration:none}h2{font-size:1.75em}h2,h4{font-weight:700;margin-top:1.275em;margin-bottom:.85em;line-height:1.7}h4{font-size:1.25em}hr{height:4px;padding:0;margin:1.7em 0;overflow:hidden;background-color:#e7e7e7;border:none}p{margin:0 0 10px;display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0;font-size:16px;font-weight:400}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}b,strong{font-weight:700}pre{display:block;padding:9.5px;margin:0 0 10px;overflow:auto;font-size:14px;line-height:1.9;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f2f2f2;border:1px solid #ccc;border-radius:4px;font-family:Menlo,Monaco,Consolas,Courier New,monospace}pre .nf{color:#900;font-weight:700}pre .na{color:teal}pre .kt{color:#458}pre .kt,pre .o{font-weight:700}.nodata{height:100%;width:100%;padding:8rem 4rem;text-align:center;font-size:1.5rem;color:#dadada}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/solution/solution.vue\"],\"names\":[],\"mappings\":\"AACA,UACE,mBAAoB,AACpB,eAAiB,CAClB,AACD,eACE,cAAe,AACf,sBAAuB,AACvB,yBAA0B,AAC1B,yBAA0B,AAC1B,gBAAiB,AACjB,aAAe,CAChB,AACD,kBACE,aAAc,AACd,kBAAoB,CACrB,AACD,iBACE,SAAU,AACV,WAAY,AACZ,oBAAsB,CACvB,AACD,GACE,gBAAkB,CAKnB,AACD,MALE,gBAAiB,AACjB,mBAAoB,AACpB,oBAAsB,AACtB,eAAiB,CAQlB,AAND,GACE,gBAAkB,CAKnB,AACD,GACE,WAAY,AACZ,UAAW,AACX,eAAgB,AAChB,gBAAiB,AACjB,yBAA0B,AAC1B,WAAa,CACd,AACD,EACE,gBAAiB,AACjB,cAAe,AACf,0BAA2B,AAC3B,yBAA0B,AAC1B,uBAA0B,AAC1B,qBAAwB,AACxB,eAAgB,AAChB,eAAiB,CAClB,AACD,KACE,gBAAiB,AACjB,cAAe,AACf,cAAe,AACf,yBAA0B,AAC1B,iBAAmB,CACpB,AACD,SAEE,eAAiB,CAClB,AACD,IACE,cAAe,AACf,cAAe,AACf,gBAAiB,AACjB,cAAe,AACf,eAAgB,AAChB,gBAAiB,AACjB,WAAY,AACZ,qBAAsB,AACtB,qBAAsB,AACtB,yBAA0B,AAC1B,sBAAuB,AACvB,kBAAmB,AACnB,uDAA+D,CAChE,AACD,QACE,WAAY,AACZ,eAAkB,CACnB,AACD,QACE,UAAe,CAChB,AACD,QACE,UAAY,CAEb,AACD,eAFE,eAAkB,CAInB,AACD,QACE,YAAa,AACb,WAAY,AACZ,kBAAmB,AACnB,kBAAmB,AACnB,iBAAkB,AAClB,aAAe,CAChB\",\"file\":\"solution.vue\",\"sourcesContent\":[\"\\n.solution {\\n  background: #f2f2f2;\\n  line-height: 1.7;\\n}\\n.solution .toc {\\n  display: table;\\n  border: 1px solid #aaa;\\n  background-color: #f9f9f9;\\n  padding: 7px 25px 3px 7px;\\n  margin-top: 50px;\\n  font-size: 95%;\\n}\\n.solution .toc ul {\\n  margin-top: 0;\\n  margin-bottom: 10px;\\n}\\n.solution .toc a {\\n  href: '#';\\n  color: #08c;\\n  text-decoration: none;\\n}\\nh2 {\\n  font-size: 1.75em;\\n  font-weight: 700;\\n  margin-top: 1.275em;\\n  margin-bottom: 0.85em;\\n  line-height: 1.7;\\n}\\nh4 {\\n  font-size: 1.25em;\\n  font-weight: 700;\\n  margin-top: 1.275em;\\n  margin-bottom: 0.85em;\\n  line-height: 1.7;\\n}\\nhr {\\n  height: 4px;\\n  padding: 0;\\n  margin: 1.7em 0;\\n  overflow: hidden;\\n  background-color: #e7e7e7;\\n  border: none;\\n}\\np {\\n  margin: 0 0 10px;\\n  display: block;\\n  -webkit-margin-before: 1em;\\n  -webkit-margin-after: 1em;\\n  -webkit-margin-start: 0px;\\n  -webkit-margin-end: 0px;\\n  font-size: 16px;\\n  font-weight: 400;\\n}\\ncode {\\n  padding: 2px 4px;\\n  font-size: 90%;\\n  color: #c7254e;\\n  background-color: #f9f2f4;\\n  border-radius: 4px;\\n}\\nb,\\nstrong {\\n  font-weight: 700;\\n}\\npre {\\n  display: block;\\n  padding: 9.5px;\\n  margin: 0 0 10px;\\n  overflow: auto;\\n  font-size: 14px;\\n  line-height: 1.9;\\n  color: #333;\\n  word-break: break-all;\\n  word-wrap: break-word;\\n  background-color: #f2f2f2;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n  font-family: Menlo, Monaco, Consolas, \\\"Courier New\\\", monospace;\\n}\\npre .nf {\\n  color: #900;\\n  font-weight: bold;\\n}\\npre .na {\\n  color: #008080;\\n}\\npre .kt {\\n  color: #458;\\n  font-weight: bold;\\n}\\npre .o {\\n  font-weight: bold;\\n}\\n.nodata {\\n  height: 100%;\\n  width: 100%;\\n  padding: 8rem 4rem;\\n  text-align: center;\\n  font-size: 1.5rem;\\n  color: #dadada;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"vq+x\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||\n        matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n\n/***/ }),\n\n/***/ \"x494\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(\"NYxO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_components_description_description__ = __webpack_require__(\"8eAg\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_components_solution_solution__ = __webpack_require__(\"P830\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_components_hints_hints__ = __webpack_require__(\"lUyH\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_components_notes_notes__ = __webpack_require__(\"j09L\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_js_problem__ = __webpack_require__(\"5Ey+\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_common_js_data__ = __webpack_require__(\"DW9A\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      loading: true,\n      problemDetail: {},\n      tab: 'description'\n    };\n  },\n  created: function created() {\n    this._getProblemDetail();\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({\n    _getProblemDetail: function _getProblemDetail() {\n      var _this = this;\n\n      if (!this.problem.id) {\n        this.$router.push('/home');\n        return;\n      }\n      console.log('problem detail id');\n      console.log(this.problem.id);\n      var url = __WEBPACK_IMPORTED_MODULE_8_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id;\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.get(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_8_common_js_data__[\"b\" /* MSG_OK */]) {\n          console.log(response.data.result);\n          _this.problemDetail = response.data.result[0];\n          console.log(_this.problemDetail.id);\n          _this.loading = false;\n        }\n      }, function (response) {\n        _this._getProblemDetail();\n      });\n    },\n    collection: function collection() {\n      if (!this.user.user_id) {\n        this.$notify({\n          title: '无法收藏题目',\n          message: '请先登录',\n          type: 'error'\n        });\n      } else {\n        if (!this.hasCollect(this.problemDetail.id)) {\n          this.saveFavoriteList(new __WEBPACK_IMPORTED_MODULE_7_common_js_problem__[\"a\" /* default */]({\n            id: this.problemDetail.id,\n            title: this.problemDetail.title,\n            tag: this.problemDetail.tag,\n            level: this.problemDetail.level,\n            accepted: this.problemDetail.accepted,\n            submitted: this.problemDetail.submitted\n          }));\n          this.$notify({\n            title: '收藏成功',\n            message: '\\u6536\\u85CF\\u9898\\u76EE:' + this.problemDetail.title,\n            type: 'success'\n          });\n        } else {\n          this.deleteFavoriteList(new __WEBPACK_IMPORTED_MODULE_7_common_js_problem__[\"a\" /* default */]({\n            id: this.problemDetail.id,\n            title: this.problemDetail.title,\n            tag: this.problemDetail.tag,\n            level: this.problemDetail.level,\n            accepted: this.problemDetail.accepted,\n            submitted: this.problemDetail.submitted\n          }));\n          this.$notify.info({\n            title: '取消成功',\n            message: '\\u53D6\\u6D88\\u6536\\u85CF\\u9898\\u76EE:' + this.problemDetail.title\n          });\n        }\n      }\n    },\n    hasCollect: function hasCollect(id) {\n      var index = this.collectionList.findIndex(function (item) {\n        return item.id === id;\n      });\n      return index > -1;\n    },\n    getFavoriteSrc: function getFavoriteSrc(problemDetail) {\n      if (this.user.user_id != null && this.hasCollect(problemDetail.id)) {\n        return 'static/collection.png';\n      } else {\n        return 'static/nocollection.png';\n      }\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"b\" /* mapActions */])(['saveFavoriteList', 'deleteFavoriteList'])),\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])(['problem', 'collectionList', 'user'])),\n  components: {\n    Description: __WEBPACK_IMPORTED_MODULE_3_components_description_description__[\"a\" /* default */],\n    Solution: __WEBPACK_IMPORTED_MODULE_4_components_solution_solution__[\"a\" /* default */],\n    Hints: __WEBPACK_IMPORTED_MODULE_5_components_hints_hints__[\"a\" /* default */],\n    Notes: __WEBPACK_IMPORTED_MODULE_6_components_notes_notes__[\"a\" /* default */]\n  }\n});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.1ec39f0bdb75d46c4d39.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/closetag.js\n// module id = +/ra\n// module chunks = 3 4","<template>\n  <transition name=\"el-fade-in\">\n    <div class=\"notes\">\n      <el-dialog title=\"保存笔记\" :visible.sync=\"noteDialogVisible\">\n        <el-form ref=\"form\" label-width=\"60px\">\n          <el-form-item label=\"文件名:\">\n            <el-input v-model=\"noteName\"></el-input>\n          </el-form-item>\n          <el-radio-group v-model=\"fileType\">\n            <el-radio label=\"0\">保存至云端</el-radio>\n            <el-radio label=\"1\">以txt格式保存</el-radio>\n            <el-radio label=\"2\">以markdown格式保存</el-radio>\n          </el-radio-group>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"noteDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"saveNoteConfirm\">保 存</el-button>\n        </div>\n      </el-dialog>\n      <mavon-editor v-model=\"note\" default_open=\"edit\" placeholder=\"记录学习笔记\"  @save=\"_showSaveNoteDialog\">\n      </mavon-editor>\n    </div>\n  </transition>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import axios from 'axios'\n  import { baseUrl, MSG_OK } from 'common/js/data'\n  import { mapGetters } from 'vuex'\n\n  export default{\n    props: {\n      name: String,\n      default: 'CodeNut笔记'\n    },\n    data() {\n      return {\n        note: '',\n        noteDialogVisible: false,\n        fileType: '1',\n        noteName: this.name + '笔记'\n      }\n    },\n    created(){\n      if (this._checkLogin()) {\n        let url = `${baseUrl}/problems/${this.problem.id}/notes`\n        axios.get(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.note = response.data.result[0].text\n          }\n        }, response => {})\n      }\n    },\n    methods: {\n      _showSaveNoteDialog() {\n        this.noteDialogVisible = true\n      },\n      saveNoteConfirm() {\n        let FileSaver = require('file-saver')\n        let blob = new Blob([this.note], {type: 'text/plain;charset=utf-8'})\n        if (this.fileType === '1') {\n          // Save as .txt\n          FileSaver.saveAs(blob, this.noteName + '.txt')\n        } else if (this.fileType === '2') {\n          FileSaver.saveAs(blob, this.noteName + '.md')\n        } else if (this.fileType === '0') {\n          if (this.note === '' || this.note === undefined) {\n            this.$notify({\n              title: '警告',\n              type: 'warning',\n              message: '笔记不能为空哦!'\n            })\n          } else {\n            if (this._checkLogin()) {\n              this._saveNote()\n            }\n          }\n        }\n        this.noteDialogVisible = false\n      },\n      _saveNote(){\n        let url = `${baseUrl}/problems/${this.problem.id}/notes`\n        axios.put(url, {\n          text: this.note\n        }).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.$notify({\n              title: '成功',\n              type: 'success',\n              message: '保存笔记成功!'\n            })\n          }\n        }, response => {\n          this._saveNote()\n        })\n      },\n      _checkLogin(){\n        if (this.user.user_id == null) {\n          this.$notify({\n            title: '警告',\n            message: '请先登录！',\n            type: 'warning'\n          })\n          return false\n        } else {\n          return true\n        }\n      }\n    },\n    computed: {\n      ...mapGetters([\n        'problem',\n        'user'\n      ])\n    }\n  }\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .notes\n    margin-top 25px\n    height 590px\n    .v-note-wrapper\n      height 500px\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/notes/notes.vue?bfc954ea","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../scroll/annotatescrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../scroll/annotatescrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function(query, caseFold, options) {\n    if (typeof options == \"string\") options = {className: options};\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {listenForChanges: false};\n    for (var prop in options) annotateOptions[prop] = options[prop];\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {from: cm.firstLine(), to: cm.lastLine() + 1};\n    this.matches = [];\n    this.update = null;\n\n    this.findMatches();\n    this.annotation.update(this.matches);\n\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function(_cm, change) { self.onChange(change); });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function() {\n    if (!this.gap) return;\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), this.caseFold);\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n    while (cursor.findNext()) {\n      var match = {from: cursor.from(), to: cursor.to()};\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function(change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {from: change.from.line, to: endLine + 1};\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function() { self.updateAfterChange(); }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function() {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function() {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/matchesonscrollbar.js\n// module id = /A6h\n// module chunks = 3 4","<template>\n  <transition name=\"el-fade-in\">\n    <div>\n      <div class=\"description\" v-html=\"data.description\" v-if=\"data.description\">\n      </div>\n      <my-editor></my-editor>\n    </div>\n  </transition>\n</template>\n\n\n<script type=\"text/ecmascript-6\">\n  //  import Editor from 'components/editor/vueeditor'\n  import MyEditor from 'components/description/myeditor'\n\n  export default {\n    props: {\n      data: {\n        type: Object,\n        default: {}\n      }\n    },\n    components: {\n      MyEditor\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .description\n    border-bottom 1px solid #ddd\n    p\n      margin: 0 0 10px\n      display: block;\n      font-size: 16px;\n      -webkit-margin-before: 1em;\n      -webkit-margin-after: 1em;\n      -webkit-margin-start: 0px;\n      -webkit-margin-end: 0px;\n    pre\n      display: block;\n      padding: 9.5px;\n      margin: 0 0 10px;\n      overflow: auto;\n      font-size: 14px;\n      line-height: 1.9;\n      color: #333;\n      word-break: break-all;\n      word-wrap: break-word;\n      background-color: #F2F2F2;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n      .nf\n        color: #900;\n        font-weight: bold;\n      .na\n        color: teal;\n      .kt\n        color: #458;\n        font-weight: bold;\n      .o\n        font-weight: bold;\n    code\n      padding: 2px 4px;\n      font-size: 90%;\n      color: #c7254e;\n      background-color: #f9f2f4;\n      border-radius: 4px;\n      font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n    b\n      font-weight: 700;\n    ol\n      margin-top: 10px;\n      li\n        font-size: 16px;\n\n  .editor\n    .ql-editor\n      min-height 300px\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/description/description.vue?bd33e31a","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-062a844c\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./hints.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"0c6bc646\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-062a844c\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/hints/hints.vue\n// module id = 1LpH\n// module chunks = 3","<template>\n  <div class=\"myeditor\">\n    <div class=\"myeditor-header\">\n      <el-dropdown trigger=\"click\" @command=\"handleCommandLangage\" menu-align=\"start\" class=\"language-dropdown\">\n        <el-button type=\"primary\">{{selectLanguage}}<i class=\"el-icon-caret-bottom el-icon--right\"></i>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item v-for=\"(item , index) in Languages\" :key=\"index\" :command=\"index\">{{item}}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n\n      <el-dropdown menu-align=\"start\" trigger=\"click\" class=\"el-dropdown-theme\" @command=\"handleCommandTheme\">\n        <el-button type=\"primary\">\n          {{selectTheme}}<i class=\"el-icon-caret-bottom el-icon--right\"></i>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item v-for=\"(item,index) in editorThemes\" :key=\"index\" :command=\"item\">{{item}}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n\n      <el-dropdown menu-align=\"start\" trigger=\"click\" class=\"el-dropdown-keyMap\" @command=\"handleCommandKeyMap\">\n        <el-button type=\"primary\">\n          {{selectkeyMap}}<i class=\"el-icon-caret-bottom el-icon--right\"></i>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item v-for=\"(item,index) in keyMaps\" :key=\"index\" :command=\"item\">{{item}}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n    <codemirror ref=\"myEditor\"\n                v-model=\"code\"\n                :options=\"editorOptions\"\n    >\n    </codemirror>\n    <div class=\"myeditor-footer\">\n      <el-button type=\"success\" class=\"custom-button\" @click=\"onClickCustom\">\n        Custom<i class=\"el-icon-upload el-icon--right\"></i>\n      </el-button>\n      <el-button type=\"success\" class=\"submit-button\" @click=\"onClickSubmit\">\n        Submit<i class=\"el-icon-upload el-icon--right\"></i>\n      </el-button>\n      <el-button type=\"primary\" class=\"run-button\" @click=\"onClickRun\">Run\n      </el-button>\n    </div>\n\n    <div class=\"result-wrapper\" v-show=\"result!==[]\"\n         v-for=\"(item, index) in result\" :key=\"index\"\n         v-loading.fullscreen.lock=\"fullscreenLoading\" element-loading-text=\"正在运行中...\">\n      <div class=\"result-type\">\n        <el-tag type=\"success\" v-show=\"item.mytitle === 'SubmitResult'\">{{item.mytitle}}</el-tag>\n        <el-tag type=\"warning\" v-show=\"item.mytitle === 'RunResult'\">{{item.mytitle}}</el-tag>\n      </div>\n      <span class=\"result-item\">\n        <span class=\"result-item-text\">程序输出</span> {{item.output}}\n      </span>\n      <span class=\"result-item\">\n        <span class=\"result-item-text\">耗费内存</span> {{item.memory_used}}\n      </span>\n      <span class=\"result-item\">\n        <span class=\"result-item-text\">耗费时间</span> {{item.time_used}}\n      </span>\n      <span class=\"result-item\">\n        <span class=\"result-item-text\">运行状态</span> {{item.status}}\n      </span>\n      <img class=\"result-item-img\" src=\"static/target.png\" width=\"32\" height=\"32\" v-show=\"index === (result.length-1)\">\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  // require active-line.js\n  require('codemirror/addon/selection/active-line.js')\n\n  // closebrackets\n  require('codemirror/addon/edit/closebrackets.js')\n\n  // styleSelectedText\n  require('codemirror/addon/selection/mark-selection.js')\n  require('codemirror/addon/search/searchcursor.js')\n\n  // hint\n  require('codemirror/addon/hint/show-hint.js')\n  require('codemirror/addon/hint/javascript-hint.js')\n  require('codemirror/addon/selection/active-line.js')\n\n  // highlightSelectionMatches\n  require('codemirror/addon/scroll/annotatescrollbar.js')\n  require('codemirror/addon/search/matchesonscrollbar.js')\n  require('codemirror/addon/search/searchcursor.js')\n  require('codemirror/addon/search/match-highlighter.js')\n\n  // keyMap\n  require('codemirror/mode/clike/clike.js')\n  require('codemirror/addon/edit/matchbrackets.js')\n  require('codemirror/addon/comment/comment.js')\n  require('codemirror/addon/dialog/dialog.js')\n  require('codemirror/addon/dialog/dialog.css')\n  require('codemirror/addon/search/searchcursor.js')\n  require('codemirror/addon/search/search.js')\n  require('codemirror/keymap/sublime.js')\n  require('codemirror/keymap/emacs.js')\n  require('codemirror/keymap/vim.js')\n\n  // foldGutter\n  require('codemirror/addon/fold/foldgutter.css')\n  require('codemirror/addon/fold/brace-fold.js')\n  require('codemirror/addon/fold/comment-fold.js')\n  require('codemirror/addon/fold/foldcode.js')\n  require('codemirror/addon/fold/foldgutter.js')\n  require('codemirror/addon/fold/indent-fold.js')\n  require('codemirror/addon/fold/markdown-fold.js')\n  require('codemirror/addon/fold/xml-fold.js')\n\n  // autoCloseTags\n  require('codemirror/addon/edit/closetag.js')\n\n  // 语法高亮，自行替换为你需要的语言\n  import 'codemirror/mode/javascript/javascript'\n  import 'codemirror/mode/go/go'\n  import 'codemirror/mode/python/python'\n  import 'codemirror/mode/ruby/ruby'\n  import 'codemirror/mode/clike/clike'\n\n  // Theme\n  import 'codemirror/theme/ambiance.css'\n  import 'codemirror/theme/base16-dark.css'\n  import 'codemirror/theme/cobalt.css'\n  import 'codemirror/theme/paraiso-light.css'\n  import 'codemirror/theme/paraiso-dark.css'\n  import 'codemirror/theme/rubyblue.css'\n  import 'codemirror/theme/solarized.css'\n  import 'codemirror/theme/mbo.css'\n\n  import { MSG_OK, MSG_NO, baseUrl, editorThemes, keyMaps, editorModes, languages, templateCodes } from 'common/js/data'\n  import axios from 'axios'\n  import { mapGetters } from 'vuex'\n  import ReturnResult from 'common/js/ReturnResult'\n\n  export default {\n    data() {\n      return {\n        code: '',\n        templateCodes: templateCodes,\n        Languages: languages,\n        editorModes: editorModes,\n        selectLanguage: languages[0],\n        editorThemes: editorThemes,\n        selectTheme: editorThemes[0],\n        keyMaps: keyMaps,\n        selectkeyMap: keyMaps[0],\n        editorOptions: {\n          tabSize: 4,\n          mode: 'text/x-csrc',\n          theme: 'default',\n          lineNumbers: true,\n          line: true,\n          keyMap: 'sublime',\n          foldGutter: true,\n          gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n          // 选中文本自动高亮，及高亮方式\n          styleSelectedText: true,\n          highlightSelectionMatches: {showToken: /\\w/, annotateScrollbar: true}\n          // 如果有hint方面的配置，也应该出现在这里\n        },\n        result: [],\n        fullscreenLoading: false\n      }\n    },\n    created(){\n      this._getTempletCode(this.selectLanguage)\n    },\n    methods: {\n      handleCommandLangage(command) {\n        // 这里的command 是 index\n        console.log('xuan ' + command)\n        this.editorOptions.mode = this.editorModes[command]\n        this.selectLanguage = this.Languages[command]\n        this._getTempletCode(this.selectLanguage)\n      },\n      _getTempletCode(selectLanguage){\n        let url = `${baseUrl}/problems/${this.problem.id}/codes`\n        axios.get(url).then(response => {\n          let result = JSON.parse(response.data.result[0].code)\n          console.log(result)\n          let templet = result.find((item) => {\n            if (item) {\n              return item.text === selectLanguage\n            }\n          })\n          if (templet && templet.defaultCode) {\n            this.code = templet.defaultCode\n          } else {\n            this.code = ''\n          }\n        }, response => {})\n      },\n      handleCommandKeyMap(command) {\n        this.editorOptions.keyMap = command\n        this.selectkeyMap = command\n        console.log(this.editorOptions)\n      },\n      handleCommandTheme(command) {\n        console.log('click on item ' + command)\n        this.editorOptions.theme = command\n        this.selectTheme = command\n      },\n      onClickSubmit(){\n        if (!this._checkLogin()) {\n          return\n        }\n        let url = `${baseUrl}/problems/${this.problem.id}/codes`\n        axios.post(url, {\n          language: this.selectLanguage,\n          code: this.code\n        }).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.result.push(new ReturnResult({\n              mytitle: 'SubmitResult',\n              memory_used: response.data.result[0].memory_used.toFixed(4) + ' M',\n              output: response.data.result[0].output,\n              status: response.data.result[0].status,\n              time_used: response.data.result[0].time_used.toFixed(4) + ' s'\n            }))\n            this._showLoading()\n            console.log(this.result)\n          } else if (response.data.mag === MSG_NO) {\n            this.$notify.error({\n              title: '错误',\n              message: response.data.error\n            })\n          }\n        }, response => {})\n      },\n      onClickRun(){\n        if (!this._checkLogin()) {\n          return\n        }\n        console.log(this.code)\n        let url = `${baseUrl}/problems/${this.problem.id}/codes`\n        axios.patch(url, {\n          language: this.selectLanguage,\n          code: this.code\n        }).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.result.push(new ReturnResult({\n              mytitle: 'RunResult',\n              memory_used: response.data.result[0].memory_used.toFixed(4) + ' M',\n              output: response.data.result[0].output,\n              status: response.data.result[0].status,\n              time_used: response.data.result[0].time_used.toFixed(4) + ' s'\n            }))\n            this._showLoading()\n            console.log(response.data.result[0])\n          } else if (response.data.mag === MSG_NO) {\n            this.$notify.error({\n              title: '错误',\n              message: response.data.error\n            })\n          }\n        }, response => {})\n      },\n      onClickCustom(){\n        let url = `${baseUrl}/problems/${this.problem.id}/codes`\n        axios.get(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            let str = JSON.parse(response.data.result[0].code)\n            console.log(str)\n          }\n        }, response => {})\n      },\n      _checkLogin(){\n        if (this.user.user_id == null || this.user.user_id === '') {\n          this.$notify({\n            title: '警告',\n            message: '请先登录！',\n            type: 'warning'\n          })\n          return false\n        } else {\n          return true\n        }\n      },\n      _showLoading() {\n        this.fullscreenLoading = true\n        setTimeout(() => {\n          this.fullscreenLoading = false\n        }, 2000)\n      }\n    },\n    computed: {\n      ...mapGetters([\n        'problem',\n        'user'\n      ])\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .myeditor\n    margin-top 20px\n    .myeditor-header\n       margin-bottom 12px\n      .language-dropdown\n        .el-dropdown-menu__item\n          padding 0 5px\n      .el-dropdown-theme\n        float right\n      .el-dropdown-keyMap\n        float right\n        margin-right 8px\n    .CodeMirror\n      height 400px\n    .myeditor-footer\n      padding 20px 0 0 0\n      height 100px\n      width 100%\n      .custom-button\n        float left\n        margin-right 10px\n        width 150px\n      .run-button\n        float right\n        margin-right 10px\n        width 150px\n      .submit-button\n        float right\n        width 150px\n    .result-wrapper\n      display flex\n      margin-top -1px\n      padding 10px 0\n      border-bottom 1px solid #ddd\n      border-top 1px solid #ddd\n      .result-type\n        flex 1 1 auto\n        display inline-block\n        .el-tag\n          margin-top 4px\n          font-size: 18px;\n      .result-item\n        flex 1 1 auto\n        .result-item-text\n          font-size 18px\n          font-weight 600\n          margin 0 5px\n          line-height 30px\n          color: #9E9E9E\n      .result-item-img\n        vertical-align middle\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/description/myeditor.vue?199fa3dc","<template>\n  <transition name=\"el-fade-in\">\n    <div>\n      <div class=\"solution\" v-if=\"solution\" v-html=\"solution\">\n      </div>\n      <div class=\"nodata\" v-show=\"!solution || solution === {}\">\n        No solution at the moment\n      </div>\n    </div>\n  </transition>\n</template>\n\n\n<script type=\"text/ecmascript-6\">\n  import axios from 'axios'\n  import { baseUrl, MSG_OK } from 'common/js/data'\n  import { mapGetters } from 'vuex'\n\n  export default {\n    data() {\n      return {\n        solution: {}\n      }\n    },\n    mounted() {\n      this._getSolution()\n    },\n    methods: {\n      _getSolution() {\n        console.log(this.id + '1111111111')\n        let url = `${baseUrl}/problems/${this.problem.id}/solutions`\n        axios.get(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            console.log(response.data.result[0])\n            this.solution = response.data.result[0].solution\n          }\n        }, response => {\n        })\n      }\n    },\n    computed: {\n      ...mapGetters([\n        'problem'\n      ])\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .solution\n    background #F2F2F2;\n    line-height: 1.7;\n    .toc\n      display: table;\n      border: 1px solid #aaa;\n      background-color: #f9f9f9;\n      padding: 7px 25px 3px 7px;\n      margin-top: 50px;\n      font-size: 95%;\n      ul\n        margin-top: 0;\n        margin-bottom: 10px;\n      a\n        href '#'\n        color: #08c;\n        text-decoration: none;\n\n  h2\n    font-size: 1.75em;\n    font-weight: 700;\n    margin-top: 1.275em;\n    margin-bottom: .85em;\n    line-height: 1.7;\n\n  h4\n    font-size: 1.25em;\n    font-weight: 700;\n    margin-top: 1.275em;\n    margin-bottom: .85em;\n    line-height: 1.7;\n\n  hr\n    height: 4px;\n    padding: 0;\n    margin: 1.7em 0;\n    overflow: hidden;\n    background-color: #e7e7e7;\n    border: none;\n\n  p\n    margin: 0 0 10px;\n    display: block;\n    -webkit-margin-before: 1em;\n    -webkit-margin-after: 1em;\n    -webkit-margin-start: 0px;\n    -webkit-margin-end: 0px;\n    font-size 16px\n    font-weight: 400;\n\n  code\n    padding: 2px 4px;\n    font-size: 90%;\n    color: #c7254e;\n    background-color: #f9f2f4;\n    border-radius: 4px;\n\n  b, strong\n    font-weight: 700;\n\n  pre\n    display: block;\n    padding: 9.5px;\n    margin: 0 0 10px;\n    overflow: auto;\n    font-size: 14px;\n    line-height: 1.9;\n    color: #333;\n    word-break: break-all;\n    word-wrap: break-word;\n    background-color: #f2f2f2;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n    .nf\n      color: #900;\n      font-weight: bold;\n    .na\n      color: teal;\n    .kt\n      color: #458;\n      font-weight: bold;\n    .o\n      font-weight: bold;\n\n  .nodata\n    height 100%\n    width 100%\n    padding: 8rem 4rem;\n    text-align: center;\n    font-size: 1.5rem;\n    color: #dadada;\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/solution/solution.vue?7952a341","/**\n * Created by qinzhen on 2017/9/17.\n */\nexport default class Problem {\n  constructor ({id, title, tag, level, description, accepted, submitted, like_nums, hate_nums}) {\n    this.id = id\n    this.title = title\n    this.tag = tag\n    this.level = level\n    this.description = description\n    this.accepted = accepted\n    this.submitted = submitted\n    this.like_nums = like_nums\n    this.hate_nums = hate_nums\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/js/problem.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"hint-wrapper\"\n  }, [_c('div', {\n    staticClass: \"placeholder-text\"\n  }, [_c('div', {\n    staticClass: \"text\"\n  }, [_vm._v(\"We do not have any hints for this question at the moment.\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"suggest\"\n  }, [_vm._v(\"Do you have one or more hints?\")])])])\n}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-062a844c\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/hints/hints.vue\n// module id = 6rPU\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// A rough approximation of Sublime Text's keybindings\n// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/edit/matchbrackets\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var map = CodeMirror.keyMap.sublime = {fallthrough: \"default\"};\n  var cmds = CodeMirror.commands;\n  var Pos = CodeMirror.Pos;\n  var mac = CodeMirror.keyMap[\"default\"] == CodeMirror.keyMap.macDefault;\n  var ctrl = mac ? \"Cmd-\" : \"Ctrl-\";\n\n  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.\n  function findPosSubword(doc, start, dir) {\n    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n    var line = doc.getLine(start.line);\n    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n    var state = \"start\", type;\n    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n      var cat = next != \"_\" && CodeMirror.isWordChar(next) ? \"w\" : \"o\";\n      if (cat == \"w\" && next.toUpperCase() == next) cat = \"W\";\n      if (state == \"start\") {\n        if (cat != \"o\") { state = \"in\"; type = cat; }\n      } else if (state == \"in\") {\n        if (type != cat) {\n          if (type == \"w\" && cat == \"W\" && dir < 0) pos--;\n          if (type == \"W\" && cat == \"w\" && dir > 0) { type = \"w\"; continue; }\n          break;\n        }\n      }\n    }\n    return Pos(start.line, pos);\n  }\n\n  function moveSubword(cm, dir) {\n    cm.extendSelectionsBy(function(range) {\n      if (cm.display.shift || cm.doc.extend || range.empty())\n        return findPosSubword(cm.doc, range.head, dir);\n      else\n        return dir < 0 ? range.from() : range.to();\n    });\n  }\n\n  var goSubwordCombo = mac ? \"Ctrl-\" : \"Alt-\";\n\n  cmds[map[goSubwordCombo + \"Left\"] = \"goSubwordLeft\"] = function(cm) { moveSubword(cm, -1); };\n  cmds[map[goSubwordCombo + \"Right\"] = \"goSubwordRight\"] = function(cm) { moveSubword(cm, 1); };\n\n  if (mac) map[\"Cmd-Left\"] = \"goLineStartSmart\";\n\n  var scrollLineCombo = mac ? \"Ctrl-Alt-\" : \"Ctrl-\";\n\n  cmds[map[scrollLineCombo + \"Up\"] = \"scrollLineUp\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, \"local\");\n      if (cm.getCursor().line >= visibleBottomLine)\n        cm.execCommand(\"goLineUp\");\n    }\n    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n  };\n  cmds[map[scrollLineCombo + \"Down\"] = \"scrollLineDown\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleTopLine = cm.lineAtHeight(info.top, \"local\")+1;\n      if (cm.getCursor().line <= visibleTopLine)\n        cm.execCommand(\"goLineDown\");\n    }\n    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"L\"] = \"splitSelectionByLine\"] = function(cm) {\n    var ranges = cm.listSelections(), lineRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      for (var line = from.line; line <= to.line; ++line)\n        if (!(to.line > from.line && line == to.line && to.ch == 0))\n          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n                           head: line == to.line ? to : Pos(line)});\n    }\n    cm.setSelections(lineRanges, 0);\n  };\n\n  map[\"Shift-Tab\"] = \"indentLess\";\n\n  cmds[map[\"Esc\"] = \"singleSelectionTop\"] = function(cm) {\n    var range = cm.listSelections()[0];\n    cm.setSelection(range.anchor, range.head, {scroll: false});\n  };\n\n  cmds[map[ctrl + \"L\"] = \"selectLine\"] = function(cm) {\n    var ranges = cm.listSelections(), extended = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      extended.push({anchor: Pos(range.from().line, 0),\n                     head: Pos(range.to().line + 1, 0)});\n    }\n    cm.setSelections(extended);\n  };\n\n  map[\"Shift-Ctrl-K\"] = \"deleteLine\";\n\n  function insertLine(cm, above) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    cm.operation(function() {\n      var len = cm.listSelections().length, newSelection = [], last = -1;\n      for (var i = 0; i < len; i++) {\n        var head = cm.listSelections()[i].head;\n        if (head.line <= last) continue;\n        var at = Pos(head.line + (above ? 0 : 1), 0);\n        cm.replaceRange(\"\\n\", at, null, \"+insertLine\");\n        cm.indentLine(at.line, null, true);\n        newSelection.push({head: at, anchor: at});\n        last = head.line + 1;\n      }\n      cm.setSelections(newSelection);\n    });\n    cm.execCommand(\"indentAuto\");\n  }\n\n  cmds[map[ctrl + \"Enter\"] = \"insertLineAfter\"] = function(cm) { return insertLine(cm, false); };\n\n  cmds[map[\"Shift-\" + ctrl + \"Enter\"] = \"insertLineBefore\"] = function(cm) { return insertLine(cm, true); };\n\n  function wordAt(cm, pos) {\n    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n  }\n\n  cmds[map[ctrl + \"D\"] = \"selectNextOccurrence\"] = function(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      cm.setSelection(word.from, word.to);\n      fullWord = true;\n    } else {\n      var text = cm.getRange(from, to);\n      var query = fullWord ? new RegExp(\"\\\\b\" + text + \"\\\\b\") : text;\n      var cur = cm.getSearchCursor(query, to);\n      var found = cur.findNext();\n      if (!found) {\n        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n        found = cur.findNext();\n      }\n      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n        return CodeMirror.Pass\n      cm.addSelection(cur.from(), cur.to());\n    }\n    if (fullWord)\n      cm.state.sublimeFindFullWord = cm.doc.sel;\n  };\n\n  function addCursorToSelection(cm, dir) {\n    var ranges = cm.listSelections(), newRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var newAnchor = cm.findPosV(range.anchor, dir, \"line\");\n      var newHead = cm.findPosV(range.head, dir, \"line\");\n      var newRange = {anchor: newAnchor, head: newHead};\n      newRanges.push(range);\n      newRanges.push(newRange);\n    }\n    cm.setSelections(newRanges);\n  }\n\n  var addCursorToLineCombo = mac ? \"Shift-Cmd\" : 'Alt-Ctrl';\n  cmds[map[addCursorToLineCombo + \"Up\"] = \"addCursorToPrevLine\"] = function(cm) { addCursorToSelection(cm, -1); };\n  cmds[map[addCursorToLineCombo + \"Down\"] = \"addCursorToNextLine\"] = function(cm) { addCursorToSelection(cm, 1); };\n\n  function isSelectedRange(ranges, from, to) {\n    for (var i = 0; i < ranges.length; i++)\n      if (ranges[i].from() == from && ranges[i].to() == to) return true\n    return false\n  }\n\n  var mirror = \"(){}[]\";\n  function selectBetweenBrackets(cm) {\n    var ranges = cm.listSelections(), newRanges = []\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n      if (!opening) return false;\n      for (;;) {\n        var closing = cm.scanForBracket(pos, 1);\n        if (!closing) return false;\n        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n          newRanges.push({anchor: Pos(opening.pos.line, opening.pos.ch + 1),\n                          head: closing.pos});\n          break;\n        }\n        pos = Pos(closing.pos.line, closing.pos.ch + 1);\n      }\n    }\n    cm.setSelections(newRanges);\n    return true;\n  }\n\n  cmds[map[\"Shift-\" + ctrl + \"Space\"] = \"selectScope\"] = function(cm) {\n    selectBetweenBrackets(cm) || cm.execCommand(\"selectAll\");\n  };\n  cmds[map[\"Shift-\" + ctrl + \"M\"] = \"selectBetweenBrackets\"] = function(cm) {\n    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n  };\n\n  cmds[map[ctrl + \"M\"] = \"goToBracket\"] = function(cm) {\n    cm.extendSelectionsBy(function(range) {\n      var next = cm.scanForBracket(range.head, 1);\n      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n      var prev = cm.scanForBracket(range.head, -1);\n      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n    });\n  };\n\n  var swapLineCombo = mac ? \"Cmd-Ctrl-\" : \"Shift-Ctrl-\";\n\n  cmds[map[swapLineCombo + \"Up\"] = \"swapLineUp\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n                    head: Pos(range.head.line - 1, range.head.ch)});\n      if (range.to().ch == 0 && !range.empty()) --to;\n      if (from > at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = 0; i < linesToMove.length; i += 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        if (to > cm.lastLine())\n          cm.replaceRange(\"\\n\" + line, Pos(cm.lastLine()), null, \"+swapLine\");\n        else\n          cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.setSelections(newSels);\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[swapLineCombo + \"Down\"] = \"swapLineDown\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n      if (range.to().ch == 0 && !range.empty()) from--;\n      if (from < at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        if (from == cm.lastLine())\n          cm.replaceRange(\"\", Pos(from - 1), Pos(from), \"+swapLine\");\n        else\n          cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[ctrl + \"/\"] = \"toggleCommentIndented\"] = function(cm) {\n    cm.toggleComment({ indent: true });\n  }\n\n  cmds[map[ctrl + \"J\"] = \"joinLines\"] = function(cm) {\n    var ranges = cm.listSelections(), joined = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from();\n      var start = from.line, end = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n        end = ranges[++i].to().line;\n      joined.push({start: start, end: end, anchor: !range.empty() && from});\n    }\n    cm.operation(function() {\n      var offset = 0, ranges = [];\n      for (var i = 0; i < joined.length; i++) {\n        var obj = joined[i];\n        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n        for (var line = obj.start; line <= obj.end; line++) {\n          var actual = line - offset;\n          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n          if (actual < cm.lastLine()) {\n            cm.replaceRange(\" \", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n            ++offset;\n          }\n        }\n        ranges.push({anchor: anchor || head, head: head});\n      }\n      cm.setSelections(ranges, 0);\n    });\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"D\"] = \"duplicateLine\"] = function(cm) {\n    cm.operation(function() {\n      var rangeCount = cm.listSelections().length;\n      for (var i = 0; i < rangeCount; i++) {\n        var range = cm.listSelections()[i];\n        if (range.empty())\n          cm.replaceRange(cm.getLine(range.head.line) + \"\\n\", Pos(range.head.line, 0));\n        else\n          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  if (!mac) map[ctrl + \"T\"] = \"transposeChars\";\n\n  function sortLines(cm, caseSensitive) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), toSort = [], selected;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      if (range.empty()) continue;\n      var from = range.from().line, to = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n        to = ranges[++i].to().line;\n      if (!ranges[i].to().ch) to--;\n      toSort.push(from, to);\n    }\n    if (toSort.length) selected = true;\n    else toSort.push(cm.firstLine(), cm.lastLine());\n\n    cm.operation(function() {\n      var ranges = [];\n      for (var i = 0; i < toSort.length; i += 2) {\n        var from = toSort[i], to = toSort[i + 1];\n        var start = Pos(from, 0), end = Pos(to);\n        var lines = cm.getRange(start, end, false);\n        if (caseSensitive)\n          lines.sort();\n        else\n          lines.sort(function(a, b) {\n            var au = a.toUpperCase(), bu = b.toUpperCase();\n            if (au != bu) { a = au; b = bu; }\n            return a < b ? -1 : a == b ? 0 : 1;\n          });\n        cm.replaceRange(lines, start, end);\n        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});\n      }\n      if (selected) cm.setSelections(ranges, 0);\n    });\n  }\n\n  cmds[map[\"F9\"] = \"sortLines\"] = function(cm) { sortLines(cm, true); };\n  cmds[map[ctrl + \"F9\"] = \"sortLinesInsensitive\"] = function(cm) { sortLines(cm, false); };\n\n  cmds[map[\"F2\"] = \"nextBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      var current = marks.shift();\n      var found = current.find();\n      if (found) {\n        marks.push(current);\n        return cm.setSelection(found.from, found.to);\n      }\n    }\n  };\n\n  cmds[map[\"Shift-F2\"] = \"prevBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      marks.unshift(marks.pop());\n      var found = marks[marks.length - 1].find();\n      if (!found)\n        marks.pop();\n      else\n        return cm.setSelection(found.from, found.to);\n    }\n  };\n\n  cmds[map[ctrl + \"F2\"] = \"toggleBookmark\"] = function(cm) {\n    var ranges = cm.listSelections();\n    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      var found = cm.findMarks(from, to);\n      for (var j = 0; j < found.length; j++) {\n        if (found[j].sublimeBookmark) {\n          found[j].clear();\n          for (var k = 0; k < marks.length; k++)\n            if (marks[k] == found[j])\n              marks.splice(k--, 1);\n          break;\n        }\n      }\n      if (j == found.length)\n        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n    }\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"F2\"] = \"clearBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    marks.length = 0;\n  };\n\n  cmds[map[\"Alt-F2\"] = \"selectBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks, ranges = [];\n    if (marks) for (var i = 0; i < marks.length; i++) {\n      var found = marks[i].find();\n      if (!found)\n        marks.splice(i--, 0);\n      else\n        ranges.push({anchor: found.from, head: found.to});\n    }\n    if (ranges.length)\n      cm.setSelections(ranges, 0);\n  };\n\n  map[\"Alt-Q\"] = \"wrapLines\";\n\n  var cK = ctrl + \"K \";\n\n  function modifyWordOrSelection(cm, mod) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), indices = [], replacements = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) { indices.push(i); replacements.push(\"\"); }\n        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n      }\n      cm.replaceSelections(replacements, \"around\", \"case\");\n      for (var i = indices.length - 1, at; i >= 0; i--) {\n        var range = ranges[indices[i]];\n        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n        var word = wordAt(cm, range.head);\n        at = word.from;\n        cm.replaceRange(mod(word.word), word.from, word.to);\n      }\n    });\n  }\n\n  map[cK + ctrl + \"Backspace\"] = \"delLineLeft\";\n\n  cmds[map[\"Backspace\"] = \"smartBackspace\"] = function(cm) {\n    if (cm.somethingSelected()) return CodeMirror.Pass;\n\n    cm.operation(function() {\n      var cursors = cm.listSelections();\n      var indentUnit = cm.getOption(\"indentUnit\");\n\n      for (var i = cursors.length - 1; i >= 0; i--) {\n        var cursor = cursors[i].head;\n        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption(\"tabSize\"));\n\n        // Delete by one character by default\n        var deletePos = cm.findPosH(cursor, -1, \"char\", false);\n\n        if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n          var prevIndent = new Pos(cursor.line,\n            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n\n          // Smart delete only if we found a valid prevIndent location\n          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;\n        }\n\n        cm.replaceRange(\"\", deletePos, cursor, \"+delete\");\n      }\n    });\n  };\n\n  cmds[map[cK + ctrl + \"K\"] = \"delLineRight\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(\"\", ranges[i].anchor, Pos(ranges[i].to().line), \"+delete\");\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[cK + ctrl + \"U\"] = \"upcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n  };\n  cmds[map[cK + ctrl + \"L\"] = \"downcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n  };\n\n  cmds[map[cK + ctrl + \"Space\"] = \"setSublimeMark\"] = function(cm) {\n    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n  };\n  cmds[map[cK + ctrl + \"A\"] = \"selectToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) cm.setSelection(cm.getCursor(), found);\n  };\n  cmds[map[cK + ctrl + \"W\"] = \"deleteToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      var from = cm.getCursor(), to = found;\n      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n      cm.state.sublimeKilled = cm.getRange(from, to);\n      cm.replaceRange(\"\", from, to);\n    }\n  };\n  cmds[map[cK + ctrl + \"X\"] = \"swapWithSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n      cm.setCursor(found);\n    }\n  };\n  cmds[map[cK + ctrl + \"Y\"] = \"sublimeYank\"] = function(cm) {\n    if (cm.state.sublimeKilled != null)\n      cm.replaceSelection(cm.state.sublimeKilled, null, \"paste\");\n  };\n\n  map[cK + ctrl + \"G\"] = \"clearBookmarks\";\n  cmds[map[cK + ctrl + \"C\"] = \"showInCenter\"] = function(cm) {\n    var pos = cm.cursorCoords(null, \"local\");\n    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n  };\n\n  var selectLinesCombo = mac ? \"Ctrl-Shift-\" : \"Ctrl-Alt-\";\n  cmds[map[selectLinesCombo + \"Up\"] = \"selectLinesUpward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line > cm.firstLine())\n          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n      }\n    });\n  };\n  cmds[map[selectLinesCombo + \"Down\"] = \"selectLinesDownward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line < cm.lastLine())\n          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n      }\n    });\n  };\n\n  function getTarget(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      from = word.from;\n      to = word.to;\n    }\n    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n  }\n\n  function findAndGoTo(cm, forward) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var query = target.query;\n    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n\n    if (forward ? cur.findNext() : cur.findPrevious()) {\n      cm.setSelection(cur.from(), cur.to());\n    } else {\n      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n                                              : cm.clipPos(Pos(cm.lastLine())));\n      if (forward ? cur.findNext() : cur.findPrevious())\n        cm.setSelection(cur.from(), cur.to());\n      else if (target.word)\n        cm.setSelection(target.from, target.to);\n    }\n  };\n  cmds[map[ctrl + \"F3\"] = \"findUnder\"] = function(cm) { findAndGoTo(cm, true); };\n  cmds[map[\"Shift-\" + ctrl + \"F3\"] = \"findUnderPrevious\"] = function(cm) { findAndGoTo(cm,false); };\n  cmds[map[\"Alt-F3\"] = \"findAllUnder\"] = function(cm) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var cur = cm.getSearchCursor(target.query);\n    var matches = [];\n    var primaryIndex = -1;\n    while (cur.findNext()) {\n      matches.push({anchor: cur.from(), head: cur.to()});\n      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n        primaryIndex++;\n    }\n    cm.setSelections(matches, primaryIndex);\n  };\n\n  map[\"Shift-\" + ctrl + \"[\"] = \"fold\";\n  map[\"Shift-\" + ctrl + \"]\"] = \"unfold\";\n  map[cK + ctrl + \"0\"] = map[cK + ctrl + \"J\"] = \"unfoldAll\";\n\n  map[ctrl + \"I\"] = \"findIncremental\";\n  map[\"Shift-\" + ctrl + \"I\"] = \"findIncrementalReverse\";\n  map[ctrl + \"H\"] = \"replace\";\n  map[\"F3\"] = \"findNext\";\n  map[\"Shift-F3\"] = \"findPrev\";\n\n  CodeMirror.normalizeKeyMap(map);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/sublime.js\n// module id = 7Xsf\n// module chunks = 3 4","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4dfc5728\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./description.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./description.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4dfc5728\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./description.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/description/description.vue\n// module id = 8eAg\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".hint-wrapper{width:100%;height:100%}.hint-wrapper .placeholder-text{padding:8rem 4rem;text-align:center;font-size:1.5rem;color:#dadada}.hint-wrapper .placeholder-text .suggest{margin-top:30px;color:gray}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/hints/hints.vue\"],\"names\":[],\"mappings\":\"AACA,cACE,WAAY,AACZ,WAAa,CACd,AACD,gCACE,kBAAmB,AACnB,kBAAmB,AACnB,iBAAkB,AAClB,aAAe,CAChB,AACD,yCACE,gBAAiB,AACjB,UAAe,CAChB\",\"file\":\"hints.vue\",\"sourcesContent\":[\"\\n.hint-wrapper {\\n  width: 100%;\\n  height: 100%;\\n}\\n.hint-wrapper .placeholder-text {\\n  padding: 8rem 4rem;\\n  text-align: center;\\n  font-size: 1.5rem;\\n  color: #dadada;\\n}\\n.hint-wrapper .placeholder-text .suggest {\\n  margin-top: 30px;\\n  color: #808080;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-062a844c\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/hints/hints.vue\n// module id = 8f5d\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4dfc5728\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./description.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"20d5e0bc\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-4dfc5728\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/description/description.vue\n// module id = AF7c\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-58438f59\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./myeditor.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"722f1804\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-58438f59\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/description/myeditor.vue\n// module id = ArdA\n// module chunks = 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"myeditor\"\n  }, [_c('div', {\n    staticClass: \"myeditor-header\"\n  }, [_c('el-dropdown', {\n    staticClass: \"language-dropdown\",\n    attrs: {\n      \"trigger\": \"click\",\n      \"menu-align\": \"start\"\n    },\n    on: {\n      \"command\": _vm.handleCommandLangage\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(_vm._s(_vm.selectLanguage)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": index\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n        \")])\n  }))], 1), _vm._v(\" \"), _c('el-dropdown', {\n    staticClass: \"el-dropdown-theme\",\n    attrs: {\n      \"menu-align\": \"start\",\n      \"trigger\": \"click\"\n    },\n    on: {\n      \"command\": _vm.handleCommandTheme\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(\"\\n        \" + _vm._s(_vm.selectTheme)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.editorThemes), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": item\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n        \")])\n  }))], 1), _vm._v(\" \"), _c('el-dropdown', {\n    staticClass: \"el-dropdown-keyMap\",\n    attrs: {\n      \"menu-align\": \"start\",\n      \"trigger\": \"click\"\n    },\n    on: {\n      \"command\": _vm.handleCommandKeyMap\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(\"\\n        \" + _vm._s(_vm.selectkeyMap)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.keyMaps), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": item\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n        \")])\n  }))], 1)], 1), _vm._v(\" \"), _c('codemirror', {\n    ref: \"myEditor\",\n    attrs: {\n      \"options\": _vm.editorOptions\n    },\n    model: {\n      value: (_vm.code),\n      callback: function($$v) {\n        _vm.code = $$v\n      },\n      expression: \"code\"\n    }\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"myeditor-footer\"\n  }, [_c('el-button', {\n    staticClass: \"custom-button\",\n    attrs: {\n      \"type\": \"success\"\n    },\n    on: {\n      \"click\": _vm.onClickCustom\n    }\n  }, [_vm._v(\"\\n      Custom\"), _c('i', {\n    staticClass: \"el-icon-upload el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"submit-button\",\n    attrs: {\n      \"type\": \"success\"\n    },\n    on: {\n      \"click\": _vm.onClickSubmit\n    }\n  }, [_vm._v(\"\\n      Submit\"), _c('i', {\n    staticClass: \"el-icon-upload el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"run-button\",\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.onClickRun\n    }\n  }, [_vm._v(\"Run\\n    \")])], 1), _vm._v(\" \"), _vm._l((_vm.result), function(item, index) {\n    return _c('div', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (_vm.result !== []),\n        expression: \"result!==[]\"\n      }, {\n        name: \"loading\",\n        rawName: \"v-loading.fullscreen.lock\",\n        value: (_vm.fullscreenLoading),\n        expression: \"fullscreenLoading\",\n        modifiers: {\n          \"fullscreen\": true,\n          \"lock\": true\n        }\n      }],\n      key: index,\n      staticClass: \"result-wrapper\",\n      attrs: {\n        \"element-loading-text\": \"正在运行中...\"\n      }\n    }, [_c('div', {\n      staticClass: \"result-type\"\n    }, [_c('el-tag', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (item.mytitle === 'SubmitResult'),\n        expression: \"item.mytitle === 'SubmitResult'\"\n      }],\n      attrs: {\n        \"type\": \"success\"\n      }\n    }, [_vm._v(_vm._s(item.mytitle))]), _vm._v(\" \"), _c('el-tag', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (item.mytitle === 'RunResult'),\n        expression: \"item.mytitle === 'RunResult'\"\n      }],\n      attrs: {\n        \"type\": \"warning\"\n      }\n    }, [_vm._v(_vm._s(item.mytitle))])], 1), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"程序输出\")]), _vm._v(\" \" + _vm._s(item.output) + \"\\n    \")]), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"耗费内存\")]), _vm._v(\" \" + _vm._s(item.memory_used) + \"\\n    \")]), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"耗费时间\")]), _vm._v(\" \" + _vm._s(item.time_used) + \"\\n    \")]), _vm._v(\" \"), _c('span', {\n      staticClass: \"result-item\"\n    }, [_c('span', {\n      staticClass: \"result-item-text\"\n    }, [_vm._v(\"运行状态\")]), _vm._v(\" \" + _vm._s(item.status) + \"\\n    \")]), _vm._v(\" \"), _c('img', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (index === (_vm.result.length - 1)),\n        expression: \"index === (result.length-1)\"\n      }],\n      staticClass: \"result-item-img\",\n      attrs: {\n        \"src\": \"static/target.png\",\n        \"width\": \"32\",\n        \"height\": \"32\"\n      }\n    })])\n  })], 2)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-58438f59\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/description/myeditor.vue\n// module id = C3SF\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  var queryDialog =\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  var replaceQueryDialog =\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/search.js\n// module id = CK2l\n// module chunks = 3 4","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in\"\n    }\n  }, [_c('div', [(_vm.data.description) ? _c('div', {\n    staticClass: \"description\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.data.description)\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('my-editor')], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4dfc5728\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/description/description.vue\n// module id = D/Ep\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".myeditor{margin-top:20px}.myeditor .myeditor-header{margin-bottom:12px}.myeditor .language-dropdown .el-dropdown-menu__item{padding:0 5px}.myeditor .el-dropdown-theme{float:right}.myeditor .el-dropdown-keyMap{float:right;margin-right:8px}.myeditor .CodeMirror{height:400px}.myeditor .myeditor-footer{padding:20px 0 0;height:100px;width:100%}.myeditor .myeditor-footer .custom-button{float:left;margin-right:10px;width:150px}.myeditor .myeditor-footer .run-button{float:right;margin-right:10px;width:150px}.myeditor .myeditor-footer .submit-button{float:right;width:150px}.myeditor .result-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;margin-top:-1px;padding:10px 0;border-bottom:1px solid #ddd;border-top:1px solid #ddd}.myeditor .result-wrapper .result-type{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;display:inline-block}.myeditor .result-wrapper .result-type .el-tag{margin-top:4px;font-size:18px}.myeditor .result-wrapper .result-item{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.myeditor .result-wrapper .result-item .result-item-text{font-size:18px;font-weight:600;margin:0 5px;line-height:30px;color:#9e9e9e}.myeditor .result-wrapper .result-item-img{vertical-align:middle}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/description/myeditor.vue\"],\"names\":[],\"mappings\":\"AACA,UACE,eAAiB,CAClB,AACD,2BACE,kBAAoB,CACrB,AACD,qDACE,aAAe,CAChB,AACD,6BACE,WAAa,CACd,AACD,8BACE,YAAa,AACb,gBAAkB,CACnB,AACD,sBACE,YAAc,CACf,AACD,2BACE,iBAAoB,AACpB,aAAc,AACd,UAAY,CACb,AACD,0CACE,WAAY,AACZ,kBAAmB,AACnB,WAAa,CACd,AACD,uCACE,YAAa,AACb,kBAAmB,AACnB,WAAa,CACd,AACD,0CACE,YAAa,AACb,WAAa,CACd,AACD,0BACE,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,gBAAiB,AACjB,eAAgB,AAChB,6BAA8B,AAC9B,yBAA2B,CAC5B,AACD,uCACE,mBAAoB,AAChB,kBAAmB,AACf,cAAe,AACvB,oBAAsB,CACvB,AACD,+CACE,eAAgB,AAChB,cAAgB,CACjB,AACD,uCACE,mBAAoB,AAChB,kBAAmB,AACf,aAAe,CACxB,AACD,yDACE,eAAgB,AAChB,gBAAiB,AACjB,aAAc,AACd,iBAAkB,AAClB,aAAe,CAChB,AACD,2CACE,qBAAuB,CACxB\",\"file\":\"myeditor.vue\",\"sourcesContent\":[\"\\n.myeditor {\\n  margin-top: 20px;\\n}\\n.myeditor .myeditor-header {\\n  margin-bottom: 12px;\\n}\\n.myeditor .language-dropdown .el-dropdown-menu__item {\\n  padding: 0 5px;\\n}\\n.myeditor .el-dropdown-theme {\\n  float: right;\\n}\\n.myeditor .el-dropdown-keyMap {\\n  float: right;\\n  margin-right: 8px;\\n}\\n.myeditor .CodeMirror {\\n  height: 400px;\\n}\\n.myeditor .myeditor-footer {\\n  padding: 20px 0 0 0;\\n  height: 100px;\\n  width: 100%;\\n}\\n.myeditor .myeditor-footer .custom-button {\\n  float: left;\\n  margin-right: 10px;\\n  width: 150px;\\n}\\n.myeditor .myeditor-footer .run-button {\\n  float: right;\\n  margin-right: 10px;\\n  width: 150px;\\n}\\n.myeditor .myeditor-footer .submit-button {\\n  float: right;\\n  width: 150px;\\n}\\n.myeditor .result-wrapper {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  margin-top: -1px;\\n  padding: 10px 0;\\n  border-bottom: 1px solid #ddd;\\n  border-top: 1px solid #ddd;\\n}\\n.myeditor .result-wrapper .result-type {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1 1 auto;\\n          flex: 1 1 auto;\\n  display: inline-block;\\n}\\n.myeditor .result-wrapper .result-type .el-tag {\\n  margin-top: 4px;\\n  font-size: 18px;\\n}\\n.myeditor .result-wrapper .result-item {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1 1 auto;\\n          flex: 1 1 auto;\\n}\\n.myeditor .result-wrapper .result-item .result-item-text {\\n  font-size: 18px;\\n  font-weight: 600;\\n  margin: 0 5px;\\n  line-height: 30px;\\n  color: #9e9e9e;\\n}\\n.myeditor .result-wrapper .result-item-img {\\n  vertical-align: middle;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-58438f59\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/description/myeditor.vue\n// module id = ExgV\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".problem[data-v-4ad8a6d2]{-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto}.problem .problem-header .collection[data-v-4ad8a6d2]{float:right;margin-top:5px;vertical-align:bottom}.problem .problem-header h3[data-v-4ad8a6d2]{display:inline-block;margin-bottom:10px;font-weight:500;line-height:1;font-size:24px}.container[data-v-4ad8a6d2]{margin-top:32px}.container .el-tabs__content[data-v-4ad8a6d2]{min-height:800px}.grid-content[data-v-4ad8a6d2]{border-radius:4px;min-height:36px}.bg-purple[data-v-4ad8a6d2]{background:#d3dce6}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/problem-detail/problem-detail.vue\"],\"names\":[],\"mappings\":\"AACA,0BACE,mBAAoB,AAChB,kBAAmB,AACf,aAAe,CACxB,AACD,sDACE,YAAa,AACb,eAAgB,AAChB,qBAAuB,CACxB,AACD,6CACE,qBAAsB,AACtB,mBAAoB,AACpB,gBAAiB,AACjB,cAAe,AACf,cAAgB,CACjB,AACD,4BACE,eAAiB,CAClB,AACD,8CACE,gBAAkB,CACnB,AACD,+BACE,kBAAmB,AACnB,eAAiB,CAClB,AACD,4BACE,kBAAoB,CACrB\",\"file\":\"problem-detail.vue\",\"sourcesContent\":[\"\\n.problem[data-v-4ad8a6d2] {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1 0 auto;\\n          flex: 1 0 auto;\\n}\\n.problem .problem-header .collection[data-v-4ad8a6d2] {\\n  float: right;\\n  margin-top: 5px;\\n  vertical-align: bottom;\\n}\\n.problem .problem-header h3[data-v-4ad8a6d2] {\\n  display: inline-block;\\n  margin-bottom: 10px;\\n  font-weight: 500;\\n  line-height: 1;\\n  font-size: 24px;\\n}\\n.container[data-v-4ad8a6d2] {\\n  margin-top: 32px;\\n}\\n.container .el-tabs__content[data-v-4ad8a6d2] {\\n  min-height: 800px;\\n}\\n.grid-content[data-v-4ad8a6d2] {\\n  border-radius: 4px;\\n  min-height: 36px;\\n}\\n.bg-purple[data-v-4ad8a6d2] {\\n  background: #d3dce6;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-4ad8a6d2\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/problem-detail/problem-detail.vue\n// module id = FVxK\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4ad8a6d2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./problem-detail.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"b2eb1a16\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-4ad8a6d2\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/problem-detail/problem-detail.vue\n// module id = Fvbh\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        vim.lastHPos = Infinity;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch));\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '['};\n        var selfPaired = {'\\'': true, '\"': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */);\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n');\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i];\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /-?\\d+/g;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        var token;\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0];\n          start = match.index;\n          end = start + token.length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1;\n          var number = parseInt(token) + (increment * actionArgs.repeat);\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          numberStr = number.toString();\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1;\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      };\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm);\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done;\n        var event = history[history.length - 2];\n        return event && event.ranges && event.ranges[0].head;\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySlash(argString) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart);\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            regexPart = regexPart + '/' + flagsPart;\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); };\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = [];\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;\n        var changes = lastChange.changes;\n        var text = [];\n        var i = 0;\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i]);\n          if (changes[i] instanceof InsertModeKey) {\n             i++;\n          } else {\n             i+= selLength;\n          }\n        }\n        lastChange.changes = text;\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      };\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n            } else {\n                lastChange.changes.push(text);\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    };\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim;\n        var lastSel = vim.lastSelection;\n        var offset = getOffset(lastSel.anchor, lastSel.head);\n        selectForInsert(cm, head, offset.line + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/vim.js\n// module id = Hyg2\n// module chunks = 3 4","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in\"\n    }\n  }, [_c('div', [(_vm.solution) ? _c('div', {\n    staticClass: \"solution\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.solution)\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.solution || _vm.solution === {}),\n      expression: \"!solution || solution === {}\"\n    }],\n    staticClass: \"nodata\"\n  }, [_vm._v(\"\\n      No solution at the moment\\n    \")])])])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-6701a6dc\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/solution/solution.vue\n// module id = IlaS\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldgutter.js\n// module id = Kk9m\n// module chunks = 3 4","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-define.js\n// module id = LGuY\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../css-loader/index.js??ref--6-2!./dialog.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../vue-style-loader/lib/addStylesClient.js\")(\"e2c66042\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/dialog/dialog.css\n// module id = LxZp\n// module chunks = 3 4","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4ad8a6d2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./problem-detail.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./problem-detail.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4ad8a6d2\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./problem-detail.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4ad8a6d2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/problem-detail/problem-detail.vue\n// module id = McHp\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var Pos = CodeMirror.Pos;\n\n  function forEach(arr, f) {\n    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);\n  }\n\n  function arrayContains(arr, item) {\n    if (!Array.prototype.indexOf) {\n      var i = arr.length;\n      while (i--) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return arr.indexOf(item) != -1;\n  }\n\n  function scriptHint(editor, keywords, getToken, options) {\n    // Find the token at the cursor\n    var cur = editor.getCursor(), token = getToken(editor, cur);\n    if (/\\b(?:string|comment)\\b/.test(token.type)) return;\n    token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;\n\n    // If it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n      token = {start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n               type: token.string == \".\" ? \"property\" : null};\n    } else if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var tprop = token;\n    // If it is a property, find out what it is a property of.\n    while (tprop.type == \"property\") {\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (tprop.string != \".\") return;\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (!context) var context = [];\n      context.push(tprop);\n    }\n    return {list: getCompletions(token, context, keywords, options),\n            from: Pos(cur.line, token.start),\n            to: Pos(cur.line, token.end)};\n  }\n\n  function javascriptHint(editor, options) {\n    return scriptHint(editor, javascriptKeywords,\n                      function (e, cur) {return e.getTokenAt(cur);},\n                      options);\n  };\n  CodeMirror.registerHelper(\"hint\", \"javascript\", javascriptHint);\n\n  function getCoffeeScriptToken(editor, cur) {\n  // This getToken, it is for coffeescript, imitates the behavior of\n  // getTokenAt method in javascript.js, that is, returning \"property\"\n  // type and treat \".\" as indepenent token.\n    var token = editor.getTokenAt(cur);\n    if (cur.ch == token.start + 1 && token.string.charAt(0) == '.') {\n      token.end = token.start;\n      token.string = '.';\n      token.type = \"property\";\n    }\n    else if (/^\\.[\\w$_]*$/.test(token.string)) {\n      token.type = \"property\";\n      token.start++;\n      token.string = token.string.replace(/\\./, '');\n    }\n    return token;\n  }\n\n  function coffeescriptHint(editor, options) {\n    return scriptHint(editor, coffeescriptKeywords, getCoffeeScriptToken, options);\n  }\n  CodeMirror.registerHelper(\"hint\", \"coffeescript\", coffeescriptHint);\n\n  var stringProps = (\"charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight \" +\n                     \"toUpperCase toLowerCase split concat match replace search\").split(\" \");\n  var arrayProps = (\"length concat join splice push pop shift unshift slice reverse sort indexOf \" +\n                    \"lastIndexOf every some filter forEach map reduce reduceRight \").split(\" \");\n  var funcProps = \"prototype apply call bind\".split(\" \");\n  var javascriptKeywords = (\"break case catch continue debugger default delete do else false finally for function \" +\n                  \"if in instanceof new null return switch throw true try typeof var void while with\").split(\" \");\n  var coffeescriptKeywords = (\"and break catch class continue delete do else extends false finally for \" +\n                  \"if in instanceof isnt new no not null of off on or return switch then throw true try typeof until void while with yes\").split(\" \");\n\n  function forAllProps(obj, callback) {\n    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n      for (var name in obj) callback(name)\n    } else {\n      for (var o = obj; o; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(callback)\n    }\n  }\n\n  function getCompletions(token, context, keywords, options) {\n    var found = [], start = token.string, global = options && options.globalScope || window;\n    function maybeAdd(str) {\n      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);\n    }\n    function gatherCompletions(obj) {\n      if (typeof obj == \"string\") forEach(stringProps, maybeAdd);\n      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);\n      else if (obj instanceof Function) forEach(funcProps, maybeAdd);\n      forAllProps(obj, maybeAdd)\n    }\n\n    if (context && context.length) {\n      // If this is a property, see if it belongs to some object we can\n      // find in the current environment.\n      var obj = context.pop(), base;\n      if (obj.type && obj.type.indexOf(\"variable\") === 0) {\n        if (options && options.additionalContext)\n          base = options.additionalContext[obj.string];\n        if (!options || options.useGlobalScope !== false)\n          base = base || global[obj.string];\n      } else if (obj.type == \"string\") {\n        base = \"\";\n      } else if (obj.type == \"atom\") {\n        base = 1;\n      } else if (obj.type == \"function\") {\n        if (global.jQuery != null && (obj.string == '$' || obj.string == 'jQuery') &&\n            (typeof global.jQuery == 'function'))\n          base = global.jQuery();\n        else if (global._ != null && (obj.string == '_') && (typeof global._ == 'function'))\n          base = global._();\n      }\n      while (base != null && context.length)\n        base = base[context.pop().string];\n      if (base != null) gatherCompletions(base);\n    } else {\n      // If not, just look in the global object and any local scope\n      // (reading into JS mode internals to get at the local and global variables)\n      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);\n      for (var v = token.state.globalVars; v; v = v.next) maybeAdd(v.name);\n      if (!options || options.useGlobalScope !== false)\n        gatherCompletions(global);\n      forEach(keywords, maybeAdd);\n    }\n    return found;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/hint/javascript-hint.js\n// module id = Mixr\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./matchesonscrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp(\"\\\\b\" + query + \"\\\\b\") : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/match-highlighter.js\n// module id = OkRY\n// module chunks = 3 4","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6701a6dc\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./solution.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./solution.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6701a6dc\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./solution.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/solution/solution.vue\n// module id = P830\n// module chunks = 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('div', {\n    staticClass: \"problem\"\n  }, [_c('el-row', [_c('el-col', {\n    attrs: {\n      \"sm\": 0,\n      \"lg\": 2,\n      \"md\": 1,\n      \"xs\": 0\n    }\n  }, [_c('div', {\n    staticClass: \"grid-content\"\n  })]), _vm._v(\" \"), _c('el-col', {\n    attrs: {\n      \"sm\": 24,\n      \"lg\": 20,\n      \"md\": 22,\n      \"xs\": 24\n    }\n  }, [_c('div', {\n    staticClass: \"problem-header\"\n  }, [_c('h3', {\n    attrs: {\n      \"align\": \"left\"\n    }\n  }, [_vm._v(_vm._s(_vm.problemDetail.title))]), _vm._v(\" \"), _c('img', {\n    staticClass: \"collection\",\n    attrs: {\n      \"width\": \"56\",\n      \"height\": \"56\",\n      \"src\": _vm.getFavoriteSrc(_vm.problemDetail)\n    },\n    on: {\n      \"click\": _vm.collection\n    }\n  })]), _vm._v(\" \"), _c('div', {\n    staticClass: \"container\"\n  }, [_c('el-tabs', {\n    attrs: {\n      \"type\": \"card\"\n    },\n    model: {\n      value: (_vm.tab),\n      callback: function($$v) {\n        _vm.tab = $$v\n      },\n      expression: \"tab\"\n    }\n  }, [_c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Description\",\n      \"name\": \"description\"\n    }\n  }, [_c('description', {\n    attrs: {\n      \"data\": _vm.problemDetail\n    }\n  })], 1), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Solution\",\n      \"name\": \"solution\"\n    }\n  }, [_c('solution')], 1), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Hints\",\n      \"name\": \"third\"\n    }\n  }, [_c('hints')], 1), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"Notes\",\n      \"name\": \"fourth\"\n    }\n  }, [_c('notes', {\n    attrs: {\n      \"name\": _vm.problem.title\n    }\n  })], 1)], 1)], 1)]), _vm._v(\" \"), _c('el-col', {\n    attrs: {\n      \"sm\": 0,\n      \"lg\": 2,\n      \"md\": 1,\n      \"xs\": 0\n    }\n  }, [_c('div', {\n    staticClass: \"grid-content\"\n  })])], 1)], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4ad8a6d2\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/problem-detail/problem-detail.vue\n// module id = PdbZ\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/scroll/annotatescrollbar.js\n// module id = QSKu\n// module chunks = 3 4","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-58438f59\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./myeditor.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./myeditor.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-58438f59\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./myeditor.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/description/myeditor.vue\n// module id = RKlR\n// module chunks = 3","exports = module.exports = require(\"../../../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".CodeMirror-dialog{position:absolute;left:0;right:0;background:inherit;z-index:15;padding:.1em .8em;overflow:hidden;color:inherit}.CodeMirror-dialog-top{border-bottom:1px solid #eee;top:0}.CodeMirror-dialog-bottom{border-top:1px solid #eee;bottom:0}.CodeMirror-dialog input{border:none;outline:none;background:transparent;width:20em;color:inherit;font-family:monospace}.CodeMirror-dialog button{font-size:70%}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/dialog/dialog.css\"],\"names\":[],\"mappings\":\"AAAA,mBACE,kBAAmB,AACnB,OAAQ,AAAC,QAAS,AAClB,mBAAoB,AACpB,WAAY,AACZ,kBAAmB,AACnB,gBAAiB,AACjB,aAAe,CAChB,AAED,uBACE,6BAA8B,AAC9B,KAAO,CACR,AAED,0BACE,0BAA2B,AAC3B,QAAU,CACX,AAED,yBACE,YAAa,AACb,aAAc,AACd,uBAAwB,AACxB,WAAY,AACZ,cAAe,AACf,qBAAuB,CACxB,AAED,0BACE,aAAe,CAChB\",\"file\":\"dialog.css\",\"sourcesContent\":[\".CodeMirror-dialog {\\n  position: absolute;\\n  left: 0; right: 0;\\n  background: inherit;\\n  z-index: 15;\\n  padding: .1em .8em;\\n  overflow: hidden;\\n  color: inherit;\\n}\\n\\n.CodeMirror-dialog-top {\\n  border-bottom: 1px solid #eee;\\n  top: 0;\\n}\\n\\n.CodeMirror-dialog-bottom {\\n  border-top: 1px solid #eee;\\n  bottom: 0;\\n}\\n\\n.CodeMirror-dialog input {\\n  border: none;\\n  outline: none;\\n  background: transparent;\\n  width: 20em;\\n  color: inherit;\\n  font-family: monospace;\\n}\\n\\n.CodeMirror-dialog button {\\n  font-size: 70%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/codemirror/addon/dialog/dialog.css\n// module id = RkAk\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/dialog/dialog.js\n// module id = RkhK\n// module chunks = 3 4","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in\"\n    }\n  }, [_c('div', {\n    staticClass: \"notes\"\n  }, [_c('el-dialog', {\n    attrs: {\n      \"title\": \"保存笔记\",\n      \"visible\": _vm.noteDialogVisible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.noteDialogVisible = $event\n      }\n    }\n  }, [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"label-width\": \"60px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"文件名:\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: (_vm.noteName),\n      callback: function($$v) {\n        _vm.noteName = $$v\n      },\n      expression: \"noteName\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-radio-group', {\n    model: {\n      value: (_vm.fileType),\n      callback: function($$v) {\n        _vm.fileType = $$v\n      },\n      expression: \"fileType\"\n    }\n  }, [_c('el-radio', {\n    attrs: {\n      \"label\": \"0\"\n    }\n  }, [_vm._v(\"保存至云端\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": \"1\"\n    }\n  }, [_vm._v(\"以txt格式保存\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": \"2\"\n    }\n  }, [_vm._v(\"以markdown格式保存\")])], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"dialog-footer\",\n    slot: \"footer\"\n  }, [_c('el-button', {\n    on: {\n      \"click\": function($event) {\n        _vm.noteDialogVisible = false\n      }\n    }\n  }, [_vm._v(\"取 消\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.saveNoteConfirm\n    }\n  }, [_vm._v(\"保 存\")])], 1)], 1), _vm._v(\" \"), _c('mavon-editor', {\n    attrs: {\n      \"default_open\": \"edit\",\n      \"placeholder\": \"记录学习笔记\"\n    },\n    on: {\n      \"save\": _vm._showSaveNoteDialog\n    },\n    model: {\n      value: (_vm.note),\n      callback: function($$v) {\n        _vm.note = $$v\n      },\n      expression: \"note\"\n    }\n  })], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-c64ce914\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/notes/notes.vue\n// module id = SVHh\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldcode.js\n// module id = THjC\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/xml-fold.js\n// module id = TQy8\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/indent-fold.js\n// module id = U3HU\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line < CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/selection/mark-selection.js\n// module id = U80t\n// module chunks = 3 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".description{border-bottom:1px solid #ddd}.description p{margin:0 0 10px;display:block;font-size:16px;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}.description pre{display:block;padding:9.5px;margin:0 0 10px;overflow:auto;font-size:14px;line-height:1.9;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f2f2f2;border:1px solid #ccc;border-radius:4px;font-family:Menlo,Monaco,Consolas,Courier New,monospace}.description pre .nf{color:#900;font-weight:700}.description pre .na{color:teal}.description pre .kt{color:#458;font-weight:700}.description pre .o{font-weight:700}.description code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px;font-family:Menlo,Monaco,Consolas,Courier New,monospace}.description b{font-weight:700}.description ol{margin-top:10px}.description ol li{font-size:16px}.editor .ql-editor{min-height:300px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/description/description.vue\"],\"names\":[],\"mappings\":\"AACA,aACE,4BAA8B,CAC/B,AACD,eACE,gBAAiB,AACjB,cAAe,AACf,eAAgB,AAChB,0BAA2B,AAC3B,yBAA0B,AAC1B,uBAA0B,AAC1B,oBAAwB,CACzB,AACD,iBACE,cAAe,AACf,cAAe,AACf,gBAAiB,AACjB,cAAe,AACf,eAAgB,AAChB,gBAAiB,AACjB,WAAY,AACZ,qBAAsB,AACtB,qBAAsB,AACtB,yBAA0B,AAC1B,sBAAuB,AACvB,kBAAmB,AACnB,uDAA+D,CAChE,AACD,qBACE,WAAY,AACZ,eAAkB,CACnB,AACD,qBACE,UAAe,CAChB,AACD,qBACE,WAAY,AACZ,eAAkB,CACnB,AACD,oBACE,eAAkB,CACnB,AACD,kBACE,gBAAiB,AACjB,cAAe,AACf,cAAe,AACf,yBAA0B,AAC1B,kBAAmB,AACnB,uDAA+D,CAChE,AACD,eACE,eAAiB,CAClB,AACD,gBACE,eAAiB,CAClB,AACD,mBACE,cAAgB,CACjB,AACD,mBACE,gBAAkB,CACnB\",\"file\":\"description.vue\",\"sourcesContent\":[\"\\n.description {\\n  border-bottom: 1px solid #ddd;\\n}\\n.description p {\\n  margin: 0 0 10px;\\n  display: block;\\n  font-size: 16px;\\n  -webkit-margin-before: 1em;\\n  -webkit-margin-after: 1em;\\n  -webkit-margin-start: 0px;\\n  -webkit-margin-end: 0px;\\n}\\n.description pre {\\n  display: block;\\n  padding: 9.5px;\\n  margin: 0 0 10px;\\n  overflow: auto;\\n  font-size: 14px;\\n  line-height: 1.9;\\n  color: #333;\\n  word-break: break-all;\\n  word-wrap: break-word;\\n  background-color: #f2f2f2;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n  font-family: Menlo, Monaco, Consolas, \\\"Courier New\\\", monospace;\\n}\\n.description pre .nf {\\n  color: #900;\\n  font-weight: bold;\\n}\\n.description pre .na {\\n  color: #008080;\\n}\\n.description pre .kt {\\n  color: #458;\\n  font-weight: bold;\\n}\\n.description pre .o {\\n  font-weight: bold;\\n}\\n.description code {\\n  padding: 2px 4px;\\n  font-size: 90%;\\n  color: #c7254e;\\n  background-color: #f9f2f4;\\n  border-radius: 4px;\\n  font-family: Menlo, Monaco, Consolas, \\\"Courier New\\\", monospace;\\n}\\n.description b {\\n  font-weight: 700;\\n}\\n.description ol {\\n  margin-top: 10px;\\n}\\n.description ol li {\\n  font-size: 16px;\\n}\\n.editor .ql-editor {\\n  min-height: 300px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-4dfc5728\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/description/description.vue\n// module id = XRep\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../css-loader/index.js??ref--6-2!./foldgutter.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../vue-style-loader/lib/addStylesClient.js\")(\"da13b76a\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldgutter.css\n// module id = Yokd\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.indexOf(endString);\n    }\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/comment/comment.js\n// module id = Z6qg\n// module chunks = 3 4","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6701a6dc\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./solution.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"ee1aa648\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-6701a6dc\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/solution/solution.vue\n// module id = ZfUv\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/selection/active-line.js\n// module id = aGTD\n// module chunks = 3 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".notes[data-v-c64ce914]{margin-top:25px;height:590px}.notes .v-note-wrapper[data-v-c64ce914]{height:500px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/notes/notes.vue\"],\"names\":[],\"mappings\":\"AACA,wBACE,gBAAiB,AACjB,YAAc,CACf,AACD,wCACE,YAAc,CACf\",\"file\":\"notes.vue\",\"sourcesContent\":[\"\\n.notes[data-v-c64ce914] {\\n  margin-top: 25px;\\n  height: 590px;\\n}\\n.notes .v-note-wrapper[data-v-c64ce914] {\\n  height: 500px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-c64ce914\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/notes/notes.vue\n// module id = aOIS\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type) || stringStartsAfter(cm, pos)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/closebrackets.js\n// module id = aX1R\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureGlobal(regexp) {\n    return regexp.global ? regexp : new RegExp(regexp.source, regexpFlags(regexp) + \"g\")\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (end.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureGlobal(query)\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/searchcursor.js\n// module id = c+I8\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/markdown-fold.js\n// module id = dxBS\n// module chunks = 3 4","exports = module.exports = require(\"../../../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".CodeMirror-foldmarker{color:blue;text-shadow:#b9f 1px 1px 2px,#b9f -1px -1px 2px,#b9f 1px -1px 2px,#b9f -1px 1px 2px;font-family:arial;line-height:.3;cursor:pointer}.CodeMirror-foldgutter{width:.7em}.CodeMirror-foldgutter-folded,.CodeMirror-foldgutter-open{cursor:pointer}.CodeMirror-foldgutter-open:after{content:\\\"\\\\25BE\\\"}.CodeMirror-foldgutter-folded:after{content:\\\"\\\\25B8\\\"}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/fold/foldgutter.css\"],\"names\":[],\"mappings\":\"AAAA,uBACE,WAAY,AACZ,oFAAwF,AACxF,kBAAmB,AACnB,eAAgB,AAChB,cAAgB,CACjB,AACD,uBACE,UAAY,CACb,AACD,0DAEE,cAAgB,CACjB,AACD,kCACE,eAAiB,CAClB,AACD,oCACE,eAAiB,CAClB\",\"file\":\"foldgutter.css\",\"sourcesContent\":[\".CodeMirror-foldmarker {\\n  color: blue;\\n  text-shadow: #b9f 1px 1px 2px, #b9f -1px -1px 2px, #b9f 1px -1px 2px, #b9f -1px 1px 2px;\\n  font-family: arial;\\n  line-height: .3;\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter {\\n  width: .7em;\\n}\\n.CodeMirror-foldgutter-open,\\n.CodeMirror-foldgutter-folded {\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter-open:after {\\n  content: \\\"\\\\25BE\\\";\\n}\\n.CodeMirror-foldgutter-folded:after {\\n  content: \\\"\\\\25B8\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/codemirror/addon/fold/foldgutter.css\n// module id = engA\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/brace-fold.js\n// module id = fo6W\n// module chunks = 3 4","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-c64ce914\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./notes.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./notes.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-c64ce914\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./notes.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-c64ce914\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/notes/notes.vue\n// module id = j09L\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-c64ce914\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./notes.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"30ccd70a\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-c64ce914\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/notes/notes.vue\n// module id = jCel\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/hint/show-hint.js\n// module id = jQeI\n// module chunks = 3 4","/* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.2\n * 2016-06-16 18:25:19\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = saveAs || (function(view) {\n\t\"use strict\";\n\t// IE <10 is explicitly unsupported\n\tif (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\treturn;\n\t}\n\tvar\n\t\t  doc = view.document\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet\n\t\t, get_URL = function() {\n\t\t\treturn view.URL || view.webkitURL || view;\n\t\t}\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t, can_use_save_link = \"download\" in save_link\n\t\t, click = function(node) {\n\t\t\tvar event = new MouseEvent(\"click\");\n\t\t\tnode.dispatchEvent(event);\n\t\t}\n\t\t, is_safari = /constructor/i.test(view.HTMLElement) || view.safari\n\t\t, is_chrome_ios =/CriOS\\/[\\d]+/.test(navigator.userAgent)\n\t\t, throw_outside = function(ex) {\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\tthrow ex;\n\t\t\t}, 0);\n\t\t}\n\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t// the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n\t\t, arbitrary_revoke_timeout = 1000 * 40 // in ms\n\t\t, revoke = function(file) {\n\t\t\tvar revoker = function() {\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\tget_URL().revokeObjectURL(file);\n\t\t\t\t} else { // file is a File\n\t\t\t\t\tfile.remove();\n\t\t\t\t}\n\t\t\t};\n\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);\n\t\t}\n\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\tevent_types = [].concat(event_types);\n\t\t\tvar i = event_types.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, auto_bom = function(blob) {\n\t\t\t// prepend BOM for UTF-8 XML and text/* types (including HTML)\n\t\t\t// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n\t\t\tif (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n\t\t\t\treturn new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});\n\t\t\t}\n\t\t\treturn blob;\n\t\t}\n\t\t, FileSaver = function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\tvar\n\t\t\t\t  filesaver = this\n\t\t\t\t, type = blob.type\n\t\t\t\t, force = type === force_saveable_type\n\t\t\t\t, object_url\n\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t}\n\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t, fs_error = function() {\n\t\t\t\t\tif ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\n\t\t\t\t\t\t// Safari doesn't allow downloading of blob urls\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\tvar url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n\t\t\t\t\t\t\tvar popup = view.open(url, '_blank');\n\t\t\t\t\t\t\tif(!popup) view.location.href = url;\n\t\t\t\t\t\t\turl=undefined; // release reference before dispatching\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\tif (!object_url) {\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\t\t}\n\t\t\t\t\tif (force) {\n\t\t\t\t\t\tview.location.href = object_url;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar opened = view.open(object_url, \"_blank\");\n\t\t\t\t\t\tif (!opened) {\n\t\t\t\t\t\t\t// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n\t\t\t\t\t\t\tview.location.href = object_url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t}\n\t\t\t;\n\t\t\tfilesaver.readyState = filesaver.INIT;\n\n\t\t\tif (can_use_save_link) {\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsave_link.href = object_url;\n\t\t\t\t\tsave_link.download = name;\n\t\t\t\t\tclick(save_link);\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfs_error();\n\t\t}\n\t\t, FS_proto = FileSaver.prototype\n\t\t, saveAs = function(blob, name, no_auto_bom) {\n\t\t\treturn new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\n\t\t}\n\t;\n\t// IE 10+ (native saveAs)\n\tif (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n\t\treturn function(blob, name, no_auto_bom) {\n\t\t\tname = name || blob.name || \"download\";\n\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name);\n\t\t};\n\t}\n\n\tFS_proto.abort = function(){};\n\tFS_proto.readyState = FS_proto.INIT = 0;\n\tFS_proto.WRITING = 1;\n\tFS_proto.DONE = 2;\n\n\tFS_proto.error =\n\tFS_proto.onwritestart =\n\tFS_proto.onprogress =\n\tFS_proto.onwrite =\n\tFS_proto.onabort =\n\tFS_proto.onerror =\n\tFS_proto.onwriteend =\n\t\tnull;\n\n\treturn saveAs;\n}(\n\t   typeof self !== \"undefined\" && self\n\t|| typeof window !== \"undefined\" && window\n\t|| this.content\n));\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports.saveAs = saveAs;\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd !== null)) {\n  define(\"FileSaver.js\", function() {\n    return saveAs;\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/file-saver/FileSaver.js\n// module id = lDdF\n// module chunks = 3","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-062a844c\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./hints.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./hints.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-062a844c\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./hints.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/hints/hints.vue\n// module id = lUyH\n// module chunks = 3","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-options.js\n// module id = nErl\n// module chunks = 3","/**\n * Created by qinzhen on 2017/9/30.\n */\nexport default class ReturnResult {\n  constructor ({mytitle, memory_used, output, status, time_used}) {\n    this.mytitle = mytitle\n    this.memory_used = memory_used\n    this.output = output\n    this.status = status\n    this.time_used = time_used\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/js/ReturnResult.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/comment-fold.js\n// module id = soCA\n// module chunks = 3 4","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  // Kill 'ring'\n\n  var killRing = [];\n  function addToRing(str) {\n    killRing.push(str);\n    if (killRing.length > 50) killRing.shift();\n  }\n  function growRingTop(str) {\n    if (!killRing.length) return addToRing(str);\n    killRing[killRing.length - 1] += str;\n  }\n  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || \"\"; }\n  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }\n\n  var lastKill = null;\n\n  function kill(cm, from, to, mayGrow, text) {\n    if (text == null) text = cm.getRange(from, to);\n\n    if (mayGrow && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))\n      growRingTop(text);\n    else\n      addToRing(text);\n    cm.replaceRange(\"\", from, to, \"+delete\");\n\n    if (mayGrow) lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};\n    else lastKill = null;\n  }\n\n  // Boundaries of various units\n\n  function byChar(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"char\", true);\n  }\n\n  function byWord(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"word\", true);\n  }\n\n  function byLine(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"line\", cm.doc.sel.goalColumn);\n  }\n\n  function byPage(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"page\", cm.doc.sel.goalColumn);\n  }\n\n  function byParagraph(cm, pos, dir) {\n    var no = pos.line, line = cm.getLine(no);\n    var sawText = /\\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));\n    var fst = cm.firstLine(), lst = cm.lastLine();\n    for (;;) {\n      no += dir;\n      if (no < fst || no > lst)\n        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));\n      line = cm.getLine(no);\n      var hasText = /\\S/.test(line);\n      if (hasText) sawText = true;\n      else if (sawText) return Pos(no, 0);\n    }\n  }\n\n  function bySentence(cm, pos, dir) {\n    var line = pos.line, ch = pos.ch;\n    var text = cm.getLine(pos.line), sawWord = false;\n    for (;;) {\n      var next = text.charAt(ch + (dir < 0 ? -1 : 0));\n      if (!next) { // End/beginning of line reached\n        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);\n        text = cm.getLine(line + dir);\n        if (!/\\S/.test(text)) return Pos(line, ch);\n        line += dir;\n        ch = dir < 0 ? text.length : 0;\n        continue;\n      }\n      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));\n      if (!sawWord) sawWord = /\\w/.test(next);\n      ch += dir;\n    }\n  }\n\n  function byExpr(cm, pos, dir) {\n    var wrap;\n    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))\n        && wrap.match && (wrap.forward ? 1 : -1) == dir)\n      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;\n\n    for (var first = true;; first = false) {\n      var token = cm.getTokenAt(pos);\n      var after = Pos(pos.line, dir < 0 ? token.start : token.end);\n      if (first && dir > 0 && token.end == pos.ch || !/\\w/.test(token.string)) {\n        var newPos = cm.findPosH(after, dir, \"char\");\n        if (posEq(after, newPos)) return pos;\n        else pos = newPos;\n      } else {\n        return after;\n      }\n    }\n  }\n\n  // Prefixes (only crudely supported)\n\n  function getPrefix(cm, precise) {\n    var digits = cm.state.emacsPrefix;\n    if (!digits) return precise ? null : 1;\n    clearPrefix(cm);\n    return digits == \"-\" ? -1 : Number(digits);\n  }\n\n  function repeated(cmd) {\n    var f = typeof cmd == \"string\" ? function(cm) { cm.execCommand(cmd); } : cmd;\n    return function(cm) {\n      var prefix = getPrefix(cm);\n      f(cm);\n      for (var i = 1; i < prefix; ++i) f(cm);\n    };\n  }\n\n  function findEnd(cm, pos, by, dir) {\n    var prefix = getPrefix(cm);\n    if (prefix < 0) { dir = -dir; prefix = -prefix; }\n    for (var i = 0; i < prefix; ++i) {\n      var newPos = by(cm, pos, dir);\n      if (posEq(newPos, pos)) break;\n      pos = newPos;\n    }\n    return pos;\n  }\n\n  function move(by, dir) {\n    var f = function(cm) {\n      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));\n    };\n    f.motion = true;\n    return f;\n  }\n\n  function killTo(cm, by, dir) {\n    var selections = cm.listSelections(), cursor;\n    var i = selections.length;\n    while (i--) {\n      cursor = selections[i].head;\n      kill(cm, cursor, findEnd(cm, cursor, by, dir), true);\n    }\n  }\n\n  function killRegion(cm) {\n    if (cm.somethingSelected()) {\n      var selections = cm.listSelections(), selection;\n      var i = selections.length;\n      while (i--) {\n        selection = selections[i];\n        kill(cm, selection.anchor, selection.head);\n      }\n      return true;\n    }\n  }\n\n  function addPrefix(cm, digit) {\n    if (cm.state.emacsPrefix) {\n      if (digit != \"-\") cm.state.emacsPrefix += digit;\n      return;\n    }\n    // Not active yet\n    cm.state.emacsPrefix = digit;\n    cm.on(\"keyHandled\", maybeClearPrefix);\n    cm.on(\"inputRead\", maybeDuplicateInput);\n  }\n\n  var prefixPreservingKeys = {\"Alt-G\": true, \"Ctrl-X\": true, \"Ctrl-Q\": true, \"Ctrl-U\": true};\n\n  function maybeClearPrefix(cm, arg) {\n    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))\n      clearPrefix(cm);\n  }\n\n  function clearPrefix(cm) {\n    cm.state.emacsPrefix = null;\n    cm.off(\"keyHandled\", maybeClearPrefix);\n    cm.off(\"inputRead\", maybeDuplicateInput);\n  }\n\n  function maybeDuplicateInput(cm, event) {\n    var dup = getPrefix(cm);\n    if (dup > 1 && event.origin == \"+input\") {\n      var one = event.text.join(\"\\n\"), txt = \"\";\n      for (var i = 1; i < dup; ++i) txt += one;\n      cm.replaceSelection(txt);\n    }\n  }\n\n  function addPrefixMap(cm) {\n    cm.state.emacsPrefixMap = true;\n    cm.addKeyMap(prefixMap);\n    cm.on(\"keyHandled\", maybeRemovePrefixMap);\n    cm.on(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  function maybeRemovePrefixMap(cm, arg) {\n    if (typeof arg == \"string\" && (/^\\d$/.test(arg) || arg == \"Ctrl-U\")) return;\n    cm.removeKeyMap(prefixMap);\n    cm.state.emacsPrefixMap = false;\n    cm.off(\"keyHandled\", maybeRemovePrefixMap);\n    cm.off(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  // Utilities\n\n  function setMark(cm) {\n    cm.setCursor(cm.getCursor());\n    cm.setExtending(!cm.getExtending());\n    cm.on(\"change\", function() { cm.setExtending(false); });\n  }\n\n  function clearMark(cm) {\n    cm.setExtending(false);\n    cm.setCursor(cm.getCursor());\n  }\n\n  function getInput(cm, msg, f) {\n    if (cm.openDialog)\n      cm.openDialog(msg + \": <input type=\\\"text\\\" style=\\\"width: 10em\\\"/>\", f, {bottom: true});\n    else\n      f(prompt(msg, \"\"));\n  }\n\n  function operateOnWord(cm, op) {\n    var start = cm.getCursor(), end = cm.findPosH(start, 1, \"word\");\n    cm.replaceRange(op(cm.getRange(start, end)), start, end);\n    cm.setCursor(end);\n  }\n\n  function toEnclosingExpr(cm) {\n    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;\n    var stack = [];\n    while (line >= cm.firstLine()) {\n      var text = cm.getLine(line);\n      for (var i = ch == null ? text.length : ch; i > 0;) {\n        var ch = text.charAt(--i);\n        if (ch == \")\")\n          stack.push(\"(\");\n        else if (ch == \"]\")\n          stack.push(\"[\");\n        else if (ch == \"}\")\n          stack.push(\"{\");\n        else if (/[\\(\\{\\[]/.test(ch) && (!stack.length || stack.pop() != ch))\n          return cm.extendSelection(Pos(line, i));\n      }\n      --line; ch = null;\n    }\n  }\n\n  function quit(cm) {\n    cm.execCommand(\"clearSearch\");\n    clearMark(cm);\n  }\n\n  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};\n\n  // Actual keymap\n\n  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({\n    \"Ctrl-W\": function(cm) {kill(cm, cm.getCursor(\"start\"), cm.getCursor(\"end\"));},\n    \"Ctrl-K\": repeated(function(cm) {\n      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));\n      var text = cm.getRange(start, end);\n      if (!/\\S/.test(text)) {\n        text += \"\\n\";\n        end = Pos(start.line + 1, 0);\n      }\n      kill(cm, start, end, true, text);\n    }),\n    \"Alt-W\": function(cm) {\n      addToRing(cm.getSelection());\n      clearMark(cm);\n    },\n    \"Ctrl-Y\": function(cm) {\n      var start = cm.getCursor();\n      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, \"paste\");\n      cm.setSelection(start, cm.getCursor());\n    },\n    \"Alt-Y\": function(cm) {cm.replaceSelection(popFromRing(), \"around\", \"paste\");},\n\n    \"Ctrl-Space\": setMark, \"Ctrl-Shift-2\": setMark,\n\n    \"Ctrl-F\": move(byChar, 1), \"Ctrl-B\": move(byChar, -1),\n    \"Right\": move(byChar, 1), \"Left\": move(byChar, -1),\n    \"Ctrl-D\": function(cm) { killTo(cm, byChar, 1); },\n    \"Delete\": function(cm) { killRegion(cm) || killTo(cm, byChar, 1); },\n    \"Ctrl-H\": function(cm) { killTo(cm, byChar, -1); },\n    \"Backspace\": function(cm) { killRegion(cm) || killTo(cm, byChar, -1); },\n\n    \"Alt-F\": move(byWord, 1), \"Alt-B\": move(byWord, -1),\n    \"Alt-D\": function(cm) { killTo(cm, byWord, 1); },\n    \"Alt-Backspace\": function(cm) { killTo(cm, byWord, -1); },\n\n    \"Ctrl-N\": move(byLine, 1), \"Ctrl-P\": move(byLine, -1),\n    \"Down\": move(byLine, 1), \"Up\": move(byLine, -1),\n    \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStart\",\n\n    \"Alt-V\": move(byPage, -1), \"Ctrl-V\": move(byPage, 1),\n    \"PageUp\": move(byPage, -1), \"PageDown\": move(byPage, 1),\n\n    \"Ctrl-Up\": move(byParagraph, -1), \"Ctrl-Down\": move(byParagraph, 1),\n\n    \"Alt-A\": move(bySentence, -1), \"Alt-E\": move(bySentence, 1),\n    \"Alt-K\": function(cm) { killTo(cm, bySentence, 1); },\n\n    \"Ctrl-Alt-K\": function(cm) { killTo(cm, byExpr, 1); },\n    \"Ctrl-Alt-Backspace\": function(cm) { killTo(cm, byExpr, -1); },\n    \"Ctrl-Alt-F\": move(byExpr, 1), \"Ctrl-Alt-B\": move(byExpr, -1),\n\n    \"Shift-Ctrl-Alt-2\": function(cm) {\n      var cursor = cm.getCursor();\n      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);\n    },\n    \"Ctrl-Alt-T\": function(cm) {\n      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);\n      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);\n      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +\n                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);\n    },\n    \"Ctrl-Alt-U\": repeated(toEnclosingExpr),\n\n    \"Alt-Space\": function(cm) {\n      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);\n      while (from && /\\s/.test(text.charAt(from - 1))) --from;\n      while (to < text.length && /\\s/.test(text.charAt(to))) ++to;\n      cm.replaceRange(\" \", Pos(pos.line, from), Pos(pos.line, to));\n    },\n    \"Ctrl-O\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"start\"); }),\n    \"Ctrl-T\": repeated(function(cm) {\n      cm.execCommand(\"transposeChars\");\n    }),\n\n    \"Alt-C\": repeated(function(cm) {\n      operateOnWord(cm, function(w) {\n        var letter = w.search(/\\w/);\n        if (letter == -1) return w;\n        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();\n      });\n    }),\n    \"Alt-U\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toUpperCase(); });\n    }),\n    \"Alt-L\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toLowerCase(); });\n    }),\n\n    \"Alt-;\": \"toggleComment\",\n\n    \"Ctrl-/\": repeated(\"undo\"), \"Shift-Ctrl--\": repeated(\"undo\"),\n    \"Ctrl-Z\": repeated(\"undo\"), \"Cmd-Z\": repeated(\"undo\"),\n    \"Shift-Alt-,\": \"goDocStart\", \"Shift-Alt-.\": \"goDocEnd\",\n    \"Ctrl-S\": \"findPersistentNext\", \"Ctrl-R\": \"findPersistentPrev\", \"Ctrl-G\": quit, \"Shift-Alt-5\": \"replace\",\n    \"Alt-/\": \"autocomplete\",\n    \"Enter\": \"newlineAndIndent\",\n    \"Ctrl-J\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"end\"); }),\n    \"Tab\": \"indentAuto\",\n\n    \"Alt-G G\": function(cm) {\n      var prefix = getPrefix(cm, true);\n      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);\n\n      getInput(cm, \"Goto line\", function(str) {\n        var num;\n        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)\n          cm.setCursor(num - 1);\n      });\n    },\n\n    \"Ctrl-X Tab\": function(cm) {\n      cm.indentSelection(getPrefix(cm, true) || cm.getOption(\"indentUnit\"));\n    },\n    \"Ctrl-X Ctrl-X\": function(cm) {\n      cm.setSelection(cm.getCursor(\"head\"), cm.getCursor(\"anchor\"));\n    },\n    \"Ctrl-X Ctrl-S\": \"save\",\n    \"Ctrl-X Ctrl-W\": \"save\",\n    \"Ctrl-X S\": \"saveAll\",\n    \"Ctrl-X F\": \"open\",\n    \"Ctrl-X U\": repeated(\"undo\"),\n    \"Ctrl-X K\": \"close\",\n    \"Ctrl-X Delete\": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), true); },\n    \"Ctrl-X H\": \"selectAll\",\n\n    \"Ctrl-Q Tab\": repeated(\"insertTab\"),\n    \"Ctrl-U\": addPrefixMap\n  });\n\n  var prefixMap = {\"Ctrl-G\": clearPrefix};\n  function regPrefix(d) {\n    prefixMap[d] = function(cm) { addPrefix(cm, d); };\n    keyMap[\"Ctrl-\" + d] = function(cm) { addPrefix(cm, d); };\n    prefixPreservingKeys[\"Ctrl-\" + d] = true;\n  }\n  for (var i = 0; i < 10; ++i) regPrefix(String(i));\n  regPrefix(\"-\");\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/emacs.js\n// module id = tjx/\n// module chunks = 3 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".solution{background:#f2f2f2;line-height:1.7}.solution .toc{display:table;border:1px solid #aaa;background-color:#f9f9f9;padding:7px 25px 3px 7px;margin-top:50px;font-size:95%}.solution .toc ul{margin-top:0;margin-bottom:10px}.solution .toc a{href:\\\"#\\\";color:#08c;text-decoration:none}h2{font-size:1.75em}h2,h4{font-weight:700;margin-top:1.275em;margin-bottom:.85em;line-height:1.7}h4{font-size:1.25em}hr{height:4px;padding:0;margin:1.7em 0;overflow:hidden;background-color:#e7e7e7;border:none}p{margin:0 0 10px;display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0;font-size:16px;font-weight:400}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}b,strong{font-weight:700}pre{display:block;padding:9.5px;margin:0 0 10px;overflow:auto;font-size:14px;line-height:1.9;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f2f2f2;border:1px solid #ccc;border-radius:4px;font-family:Menlo,Monaco,Consolas,Courier New,monospace}pre .nf{color:#900;font-weight:700}pre .na{color:teal}pre .kt{color:#458}pre .kt,pre .o{font-weight:700}.nodata{height:100%;width:100%;padding:8rem 4rem;text-align:center;font-size:1.5rem;color:#dadada}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/solution/solution.vue\"],\"names\":[],\"mappings\":\"AACA,UACE,mBAAoB,AACpB,eAAiB,CAClB,AACD,eACE,cAAe,AACf,sBAAuB,AACvB,yBAA0B,AAC1B,yBAA0B,AAC1B,gBAAiB,AACjB,aAAe,CAChB,AACD,kBACE,aAAc,AACd,kBAAoB,CACrB,AACD,iBACE,SAAU,AACV,WAAY,AACZ,oBAAsB,CACvB,AACD,GACE,gBAAkB,CAKnB,AACD,MALE,gBAAiB,AACjB,mBAAoB,AACpB,oBAAsB,AACtB,eAAiB,CAQlB,AAND,GACE,gBAAkB,CAKnB,AACD,GACE,WAAY,AACZ,UAAW,AACX,eAAgB,AAChB,gBAAiB,AACjB,yBAA0B,AAC1B,WAAa,CACd,AACD,EACE,gBAAiB,AACjB,cAAe,AACf,0BAA2B,AAC3B,yBAA0B,AAC1B,uBAA0B,AAC1B,qBAAwB,AACxB,eAAgB,AAChB,eAAiB,CAClB,AACD,KACE,gBAAiB,AACjB,cAAe,AACf,cAAe,AACf,yBAA0B,AAC1B,iBAAmB,CACpB,AACD,SAEE,eAAiB,CAClB,AACD,IACE,cAAe,AACf,cAAe,AACf,gBAAiB,AACjB,cAAe,AACf,eAAgB,AAChB,gBAAiB,AACjB,WAAY,AACZ,qBAAsB,AACtB,qBAAsB,AACtB,yBAA0B,AAC1B,sBAAuB,AACvB,kBAAmB,AACnB,uDAA+D,CAChE,AACD,QACE,WAAY,AACZ,eAAkB,CACnB,AACD,QACE,UAAe,CAChB,AACD,QACE,UAAY,CAEb,AACD,eAFE,eAAkB,CAInB,AACD,QACE,YAAa,AACb,WAAY,AACZ,kBAAmB,AACnB,kBAAmB,AACnB,iBAAkB,AAClB,aAAe,CAChB\",\"file\":\"solution.vue\",\"sourcesContent\":[\"\\n.solution {\\n  background: #f2f2f2;\\n  line-height: 1.7;\\n}\\n.solution .toc {\\n  display: table;\\n  border: 1px solid #aaa;\\n  background-color: #f9f9f9;\\n  padding: 7px 25px 3px 7px;\\n  margin-top: 50px;\\n  font-size: 95%;\\n}\\n.solution .toc ul {\\n  margin-top: 0;\\n  margin-bottom: 10px;\\n}\\n.solution .toc a {\\n  href: '#';\\n  color: #08c;\\n  text-decoration: none;\\n}\\nh2 {\\n  font-size: 1.75em;\\n  font-weight: 700;\\n  margin-top: 1.275em;\\n  margin-bottom: 0.85em;\\n  line-height: 1.7;\\n}\\nh4 {\\n  font-size: 1.25em;\\n  font-weight: 700;\\n  margin-top: 1.275em;\\n  margin-bottom: 0.85em;\\n  line-height: 1.7;\\n}\\nhr {\\n  height: 4px;\\n  padding: 0;\\n  margin: 1.7em 0;\\n  overflow: hidden;\\n  background-color: #e7e7e7;\\n  border: none;\\n}\\np {\\n  margin: 0 0 10px;\\n  display: block;\\n  -webkit-margin-before: 1em;\\n  -webkit-margin-after: 1em;\\n  -webkit-margin-start: 0px;\\n  -webkit-margin-end: 0px;\\n  font-size: 16px;\\n  font-weight: 400;\\n}\\ncode {\\n  padding: 2px 4px;\\n  font-size: 90%;\\n  color: #c7254e;\\n  background-color: #f9f2f4;\\n  border-radius: 4px;\\n}\\nb,\\nstrong {\\n  font-weight: 700;\\n}\\npre {\\n  display: block;\\n  padding: 9.5px;\\n  margin: 0 0 10px;\\n  overflow: auto;\\n  font-size: 14px;\\n  line-height: 1.9;\\n  color: #333;\\n  word-break: break-all;\\n  word-wrap: break-word;\\n  background-color: #f2f2f2;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n  font-family: Menlo, Monaco, Consolas, \\\"Courier New\\\", monospace;\\n}\\npre .nf {\\n  color: #900;\\n  font-weight: bold;\\n}\\npre .na {\\n  color: #008080;\\n}\\npre .kt {\\n  color: #458;\\n  font-weight: bold;\\n}\\npre .o {\\n  font-weight: bold;\\n}\\n.nodata {\\n  height: 100%;\\n  width: 100%;\\n  padding: 8rem 4rem;\\n  text-align: center;\\n  font-size: 1.5rem;\\n  color: #dadada;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-6701a6dc\",\"scoped\":false,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/solution/solution.vue\n// module id = umNi\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||\n        matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/matchbrackets.js\n// module id = vq+x\n// module chunks = 3 4","<template>\n  <transition name=\"el-fade-in-linear\">\n    <div class=\"problem\">\n      <el-row>\n        <el-col :sm=\"0\" :lg=\"2\" :md=\"1\" :xs=\"0\">\n          <div class=\"grid-content\">\n          </div>\n        </el-col>\n        <el-col :sm=\"24\" :lg=\"20\" :md=\"22\" :xs=\"24\">\n          <div class=\"problem-header\">\n            <h3 align=\"left\">{{problemDetail.title}}</h3>\n            <img width=\"56\" height=\"56\"\n                 class=\"collection\" :src=\"getFavoriteSrc(problemDetail)\"\n                 @click=\"collection\">\n          </div>\n          <div class=\"container\">\n            <el-tabs v-model=\"tab\" type=\"card\">\n              <el-tab-pane label=\"Description\" name=\"description\">\n                <description :data=\"problemDetail\"></description>\n              </el-tab-pane>\n              <el-tab-pane label=\"Solution\" name=\"solution\">\n                <solution></solution>\n              </el-tab-pane>\n              <el-tab-pane label=\"Hints\" name=\"third\">\n                <hints></hints>\n              </el-tab-pane>\n              <el-tab-pane label=\"Notes\" name=\"fourth\">\n                <notes :name=\"problem.title\"></notes>\n              </el-tab-pane>\n            </el-tabs>\n          </div>\n        </el-col>\n        <el-col :sm=\"0\" :lg=\"2\" :md=\"1\" :xs=\"0\">\n          <div class=\"grid-content\">\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n  </transition>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { mapGetters, mapActions } from 'vuex'\n  import axios from 'axios'\n  import Description from 'components/description/description'\n  import Solution from 'components/solution/solution'\n  import Hints from 'components/hints/hints'\n  import Notes from 'components/notes/notes'\n  import Problem from 'common/js/problem'\n  import { baseUrl, MSG_OK } from 'common/js/data'\n\n  export default {\n    data() {\n      return {\n        loading: true,\n        problemDetail: {},\n        tab: 'description'\n      }\n    },\n    created() {\n      this._getProblemDetail()\n    },\n    methods: {\n      _getProblemDetail() {\n        if (!this.problem.id) {\n          this.$router.push('/home')\n          return\n        }\n        console.log('problem detail id')\n        console.log(this.problem.id)\n        let url = `${baseUrl}/problems/${this.problem.id}`\n        axios.get(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            console.log(response.data.result)\n            this.problemDetail = response.data.result[0]\n            console.log(this.problemDetail.id)\n            this.loading = false\n          }\n        }, response => {\n          this._getProblemDetail()\n        })\n      },\n      collection() {\n        if (!this.user.user_id) {\n          this.$notify({\n            title: '无法收藏题目',\n            message: '请先登录',\n            type: 'error'\n          })\n        } else {\n          if (!this.hasCollect(this.problemDetail.id)) {\n            this.saveFavoriteList(new Problem({\n              id: this.problemDetail.id,\n              title: this.problemDetail.title,\n              tag: this.problemDetail.tag,\n              level: this.problemDetail.level,\n              accepted: this.problemDetail.accepted,\n              submitted: this.problemDetail.submitted\n            }))\n            this.$notify({\n              title: '收藏成功',\n              message: `收藏题目:${this.problemDetail.title}`,\n              type: 'success'\n            })\n          } else {\n            this.deleteFavoriteList(new Problem({\n              id: this.problemDetail.id,\n              title: this.problemDetail.title,\n              tag: this.problemDetail.tag,\n              level: this.problemDetail.level,\n              accepted: this.problemDetail.accepted,\n              submitted: this.problemDetail.submitted\n            }))\n            this.$notify.info({\n              title: '取消成功',\n              message: `取消收藏题目:${this.problemDetail.title}`\n            })\n          }\n        }\n      },\n      hasCollect(id) {\n        const index = this.collectionList.findIndex((item) => {\n          return item.id === id\n        })\n        return index > -1\n      },\n      getFavoriteSrc(problemDetail) {\n        if (this.user.user_id != null && this.hasCollect(problemDetail.id)) {\n          return 'static/collection.png'\n        } else {\n          return 'static/nocollection.png'\n        }\n      },\n      ...mapActions([\n        'saveFavoriteList',\n        'deleteFavoriteList'\n      ])\n    },\n    computed: {\n      ...mapGetters([\n        'problem',\n        'collectionList',\n        'user'\n      ])\n    },\n    components: {\n      Description,\n      Solution,\n      Hints,\n      Notes\n    }\n  }\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .problem\n    flex: 1 0 auto;\n    .problem-header\n      .collection\n        float right\n        margin-top 5px\n        vertical-align bottom\n      h3\n        display: inline-block;\n        margin-bottom: 10px;\n        font-weight: 500;\n        line-height: 1.0;\n        font-size: 24px;\n\n  .container\n    margin-top: 32px;\n    .el-tabs__content\n      min-height 800px\n\n  .grid-content\n    border-radius: 4px\n    min-height: 36px\n\n  .bg-purple\n    background: #d3dce6\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/problem-detail/problem-detail.vue?326f4fd6"],"sourceRoot":""}