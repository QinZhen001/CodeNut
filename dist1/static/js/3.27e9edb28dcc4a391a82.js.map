{"version":3,"sources":["webpack:///static/js/3.27e9edb28dcc4a391a82.js","webpack:///./~/codemirror/addon/edit/closetag.js?5e13","webpack:///./~/codemirror/addon/search/matchesonscrollbar.js?ba1e","webpack:///./src/components/search/search.vue?195a*","webpack:///./src/common/js/problem.js?e44c*","webpack:///./~/codemirror/keymap/sublime.js?595d","webpack:///src/components/search/search.vue?a000","webpack:///./src/components/manager/manage-problems.vue","webpack:///./~/codemirror/addon/search/search.js?82ab","webpack:///./~/base64-js/index.js","webpack:///src/components/manager/manage-problem-edit.vue","webpack:///./~/buffer/index.js","webpack:///./src/components/manager/manage-problem-edit.vue","webpack:///./~/codemirror/keymap/vim.js?4baf","webpack:///./~/codemirror/addon/fold/foldgutter.js?8645","webpack:///./~/codemirror/addon/dialog/dialog.css?ae99*","webpack:///./~/codemirror/addon/hint/javascript-hint.js?7f9d","webpack:///./~/codemirror/addon/search/match-highlighter.js?bf60","webpack:///./~/codemirror/addon/scroll/annotatescrollbar.js?2d94","webpack:///./~/codemirror/addon/dialog/dialog.css?7d4f","webpack:///./~/codemirror/addon/dialog/dialog.js?3114","webpack:///./src/components/search/search.vue?1980*","webpack:///./src/components/manager/manage-problems.vue?6356","webpack:///./~/codemirror/addon/fold/foldcode.js?1a0b","webpack:///./~/codemirror/addon/fold/xml-fold.js?8688","webpack:///./~/codemirror/addon/fold/indent-fold.js?3b0d","webpack:///./~/codemirror/addon/selection/mark-selection.js?0c6f","webpack:///./src/components/search/search.vue?f391","webpack:///./~/codemirror/addon/fold/foldgutter.css?9068*","webpack:///./~/codemirror/addon/comment/comment.js?8634","webpack:///./~/codemirror/addon/selection/active-line.js?3dbe","webpack:///./~/codemirror/addon/edit/closebrackets.js?d13b","webpack:///./~/codemirror/addon/search/searchcursor.js?b9a9","webpack:///./src/components/manager/manage-problem-edit.vue?d772","webpack:///./src/components/manager/manage-problem-edit.vue?5540","webpack:///./~/codemirror/addon/fold/markdown-fold.js?4d58","webpack:///./~/codemirror/addon/fold/foldgutter.css?cc73","webpack:///./~/codemirror/addon/fold/brace-fold.js?b412","webpack:///./src/components/manager/manage-problem-edit.vue?dbf8","webpack:///./~/codemirror/addon/hint/show-hint.js?12d2","webpack:///src/components/manager/manage-problems.vue","webpack:///./src/components/manager/manage-problems.vue?9bc3","webpack:///./src/components/manager/manage-problems.vue?d6b0","webpack:///./~/isarray/index.js","webpack:///./~/codemirror/addon/fold/comment-fold.js?8312","webpack:///./~/codemirror/keymap/emacs.js?dd5c","webpack:///./~/ieee754/index.js","webpack:///./~/codemirror/addon/edit/matchbrackets.js?0c12","webpack:///./~/js-base64/base64.js","webpack:///./src/components/search/search.vue?afb0*"],"names":["webpackJsonp","+/ra","module","exports","__webpack_require__","mod","CodeMirror","autoCloseGT","cm","getOption","Pass","ranges","listSelections","replacements","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","mode","name","tagName","opt","html","configuration","dontCloseTags","htmlDontClose","indentTags","htmlIndent","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","indexOf","closingTagExists","indent","text","newPos","Pos","line","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","start","replacement","context","getLine","replaceSelections","autoCloseSlash","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","cx","onCx","prev","to","next","defineOption","val","old","Init","removeKeyMap","map","whenClosing","whenOpening","addKeyMap","commands","closeTag","/A6h","SearchAnnotation","query","caseFold","options","this","annotateOptions","listenForChanges","prop","className","annotation","annotateScrollbar","gap","from","firstLine","matches","update","findMatches","self","on","changeHandler","_cm","change","onChange","offsetLine","changeStart","sizeChange","max","defineExtension","prototype","match","splice","cursor","getSearchCursor","maxMatches","findNext","startLine","endLine","changeEnd","newFrom","newTo","clearTimeout","setTimeout","updateAfterChange","clear","off","0tR3","__webpack_exports__","render","_vm","_h","$createElement","_c","_self","command","handleCommandDropdown","staticClass","attrs","placeholder","icon","spellcheck","on-icon-click","_onSearch","focus","model","value","callback","$$v","mysearch","trim","expression","_v","slot","directives","rawName","_l","item","index","dropdownLoading","key","id","_s","title","width","height","src","staticRenderFns","esExports","5Ey+","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default","n","Problem","_ref","level","description","accepted","submitted","like_nums","hate_nums","7Xsf","findPosSubword","doc","dir","clipPos","cat","isWordChar","toUpperCase","moveSubword","extendSelectionsBy","range","display","shift","extend","insertLine","above","isReadOnly","operation","len","newSelection","last","at","push","execCommand","wordAt","word","addCursorToSelection","newRanges","newAnchor","findPosV","newHead","newRange","isSelectedRange","selectBetweenBrackets","opening","scanForBracket","closing","mirror","sortLines","caseSensitive","selected","toSort","lines","getRange","sort","a","b","au","bu","modifyWordOrSelection","indices","cmpPos","getTarget","getCursor","findAndGoTo","forward","target","cur","findPrevious","setSelection","keyMap","sublime","fallthrough","cmds","mac","macDefault","ctrl","goSubwordCombo","scrollLineCombo","getScrollInfo","somethingSelected","visibleBottomLine","lineAtHeight","top","clientHeight","scrollTo","defaultTextHeight","visibleTopLine","lineRanges","scroll","extended","fullWord","sublimeFindFullWord","RegExp","found","addSelection","addCursorToLineCombo","swapLineCombo","linesToMove","newSels","scrollIntoView","toggleComment","joined","offset","obj","actual","exec","rangeCount","marks","sublimeBookmarks","current","find","unshift","pop","findMarks","j","sublimeBookmark","k","markText","clearWhenEmpty","cK","cursors","indentUnit","toStartOfLine","column","countColumn","deletePos","findPosH","prevIndent","findColumn","str","sublimeMark","setBookmark","tmp","sublimeKilled","setCursor","replaceSelection","cursorCoords","bottom","selectLinesCombo","primaryIndex","normalizeKeyMap","A1IV","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default","__WEBPACK_IMPORTED_MODULE_1_common_js_problem__","__WEBPACK_IMPORTED_MODULE_2_axios__","__WEBPACK_IMPORTED_MODULE_2_axios___default","__WEBPACK_IMPORTED_MODULE_3_common_js_data__","__WEBPACK_IMPORTED_MODULE_4_vuex__","data","searchResult","methods","_this","console","log","url","post","content","then","response","result","setProblem","$router","BUZr","injectStyle","ssrContext","Object","defineProperty","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problems_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ffcf786_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problems_vue__","normalizeComponent","__vue_styles__","Component","CK2l","searchOverlay","caseInsensitive","replace","global","source","ignoreCase","token","stream","lastIndex","skipToEnd","SearchState","posFrom","posTo","lastQuery","overlay","getSearchState","search","queryCaseInsensitive","multiline","persistentDialog","deflt","onEnter","onKeyDown","openDialog","selectValueOnOpen","closeOnEnter","onClose","clearSearch","dialog","shortText","f","prompt","confirmDialog","fs","openConfirm","confirm","parseString","_","parseQuery","isRE","startSearch","queryText","removeOverlay","addOverlay","showMatchesOnScrollbar","annotate","doSearch","rev","persistent","immediate","q","getSelection","hiding","searchNext","event","e_stop","style","opacity","shiftKey","document","querySelector","wrapper","getBoundingClientRect","queryDialog","keyName","extra","cmd","replaceAll","all","dialogText","replaceQueryDialog","replacementQueryDialog","advance","doReplaceConfirm","doReplace","findPersistent","findPersistentNext","findPersistentPrev","findPrev","EKta","placeHoldersCount","b64","Error","byteLength","toByteArray","l","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","output","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","code","ELu2","__WEBPACK_IMPORTED_MODULE_1_vuex__","__WEBPACK_IMPORTED_MODULE_2_common_js_data__","__WEBPACK_IMPORTED_MODULE_3_axios__","__WEBPACK_IMPORTED_MODULE_3_axios___default","props","editTitle","String","default","isEdit","Boolean","form","program","input","checkLanguageList","editorOptions","tabSize","theme","lineNumbers","foldGutter","gutters","styleSelectedText","highlightSelectionMatches","showToken","Languages","editorModes","selectLanguage","templetC","defaultCode","templetCpp","templetCsharp","templetJava","templetPython","templetJs","templetRuby","templetGolang","quit","$emit","setupProblem","Base64","_addTemplet","array","_pushALLTemplets","encode","msg","setTemplets","$notify","message","error","handleCommandLangage","_this2","templets","dropdownChange","isShow","computed","EuP9","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","isEncoding","write","fromArrayLike","byteOffset","isBuffer","copy","buffer","isnan","isArray","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","bidirectionalIndexOf","isNaN","arrayIndexOf","call","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","INVALID_BASE64_RE","units","Infinity","leadSurrogate","byteArray","c","hi","lo","dst","INSPECT_MAX_BYTES","foo","subarray","poolSize","_augment","Symbol","species","configurable","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","swap16","swap32","swap64","arguments","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","HbqP","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problem_edit_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e52881_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problem_edit_vue__","Hyg2","defaultKeymap","keys","toKeys","action","motion","motionArgs","linewise","toJumplist","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultExCommandMap","shortName","possiblyAsync","excludeFromCommandHistory","Vim","enterVimMode","setOption","signal","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","vim","detachVimMap","rmClass","getWrapperElement","attach","attachVimMap","addClass","cmKey","vimKey","cmKeyToVimKey","findKey","pieces","split","lastPiece","hasCharacter","piece","modifiers","specialKeys","isUpperCase","onPasteFn","insertMode","offsetCursor","actions","enterInsertMode","makeKeyRange","isLine","isLowerCase","isMatchableSymbol","isNumber","numberRegex","isWhiteSpaceString","inArray","defaultValue","aliases","cfg","option","scope","local","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","createInsertModeChanges","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","resetVimGlobalState","vimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","createCircularJumpList","macroModeState","lastCharacterSearch","increment","selectedCharacter","registerController","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","prefixRepeat","motionRepeat","keyBuffer","registerName","clearInputState","reason","Register","insertModeChanges","searchQueries","defineRegister","register","registers","validRegisters","unnamedRegister","historyBuffer","iterator","initialPrefix","defineMotion","fn","motions","fillArray","times","defineOperator","operators","defineAction","clipCursorToContent","includeLineBreak","maxCh","lineLength","copyArgs","args","hasOwnProperty","offsetCh","getOffset","commandMatches","partial","full","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","lastChar","repeatFn","repeat","copyCursor","cursorEqual","cur1","cur2","cursorIsBefore","cursorMin","cursorMax","cursorIsBetween","cur3","cur1before2","cur2before3","lineNum","s","escapeRegex","extendLineToColumn","endCh","spaces","selectBlock","selectionEnd","selections","isClipped","curHead","primIndex","getIndex","wasClipped","base","baseCh","headCh","newDir","selectForInsert","lineHead","atAnchor","atHead","getSelectedAreaRange","selectionStart","block","anchorMark","headMark","updateLastSelection","posFromIndex","indexFromPos","expandSelection","updateCmSelection","cmSel","makeCmSelection","primary","updateFakeCursor","exclusive","headOffset","anchorOffset","left","right","getHead","exitVisualMode","moveHead","clipToLine","curStart","curEnd","selection","expandSelectionToLine","findFirstNonWhiteSpaceCharacter","firstNonWS","expandWordUnderCursor","_forward","noSymbol","idx","wordCharTest","bigWordCharTest","wordStart","recordJumpPosition","oldCur","newCur","add","recordLastCharacterSearch","findSymbol","symb","lineCount","curCh","lineText","nextCh","lastCh","reverseSymb",")","}","(","{","depth","curMoveThrough","symbolToMode","init","findSymbolModes","isComplete","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","moveToWord","words","eodCh","shortCircuit","firstWord","lastWord","moveToCharacter","character","charIdxInLine","moveToColumn","updateMark","markName","validMarks","includeChar","findParagraph","isEmpty","isBoundary","any","startState","selectCompanionObject","bracketRegexp","[","]","openSym","curChar","bracketRegex","findBeginningAndEnd","chars","firstIndex","searchState_","template","onKeyUp","splitBySlash","argString","slashes","findUnescapedSlashes","tokens","substring","escapeNextChar","translateRegex","specials","unescape","specialComesNext","translateRegexReplace","charUnescapes","unescapeRegexReplace","StringStream","eol","peek","matched","matcher","unescapes","smartCase","getRegister","setText","regexPart","forceIgnoreCase","showConfirm","openNotification","duration","alert","makePrompt","prefix","desc","raw","showPrompt","regexEqual","r1","r2","updateSearchQuery","rawQuery","highlightSearchMatches","getQuery","setQuery","matchSol","sol","backUp","searchState","getOverlay","getScrollbarAnnotate","setScrollbarAnnotate","setOverlay","clearSearchHighlight","isInRange","getUserVisibleLines","scrollInfo","coordsChar","bottomY","getMarkPos","history","done","mark","lineStart","lineEnd","searchCursor","replaceWith","newText","lastPos","close","exMode","onPromptKeyDown","_value","savedCallback","exitInsertMode","insertModeChangeRegister","lastChange","selLength","inVisualBlock","changes","InsertModeKey","onKeyEventTargetKeyDown","repeatLastEdit","repeatOverride","toggleOverwrite","logInsertModeChange","_mapCommand","mapCommand","executeMacroRegister","exCommandDispatcher","processCommand","imc","handleKey","repeatInsertModeChanges","logKey","pushText","pushInsertModeChanges","logSearchQuery","pushSearchQuery","changeObj","expectCursorActivityForChange","origin","maybeReset","overwrite","curOp","isVimOp","handleExternalSelection","onKeyFound","lookupKey","repeatForInsert","repeatCommand","isAction","commandDispatcher","processAction","evalInput","repeatInsert","changeObject","cachedInputState","keyHandler","binding","lastSel","Shift","Ctrl","Alt","Cmd","Mod","Enter","Backspace","Delete","Insert","upperCaseAlphabet","lowerCaseAlphabet","numbers","useNextSlot","pointer","trashMark","curMark","markPos","tail","move","inc","cachedCursor","exitMacroRecordMode","enterMacroRecordMode","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","lhs","rhs","ctx","unmap","defineEx","func","exCommands","commandMap_","handleMacroRecording","handleEsc","doKeyToKey","keysAreChars","matchCommand","thisMatch","window","here","keysMatcher","pushRepeatDigit","handleEx","getRepeat","isValidRegister","shiftNumericRegisters_","nextMatch","up","element","pushInput","reset","bestMatch","processMotion","processOperator","processOperatorMotion","processSearch","processEx","repeatIsExplicit","recordLastEdit","handleQuery","onPromptClose","originalScrollPos","onPromptKeyUp","parsedQuery","originalQuery","setReversed","promptPrefix","searchPromptDesc","isKeyword","exArgs","origHead","origAnchor","oldHead","oldAnchor","noRepeat","motionResult","lineOffset","abs","chOffset","operatorMoveTo","actionCommand","moveToTopLine","_head","moveToMiddleLine","moveToBottomLine","expandToLine","isReversed","goToMark","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","moveByCharacters","moveByLines","moveByDisplayLines","moveByScroll","moveToEol","first","moveToStartOfLine","charCoords","hitSide","lastCharCoords","goalCoords","resCoords","moveByPage","moveByParagraph","scrollbox","orig","dest","moveByWords","moveTillCharacter","moveToSymbol","retval","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","symbol","getTokenTypeAt","findMatchingBracket","moveToLineOrEdgeOfDocument","textObjectManipulation","mirroredPairs","selfPaired","'","\"","repeatLastCharacterSearch","lastSearch","moveH","finalHead","lastState","prevLineEnd","MAX_VALUE","wasLastLine","newlineAndIndent","delete","changeCase","getSelections","swapped","toSwap","yank","endPos","jumpListWalk","lineHeight","delta","ceil","newBottom","scrollToCursor","replayMacro","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineAndIndentContinueComment","paste","whitespaceLength","tabs","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","lastSelectionCurEnd","selectedArea","selectedText","emptyStrings","undo","redo","setRegister","setMark","replaceTo","replaceWithStr","incrementNumberToken","numberStr","lineStr","re","number","*","/","M","#","bracket","section","comment","method","preprocess","reversed","\\n","\\r","\\t","\\/","\\\\","ExCommandDispatcher","buildCommandMap_","opt_params","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","mapping","colorscheme","mapArgs","imap","nmap","vmap","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","setOptionReturn","setlocal","setglobal","regArgs","regInfo","compareFn","reverse","anum","bnum","radix","comparePatternFn","unique","pattern","err","eatSpace","opts","decimal","hex","octal","numPart","textPart","matchPart","textOld","matchedLines","nextCommand","substitute","trailing","flagsPart","count","replacePart","startPos","save","nohlsearch","delmarks","sym","startMark","finishMark","finish","detach","Kk9m","State","parseOptions","gutter","indicatorOpen","indicatorFolded","isFolded","__isFold","marker","spec","createElement","cloneNode","updateFoldInfo","minSize","foldOption","eachLine","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","folded","foldCode","rangeFinder","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","LxZp","locals","Mixr","forEach","arrayContains","scriptHint","editor","keywords","getToken","tprop","getCompletions","javascriptHint","javascriptKeywords","getCoffeeScriptToken","coffeescriptHint","coffeescriptKeywords","forAllProps","getOwnPropertyNames","getPrototypeOf","o","maybeAdd","gatherCompletions","stringProps","arrayProps","Function","funcProps","globalScope","additionalContext","useGlobalScope","jQuery","v","localVars","globalVars","registerHelper","OkRY","defaults","timeout","matchesonscroll","active","cursorActivity","matchHighlighter","hasFocus","scheduleHighlight","onFocus","highlightMatches","delay","hasBoundary","makeOverlay","searchFor","wordsOnly","isWord","minChars","chr","boundariesAround","skipTo","QSKu","Annotation","scheduleRedraw","doRedraw","redraw","buttonHeight","scrollButtonHeight","annotations","doUpdate","div","appendChild","cssText","computeScale","resizeHandler","hScale","barHeight","getScrollerElement","scrollHeight","compute","getY","curLine","curLineObj","getLineHandle","widgets","wrapping","singleLineH","heightAtLine","frag","createDocumentFragment","anns","barWidth","nextTop","ann","setAttribute","textContent","parentNode","removeChild","RkAk","version","sources","names","mappings","file","sourcesContent","sourceRoot","RkhK","dialogDiv","wrap","innerHTML","closeNotification","newVal","currentNotificationClose","inp","closed","me","button","getElementsByTagName","select","onInput","keyCode","blur","closeOnBlur","callbacks","buttons","blurring","e_preventDefault","doneTimer","RrKZ","S1i8","THjC","doFold","force","allowFolded","finder","findMarksAt","cleared","myWidget","makeWidget","myRange","replacedWith","clearOnEnter","widget","createTextNode","foldOptions","defaultOptions","newFoldFunction","toggleFold","fold","unfold","foldAll","unfoldAll","funcs","helpers","getHelpers","auto","minFoldSize","scanUp","TQy8","cmp","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","toNextTag","toPrevTag","findMatchingClose","stack","startCh","findMatchingOpen","nameStartChar","openTag","findMatchingTag","open","findEnclosingTag","U3HU","lineIndent","lineNo","spaceTo","myIndent","lastLineInFold","U80t","markedSelection","coverRange","addAt","cls","markedSelectionStyle","CHUNK_SIZE","atEnd","coverStart","coverEnd","YOyO","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_search_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d96e4b2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_search_vue__","Yokd","Z6qg","nonWS","probablyInsideString","useInnerComments","getModeAt","noOptions","minLine","uncomment","lineComment","commentString","blockCommentStart","fullLines","blockComment","pad","padding","blankLines","commentBlankLines","baseString","whitespace","cut","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","didSomething","lineString","insideStart","insideEnd","lastStart","firstEnd","almostLastStart","openEnd","foundEnd","aGTD","clearActiveLines","activeLines","removeLineClass","WRAP_CLASS","BACK_CLASS","GUTT_CLASS","sameArray","updateActiveLines","nonEmpty","getLineHandleVisualStart","addLineClass","selectionChange","aX1R","conf","getConfig","closeBrackets","override","handleBackspace","pairs","around","charsAround","handleEnter","explode","contractSelection","inverted","handleChar","triples","identical","curType","enteringString","isClosingBracket","stringStartsAfter","sels","triggerElectric","type1","bind","c+I8","regexpFlags","regexp","flags","ensureGlobal","maybeMultiline","searchRegexpForward","searchRegexpForwardMultiline","chunk","before","inside","lastMatchIn","cutOff","newMatch","searchRegexpBackward","searchRegexpBackwardMultiline","adjustPos","foldFunc","mid","searchStringForward","noFold","cutFrom","searchStringBackward","topString","SearchCursor","atOccurrence","normalize","splitLines","defineDocExtension","c2Vz","click","$event","stopPropagation","nativeOn","ref","label-width","label","rows","trigger","menu-align","visible-change","drNd","dxBS","isHeader","tokentype","headerLevel","maxDepth","lastLineNo","nextNextLine","engA","fo6W","findOpening","openCh","pass","tokenType","startToken","endToken","outer","nextOpen","hasImport","semi","has","hasInclude","hdeF","jQeI","Completion","debounce","tick","startLen","activityFunc","isNewCompletion","nw","hintOptions","hint","resolve","getText","completion","handle","addBinding","bound","baseMap","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","pick","Tab","Esc","custom","customKeys","extraKeys","getHintElement","hintsElement","el","nodeName","Widget","picked","hints","selectedHint","completions","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","displayText","hintId","alignWithWord","below","winW","innerWidth","body","offsetWidth","documentElement","winH","innerHeight","offsetHeight","container","box","overlapY","scrolls","startScroll","overlapX","node","firstChild","nextSibling","paddingRight","nativeBarWidth","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onScroll","curScroll","newTop","point","pageYOffset","scrollTop","t","srcElement","completeOnSingleClick","applicableHelpers","supportsSelection","fetchHints","async","resolveAutoHints","resolved","run","app","getHelper","fromList","anyword","showHint","getHints","newOpts","completionActive","requestAnimationFrame","cancelAnimationFrame","closeCharacters","disable","myTick","finishUpdate","completeSingle","childNodes","offsetTop","term","autocomplete","kYSO","__WEBPACK_IMPORTED_MODULE_1_common_js_data__","__WEBPACK_IMPORTED_MODULE_3__node_modules_element_ui_packages_form_src_form_item__","__WEBPACK_IMPORTED_MODULE_4_components_search_search__","__WEBPACK_IMPORTED_MODULE_5_components_manager_manage_problem_edit__","__WEBPACK_IMPORTED_MODULE_6_vuex__","__WEBPACK_IMPORTED_MODULE_7_common_js_problem__","problemDatas","cur_page","multipleSelection","select_cate","select_word","del_list","is_search","rules","required","isShowEdit","created","_getProblemsData","showSetupProblem","handleCurrentChange","curPage","get","formatter","row","address","filterTag","handleEdit","saveOneProblem","handleDelete","$message","delAll","calcTag","cellValue","handleSelectionChange","hideEdit","contestDatas","filter","d","is_del","components","ElFormItem","Search","ProblemEdit","oxMS","staticStyle","border","selection-change","sortable","scopedSlots","_u","$index","layout","total","current-change","editFinish","qm6i","sOR5","soCA","registerGlobalHelper","tjx/","posEq","addToRing","killRing","growRingTop","getFromRing","popFromRing","kill","mayGrow","lastKill","isClean","gen","changeGeneration","byChar","byWord","byLine","goalColumn","byPage","byParagraph","no","sawText","fst","lst","bySentence","sawWord","byExpr","strict","getPrefix","precise","digits","emacsPrefix","clearPrefix","repeated","findEnd","by","extendSelection","killTo","killRegion","addPrefix","digit","maybeClearPrefix","maybeDuplicateInput","emacsPrefixMap","prefixPreservingKeys","dup","one","txt","addPrefixMap","prefixMap","maybeRemovePrefixMap","setExtending","getExtending","clearMark","getInput","operateOnWord","op","toEnclosingExpr","regPrefix","Alt-G","Ctrl-X","Ctrl-Q","Ctrl-U","emacs","Ctrl-W","Ctrl-K","Alt-W","Ctrl-Y","Alt-Y","Ctrl-Space","Ctrl-Shift-2","Ctrl-F","Ctrl-B","Right","Left","Ctrl-D","Ctrl-H","Alt-F","Alt-B","Alt-D","Alt-Backspace","Ctrl-N","Ctrl-P","Ctrl-A","Ctrl-E","Alt-V","Ctrl-V","Ctrl-Up","Ctrl-Down","Alt-A","Alt-E","Alt-K","Ctrl-Alt-K","Ctrl-Alt-Backspace","Ctrl-Alt-F","Ctrl-Alt-B","Shift-Ctrl-Alt-2","Ctrl-Alt-T","leftStart","leftEnd","rightEnd","rightStart","Ctrl-Alt-U","Alt-Space","Ctrl-O","Ctrl-T","Alt-C","w","letter","Alt-U","Alt-L","Alt-;","Ctrl-/","Shift-Ctrl--","Ctrl-Z","Cmd-Z","Shift-Alt-,","Shift-Alt-.","Ctrl-S","Ctrl-R","Ctrl-G","Shift-Alt-5","Alt-/","Ctrl-J","Alt-G G","Ctrl-X Tab","indentSelection","Ctrl-X Ctrl-X","Ctrl-X Ctrl-S","Ctrl-X Ctrl-W","Ctrl-X S","Ctrl-X F","Ctrl-X U","Ctrl-X K","Ctrl-X Delete","Ctrl-X H","Ctrl-Q Tab","ujcs","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","vq+x","where","config","afterCursor","matching","maxScanLen","maxScanLineLength","maxScanLines","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","ie_lt8","focused","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","oldConfig","xrTZ","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_Base64","b64chars","b64tab","bin","cb_utob","cc","re_utob","utob","u","cb_encode","ccc","padlen","ord","btoa","_encode","constructor","urisafe","m0","encodeURI","re_btou","cb_btou","cccc","cp","btou","cb_decode","atob","_decode","decode","noConflict","VERSION","fromBase64","toBase64","noEnum","enumerable","writable","extendString","yGpH"],"mappings":"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","file":"static/js/3.27e9edb28dcc4a391a82.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ \"+/ra\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"TQy8\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"/A6h\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"QSKu\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../scroll/annotatescrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function(query, caseFold, options) {\n    if (typeof options == \"string\") options = {className: options};\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {listenForChanges: false};\n    for (var prop in options) annotateOptions[prop] = options[prop];\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {from: cm.firstLine(), to: cm.lastLine() + 1};\n    this.matches = [];\n    this.update = null;\n\n    this.findMatches();\n    this.annotation.update(this.matches);\n\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function(_cm, change) { self.onChange(change); });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function() {\n    if (!this.gap) return;\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), this.caseFold);\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n    while (cursor.findNext()) {\n      var match = {from: cursor.from(), to: cursor.to()};\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function(change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {from: change.from.line, to: endLine + 1};\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function() { self.updateAfterChange(); }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function() {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function() {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});\n\n\n/***/ }),\n\n/***/ \"0tR3\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dropdown', {\n    on: {\n      \"command\": _vm.handleCommandDropdown\n    }\n  }, [_c('el-input', {\n    staticClass: \"search-input\",\n    attrs: {\n      \"placeholder\": \"请输入要搜索的题目\",\n      \"icon\": \"search\",\n      \"spellcheck\": \"false\",\n      \"on-icon-click\": _vm._onSearch\n    },\n    on: {\n      \"change\": _vm._onSearch,\n      \"focus\": _vm._onSearch\n    },\n    model: {\n      value: (_vm.mysearch),\n      callback: function($$v) {\n        _vm.mysearch = (typeof $$v === 'string' ? $$v.trim() : $$v)\n      },\n      expression: \"mysearch\"\n    }\n  }), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, [_c('el-dropdown-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.dropdownLoading),\n      expression: \"dropdownLoading\"\n    }]\n  }, [_vm._v(\"拼命加载中...\")]), _vm._v(\" \"), _vm._l((_vm.searchResult), function(item, index) {\n    return _c('el-dropdown-item', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (index <= 10 && !_vm.dropdownLoading),\n        expression: \"index <= 10 && !dropdownLoading\"\n      }],\n      key: index,\n      attrs: {\n        \"command\": item.id\n      }\n    }, [_c('span', {\n      staticClass: \"problem-item-title\"\n    }, [_vm._v(_vm._s(item.title))]), _vm._v(\" \"), _c('img', {\n      staticClass: \"problem-item-img\",\n      attrs: {\n        \"width\": \"16\",\n        \"height\": \"16 \",\n        \"src\": \"static/problem.png\"\n      }\n    })])\n  })], 2)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"5Ey+\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(\"Zrlr\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);\n\n\n/**\n * Created by qinzhen on 2017/9/17.\n */\nvar Problem = function Problem(_ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      tag = _ref.tag,\n      level = _ref.level,\n      description = _ref.description,\n      accepted = _ref.accepted,\n      submitted = _ref.submitted,\n      like_nums = _ref.like_nums,\n      hate_nums = _ref.hate_nums;\n\n  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Problem);\n\n  this.id = id;\n  this.title = title;\n  this.tag = tag;\n  this.level = level;\n  this.description = description;\n  this.accepted = accepted;\n  this.submitted = submitted;\n  this.like_nums = like_nums;\n  this.hate_nums = hate_nums;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Problem);\n\n/***/ }),\n\n/***/ \"7Xsf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// A rough approximation of Sublime Text's keybindings\n// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"vq+x\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var map = CodeMirror.keyMap.sublime = {fallthrough: \"default\"};\n  var cmds = CodeMirror.commands;\n  var Pos = CodeMirror.Pos;\n  var mac = CodeMirror.keyMap[\"default\"] == CodeMirror.keyMap.macDefault;\n  var ctrl = mac ? \"Cmd-\" : \"Ctrl-\";\n\n  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.\n  function findPosSubword(doc, start, dir) {\n    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n    var line = doc.getLine(start.line);\n    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n    var state = \"start\", type;\n    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n      var cat = next != \"_\" && CodeMirror.isWordChar(next) ? \"w\" : \"o\";\n      if (cat == \"w\" && next.toUpperCase() == next) cat = \"W\";\n      if (state == \"start\") {\n        if (cat != \"o\") { state = \"in\"; type = cat; }\n      } else if (state == \"in\") {\n        if (type != cat) {\n          if (type == \"w\" && cat == \"W\" && dir < 0) pos--;\n          if (type == \"W\" && cat == \"w\" && dir > 0) { type = \"w\"; continue; }\n          break;\n        }\n      }\n    }\n    return Pos(start.line, pos);\n  }\n\n  function moveSubword(cm, dir) {\n    cm.extendSelectionsBy(function(range) {\n      if (cm.display.shift || cm.doc.extend || range.empty())\n        return findPosSubword(cm.doc, range.head, dir);\n      else\n        return dir < 0 ? range.from() : range.to();\n    });\n  }\n\n  var goSubwordCombo = mac ? \"Ctrl-\" : \"Alt-\";\n\n  cmds[map[goSubwordCombo + \"Left\"] = \"goSubwordLeft\"] = function(cm) { moveSubword(cm, -1); };\n  cmds[map[goSubwordCombo + \"Right\"] = \"goSubwordRight\"] = function(cm) { moveSubword(cm, 1); };\n\n  if (mac) map[\"Cmd-Left\"] = \"goLineStartSmart\";\n\n  var scrollLineCombo = mac ? \"Ctrl-Alt-\" : \"Ctrl-\";\n\n  cmds[map[scrollLineCombo + \"Up\"] = \"scrollLineUp\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, \"local\");\n      if (cm.getCursor().line >= visibleBottomLine)\n        cm.execCommand(\"goLineUp\");\n    }\n    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n  };\n  cmds[map[scrollLineCombo + \"Down\"] = \"scrollLineDown\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleTopLine = cm.lineAtHeight(info.top, \"local\")+1;\n      if (cm.getCursor().line <= visibleTopLine)\n        cm.execCommand(\"goLineDown\");\n    }\n    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"L\"] = \"splitSelectionByLine\"] = function(cm) {\n    var ranges = cm.listSelections(), lineRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      for (var line = from.line; line <= to.line; ++line)\n        if (!(to.line > from.line && line == to.line && to.ch == 0))\n          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n                           head: line == to.line ? to : Pos(line)});\n    }\n    cm.setSelections(lineRanges, 0);\n  };\n\n  map[\"Shift-Tab\"] = \"indentLess\";\n\n  cmds[map[\"Esc\"] = \"singleSelectionTop\"] = function(cm) {\n    var range = cm.listSelections()[0];\n    cm.setSelection(range.anchor, range.head, {scroll: false});\n  };\n\n  cmds[map[ctrl + \"L\"] = \"selectLine\"] = function(cm) {\n    var ranges = cm.listSelections(), extended = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      extended.push({anchor: Pos(range.from().line, 0),\n                     head: Pos(range.to().line + 1, 0)});\n    }\n    cm.setSelections(extended);\n  };\n\n  map[\"Shift-Ctrl-K\"] = \"deleteLine\";\n\n  function insertLine(cm, above) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    cm.operation(function() {\n      var len = cm.listSelections().length, newSelection = [], last = -1;\n      for (var i = 0; i < len; i++) {\n        var head = cm.listSelections()[i].head;\n        if (head.line <= last) continue;\n        var at = Pos(head.line + (above ? 0 : 1), 0);\n        cm.replaceRange(\"\\n\", at, null, \"+insertLine\");\n        cm.indentLine(at.line, null, true);\n        newSelection.push({head: at, anchor: at});\n        last = head.line + 1;\n      }\n      cm.setSelections(newSelection);\n    });\n    cm.execCommand(\"indentAuto\");\n  }\n\n  cmds[map[ctrl + \"Enter\"] = \"insertLineAfter\"] = function(cm) { return insertLine(cm, false); };\n\n  cmds[map[\"Shift-\" + ctrl + \"Enter\"] = \"insertLineBefore\"] = function(cm) { return insertLine(cm, true); };\n\n  function wordAt(cm, pos) {\n    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n  }\n\n  cmds[map[ctrl + \"D\"] = \"selectNextOccurrence\"] = function(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      cm.setSelection(word.from, word.to);\n      fullWord = true;\n    } else {\n      var text = cm.getRange(from, to);\n      var query = fullWord ? new RegExp(\"\\\\b\" + text + \"\\\\b\") : text;\n      var cur = cm.getSearchCursor(query, to);\n      var found = cur.findNext();\n      if (!found) {\n        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n        found = cur.findNext();\n      }\n      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n        return CodeMirror.Pass\n      cm.addSelection(cur.from(), cur.to());\n    }\n    if (fullWord)\n      cm.state.sublimeFindFullWord = cm.doc.sel;\n  };\n\n  function addCursorToSelection(cm, dir) {\n    var ranges = cm.listSelections(), newRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var newAnchor = cm.findPosV(range.anchor, dir, \"line\");\n      var newHead = cm.findPosV(range.head, dir, \"line\");\n      var newRange = {anchor: newAnchor, head: newHead};\n      newRanges.push(range);\n      newRanges.push(newRange);\n    }\n    cm.setSelections(newRanges);\n  }\n\n  var addCursorToLineCombo = mac ? \"Shift-Cmd\" : 'Alt-Ctrl';\n  cmds[map[addCursorToLineCombo + \"Up\"] = \"addCursorToPrevLine\"] = function(cm) { addCursorToSelection(cm, -1); };\n  cmds[map[addCursorToLineCombo + \"Down\"] = \"addCursorToNextLine\"] = function(cm) { addCursorToSelection(cm, 1); };\n\n  function isSelectedRange(ranges, from, to) {\n    for (var i = 0; i < ranges.length; i++)\n      if (ranges[i].from() == from && ranges[i].to() == to) return true\n    return false\n  }\n\n  var mirror = \"(){}[]\";\n  function selectBetweenBrackets(cm) {\n    var ranges = cm.listSelections(), newRanges = []\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n      if (!opening) return false;\n      for (;;) {\n        var closing = cm.scanForBracket(pos, 1);\n        if (!closing) return false;\n        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n          newRanges.push({anchor: Pos(opening.pos.line, opening.pos.ch + 1),\n                          head: closing.pos});\n          break;\n        }\n        pos = Pos(closing.pos.line, closing.pos.ch + 1);\n      }\n    }\n    cm.setSelections(newRanges);\n    return true;\n  }\n\n  cmds[map[\"Shift-\" + ctrl + \"Space\"] = \"selectScope\"] = function(cm) {\n    selectBetweenBrackets(cm) || cm.execCommand(\"selectAll\");\n  };\n  cmds[map[\"Shift-\" + ctrl + \"M\"] = \"selectBetweenBrackets\"] = function(cm) {\n    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n  };\n\n  cmds[map[ctrl + \"M\"] = \"goToBracket\"] = function(cm) {\n    cm.extendSelectionsBy(function(range) {\n      var next = cm.scanForBracket(range.head, 1);\n      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n      var prev = cm.scanForBracket(range.head, -1);\n      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n    });\n  };\n\n  var swapLineCombo = mac ? \"Cmd-Ctrl-\" : \"Shift-Ctrl-\";\n\n  cmds[map[swapLineCombo + \"Up\"] = \"swapLineUp\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n                    head: Pos(range.head.line - 1, range.head.ch)});\n      if (range.to().ch == 0 && !range.empty()) --to;\n      if (from > at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = 0; i < linesToMove.length; i += 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        if (to > cm.lastLine())\n          cm.replaceRange(\"\\n\" + line, Pos(cm.lastLine()), null, \"+swapLine\");\n        else\n          cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.setSelections(newSels);\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[swapLineCombo + \"Down\"] = \"swapLineDown\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n      if (range.to().ch == 0 && !range.empty()) from--;\n      if (from < at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        if (from == cm.lastLine())\n          cm.replaceRange(\"\", Pos(from - 1), Pos(from), \"+swapLine\");\n        else\n          cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[ctrl + \"/\"] = \"toggleCommentIndented\"] = function(cm) {\n    cm.toggleComment({ indent: true });\n  }\n\n  cmds[map[ctrl + \"J\"] = \"joinLines\"] = function(cm) {\n    var ranges = cm.listSelections(), joined = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from();\n      var start = from.line, end = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n        end = ranges[++i].to().line;\n      joined.push({start: start, end: end, anchor: !range.empty() && from});\n    }\n    cm.operation(function() {\n      var offset = 0, ranges = [];\n      for (var i = 0; i < joined.length; i++) {\n        var obj = joined[i];\n        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n        for (var line = obj.start; line <= obj.end; line++) {\n          var actual = line - offset;\n          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n          if (actual < cm.lastLine()) {\n            cm.replaceRange(\" \", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n            ++offset;\n          }\n        }\n        ranges.push({anchor: anchor || head, head: head});\n      }\n      cm.setSelections(ranges, 0);\n    });\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"D\"] = \"duplicateLine\"] = function(cm) {\n    cm.operation(function() {\n      var rangeCount = cm.listSelections().length;\n      for (var i = 0; i < rangeCount; i++) {\n        var range = cm.listSelections()[i];\n        if (range.empty())\n          cm.replaceRange(cm.getLine(range.head.line) + \"\\n\", Pos(range.head.line, 0));\n        else\n          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  if (!mac) map[ctrl + \"T\"] = \"transposeChars\";\n\n  function sortLines(cm, caseSensitive) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), toSort = [], selected;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      if (range.empty()) continue;\n      var from = range.from().line, to = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n        to = ranges[++i].to().line;\n      if (!ranges[i].to().ch) to--;\n      toSort.push(from, to);\n    }\n    if (toSort.length) selected = true;\n    else toSort.push(cm.firstLine(), cm.lastLine());\n\n    cm.operation(function() {\n      var ranges = [];\n      for (var i = 0; i < toSort.length; i += 2) {\n        var from = toSort[i], to = toSort[i + 1];\n        var start = Pos(from, 0), end = Pos(to);\n        var lines = cm.getRange(start, end, false);\n        if (caseSensitive)\n          lines.sort();\n        else\n          lines.sort(function(a, b) {\n            var au = a.toUpperCase(), bu = b.toUpperCase();\n            if (au != bu) { a = au; b = bu; }\n            return a < b ? -1 : a == b ? 0 : 1;\n          });\n        cm.replaceRange(lines, start, end);\n        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});\n      }\n      if (selected) cm.setSelections(ranges, 0);\n    });\n  }\n\n  cmds[map[\"F9\"] = \"sortLines\"] = function(cm) { sortLines(cm, true); };\n  cmds[map[ctrl + \"F9\"] = \"sortLinesInsensitive\"] = function(cm) { sortLines(cm, false); };\n\n  cmds[map[\"F2\"] = \"nextBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      var current = marks.shift();\n      var found = current.find();\n      if (found) {\n        marks.push(current);\n        return cm.setSelection(found.from, found.to);\n      }\n    }\n  };\n\n  cmds[map[\"Shift-F2\"] = \"prevBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      marks.unshift(marks.pop());\n      var found = marks[marks.length - 1].find();\n      if (!found)\n        marks.pop();\n      else\n        return cm.setSelection(found.from, found.to);\n    }\n  };\n\n  cmds[map[ctrl + \"F2\"] = \"toggleBookmark\"] = function(cm) {\n    var ranges = cm.listSelections();\n    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      var found = cm.findMarks(from, to);\n      for (var j = 0; j < found.length; j++) {\n        if (found[j].sublimeBookmark) {\n          found[j].clear();\n          for (var k = 0; k < marks.length; k++)\n            if (marks[k] == found[j])\n              marks.splice(k--, 1);\n          break;\n        }\n      }\n      if (j == found.length)\n        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n    }\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"F2\"] = \"clearBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    marks.length = 0;\n  };\n\n  cmds[map[\"Alt-F2\"] = \"selectBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks, ranges = [];\n    if (marks) for (var i = 0; i < marks.length; i++) {\n      var found = marks[i].find();\n      if (!found)\n        marks.splice(i--, 0);\n      else\n        ranges.push({anchor: found.from, head: found.to});\n    }\n    if (ranges.length)\n      cm.setSelections(ranges, 0);\n  };\n\n  map[\"Alt-Q\"] = \"wrapLines\";\n\n  var cK = ctrl + \"K \";\n\n  function modifyWordOrSelection(cm, mod) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), indices = [], replacements = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) { indices.push(i); replacements.push(\"\"); }\n        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n      }\n      cm.replaceSelections(replacements, \"around\", \"case\");\n      for (var i = indices.length - 1, at; i >= 0; i--) {\n        var range = ranges[indices[i]];\n        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n        var word = wordAt(cm, range.head);\n        at = word.from;\n        cm.replaceRange(mod(word.word), word.from, word.to);\n      }\n    });\n  }\n\n  map[cK + ctrl + \"Backspace\"] = \"delLineLeft\";\n\n  cmds[map[\"Backspace\"] = \"smartBackspace\"] = function(cm) {\n    if (cm.somethingSelected()) return CodeMirror.Pass;\n\n    cm.operation(function() {\n      var cursors = cm.listSelections();\n      var indentUnit = cm.getOption(\"indentUnit\");\n\n      for (var i = cursors.length - 1; i >= 0; i--) {\n        var cursor = cursors[i].head;\n        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption(\"tabSize\"));\n\n        // Delete by one character by default\n        var deletePos = cm.findPosH(cursor, -1, \"char\", false);\n\n        if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n          var prevIndent = new Pos(cursor.line,\n            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n\n          // Smart delete only if we found a valid prevIndent location\n          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;\n        }\n\n        cm.replaceRange(\"\", deletePos, cursor, \"+delete\");\n      }\n    });\n  };\n\n  cmds[map[cK + ctrl + \"K\"] = \"delLineRight\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(\"\", ranges[i].anchor, Pos(ranges[i].to().line), \"+delete\");\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[cK + ctrl + \"U\"] = \"upcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n  };\n  cmds[map[cK + ctrl + \"L\"] = \"downcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n  };\n\n  cmds[map[cK + ctrl + \"Space\"] = \"setSublimeMark\"] = function(cm) {\n    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n  };\n  cmds[map[cK + ctrl + \"A\"] = \"selectToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) cm.setSelection(cm.getCursor(), found);\n  };\n  cmds[map[cK + ctrl + \"W\"] = \"deleteToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      var from = cm.getCursor(), to = found;\n      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n      cm.state.sublimeKilled = cm.getRange(from, to);\n      cm.replaceRange(\"\", from, to);\n    }\n  };\n  cmds[map[cK + ctrl + \"X\"] = \"swapWithSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n      cm.setCursor(found);\n    }\n  };\n  cmds[map[cK + ctrl + \"Y\"] = \"sublimeYank\"] = function(cm) {\n    if (cm.state.sublimeKilled != null)\n      cm.replaceSelection(cm.state.sublimeKilled, null, \"paste\");\n  };\n\n  map[cK + ctrl + \"G\"] = \"clearBookmarks\";\n  cmds[map[cK + ctrl + \"C\"] = \"showInCenter\"] = function(cm) {\n    var pos = cm.cursorCoords(null, \"local\");\n    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n  };\n\n  var selectLinesCombo = mac ? \"Ctrl-Shift-\" : \"Ctrl-Alt-\";\n  cmds[map[selectLinesCombo + \"Up\"] = \"selectLinesUpward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line > cm.firstLine())\n          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n      }\n    });\n  };\n  cmds[map[selectLinesCombo + \"Down\"] = \"selectLinesDownward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line < cm.lastLine())\n          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n      }\n    });\n  };\n\n  function getTarget(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      from = word.from;\n      to = word.to;\n    }\n    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n  }\n\n  function findAndGoTo(cm, forward) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var query = target.query;\n    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n\n    if (forward ? cur.findNext() : cur.findPrevious()) {\n      cm.setSelection(cur.from(), cur.to());\n    } else {\n      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n                                              : cm.clipPos(Pos(cm.lastLine())));\n      if (forward ? cur.findNext() : cur.findPrevious())\n        cm.setSelection(cur.from(), cur.to());\n      else if (target.word)\n        cm.setSelection(target.from, target.to);\n    }\n  };\n  cmds[map[ctrl + \"F3\"] = \"findUnder\"] = function(cm) { findAndGoTo(cm, true); };\n  cmds[map[\"Shift-\" + ctrl + \"F3\"] = \"findUnderPrevious\"] = function(cm) { findAndGoTo(cm,false); };\n  cmds[map[\"Alt-F3\"] = \"findAllUnder\"] = function(cm) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var cur = cm.getSearchCursor(target.query);\n    var matches = [];\n    var primaryIndex = -1;\n    while (cur.findNext()) {\n      matches.push({anchor: cur.from(), head: cur.to()});\n      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n        primaryIndex++;\n    }\n    cm.setSelections(matches, primaryIndex);\n  };\n\n  map[\"Shift-\" + ctrl + \"[\"] = \"fold\";\n  map[\"Shift-\" + ctrl + \"]\"] = \"unfold\";\n  map[cK + ctrl + \"0\"] = map[cK + ctrl + \"J\"] = \"unfoldAll\";\n\n  map[ctrl + \"I\"] = \"findIncremental\";\n  map[\"Shift-\" + ctrl + \"I\"] = \"findIncrementalReverse\";\n  map[ctrl + \"H\"] = \"replace\";\n  map[\"F3\"] = \"findNext\";\n  map[\"Shift-F3\"] = \"findPrev\";\n\n  CodeMirror.normalizeKeyMap(map);\n});\n\n\n/***/ }),\n\n/***/ \"A1IV\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_js_problem__ = __webpack_require__(\"5Ey+\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vuex__ = __webpack_require__(\"NYxO\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      mysearch: '',\n      dropdownLoading: false,\n      searchResult: []\n    };\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({\n    _onSearch: function _onSearch() {\n      var _this = this;\n\n      if (this.mysearch === '') {\n        this.searchResult = [];\n        return;\n      }\n      this.dropdownLoading = true;\n      console.log('SearchClick');\n      var url = __WEBPACK_IMPORTED_MODULE_3_common_js_data__[\"a\" /* baseUrl */] + '/search';\n      // 清空之前的结果\n      this.searchResult = [];\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.post(url, {\n        'target': 'Problem',\n        'content': this.mysearch,\n        'type': 'title'\n      }).then(function (response) {\n        if (response.data.result.length === 0) {\n          _this.searchResult = [{ title: '\\u65E0\\u6CD5\\u67E5\\u8BE2\\u5230\\u542B\\u6709\\u5173\\u952E\\u5B57:' + _this.mysearch + '\\u7684\\u9898\\u76EE' }];\n        } else {\n          _this.searchResult = response.data.result;\n        }\n        _this.dropdownLoading = false;\n      }, function (response) {\n        console.log(response);\n        _this._onSearch();\n      });\n    },\n    handleCommandDropdown: function handleCommandDropdown(command) {\n      this.setProblem(new __WEBPACK_IMPORTED_MODULE_1_common_js_problem__[\"a\" /* default */]({\n        id: command\n      }));\n      this.$router.push('/home/problem');\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_vuex__[\"a\" /* mapMutations */])({\n    setProblem: 'SET_PROBLEM'\n  }))\n});\n\n/***/ }),\n\n/***/ \"BUZr\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problems_vue__ = __webpack_require__(\"kYSO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ffcf786_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problems_vue__ = __webpack_require__(\"oxMS\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"S1i8\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ffcf786\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problems_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ffcf786_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problems_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"CK2l\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"RkhK\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  var queryDialog =\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  var replaceQueryDialog =\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n\n\n/***/ }),\n\n/***/ \"EKta\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n\n/***/ \"ELu2\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(\"NYxO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_axios__);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// require active-line.js\n__webpack_require__(\"aGTD\");\n\n// closebrackets\n__webpack_require__(\"aX1R\");\n\n// styleSelectedText\n__webpack_require__(\"U80t\");\n__webpack_require__(\"c+I8\");\n\n// hint\n__webpack_require__(\"jQeI\");\n__webpack_require__(\"Mixr\");\n__webpack_require__(\"aGTD\");\n\n// highlightSelectionMatches\n__webpack_require__(\"QSKu\");\n__webpack_require__(\"/A6h\");\n__webpack_require__(\"c+I8\");\n__webpack_require__(\"OkRY\");\n\n// keyMap\n__webpack_require__(\"6S2o\");\n__webpack_require__(\"vq+x\");\n__webpack_require__(\"Z6qg\");\n__webpack_require__(\"RkhK\");\n__webpack_require__(\"LxZp\");\n__webpack_require__(\"c+I8\");\n__webpack_require__(\"CK2l\");\n__webpack_require__(\"7Xsf\");\n__webpack_require__(\"tjx/\");\n__webpack_require__(\"Hyg2\");\n\n// foldGutter\n__webpack_require__(\"Yokd\");\n__webpack_require__(\"fo6W\");\n__webpack_require__(\"soCA\");\n__webpack_require__(\"THjC\");\n__webpack_require__(\"Kk9m\");\n__webpack_require__(\"U3HU\");\n__webpack_require__(\"dxBS\");\n__webpack_require__(\"TQy8\");\n\n// autoCloseTags\n__webpack_require__(\"+/ra\");\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    editTitle: {\n      type: String,\n      default: '创建题目'\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      form: {\n        title: '',\n        description: '',\n        level: 1,\n        tag: '',\n        program: '',\n        input: '',\n        output: '',\n        checkLanguageList: ['C']\n      },\n      editorOptions: {\n        tabSize: 4,\n        mode: 'text/x-csrc',\n        theme: 'default',\n        lineNumbers: true,\n        line: true,\n        keyMap: 'sublime',\n        foldGutter: true,\n        gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n        // 选中文本自动高亮，及高亮方式\n        styleSelectedText: true,\n        highlightSelectionMatches: { showToken: /\\w/, annotateScrollbar: true\n          // 如果有hint方面的配置，也应该出现在这里\n        } },\n      Languages: __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"d\" /* languages */],\n      editorModes: __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"e\" /* editorModes */],\n      selectLanguage: __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"d\" /* languages */][0],\n      code: '',\n      templetC: { value: 'c', text: 'C', defaultCode: '' },\n      templetCpp: { value: 'cpp', text: 'C++', defaultCode: '' },\n      templetCsharp: { value: 'csharp', text: 'C#', defaultCode: '' },\n      templetJava: { value: 'java', text: 'Java', defaultCode: '' },\n      templetPython: { value: 'python3', text: 'Python3', defaultCode: '' },\n      templetJs: { value: 'javascript', text: 'Javascript', defaultCode: '' },\n      templetRuby: { value: 'ruby', text: 'Ruby', defaultCode: '' },\n      templetGolang: { value: 'golang', text: 'Go', defaultCode: '' }\n    };\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({\n    quit: function quit() {\n      this.$emit('editFinish');\n    },\n    setupProblem: function setupProblem() {\n      var _this = this;\n\n      var Base64 = __webpack_require__(\"xrTZ\").Base64;\n      this._addTemplet();\n      var array = this._pushALLTemplets();\n      console.log(array);\n      var result = [];\n\n      var _loop = function _loop(i) {\n        result.push(array.find(function (item) {\n          return item.text === _this.form.checkLanguageList[i];\n        }));\n      };\n\n      for (var i = 0; i < this.form.checkLanguageList.length; i++) {\n        _loop(i);\n      }\n      console.log(result);\n      var url = __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"a\" /* baseUrl */] + '/problems';\n      __WEBPACK_IMPORTED_MODULE_3_axios___default.a.post(url, {\n        title: this.form.title,\n        description: this.form.description,\n        level: this.form.level + '',\n        tag: this.form.tag,\n        program: Base64.encode(this.form.program),\n        code: Base64.encode(result),\n        input: Base64.encode(this.form.input),\n        output: Base64.encode(this.form.output)\n      }).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"b\" /* MSG_OK */]) {\n          //最后清空vuex中的Templets\n          _this.setTemplets([]);\n          _this.$notify({\n            title: '成功',\n            message: '\\u6210\\u529F\\u521B\\u5EFA\\u9898\\u76EE:' + response.data.result[0].title,\n            type: 'success'\n          });\n          _this.$emit('editFinish');\n        } else if (response.data.msg === __WEBPACK_IMPORTED_MODULE_2_common_js_data__[\"c\" /* MSG_NO */]) {\n          _this.$notify({\n            title: '创建失败',\n            message: '' + response.data.error,\n            type: 'error'\n          });\n        }\n      }, function (response) {});\n    },\n    handleCommandLangage: function handleCommandLangage(index) {\n      var _this2 = this;\n\n      console.log('xuan ' + index);\n      this.editorOptions.mode = this.editorModes[index];\n      this.selectLanguage = this.Languages[index];\n      this.code = this.templets.find(function (item) {\n        return item.text === _this2.selectLanguage;\n      }).defaultCode;\n    },\n    dropdownChange: function dropdownChange(isShow) {\n      if (isShow) {\n        //  this.selectLanguage\n        this._addTemplet();\n        this.setTemplets(this._pushALLTemplets());\n      }\n    },\n    _pushALLTemplets: function _pushALLTemplets() {\n      var result = [];\n      result.push(this.templetC);\n      result.push(this.templetCpp);\n      result.push(this.templetCsharp);\n      result.push(this.templetJava);\n      result.push(this.templetPython);\n      result.push(this.templetJs);\n      result.push(this.templetRuby);\n      result.push(this.templetGolang);\n      return result;\n    },\n    _addTemplet: function _addTemplet() {\n      if (this.selectLanguage === this.templetC.text) {\n        this.templetC.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetCpp.text) {\n        this.templetCpp.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetCsharp.text) {\n        this.templetCsharp.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetJava.text) {\n        this.templetJava.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetPython.text) {\n        this.templetPython.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetJs.text) {\n        this.templetJs.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetRuby.text) {\n        this.templetRuby.defaultCode = this.code;\n      } else if (this.selectLanguage === this.templetGolang.text) {\n        this.templetGolang.defaultCode = this.code;\n      }\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"a\" /* mapMutations */])({\n    setTemplets: 'SET_TEMPLETS'\n  })),\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])(['problem', 'templets']))\n  //    watch: {\n  //      isEdit(newValue){\n  //        if (newValue) {\n  //          console.log('wach')\n  //        }\n  //      }\n  //    }\n});\n\n/***/ }),\n\n/***/ \"EuP9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"EKta\")\nvar ieee754 = __webpack_require__(\"ujcs\")\nvar isArray = __webpack_require__(\"sOR5\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"DuR2\")))\n\n/***/ }),\n\n/***/ \"HbqP\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problem_edit_vue__ = __webpack_require__(\"ELu2\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e52881_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problem_edit_vue__ = __webpack_require__(\"c2Vz\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"hdeF\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-49e52881\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problem_edit_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e52881_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problem_edit_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"Hyg2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"RkhK\"), __webpack_require__(\"vq+x\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        vim.lastHPos = Infinity;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch));\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '['};\n        var selfPaired = {'\\'': true, '\"': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */);\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n');\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i];\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /-?\\d+/g;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        var token;\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0];\n          start = match.index;\n          end = start + token.length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1;\n          var number = parseInt(token) + (increment * actionArgs.repeat);\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          numberStr = number.toString();\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1;\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      };\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm);\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done;\n        var event = history[history.length - 2];\n        return event && event.ranges && event.ranges[0].head;\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySlash(argString) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart);\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            regexPart = regexPart + '/' + flagsPart;\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); };\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = [];\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;\n        var changes = lastChange.changes;\n        var text = [];\n        var i = 0;\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i]);\n          if (changes[i] instanceof InsertModeKey) {\n             i++;\n          } else {\n             i+= selLength;\n          }\n        }\n        lastChange.changes = text;\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      };\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n            } else {\n                lastChange.changes.push(text);\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    };\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim;\n        var lastSel = vim.lastSelection;\n        var offset = getOffset(lastSel.anchor, lastSel.head);\n        selectForInsert(cm, head, offset.line + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n\n\n/***/ }),\n\n/***/ \"Kk9m\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"THjC\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"LxZp\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"RkAk\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"e2c66042\", content, true);\n\n/***/ }),\n\n/***/ \"Mixr\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var Pos = CodeMirror.Pos;\n\n  function forEach(arr, f) {\n    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);\n  }\n\n  function arrayContains(arr, item) {\n    if (!Array.prototype.indexOf) {\n      var i = arr.length;\n      while (i--) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return arr.indexOf(item) != -1;\n  }\n\n  function scriptHint(editor, keywords, getToken, options) {\n    // Find the token at the cursor\n    var cur = editor.getCursor(), token = getToken(editor, cur);\n    if (/\\b(?:string|comment)\\b/.test(token.type)) return;\n    token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;\n\n    // If it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n      token = {start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n               type: token.string == \".\" ? \"property\" : null};\n    } else if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var tprop = token;\n    // If it is a property, find out what it is a property of.\n    while (tprop.type == \"property\") {\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (tprop.string != \".\") return;\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (!context) var context = [];\n      context.push(tprop);\n    }\n    return {list: getCompletions(token, context, keywords, options),\n            from: Pos(cur.line, token.start),\n            to: Pos(cur.line, token.end)};\n  }\n\n  function javascriptHint(editor, options) {\n    return scriptHint(editor, javascriptKeywords,\n                      function (e, cur) {return e.getTokenAt(cur);},\n                      options);\n  };\n  CodeMirror.registerHelper(\"hint\", \"javascript\", javascriptHint);\n\n  function getCoffeeScriptToken(editor, cur) {\n  // This getToken, it is for coffeescript, imitates the behavior of\n  // getTokenAt method in javascript.js, that is, returning \"property\"\n  // type and treat \".\" as indepenent token.\n    var token = editor.getTokenAt(cur);\n    if (cur.ch == token.start + 1 && token.string.charAt(0) == '.') {\n      token.end = token.start;\n      token.string = '.';\n      token.type = \"property\";\n    }\n    else if (/^\\.[\\w$_]*$/.test(token.string)) {\n      token.type = \"property\";\n      token.start++;\n      token.string = token.string.replace(/\\./, '');\n    }\n    return token;\n  }\n\n  function coffeescriptHint(editor, options) {\n    return scriptHint(editor, coffeescriptKeywords, getCoffeeScriptToken, options);\n  }\n  CodeMirror.registerHelper(\"hint\", \"coffeescript\", coffeescriptHint);\n\n  var stringProps = (\"charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight \" +\n                     \"toUpperCase toLowerCase split concat match replace search\").split(\" \");\n  var arrayProps = (\"length concat join splice push pop shift unshift slice reverse sort indexOf \" +\n                    \"lastIndexOf every some filter forEach map reduce reduceRight \").split(\" \");\n  var funcProps = \"prototype apply call bind\".split(\" \");\n  var javascriptKeywords = (\"break case catch continue debugger default delete do else false finally for function \" +\n                  \"if in instanceof new null return switch throw true try typeof var void while with\").split(\" \");\n  var coffeescriptKeywords = (\"and break catch class continue delete do else extends false finally for \" +\n                  \"if in instanceof isnt new no not null of off on or return switch then throw true try typeof until void while with yes\").split(\" \");\n\n  function forAllProps(obj, callback) {\n    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n      for (var name in obj) callback(name)\n    } else {\n      for (var o = obj; o; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(callback)\n    }\n  }\n\n  function getCompletions(token, context, keywords, options) {\n    var found = [], start = token.string, global = options && options.globalScope || window;\n    function maybeAdd(str) {\n      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);\n    }\n    function gatherCompletions(obj) {\n      if (typeof obj == \"string\") forEach(stringProps, maybeAdd);\n      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);\n      else if (obj instanceof Function) forEach(funcProps, maybeAdd);\n      forAllProps(obj, maybeAdd)\n    }\n\n    if (context && context.length) {\n      // If this is a property, see if it belongs to some object we can\n      // find in the current environment.\n      var obj = context.pop(), base;\n      if (obj.type && obj.type.indexOf(\"variable\") === 0) {\n        if (options && options.additionalContext)\n          base = options.additionalContext[obj.string];\n        if (!options || options.useGlobalScope !== false)\n          base = base || global[obj.string];\n      } else if (obj.type == \"string\") {\n        base = \"\";\n      } else if (obj.type == \"atom\") {\n        base = 1;\n      } else if (obj.type == \"function\") {\n        if (global.jQuery != null && (obj.string == '$' || obj.string == 'jQuery') &&\n            (typeof global.jQuery == 'function'))\n          base = global.jQuery();\n        else if (global._ != null && (obj.string == '_') && (typeof global._ == 'function'))\n          base = global._();\n      }\n      while (base != null && context.length)\n        base = base[context.pop().string];\n      if (base != null) gatherCompletions(base);\n    } else {\n      // If not, just look in the global object and any local scope\n      // (reading into JS mode internals to get at the local and global variables)\n      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);\n      for (var v = token.state.globalVars; v; v = v.next) maybeAdd(v.name);\n      if (!options || options.useGlobalScope !== false)\n        gatherCompletions(global);\n      forEach(keywords, maybeAdd);\n    }\n    return found;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"OkRY\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"/A6h\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp(\"\\\\b\" + query + \"\\\\b\") : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n\n\n/***/ }),\n\n/***/ \"QSKu\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n\n\n/***/ }),\n\n/***/ \"RkAk\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".CodeMirror-dialog{position:absolute;left:0;right:0;background:inherit;z-index:15;padding:.1em .8em;overflow:hidden;color:inherit}.CodeMirror-dialog-top{border-bottom:1px solid #eee;top:0}.CodeMirror-dialog-bottom{border-top:1px solid #eee;bottom:0}.CodeMirror-dialog input{border:none;outline:none;background:transparent;width:20em;color:inherit;font-family:monospace}.CodeMirror-dialog button{font-size:70%}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/dialog/dialog.css\"],\"names\":[],\"mappings\":\"AAAA,mBACE,kBAAmB,AACnB,OAAQ,AAAC,QAAS,AAClB,mBAAoB,AACpB,WAAY,AACZ,kBAAmB,AACnB,gBAAiB,AACjB,aAAe,CAChB,AAED,uBACE,6BAA8B,AAC9B,KAAO,CACR,AAED,0BACE,0BAA2B,AAC3B,QAAU,CACX,AAED,yBACE,YAAa,AACb,aAAc,AACd,uBAAwB,AACxB,WAAY,AACZ,cAAe,AACf,qBAAuB,CACxB,AAED,0BACE,aAAe,CAChB\",\"file\":\"dialog.css\",\"sourcesContent\":[\".CodeMirror-dialog {\\n  position: absolute;\\n  left: 0; right: 0;\\n  background: inherit;\\n  z-index: 15;\\n  padding: .1em .8em;\\n  overflow: hidden;\\n  color: inherit;\\n}\\n\\n.CodeMirror-dialog-top {\\n  border-bottom: 1px solid #eee;\\n  top: 0;\\n}\\n\\n.CodeMirror-dialog-bottom {\\n  border-top: 1px solid #eee;\\n  bottom: 0;\\n}\\n\\n.CodeMirror-dialog input {\\n  border: none;\\n  outline: none;\\n  background: transparent;\\n  width: 20em;\\n  color: inherit;\\n  font-family: monospace;\\n}\\n\\n.CodeMirror-dialog button {\\n  font-size: 70%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"RkhK\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n\n\n/***/ }),\n\n/***/ \"RrKZ\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".el-dropdown .el-input[data-v-2d96e4b2]{width:500px}.el-dropdown-menu__item[data-v-2d96e4b2]{width:auto}.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2]{display:inline-block}.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2]{float:right;margin-top:10px}.el-dropdown-menu[data-v-2d96e4b2]{width:500px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/search/search.vue\"],\"names\":[],\"mappings\":\"AACA,wCACE,WAAa,CACd,AACD,yCACE,UAAY,CACb,AACD,6DACE,oBAAsB,CACvB,AACD,2DACE,YAAa,AACb,eAAiB,CAClB,AACD,mCACE,WAAa,CACd\",\"file\":\"search.vue\",\"sourcesContent\":[\"\\n.el-dropdown .el-input[data-v-2d96e4b2] {\\n  width: 500px;\\n}\\n.el-dropdown-menu__item[data-v-2d96e4b2] {\\n  width: auto;\\n}\\n.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2] {\\n  display: inline-block;\\n}\\n.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2] {\\n  float: right;\\n  margin-top: 10px;\\n}\\n.el-dropdown-menu[data-v-2d96e4b2] {\\n  width: 500px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"S1i8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"qm6i\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"a0ec5c32\", content, true);\n\n/***/ }),\n\n/***/ \"THjC\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n\n/***/ }),\n\n/***/ \"TQy8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n\n/***/ }),\n\n/***/ \"U3HU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"U80t\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line < CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n\n\n/***/ }),\n\n/***/ \"YOyO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_search_vue__ = __webpack_require__(\"A1IV\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d96e4b2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_search_vue__ = __webpack_require__(\"0tR3\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"yGpH\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2d96e4b2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_search_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d96e4b2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_search_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"Yokd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"engA\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"da13b76a\", content, true);\n\n/***/ }),\n\n/***/ \"Z6qg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.indexOf(endString);\n    }\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n\n\n/***/ }),\n\n/***/ \"aGTD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"aX1R\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type) || stringStartsAfter(cm, pos)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch\n  }\n});\n\n\n/***/ }),\n\n/***/ \"c+I8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureGlobal(regexp) {\n    return regexp.global ? regexp : new RegExp(regexp.source, regexpFlags(regexp) + \"g\")\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (end.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureGlobal(query)\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n\n\n/***/ }),\n\n/***/ \"c2Vz\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"problem-edit\"\n  }, [_c('div', {\n    staticClass: \"panel\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_c('i', {\n    staticClass: \"el-icon-arrow-left\",\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }), _vm._v(\" \"), _c('h3', {\n    staticClass: \"panel-title\"\n  }, [_vm._v(_vm._s(_vm.editTitle))]), _vm._v(\" \"), _c('el-tag', {\n    staticClass: \"quit-tag\",\n    attrs: {\n      \"type\": \"danger\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }, [_vm._v(\"退出\")])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"model\": _vm.form,\n      \"label-width\": \"80px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标题\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.title),\n      callback: function($$v) {\n        _vm.form.title = $$v\n      },\n      expression: \"form.title\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标签\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.tag),\n      callback: function($$v) {\n        _vm.form.tag = $$v\n      },\n      expression: \"form.tag\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目难度\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.form.level),\n      callback: function($$v) {\n        _vm.form.level = $$v\n      },\n      expression: \"form.level\"\n    }\n  }, [_c('el-radio', {\n    attrs: {\n      \"label\": 1\n    }\n  }, [_vm._v(\"1\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 2\n    }\n  }, [_vm._v(\"2\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 3\n    }\n  }, [_vm._v(\"3\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 4\n    }\n  }, [_vm._v(\"4\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 5\n    }\n  }, [_vm._v(\"5\")])], 1)], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目描述\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 3\n    },\n    model: {\n      value: (_vm.form.description),\n      callback: function($$v) {\n        _vm.form.description = $$v\n      },\n      expression: \"form.description\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"官方程序代码\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5\n    },\n    model: {\n      value: (_vm.form.program),\n      callback: function($$v) {\n        _vm.form.program = $$v\n      },\n      expression: \"form.program\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输入样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample input testcase\"\n    },\n    model: {\n      value: (_vm.form.input),\n      callback: function($$v) {\n        _vm.form.input = $$v\n      },\n      expression: \"form.input\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输出样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample output testcase\"\n    },\n    model: {\n      value: (_vm.form.output),\n      callback: function($$v) {\n        _vm.form.output = $$v\n      },\n      expression: \"form.output\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"模板选择\"\n    }\n  }, [_c('el-checkbox-group', {\n    model: {\n      value: (_vm.form.checkLanguageList),\n      callback: function($$v) {\n        _vm.form.checkLanguageList = $$v\n      },\n      expression: \"form.checkLanguageList\"\n    }\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-checkbox', {\n      key: index,\n      attrs: {\n        \"label\": item\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor-wrapper\"\n  }, [_c('div', {\n    staticClass: \"dropdown-wrapper\"\n  }, [_c('el-dropdown', {\n    attrs: {\n      \"trigger\": \"click\",\n      \"menu-align\": \"start\"\n    },\n    on: {\n      \"command\": _vm.handleCommandLangage,\n      \"visible-change\": _vm.dropdownChange\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(_vm._s(_vm.selectLanguage)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": index\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n                \")])\n  }))], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor\"\n  }, [_c('codemirror', {\n    ref: \"myEditor\",\n    attrs: {\n      \"options\": _vm.editorOptions\n    },\n    model: {\n      value: (_vm.code),\n      callback: function($$v) {\n        _vm.code = $$v\n      },\n      expression: \"code\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"setup-btn\",\n    attrs: {\n      \"type\": \"success\",\n      \"icon\": \"edit\"\n    },\n    on: {\n      \"click\": _vm.setupProblem\n    }\n  }, [_vm._v(\"创建题目\")])], 1)], 1)], 1)])])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"drNd\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".problem-edit .panel[data-v-49e52881]{border-radius:5px;margin-bottom:20px;background-color:#fff;border:1px solid #ddd;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.problem-edit .panel .panel-heading[data-v-49e52881]{padding:10px 15px;color:#333;background-color:#f5f5f5;border-color:#ddd;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom:1px solid transparent}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]{color:#b0c4de}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-heading .panel-title[data-v-49e52881]{display:inline-block;margin-left:5px;margin-top:0;margin-bottom:0;font-size:18px;color:inherit;font-weight:500;line-height:1.1}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]{float:right}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-body[data-v-49e52881]{padding:15px 35px}.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881]{margin-right:10%}.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881]{width:50%}.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881]{position:relative}.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881]{position:absolute;top:0;left:10px;display:inline-block}.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881]{margin-left:100px;display:inline-block;width:70%;border:1px solid #ddd}.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881]{position:absolute;right:0;bottom:5px;width:150px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problem-edit.vue\"],\"names\":[],\"mappings\":\"AACA,sCACE,kBAAmB,AACnB,mBAAoB,AACpB,sBAAuB,AACvB,sBAAuB,AACvB,6CAA+C,AAC/C,oCAAuC,CACxC,AACD,qDACE,kBAAmB,AACnB,WAAY,AACZ,yBAA0B,AAC1B,kBAAmB,AACnB,2BAA4B,AAC5B,4BAA6B,AAC7B,mCAAqC,CACtC,AACD,yEACE,aAAe,CAChB,AACD,+EACE,cAAgB,CACjB,AACD,kEACE,qBAAsB,AACtB,gBAAiB,AACjB,aAAc,AACd,gBAAiB,AACjB,eAAgB,AAChB,cAAe,AACf,gBAAiB,AACjB,eAAiB,CAClB,AACD,+DACE,WAAa,CACd,AACD,qEACE,cAAgB,CACjB,AACD,kDACE,iBAAmB,CACpB,AACD,yEACE,gBAAkB,CACnB,AACD,sFACE,SAAW,CACZ,AACD,2EACE,iBAAmB,CACpB,AACD,6FACE,kBAAmB,AACnB,MAAO,AACP,UAAW,AACX,oBAAsB,CACvB,AACD,mFACE,kBAAmB,AACnB,qBAAsB,AACtB,UAAW,AACX,qBAAuB,CACxB,AACD,sFACE,kBAAmB,AACnB,QAAS,AACT,WAAY,AACZ,WAAa,CACd\",\"file\":\"manage-problem-edit.vue\",\"sourcesContent\":[\"\\n.problem-edit .panel[data-v-49e52881] {\\n  border-radius: 5px;\\n  margin-bottom: 20px;\\n  background-color: #fff;\\n  border: 1px solid #ddd;\\n  -webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n  box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n}\\n.problem-edit .panel .panel-heading[data-v-49e52881] {\\n  padding: 10px 15px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n  border-color: #ddd;\\n  border-top-left-radius: 5px;\\n  border-top-right-radius: 5px;\\n  border-bottom: 1px solid transparent;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881] {\\n  color: #b0c4de;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-heading .panel-title[data-v-49e52881] {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-size: 18px;\\n  color: inherit;\\n  font-weight: 500;\\n  line-height: 1.1;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881] {\\n  float: right;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-body[data-v-49e52881] {\\n  padding: 15px 35px;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881] {\\n  margin-right: 10%;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881] {\\n  width: 50%;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881] {\\n  position: relative;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881] {\\n  position: absolute;\\n  top: 0;\\n  left: 10px;\\n  display: inline-block;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881] {\\n  margin-left: 100px;\\n  display: inline-block;\\n  width: 70%;\\n  border: 1px solid #ddd;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881] {\\n  position: absolute;\\n  right: 0;\\n  bottom: 5px;\\n  width: 150px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"dxBS\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"engA\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".CodeMirror-foldmarker{color:blue;text-shadow:#b9f 1px 1px 2px,#b9f -1px -1px 2px,#b9f 1px -1px 2px,#b9f -1px 1px 2px;font-family:arial;line-height:.3;cursor:pointer}.CodeMirror-foldgutter{width:.7em}.CodeMirror-foldgutter-folded,.CodeMirror-foldgutter-open{cursor:pointer}.CodeMirror-foldgutter-open:after{content:\\\"\\\\25BE\\\"}.CodeMirror-foldgutter-folded:after{content:\\\"\\\\25B8\\\"}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/fold/foldgutter.css\"],\"names\":[],\"mappings\":\"AAAA,uBACE,WAAY,AACZ,oFAAwF,AACxF,kBAAmB,AACnB,eAAgB,AAChB,cAAgB,CACjB,AACD,uBACE,UAAY,CACb,AACD,0DAEE,cAAgB,CACjB,AACD,kCACE,eAAiB,CAClB,AACD,oCACE,eAAiB,CAClB\",\"file\":\"foldgutter.css\",\"sourcesContent\":[\".CodeMirror-foldmarker {\\n  color: blue;\\n  text-shadow: #b9f 1px 1px 2px, #b9f -1px -1px 2px, #b9f 1px -1px 2px, #b9f -1px 1px 2px;\\n  font-family: arial;\\n  line-height: .3;\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter {\\n  width: .7em;\\n}\\n.CodeMirror-foldgutter-open,\\n.CodeMirror-foldgutter-folded {\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter-open:after {\\n  content: \\\"\\\\25BE\\\";\\n}\\n.CodeMirror-foldgutter-folded:after {\\n  content: \\\"\\\\25B8\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"fo6W\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"hdeF\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"drNd\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"aa779c20\", content, true);\n\n/***/ }),\n\n/***/ \"jQeI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n\n/***/ }),\n\n/***/ \"kYSO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__node_modules_element_ui_packages_form_src_form_item__ = __webpack_require__(\"95Re\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_components_search_search__ = __webpack_require__(\"YOyO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_components_manager_manage_problem_edit__ = __webpack_require__(\"HbqP\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vuex__ = __webpack_require__(\"NYxO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_js_problem__ = __webpack_require__(\"5Ey+\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      problemDatas: [],\n      cur_page: 1,\n      multipleSelection: [],\n      select_cate: '',\n      select_word: '',\n      del_list: [],\n      is_search: false,\n      rules: {\n        id: [{ required: true, message: 'id不能为空', trigger: 'blur' }, { min: 3, max: 3, message: 'id为3位字母', trigger: 'blur' }],\n        title: [{ required: true, message: '标题不能为空', trigger: 'blur' }, { min: 5, message: '标题过短', trigger: 'blur' }],\n        description: [{ required: true, message: '描述不能为空', trigger: 'blur' }, { min: 5, message: '描述过短', trigger: 'blur' }]\n      },\n      editTitle: '创建题目',\n      isShowEdit: false,\n      isEdit: false\n    };\n  },\n  created: function created() {\n    this._getProblemsData(this.cur_page);\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({\n    showSetupProblem: function showSetupProblem() {\n      this.editTitle = '创建题目';\n      this.isEdit = false;\n      this.isShowEdit = true;\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.cur_page = val;\n      this._getProblemsData(this.cur_page);\n    },\n    _getProblemsData: function _getProblemsData(curPage) {\n      var _this = this;\n\n      var url = __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"a\" /* baseUrl */] + '/problems?page=' + curPage;\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.get(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this.problemDatas = response.data.result;\n        }\n      }, function (response) {});\n    },\n    formatter: function formatter(row, column) {\n      return row.address;\n    },\n    filterTag: function filterTag(value, row) {\n      return row.tag === value;\n    },\n    handleEdit: function handleEdit(index, row) {\n      console.log(row);\n      this.saveOneProblem(new __WEBPACK_IMPORTED_MODULE_7_common_js_problem__[\"a\" /* default */](row));\n      this.editTitle = '编辑题目';\n      this.isEdit = true;\n      this.isShowEdit = true;\n    },\n    handleDelete: function handleDelete(index, row) {\n      var _this2 = this;\n\n      //this.$message.error('删除第' + (index + 1) + '行')\n      var url = __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + row.id;\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.delete(url).then(function (response) {\n        if (response.data.msg === 'ok') {\n          _this2._getProblemsData(_this2.cur_page);\n          _this2.$message({\n            message: '\\u6210\\u529F\\u5220\\u9664\\u9898\\u76EE:' + row.title,\n            type: 'success'\n          });\n        }\n      }, function (response) {\n        _this2.$message.error('\\u65E0\\u6CD5\\u5220\\u9664\\u9898\\u76EE' + row.title);\n      });\n    },\n    delAll: function delAll() {\n      var self = this,\n          length = self.multipleSelection.length;\n      var str = '';\n      self.del_list = self.del_list.concat(self.multipleSelection);\n      for (var i = 0; i < length; i++) {\n        str += self.multipleSelection[i].name + ' ';\n      }\n      self.$message.error('删除了' + str);\n      self.multipleSelection = [];\n    },\n    calcTag: function calcTag(row, column, cellValue) {\n      if (cellValue === '') {\n        return 'Nothing';\n      }\n      return cellValue.replace(',', ' & ');\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    hideEdit: function hideEdit() {\n      this.isShowEdit = false;\n      this._getProblemsData(this.cur_page);\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_vuex__[\"b\" /* mapActions */])(['saveOneProblem'])),\n  computed: {\n    data: function data() {\n      var self = this;\n      return self.contestDatas.filter(function (d) {\n        var is_del = false;\n        for (var i = 0; i < self.del_list.length; i++) {\n          if (d.name === self.del_list[i].name) {\n            is_del = true;\n            break;\n          }\n        }\n        if (!is_del) {\n          if (d.address.indexOf(self.select_cate) > -1 && (d.name.indexOf(self.select_word) > -1 || d.address.indexOf(self.select_word) > -1)) {\n            return d;\n          }\n        }\n      });\n    }\n  },\n  components: {\n    ElFormItem: __WEBPACK_IMPORTED_MODULE_3__node_modules_element_ui_packages_form_src_form_item__[\"a\" /* default */],\n    Search: __WEBPACK_IMPORTED_MODULE_4_components_search_search__[\"a\" /* default */],\n    ProblemEdit: __WEBPACK_IMPORTED_MODULE_5_components_manager_manage_problem_edit__[\"a\" /* default */]\n  }\n});\n\n/***/ }),\n\n/***/ \"oxMS\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"manage-problem\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isShowEdit),\n      expression: \"!isShowEdit\"\n    }]\n  }, [_c('div', {\n    staticClass: \"handle-box\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\",\n      \"icon\": \"edit\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.showSetupProblem($event)\n      }\n    }\n  }, [_vm._v(\"创建题目\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"search-wrapper\"\n  }, [_c('search')], 1)], 1), _vm._v(\" \"), _c('el-table', {\n    ref: \"multipleTable\",\n    staticStyle: {\n      \"width\": \"80%\"\n    },\n    attrs: {\n      \"data\": _vm.problemDatas,\n      \"border\": \"\"\n    },\n    on: {\n      \"selection-change\": _vm.handleSelectionChange\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"type\": \"selection\",\n      \"width\": \"55\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"id\",\n      \"label\": \"ID\",\n      \"width\": \"150\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"title\",\n      \"label\": \"标题\",\n      \"sortable\": \"\",\n      \"width\": \"350\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"tag\",\n      \"label\": \"标签\",\n      \"sortable\": \"\",\n      \"width\": \"250\",\n      \"formatter\": _vm.calcTag\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"level\",\n      \"label\": \"难度\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"submitted\",\n      \"label\": \"提交数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"accepted\",\n      \"label\": \"通过数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"label\": \"操作\",\n      \"width\": \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleEdit(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"编辑\\n            \")]), _vm._v(\" \"), _c('el-button', {\n          attrs: {\n            \"size\": \"small\",\n            \"type\": \"danger\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleDelete(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"删除\\n            \")])]\n      }\n    }])\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"pagination\"\n  }, [_c('el-pagination', {\n    attrs: {\n      \"layout\": \"prev, pager, next\",\n      \"total\": 100\n    },\n    on: {\n      \"current-change\": _vm.handleCurrentChange\n    }\n  })], 1)], 1)]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('problem-edit', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isShowEdit),\n      expression: \"isShowEdit\"\n    }],\n    attrs: {\n      \"isEdit\": _vm.isEdit,\n      \"editTitle\": _vm.editTitle\n    },\n    on: {\n      \"editFinish\": _vm.hideEdit\n    }\n  })], 1)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"qm6i\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786]{width:100%}.manage-problem .handle-box[data-v-1ffcf786]{margin-bottom:15px;width:80%}.manage-problem .handle-box .search-wrapper[data-v-1ffcf786]{float:right}.pagination[data-v-1ffcf786]{margin:20px 20% 0 0;text-align:right}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problems.vue\"],\"names\":[],\"mappings\":\"AACA,mEACE,UAAY,CACb,AACD,6CACE,mBAAoB,AACpB,SAAW,CACZ,AACD,6DACE,WAAa,CACd,AACD,6BACE,oBAAqB,AACrB,gBAAkB,CACnB\",\"file\":\"manage-problems.vue\",\"sourcesContent\":[\"\\n.manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786] {\\n  width: 100%;\\n}\\n.manage-problem .handle-box[data-v-1ffcf786] {\\n  margin-bottom: 15px;\\n  width: 80%;\\n}\\n.manage-problem .handle-box .search-wrapper[data-v-1ffcf786] {\\n  float: right;\\n}\\n.pagination[data-v-1ffcf786] {\\n  margin: 20px 20% 0 0;\\n  text-align: right;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"sOR5\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n\n/***/ \"soCA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"tjx/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  // Kill 'ring'\n\n  var killRing = [];\n  function addToRing(str) {\n    killRing.push(str);\n    if (killRing.length > 50) killRing.shift();\n  }\n  function growRingTop(str) {\n    if (!killRing.length) return addToRing(str);\n    killRing[killRing.length - 1] += str;\n  }\n  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || \"\"; }\n  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }\n\n  var lastKill = null;\n\n  function kill(cm, from, to, mayGrow, text) {\n    if (text == null) text = cm.getRange(from, to);\n\n    if (mayGrow && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))\n      growRingTop(text);\n    else\n      addToRing(text);\n    cm.replaceRange(\"\", from, to, \"+delete\");\n\n    if (mayGrow) lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};\n    else lastKill = null;\n  }\n\n  // Boundaries of various units\n\n  function byChar(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"char\", true);\n  }\n\n  function byWord(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"word\", true);\n  }\n\n  function byLine(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"line\", cm.doc.sel.goalColumn);\n  }\n\n  function byPage(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"page\", cm.doc.sel.goalColumn);\n  }\n\n  function byParagraph(cm, pos, dir) {\n    var no = pos.line, line = cm.getLine(no);\n    var sawText = /\\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));\n    var fst = cm.firstLine(), lst = cm.lastLine();\n    for (;;) {\n      no += dir;\n      if (no < fst || no > lst)\n        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));\n      line = cm.getLine(no);\n      var hasText = /\\S/.test(line);\n      if (hasText) sawText = true;\n      else if (sawText) return Pos(no, 0);\n    }\n  }\n\n  function bySentence(cm, pos, dir) {\n    var line = pos.line, ch = pos.ch;\n    var text = cm.getLine(pos.line), sawWord = false;\n    for (;;) {\n      var next = text.charAt(ch + (dir < 0 ? -1 : 0));\n      if (!next) { // End/beginning of line reached\n        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);\n        text = cm.getLine(line + dir);\n        if (!/\\S/.test(text)) return Pos(line, ch);\n        line += dir;\n        ch = dir < 0 ? text.length : 0;\n        continue;\n      }\n      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));\n      if (!sawWord) sawWord = /\\w/.test(next);\n      ch += dir;\n    }\n  }\n\n  function byExpr(cm, pos, dir) {\n    var wrap;\n    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))\n        && wrap.match && (wrap.forward ? 1 : -1) == dir)\n      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;\n\n    for (var first = true;; first = false) {\n      var token = cm.getTokenAt(pos);\n      var after = Pos(pos.line, dir < 0 ? token.start : token.end);\n      if (first && dir > 0 && token.end == pos.ch || !/\\w/.test(token.string)) {\n        var newPos = cm.findPosH(after, dir, \"char\");\n        if (posEq(after, newPos)) return pos;\n        else pos = newPos;\n      } else {\n        return after;\n      }\n    }\n  }\n\n  // Prefixes (only crudely supported)\n\n  function getPrefix(cm, precise) {\n    var digits = cm.state.emacsPrefix;\n    if (!digits) return precise ? null : 1;\n    clearPrefix(cm);\n    return digits == \"-\" ? -1 : Number(digits);\n  }\n\n  function repeated(cmd) {\n    var f = typeof cmd == \"string\" ? function(cm) { cm.execCommand(cmd); } : cmd;\n    return function(cm) {\n      var prefix = getPrefix(cm);\n      f(cm);\n      for (var i = 1; i < prefix; ++i) f(cm);\n    };\n  }\n\n  function findEnd(cm, pos, by, dir) {\n    var prefix = getPrefix(cm);\n    if (prefix < 0) { dir = -dir; prefix = -prefix; }\n    for (var i = 0; i < prefix; ++i) {\n      var newPos = by(cm, pos, dir);\n      if (posEq(newPos, pos)) break;\n      pos = newPos;\n    }\n    return pos;\n  }\n\n  function move(by, dir) {\n    var f = function(cm) {\n      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));\n    };\n    f.motion = true;\n    return f;\n  }\n\n  function killTo(cm, by, dir) {\n    var selections = cm.listSelections(), cursor;\n    var i = selections.length;\n    while (i--) {\n      cursor = selections[i].head;\n      kill(cm, cursor, findEnd(cm, cursor, by, dir), true);\n    }\n  }\n\n  function killRegion(cm) {\n    if (cm.somethingSelected()) {\n      var selections = cm.listSelections(), selection;\n      var i = selections.length;\n      while (i--) {\n        selection = selections[i];\n        kill(cm, selection.anchor, selection.head);\n      }\n      return true;\n    }\n  }\n\n  function addPrefix(cm, digit) {\n    if (cm.state.emacsPrefix) {\n      if (digit != \"-\") cm.state.emacsPrefix += digit;\n      return;\n    }\n    // Not active yet\n    cm.state.emacsPrefix = digit;\n    cm.on(\"keyHandled\", maybeClearPrefix);\n    cm.on(\"inputRead\", maybeDuplicateInput);\n  }\n\n  var prefixPreservingKeys = {\"Alt-G\": true, \"Ctrl-X\": true, \"Ctrl-Q\": true, \"Ctrl-U\": true};\n\n  function maybeClearPrefix(cm, arg) {\n    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))\n      clearPrefix(cm);\n  }\n\n  function clearPrefix(cm) {\n    cm.state.emacsPrefix = null;\n    cm.off(\"keyHandled\", maybeClearPrefix);\n    cm.off(\"inputRead\", maybeDuplicateInput);\n  }\n\n  function maybeDuplicateInput(cm, event) {\n    var dup = getPrefix(cm);\n    if (dup > 1 && event.origin == \"+input\") {\n      var one = event.text.join(\"\\n\"), txt = \"\";\n      for (var i = 1; i < dup; ++i) txt += one;\n      cm.replaceSelection(txt);\n    }\n  }\n\n  function addPrefixMap(cm) {\n    cm.state.emacsPrefixMap = true;\n    cm.addKeyMap(prefixMap);\n    cm.on(\"keyHandled\", maybeRemovePrefixMap);\n    cm.on(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  function maybeRemovePrefixMap(cm, arg) {\n    if (typeof arg == \"string\" && (/^\\d$/.test(arg) || arg == \"Ctrl-U\")) return;\n    cm.removeKeyMap(prefixMap);\n    cm.state.emacsPrefixMap = false;\n    cm.off(\"keyHandled\", maybeRemovePrefixMap);\n    cm.off(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  // Utilities\n\n  function setMark(cm) {\n    cm.setCursor(cm.getCursor());\n    cm.setExtending(!cm.getExtending());\n    cm.on(\"change\", function() { cm.setExtending(false); });\n  }\n\n  function clearMark(cm) {\n    cm.setExtending(false);\n    cm.setCursor(cm.getCursor());\n  }\n\n  function getInput(cm, msg, f) {\n    if (cm.openDialog)\n      cm.openDialog(msg + \": <input type=\\\"text\\\" style=\\\"width: 10em\\\"/>\", f, {bottom: true});\n    else\n      f(prompt(msg, \"\"));\n  }\n\n  function operateOnWord(cm, op) {\n    var start = cm.getCursor(), end = cm.findPosH(start, 1, \"word\");\n    cm.replaceRange(op(cm.getRange(start, end)), start, end);\n    cm.setCursor(end);\n  }\n\n  function toEnclosingExpr(cm) {\n    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;\n    var stack = [];\n    while (line >= cm.firstLine()) {\n      var text = cm.getLine(line);\n      for (var i = ch == null ? text.length : ch; i > 0;) {\n        var ch = text.charAt(--i);\n        if (ch == \")\")\n          stack.push(\"(\");\n        else if (ch == \"]\")\n          stack.push(\"[\");\n        else if (ch == \"}\")\n          stack.push(\"{\");\n        else if (/[\\(\\{\\[]/.test(ch) && (!stack.length || stack.pop() != ch))\n          return cm.extendSelection(Pos(line, i));\n      }\n      --line; ch = null;\n    }\n  }\n\n  function quit(cm) {\n    cm.execCommand(\"clearSearch\");\n    clearMark(cm);\n  }\n\n  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};\n\n  // Actual keymap\n\n  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({\n    \"Ctrl-W\": function(cm) {kill(cm, cm.getCursor(\"start\"), cm.getCursor(\"end\"));},\n    \"Ctrl-K\": repeated(function(cm) {\n      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));\n      var text = cm.getRange(start, end);\n      if (!/\\S/.test(text)) {\n        text += \"\\n\";\n        end = Pos(start.line + 1, 0);\n      }\n      kill(cm, start, end, true, text);\n    }),\n    \"Alt-W\": function(cm) {\n      addToRing(cm.getSelection());\n      clearMark(cm);\n    },\n    \"Ctrl-Y\": function(cm) {\n      var start = cm.getCursor();\n      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, \"paste\");\n      cm.setSelection(start, cm.getCursor());\n    },\n    \"Alt-Y\": function(cm) {cm.replaceSelection(popFromRing(), \"around\", \"paste\");},\n\n    \"Ctrl-Space\": setMark, \"Ctrl-Shift-2\": setMark,\n\n    \"Ctrl-F\": move(byChar, 1), \"Ctrl-B\": move(byChar, -1),\n    \"Right\": move(byChar, 1), \"Left\": move(byChar, -1),\n    \"Ctrl-D\": function(cm) { killTo(cm, byChar, 1); },\n    \"Delete\": function(cm) { killRegion(cm) || killTo(cm, byChar, 1); },\n    \"Ctrl-H\": function(cm) { killTo(cm, byChar, -1); },\n    \"Backspace\": function(cm) { killRegion(cm) || killTo(cm, byChar, -1); },\n\n    \"Alt-F\": move(byWord, 1), \"Alt-B\": move(byWord, -1),\n    \"Alt-D\": function(cm) { killTo(cm, byWord, 1); },\n    \"Alt-Backspace\": function(cm) { killTo(cm, byWord, -1); },\n\n    \"Ctrl-N\": move(byLine, 1), \"Ctrl-P\": move(byLine, -1),\n    \"Down\": move(byLine, 1), \"Up\": move(byLine, -1),\n    \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStart\",\n\n    \"Alt-V\": move(byPage, -1), \"Ctrl-V\": move(byPage, 1),\n    \"PageUp\": move(byPage, -1), \"PageDown\": move(byPage, 1),\n\n    \"Ctrl-Up\": move(byParagraph, -1), \"Ctrl-Down\": move(byParagraph, 1),\n\n    \"Alt-A\": move(bySentence, -1), \"Alt-E\": move(bySentence, 1),\n    \"Alt-K\": function(cm) { killTo(cm, bySentence, 1); },\n\n    \"Ctrl-Alt-K\": function(cm) { killTo(cm, byExpr, 1); },\n    \"Ctrl-Alt-Backspace\": function(cm) { killTo(cm, byExpr, -1); },\n    \"Ctrl-Alt-F\": move(byExpr, 1), \"Ctrl-Alt-B\": move(byExpr, -1),\n\n    \"Shift-Ctrl-Alt-2\": function(cm) {\n      var cursor = cm.getCursor();\n      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);\n    },\n    \"Ctrl-Alt-T\": function(cm) {\n      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);\n      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);\n      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +\n                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);\n    },\n    \"Ctrl-Alt-U\": repeated(toEnclosingExpr),\n\n    \"Alt-Space\": function(cm) {\n      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);\n      while (from && /\\s/.test(text.charAt(from - 1))) --from;\n      while (to < text.length && /\\s/.test(text.charAt(to))) ++to;\n      cm.replaceRange(\" \", Pos(pos.line, from), Pos(pos.line, to));\n    },\n    \"Ctrl-O\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"start\"); }),\n    \"Ctrl-T\": repeated(function(cm) {\n      cm.execCommand(\"transposeChars\");\n    }),\n\n    \"Alt-C\": repeated(function(cm) {\n      operateOnWord(cm, function(w) {\n        var letter = w.search(/\\w/);\n        if (letter == -1) return w;\n        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();\n      });\n    }),\n    \"Alt-U\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toUpperCase(); });\n    }),\n    \"Alt-L\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toLowerCase(); });\n    }),\n\n    \"Alt-;\": \"toggleComment\",\n\n    \"Ctrl-/\": repeated(\"undo\"), \"Shift-Ctrl--\": repeated(\"undo\"),\n    \"Ctrl-Z\": repeated(\"undo\"), \"Cmd-Z\": repeated(\"undo\"),\n    \"Shift-Alt-,\": \"goDocStart\", \"Shift-Alt-.\": \"goDocEnd\",\n    \"Ctrl-S\": \"findPersistentNext\", \"Ctrl-R\": \"findPersistentPrev\", \"Ctrl-G\": quit, \"Shift-Alt-5\": \"replace\",\n    \"Alt-/\": \"autocomplete\",\n    \"Enter\": \"newlineAndIndent\",\n    \"Ctrl-J\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"end\"); }),\n    \"Tab\": \"indentAuto\",\n\n    \"Alt-G G\": function(cm) {\n      var prefix = getPrefix(cm, true);\n      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);\n\n      getInput(cm, \"Goto line\", function(str) {\n        var num;\n        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)\n          cm.setCursor(num - 1);\n      });\n    },\n\n    \"Ctrl-X Tab\": function(cm) {\n      cm.indentSelection(getPrefix(cm, true) || cm.getOption(\"indentUnit\"));\n    },\n    \"Ctrl-X Ctrl-X\": function(cm) {\n      cm.setSelection(cm.getCursor(\"head\"), cm.getCursor(\"anchor\"));\n    },\n    \"Ctrl-X Ctrl-S\": \"save\",\n    \"Ctrl-X Ctrl-W\": \"save\",\n    \"Ctrl-X S\": \"saveAll\",\n    \"Ctrl-X F\": \"open\",\n    \"Ctrl-X U\": repeated(\"undo\"),\n    \"Ctrl-X K\": \"close\",\n    \"Ctrl-X Delete\": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), true); },\n    \"Ctrl-X H\": \"selectAll\",\n\n    \"Ctrl-Q Tab\": repeated(\"insertTab\"),\n    \"Ctrl-U\": addPrefixMap\n  });\n\n  var prefixMap = {\"Ctrl-G\": clearPrefix};\n  function regPrefix(d) {\n    prefixMap[d] = function(cm) { addPrefix(cm, d); };\n    keyMap[\"Ctrl-\" + d] = function(cm) { addPrefix(cm, d); };\n    prefixPreservingKeys[\"Ctrl-\" + d] = true;\n  }\n  for (var i = 0; i < 10; ++i) regPrefix(String(i));\n  regPrefix(\"-\");\n});\n\n\n/***/ }),\n\n/***/ \"ujcs\":\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n\n/***/ \"vq+x\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||\n        matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n\n/***/ }),\n\n/***/ \"xrTZ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n\n(function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.3.2\";\n    // if node.js, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = __webpack_require__(\"EuP9\").Buffer;\n        } catch (err) {}\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (true) {\t\t\n        // AMD. Register as an anonymous module.\t\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){ return global.Base64 }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // that's it!\n})(   typeof self   !== 'undefined' ? self\n    : typeof window !== 'undefined' ? window\n    : typeof global !== 'undefined' ? global\n    : this\n);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"DuR2\")))\n\n/***/ }),\n\n/***/ \"yGpH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"RrKZ\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"56e4b5b6\", content, true);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.27e9edb28dcc4a391a82.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/closetag.js\n// module id = +/ra\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../scroll/annotatescrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../scroll/annotatescrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function(query, caseFold, options) {\n    if (typeof options == \"string\") options = {className: options};\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {listenForChanges: false};\n    for (var prop in options) annotateOptions[prop] = options[prop];\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {from: cm.firstLine(), to: cm.lastLine() + 1};\n    this.matches = [];\n    this.update = null;\n\n    this.findMatches();\n    this.annotation.update(this.matches);\n\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function(_cm, change) { self.onChange(change); });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function() {\n    if (!this.gap) return;\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), this.caseFold);\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n    while (cursor.findNext()) {\n      var match = {from: cursor.from(), to: cursor.to()};\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function(change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {from: change.from.line, to: endLine + 1};\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function() { self.updateAfterChange(); }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function() {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function() {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/matchesonscrollbar.js\n// module id = /A6h\n// module chunks = 2 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dropdown', {\n    on: {\n      \"command\": _vm.handleCommandDropdown\n    }\n  }, [_c('el-input', {\n    staticClass: \"search-input\",\n    attrs: {\n      \"placeholder\": \"请输入要搜索的题目\",\n      \"icon\": \"search\",\n      \"spellcheck\": \"false\",\n      \"on-icon-click\": _vm._onSearch\n    },\n    on: {\n      \"change\": _vm._onSearch,\n      \"focus\": _vm._onSearch\n    },\n    model: {\n      value: (_vm.mysearch),\n      callback: function($$v) {\n        _vm.mysearch = (typeof $$v === 'string' ? $$v.trim() : $$v)\n      },\n      expression: \"mysearch\"\n    }\n  }), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, [_c('el-dropdown-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.dropdownLoading),\n      expression: \"dropdownLoading\"\n    }]\n  }, [_vm._v(\"拼命加载中...\")]), _vm._v(\" \"), _vm._l((_vm.searchResult), function(item, index) {\n    return _c('el-dropdown-item', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (index <= 10 && !_vm.dropdownLoading),\n        expression: \"index <= 10 && !dropdownLoading\"\n      }],\n      key: index,\n      attrs: {\n        \"command\": item.id\n      }\n    }, [_c('span', {\n      staticClass: \"problem-item-title\"\n    }, [_vm._v(_vm._s(item.title))]), _vm._v(\" \"), _c('img', {\n      staticClass: \"problem-item-img\",\n      attrs: {\n        \"width\": \"16\",\n        \"height\": \"16 \",\n        \"src\": \"static/problem.png\"\n      }\n    })])\n  })], 2)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-2d96e4b2\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/search/search.vue\n// module id = 0tR3\n// module chunks = 0 3","/**\n * Created by qinzhen on 2017/9/17.\n */\nexport default class Problem {\n  constructor ({id, title, tag, level, description, accepted, submitted, like_nums, hate_nums}) {\n    this.id = id\n    this.title = title\n    this.tag = tag\n    this.level = level\n    this.description = description\n    this.accepted = accepted\n    this.submitted = submitted\n    this.like_nums = like_nums\n    this.hate_nums = hate_nums\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/js/problem.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// A rough approximation of Sublime Text's keybindings\n// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/edit/matchbrackets\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var map = CodeMirror.keyMap.sublime = {fallthrough: \"default\"};\n  var cmds = CodeMirror.commands;\n  var Pos = CodeMirror.Pos;\n  var mac = CodeMirror.keyMap[\"default\"] == CodeMirror.keyMap.macDefault;\n  var ctrl = mac ? \"Cmd-\" : \"Ctrl-\";\n\n  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.\n  function findPosSubword(doc, start, dir) {\n    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n    var line = doc.getLine(start.line);\n    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n    var state = \"start\", type;\n    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n      var cat = next != \"_\" && CodeMirror.isWordChar(next) ? \"w\" : \"o\";\n      if (cat == \"w\" && next.toUpperCase() == next) cat = \"W\";\n      if (state == \"start\") {\n        if (cat != \"o\") { state = \"in\"; type = cat; }\n      } else if (state == \"in\") {\n        if (type != cat) {\n          if (type == \"w\" && cat == \"W\" && dir < 0) pos--;\n          if (type == \"W\" && cat == \"w\" && dir > 0) { type = \"w\"; continue; }\n          break;\n        }\n      }\n    }\n    return Pos(start.line, pos);\n  }\n\n  function moveSubword(cm, dir) {\n    cm.extendSelectionsBy(function(range) {\n      if (cm.display.shift || cm.doc.extend || range.empty())\n        return findPosSubword(cm.doc, range.head, dir);\n      else\n        return dir < 0 ? range.from() : range.to();\n    });\n  }\n\n  var goSubwordCombo = mac ? \"Ctrl-\" : \"Alt-\";\n\n  cmds[map[goSubwordCombo + \"Left\"] = \"goSubwordLeft\"] = function(cm) { moveSubword(cm, -1); };\n  cmds[map[goSubwordCombo + \"Right\"] = \"goSubwordRight\"] = function(cm) { moveSubword(cm, 1); };\n\n  if (mac) map[\"Cmd-Left\"] = \"goLineStartSmart\";\n\n  var scrollLineCombo = mac ? \"Ctrl-Alt-\" : \"Ctrl-\";\n\n  cmds[map[scrollLineCombo + \"Up\"] = \"scrollLineUp\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, \"local\");\n      if (cm.getCursor().line >= visibleBottomLine)\n        cm.execCommand(\"goLineUp\");\n    }\n    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n  };\n  cmds[map[scrollLineCombo + \"Down\"] = \"scrollLineDown\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleTopLine = cm.lineAtHeight(info.top, \"local\")+1;\n      if (cm.getCursor().line <= visibleTopLine)\n        cm.execCommand(\"goLineDown\");\n    }\n    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"L\"] = \"splitSelectionByLine\"] = function(cm) {\n    var ranges = cm.listSelections(), lineRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      for (var line = from.line; line <= to.line; ++line)\n        if (!(to.line > from.line && line == to.line && to.ch == 0))\n          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n                           head: line == to.line ? to : Pos(line)});\n    }\n    cm.setSelections(lineRanges, 0);\n  };\n\n  map[\"Shift-Tab\"] = \"indentLess\";\n\n  cmds[map[\"Esc\"] = \"singleSelectionTop\"] = function(cm) {\n    var range = cm.listSelections()[0];\n    cm.setSelection(range.anchor, range.head, {scroll: false});\n  };\n\n  cmds[map[ctrl + \"L\"] = \"selectLine\"] = function(cm) {\n    var ranges = cm.listSelections(), extended = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      extended.push({anchor: Pos(range.from().line, 0),\n                     head: Pos(range.to().line + 1, 0)});\n    }\n    cm.setSelections(extended);\n  };\n\n  map[\"Shift-Ctrl-K\"] = \"deleteLine\";\n\n  function insertLine(cm, above) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    cm.operation(function() {\n      var len = cm.listSelections().length, newSelection = [], last = -1;\n      for (var i = 0; i < len; i++) {\n        var head = cm.listSelections()[i].head;\n        if (head.line <= last) continue;\n        var at = Pos(head.line + (above ? 0 : 1), 0);\n        cm.replaceRange(\"\\n\", at, null, \"+insertLine\");\n        cm.indentLine(at.line, null, true);\n        newSelection.push({head: at, anchor: at});\n        last = head.line + 1;\n      }\n      cm.setSelections(newSelection);\n    });\n    cm.execCommand(\"indentAuto\");\n  }\n\n  cmds[map[ctrl + \"Enter\"] = \"insertLineAfter\"] = function(cm) { return insertLine(cm, false); };\n\n  cmds[map[\"Shift-\" + ctrl + \"Enter\"] = \"insertLineBefore\"] = function(cm) { return insertLine(cm, true); };\n\n  function wordAt(cm, pos) {\n    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n  }\n\n  cmds[map[ctrl + \"D\"] = \"selectNextOccurrence\"] = function(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      cm.setSelection(word.from, word.to);\n      fullWord = true;\n    } else {\n      var text = cm.getRange(from, to);\n      var query = fullWord ? new RegExp(\"\\\\b\" + text + \"\\\\b\") : text;\n      var cur = cm.getSearchCursor(query, to);\n      var found = cur.findNext();\n      if (!found) {\n        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n        found = cur.findNext();\n      }\n      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n        return CodeMirror.Pass\n      cm.addSelection(cur.from(), cur.to());\n    }\n    if (fullWord)\n      cm.state.sublimeFindFullWord = cm.doc.sel;\n  };\n\n  function addCursorToSelection(cm, dir) {\n    var ranges = cm.listSelections(), newRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var newAnchor = cm.findPosV(range.anchor, dir, \"line\");\n      var newHead = cm.findPosV(range.head, dir, \"line\");\n      var newRange = {anchor: newAnchor, head: newHead};\n      newRanges.push(range);\n      newRanges.push(newRange);\n    }\n    cm.setSelections(newRanges);\n  }\n\n  var addCursorToLineCombo = mac ? \"Shift-Cmd\" : 'Alt-Ctrl';\n  cmds[map[addCursorToLineCombo + \"Up\"] = \"addCursorToPrevLine\"] = function(cm) { addCursorToSelection(cm, -1); };\n  cmds[map[addCursorToLineCombo + \"Down\"] = \"addCursorToNextLine\"] = function(cm) { addCursorToSelection(cm, 1); };\n\n  function isSelectedRange(ranges, from, to) {\n    for (var i = 0; i < ranges.length; i++)\n      if (ranges[i].from() == from && ranges[i].to() == to) return true\n    return false\n  }\n\n  var mirror = \"(){}[]\";\n  function selectBetweenBrackets(cm) {\n    var ranges = cm.listSelections(), newRanges = []\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n      if (!opening) return false;\n      for (;;) {\n        var closing = cm.scanForBracket(pos, 1);\n        if (!closing) return false;\n        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n          newRanges.push({anchor: Pos(opening.pos.line, opening.pos.ch + 1),\n                          head: closing.pos});\n          break;\n        }\n        pos = Pos(closing.pos.line, closing.pos.ch + 1);\n      }\n    }\n    cm.setSelections(newRanges);\n    return true;\n  }\n\n  cmds[map[\"Shift-\" + ctrl + \"Space\"] = \"selectScope\"] = function(cm) {\n    selectBetweenBrackets(cm) || cm.execCommand(\"selectAll\");\n  };\n  cmds[map[\"Shift-\" + ctrl + \"M\"] = \"selectBetweenBrackets\"] = function(cm) {\n    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n  };\n\n  cmds[map[ctrl + \"M\"] = \"goToBracket\"] = function(cm) {\n    cm.extendSelectionsBy(function(range) {\n      var next = cm.scanForBracket(range.head, 1);\n      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n      var prev = cm.scanForBracket(range.head, -1);\n      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n    });\n  };\n\n  var swapLineCombo = mac ? \"Cmd-Ctrl-\" : \"Shift-Ctrl-\";\n\n  cmds[map[swapLineCombo + \"Up\"] = \"swapLineUp\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n                    head: Pos(range.head.line - 1, range.head.ch)});\n      if (range.to().ch == 0 && !range.empty()) --to;\n      if (from > at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = 0; i < linesToMove.length; i += 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        if (to > cm.lastLine())\n          cm.replaceRange(\"\\n\" + line, Pos(cm.lastLine()), null, \"+swapLine\");\n        else\n          cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.setSelections(newSels);\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[swapLineCombo + \"Down\"] = \"swapLineDown\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n      if (range.to().ch == 0 && !range.empty()) from--;\n      if (from < at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        if (from == cm.lastLine())\n          cm.replaceRange(\"\", Pos(from - 1), Pos(from), \"+swapLine\");\n        else\n          cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[ctrl + \"/\"] = \"toggleCommentIndented\"] = function(cm) {\n    cm.toggleComment({ indent: true });\n  }\n\n  cmds[map[ctrl + \"J\"] = \"joinLines\"] = function(cm) {\n    var ranges = cm.listSelections(), joined = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from();\n      var start = from.line, end = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n        end = ranges[++i].to().line;\n      joined.push({start: start, end: end, anchor: !range.empty() && from});\n    }\n    cm.operation(function() {\n      var offset = 0, ranges = [];\n      for (var i = 0; i < joined.length; i++) {\n        var obj = joined[i];\n        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n        for (var line = obj.start; line <= obj.end; line++) {\n          var actual = line - offset;\n          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n          if (actual < cm.lastLine()) {\n            cm.replaceRange(\" \", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n            ++offset;\n          }\n        }\n        ranges.push({anchor: anchor || head, head: head});\n      }\n      cm.setSelections(ranges, 0);\n    });\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"D\"] = \"duplicateLine\"] = function(cm) {\n    cm.operation(function() {\n      var rangeCount = cm.listSelections().length;\n      for (var i = 0; i < rangeCount; i++) {\n        var range = cm.listSelections()[i];\n        if (range.empty())\n          cm.replaceRange(cm.getLine(range.head.line) + \"\\n\", Pos(range.head.line, 0));\n        else\n          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  if (!mac) map[ctrl + \"T\"] = \"transposeChars\";\n\n  function sortLines(cm, caseSensitive) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), toSort = [], selected;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      if (range.empty()) continue;\n      var from = range.from().line, to = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n        to = ranges[++i].to().line;\n      if (!ranges[i].to().ch) to--;\n      toSort.push(from, to);\n    }\n    if (toSort.length) selected = true;\n    else toSort.push(cm.firstLine(), cm.lastLine());\n\n    cm.operation(function() {\n      var ranges = [];\n      for (var i = 0; i < toSort.length; i += 2) {\n        var from = toSort[i], to = toSort[i + 1];\n        var start = Pos(from, 0), end = Pos(to);\n        var lines = cm.getRange(start, end, false);\n        if (caseSensitive)\n          lines.sort();\n        else\n          lines.sort(function(a, b) {\n            var au = a.toUpperCase(), bu = b.toUpperCase();\n            if (au != bu) { a = au; b = bu; }\n            return a < b ? -1 : a == b ? 0 : 1;\n          });\n        cm.replaceRange(lines, start, end);\n        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});\n      }\n      if (selected) cm.setSelections(ranges, 0);\n    });\n  }\n\n  cmds[map[\"F9\"] = \"sortLines\"] = function(cm) { sortLines(cm, true); };\n  cmds[map[ctrl + \"F9\"] = \"sortLinesInsensitive\"] = function(cm) { sortLines(cm, false); };\n\n  cmds[map[\"F2\"] = \"nextBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      var current = marks.shift();\n      var found = current.find();\n      if (found) {\n        marks.push(current);\n        return cm.setSelection(found.from, found.to);\n      }\n    }\n  };\n\n  cmds[map[\"Shift-F2\"] = \"prevBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      marks.unshift(marks.pop());\n      var found = marks[marks.length - 1].find();\n      if (!found)\n        marks.pop();\n      else\n        return cm.setSelection(found.from, found.to);\n    }\n  };\n\n  cmds[map[ctrl + \"F2\"] = \"toggleBookmark\"] = function(cm) {\n    var ranges = cm.listSelections();\n    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      var found = cm.findMarks(from, to);\n      for (var j = 0; j < found.length; j++) {\n        if (found[j].sublimeBookmark) {\n          found[j].clear();\n          for (var k = 0; k < marks.length; k++)\n            if (marks[k] == found[j])\n              marks.splice(k--, 1);\n          break;\n        }\n      }\n      if (j == found.length)\n        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n    }\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"F2\"] = \"clearBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    marks.length = 0;\n  };\n\n  cmds[map[\"Alt-F2\"] = \"selectBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks, ranges = [];\n    if (marks) for (var i = 0; i < marks.length; i++) {\n      var found = marks[i].find();\n      if (!found)\n        marks.splice(i--, 0);\n      else\n        ranges.push({anchor: found.from, head: found.to});\n    }\n    if (ranges.length)\n      cm.setSelections(ranges, 0);\n  };\n\n  map[\"Alt-Q\"] = \"wrapLines\";\n\n  var cK = ctrl + \"K \";\n\n  function modifyWordOrSelection(cm, mod) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), indices = [], replacements = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) { indices.push(i); replacements.push(\"\"); }\n        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n      }\n      cm.replaceSelections(replacements, \"around\", \"case\");\n      for (var i = indices.length - 1, at; i >= 0; i--) {\n        var range = ranges[indices[i]];\n        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n        var word = wordAt(cm, range.head);\n        at = word.from;\n        cm.replaceRange(mod(word.word), word.from, word.to);\n      }\n    });\n  }\n\n  map[cK + ctrl + \"Backspace\"] = \"delLineLeft\";\n\n  cmds[map[\"Backspace\"] = \"smartBackspace\"] = function(cm) {\n    if (cm.somethingSelected()) return CodeMirror.Pass;\n\n    cm.operation(function() {\n      var cursors = cm.listSelections();\n      var indentUnit = cm.getOption(\"indentUnit\");\n\n      for (var i = cursors.length - 1; i >= 0; i--) {\n        var cursor = cursors[i].head;\n        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption(\"tabSize\"));\n\n        // Delete by one character by default\n        var deletePos = cm.findPosH(cursor, -1, \"char\", false);\n\n        if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n          var prevIndent = new Pos(cursor.line,\n            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n\n          // Smart delete only if we found a valid prevIndent location\n          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;\n        }\n\n        cm.replaceRange(\"\", deletePos, cursor, \"+delete\");\n      }\n    });\n  };\n\n  cmds[map[cK + ctrl + \"K\"] = \"delLineRight\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(\"\", ranges[i].anchor, Pos(ranges[i].to().line), \"+delete\");\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[cK + ctrl + \"U\"] = \"upcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n  };\n  cmds[map[cK + ctrl + \"L\"] = \"downcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n  };\n\n  cmds[map[cK + ctrl + \"Space\"] = \"setSublimeMark\"] = function(cm) {\n    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n  };\n  cmds[map[cK + ctrl + \"A\"] = \"selectToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) cm.setSelection(cm.getCursor(), found);\n  };\n  cmds[map[cK + ctrl + \"W\"] = \"deleteToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      var from = cm.getCursor(), to = found;\n      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n      cm.state.sublimeKilled = cm.getRange(from, to);\n      cm.replaceRange(\"\", from, to);\n    }\n  };\n  cmds[map[cK + ctrl + \"X\"] = \"swapWithSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n      cm.setCursor(found);\n    }\n  };\n  cmds[map[cK + ctrl + \"Y\"] = \"sublimeYank\"] = function(cm) {\n    if (cm.state.sublimeKilled != null)\n      cm.replaceSelection(cm.state.sublimeKilled, null, \"paste\");\n  };\n\n  map[cK + ctrl + \"G\"] = \"clearBookmarks\";\n  cmds[map[cK + ctrl + \"C\"] = \"showInCenter\"] = function(cm) {\n    var pos = cm.cursorCoords(null, \"local\");\n    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n  };\n\n  var selectLinesCombo = mac ? \"Ctrl-Shift-\" : \"Ctrl-Alt-\";\n  cmds[map[selectLinesCombo + \"Up\"] = \"selectLinesUpward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line > cm.firstLine())\n          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n      }\n    });\n  };\n  cmds[map[selectLinesCombo + \"Down\"] = \"selectLinesDownward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line < cm.lastLine())\n          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n      }\n    });\n  };\n\n  function getTarget(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      from = word.from;\n      to = word.to;\n    }\n    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n  }\n\n  function findAndGoTo(cm, forward) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var query = target.query;\n    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n\n    if (forward ? cur.findNext() : cur.findPrevious()) {\n      cm.setSelection(cur.from(), cur.to());\n    } else {\n      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n                                              : cm.clipPos(Pos(cm.lastLine())));\n      if (forward ? cur.findNext() : cur.findPrevious())\n        cm.setSelection(cur.from(), cur.to());\n      else if (target.word)\n        cm.setSelection(target.from, target.to);\n    }\n  };\n  cmds[map[ctrl + \"F3\"] = \"findUnder\"] = function(cm) { findAndGoTo(cm, true); };\n  cmds[map[\"Shift-\" + ctrl + \"F3\"] = \"findUnderPrevious\"] = function(cm) { findAndGoTo(cm,false); };\n  cmds[map[\"Alt-F3\"] = \"findAllUnder\"] = function(cm) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var cur = cm.getSearchCursor(target.query);\n    var matches = [];\n    var primaryIndex = -1;\n    while (cur.findNext()) {\n      matches.push({anchor: cur.from(), head: cur.to()});\n      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n        primaryIndex++;\n    }\n    cm.setSelections(matches, primaryIndex);\n  };\n\n  map[\"Shift-\" + ctrl + \"[\"] = \"fold\";\n  map[\"Shift-\" + ctrl + \"]\"] = \"unfold\";\n  map[cK + ctrl + \"0\"] = map[cK + ctrl + \"J\"] = \"unfoldAll\";\n\n  map[ctrl + \"I\"] = \"findIncremental\";\n  map[\"Shift-\" + ctrl + \"I\"] = \"findIncrementalReverse\";\n  map[ctrl + \"H\"] = \"replace\";\n  map[\"F3\"] = \"findNext\";\n  map[\"Shift-F3\"] = \"findPrev\";\n\n  CodeMirror.normalizeKeyMap(map);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/sublime.js\n// module id = 7Xsf\n// module chunks = 2 3","<template>\n  <el-dropdown @command=\"handleCommandDropdown\">\n    <el-input\n      class=\"search-input\"\n      placeholder=\"请输入要搜索的题目\"\n      icon=\"search\"\n      v-model.trim=\"mysearch\"\n      spellcheck=\"false\"\n      :on-icon-click=\"_onSearch\"\n      @change=\"_onSearch\"\n      @focus=\"_onSearch\">\n    </el-input>\n    <el-dropdown-menu slot=\"dropdown\">\n      <el-dropdown-item v-show=\"dropdownLoading\">拼命加载中...</el-dropdown-item>\n      <el-dropdown-item v-for=\"(item,index) in searchResult\" v-show=\"index <= 10 && !dropdownLoading\"\n                        :key=\"index\" :command=\"item.id\">\n        <span class=\"problem-item-title\">{{item.title}}</span>\n        <img width=\"16\" height=\"16 \" src=\"static/problem.png\" class=\"problem-item-img\">\n      </el-dropdown-item>\n    </el-dropdown-menu>\n  </el-dropdown>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import Problem from 'common/js/problem'\n  import axios from 'axios'\n  import { baseUrl } from 'common/js/data'\n  import { mapMutations } from 'vuex'\n\n  export default{\n    data() {\n      return {\n        mysearch: '',\n        dropdownLoading: false,\n        searchResult: []\n      }\n    },\n    methods: {\n      _onSearch() {\n        if (this.mysearch === '') {\n          this.searchResult = []\n          return\n        }\n        this.dropdownLoading = true\n        console.log('SearchClick')\n        let url = `${baseUrl}/search`\n        // 清空之前的结果\n        this.searchResult = []\n        axios.post(url, {\n          'target': 'Problem',\n          'content': this.mysearch,\n          'type': 'title'\n        }).then(response => {\n          if (response.data.result.length === 0) {\n            this.searchResult = [{title: `无法查询到含有关键字:${this.mysearch}的题目`}]\n          } else {\n            this.searchResult = response.data.result\n          }\n          this.dropdownLoading = false\n        }, response => {\n          console.log(response)\n          this._onSearch()\n        })\n      },\n      handleCommandDropdown(command) {\n        this.setProblem(new Problem({\n          id: command\n        }))\n        this.$router.push('/home/problem')\n      },\n      ...mapMutations({\n        setProblem: 'SET_PROBLEM'\n      })\n    }\n  }\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .el-dropdown\n    .el-input\n      width 500px\n\n  .el-dropdown-menu__item\n    width auto\n    .problem-item-title\n      display inline-block\n    .problem-item-img\n      float right\n      margin-top 10px\n\n  .el-dropdown-menu\n    width 500px\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/search/search.vue?8e92a760","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ffcf786\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./manage-problems.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./manage-problems.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1ffcf786\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./manage-problems.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ffcf786\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/manager/manage-problems.vue\n// module id = BUZr\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  var queryDialog =\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  var replaceQueryDialog =\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/search.js\n// module id = CK2l\n// module chunks = 2 3","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = EKta\n// module chunks = 3","<template>\n  <div class=\"problem-edit\">\n    <div class=\"panel\">\n      <div class=\"panel-heading\">\n        <i class=\"el-icon-arrow-left\" @click.stop=\"quit\"></i>\n        <h3 class=\"panel-title\">{{editTitle}}</h3>\n        <el-tag class=\"quit-tag\" type=\"danger\" @click.native.stop=\"quit\">退出</el-tag>\n      </div>\n      <div class=\"panel-body\">\n        <el-form ref=\"form\" :model=\"form\" label-width=\"80px\">\n          <el-form-item label=\"题目标题\">\n            <el-input class=\"short-input\" v-model=\"form.title\" spellcheck=\"false\" size=\"small\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"题目标签\">\n            <el-input class=\"short-input\" v-model=\"form.tag\" spellcheck=\"false\" size=\"small\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"题目难度\">\n            <el-radio-group v-model=\"form.level\">\n              <el-radio :label=\"1\">1</el-radio>\n              <el-radio :label=\"2\">2</el-radio>\n              <el-radio :label=\"3\">3</el-radio>\n              <el-radio :label=\"4\">4</el-radio>\n              <el-radio :label=\"5\">5</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item label=\"题目描述\">\n            <el-input v-model=\"form.description\" spellcheck=\"false\"\n                      type=\"textarea\" :rows=\"3\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"官方程序代码\">\n            <el-input v-model=\"form.program\" spellcheck=\"false\"\n                      type=\"textarea\" :rows=\"5\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"输入样例\">\n            <el-input v-model=\"form.input\" spellcheck=\"false\"\n                      type=\"textarea\" :rows=\"5\" placeholder=\"Enter a sample input testcase\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"输出样例\">\n            <el-input v-model=\"form.output\" spellcheck=\"false\"\n                      type=\"textarea\" :rows=\"5\" placeholder=\"Enter a sample output testcase\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"模板选择\">\n            <el-checkbox-group v-model=\"form.checkLanguageList\">\n              <el-checkbox v-for=\"(item,index) in Languages\" :key=\"index\" :label=\"item\"></el-checkbox>\n            </el-checkbox-group>\n          </el-form-item>\n          <div class=\"editor-wrapper\">\n            <div class=\"dropdown-wrapper\">\n              <el-dropdown trigger=\"click\" @command=\"handleCommandLangage\" @visible-change=\"dropdownChange\"\n                           menu-align=\"start\">\n                <el-button type=\"primary\">{{selectLanguage}}<i class=\"el-icon-caret-bottom el-icon--right\"></i>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item v-for=\"(item , index) in Languages\" :key=\"index\" :command=\"index\">{{item}}\n                  </el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n            </div>\n            <div class=\"editor\">\n              <codemirror\n                ref=\"myEditor\"\n                v-model=\"code\"\n                :options=\"editorOptions\">\n              </codemirror>\n            </div>\n            <el-button class=\"setup-btn\" @click=\"setupProblem\" type=\"success\" icon=\"edit\">创建题目</el-button>\n          </div>\n        </el-form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  // require active-line.js\n  require('codemirror/addon/selection/active-line.js')\n\n  // closebrackets\n  require('codemirror/addon/edit/closebrackets.js')\n\n  // styleSelectedText\n  require('codemirror/addon/selection/mark-selection.js')\n  require('codemirror/addon/search/searchcursor.js')\n\n  // hint\n  require('codemirror/addon/hint/show-hint.js')\n  require('codemirror/addon/hint/javascript-hint.js')\n  require('codemirror/addon/selection/active-line.js')\n\n  // highlightSelectionMatches\n  require('codemirror/addon/scroll/annotatescrollbar.js')\n  require('codemirror/addon/search/matchesonscrollbar.js')\n  require('codemirror/addon/search/searchcursor.js')\n  require('codemirror/addon/search/match-highlighter.js')\n\n  // keyMap\n  require('codemirror/mode/clike/clike.js')\n  require('codemirror/addon/edit/matchbrackets.js')\n  require('codemirror/addon/comment/comment.js')\n  require('codemirror/addon/dialog/dialog.js')\n  require('codemirror/addon/dialog/dialog.css')\n  require('codemirror/addon/search/searchcursor.js')\n  require('codemirror/addon/search/search.js')\n  require('codemirror/keymap/sublime.js')\n  require('codemirror/keymap/emacs.js')\n  require('codemirror/keymap/vim.js')\n\n  // foldGutter\n  require('codemirror/addon/fold/foldgutter.css')\n  require('codemirror/addon/fold/brace-fold.js')\n  require('codemirror/addon/fold/comment-fold.js')\n  require('codemirror/addon/fold/foldcode.js')\n  require('codemirror/addon/fold/foldgutter.js')\n  require('codemirror/addon/fold/indent-fold.js')\n  require('codemirror/addon/fold/markdown-fold.js')\n  require('codemirror/addon/fold/xml-fold.js')\n\n  // autoCloseTags\n  require('codemirror/addon/edit/closetag.js')\n\n  import { mapGetters, mapMutations } from 'vuex'\n  import { languages, editorModes, baseUrl, MSG_OK, MSG_NO } from 'common/js/data'\n  import axios from 'axios'\n\n  export default{\n    props: {\n      editTitle: {\n        type: String,\n        default: '创建题目'\n      },\n      isEdit: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data(){\n      return {\n        form: {\n          title: '',\n          description: '',\n          level: 1,\n          tag: '',\n          program: '',\n          input: '',\n          output: '',\n          checkLanguageList: ['C']\n        },\n        editorOptions: {\n          tabSize: 4,\n          mode: 'text/x-csrc',\n          theme: 'default',\n          lineNumbers: true,\n          line: true,\n          keyMap: 'sublime',\n          foldGutter: true,\n          gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n          // 选中文本自动高亮，及高亮方式\n          styleSelectedText: true,\n          highlightSelectionMatches: {showToken: /\\w/, annotateScrollbar: true}\n          // 如果有hint方面的配置，也应该出现在这里\n        },\n        Languages: languages,\n        editorModes: editorModes,\n        selectLanguage: languages[0],\n        code: '',\n        templetC: {value: 'c', text: 'C', defaultCode: ''},\n        templetCpp: {value: 'cpp', text: 'C++', defaultCode: ''},\n        templetCsharp: {value: 'csharp', text: 'C#', defaultCode: ''},\n        templetJava: {value: 'java', text: 'Java', defaultCode: ''},\n        templetPython: {value: 'python3', text: 'Python3', defaultCode: ''},\n        templetJs: {value: 'javascript', text: 'Javascript', defaultCode: ''},\n        templetRuby: {value: 'ruby', text: 'Ruby', defaultCode: ''},\n        templetGolang: {value: 'golang', text: 'Go', defaultCode: ''}\n      }\n    },\n    methods: {\n      quit(){\n        this.$emit('editFinish')\n      },\n      setupProblem(){\n        let Base64 = require('js-base64').Base64\n        this._addTemplet()\n        let array = this._pushALLTemplets()\n        console.log(array)\n        let result = []\n        for (let i = 0; i < this.form.checkLanguageList.length; i++) {\n          result.push(array.find((item) => item.text === this.form.checkLanguageList[i]))\n        }\n        console.log(result)\n        let url = `${baseUrl}/problems`\n        axios.post(url, {\n          title: this.form.title,\n          description: this.form.description,\n          level: this.form.level + '',\n          tag: this.form.tag,\n          program: Base64.encode(this.form.program),\n          code: Base64.encode(result),\n          input: Base64.encode(this.form.input),\n          output: Base64.encode(this.form.output)\n        }).then(response => {\n          if (response.data.msg === MSG_OK) {\n            //最后清空vuex中的Templets\n            this.setTemplets([])\n            this.$notify({\n              title: '成功',\n              message: `成功创建题目:${response.data.result[0].title}`,\n              type: 'success'\n            })\n            this.$emit('editFinish')\n          } else if (response.data.msg === MSG_NO) {\n            this.$notify({\n              title: '创建失败',\n              message: `${response.data.error}`,\n              type: 'error'\n            })\n          }\n        }, response => {})\n      },\n      handleCommandLangage(index) {\n        console.log('xuan ' + index)\n        this.editorOptions.mode = this.editorModes[index]\n        this.selectLanguage = this.Languages[index]\n        this.code = this.templets.find((item) => item.text === this.selectLanguage).defaultCode\n      },\n      dropdownChange(isShow) {\n        if (isShow) {\n          //  this.selectLanguage\n          this._addTemplet()\n          this.setTemplets(this._pushALLTemplets())\n        }\n      },\n      _pushALLTemplets(){\n        let result = []\n        result.push(this.templetC)\n        result.push(this.templetCpp)\n        result.push(this.templetCsharp)\n        result.push(this.templetJava)\n        result.push(this.templetPython)\n        result.push(this.templetJs)\n        result.push(this.templetRuby)\n        result.push(this.templetGolang)\n        return result\n      },\n      _addTemplet(){\n        if (this.selectLanguage === this.templetC.text) {\n          this.templetC.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetCpp.text) {\n          this.templetCpp.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetCsharp.text) {\n          this.templetCsharp.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetJava.text) {\n          this.templetJava.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetPython.text) {\n          this.templetPython.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetJs.text) {\n          this.templetJs.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetRuby.text) {\n          this.templetRuby.defaultCode = this.code\n        } else if (this.selectLanguage === this.templetGolang.text) {\n          this.templetGolang.defaultCode = this.code\n        }\n      },\n      ...mapMutations({\n        setTemplets: 'SET_TEMPLETS'\n      })\n    },\n    computed: {\n      ...mapGetters([\n        'problem',\n        'templets'\n      ])\n    }\n//    watch: {\n//      isEdit(newValue){\n//        if (newValue) {\n//          console.log('wach')\n//        }\n//      }\n//    }\n  }\n</script>\n\n<style lang=\"stylus\" scoped rel=\"stylesheet/stylus\">\n\n  .problem-edit\n    .panel\n      border-radius: 5px;\n      margin-bottom: 20px;\n      background-color: #fff;\n      border: 1px solid #ddd;\n      -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n      box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n      .panel-heading\n        padding: 10px 15px;\n        color: #333;\n        background-color: #f5f5f5;\n        border-color: #ddd;\n        border-top-left-radius: 5px;\n        border-top-right-radius: 5px;\n        border-bottom: 1px solid transparent;\n        .el-icon-arrow-left\n          color: lightsteelblue\n          &:hover\n            cursor pointer\n        .panel-title\n          display inline-block\n          margin-left 5px\n          margin-top 0\n          margin-bottom 0\n          font-size: 18px;\n          color: inherit;\n          font-weight: 500;\n          line-height: 1.1;\n        .quit-tag\n          float right\n          &:hover\n            cursor pointer\n      .panel-body\n        padding: 15px 35px;\n        .el-form\n          .el-form-item\n            margin-right 10%\n            .short-input\n              width 50%\n          .editor-wrapper\n            position relative\n            .dropdown-wrapper\n              position absolute\n              top: 0\n              left 10px\n              display inline-block\n            .editor\n              margin-left 100px\n              display inline-block\n              width 70%\n              border 1px solid #ddd\n            .setup-btn\n              position absolute\n              right 0\n              bottom 5px\n              width 150px\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/manager/manage-problem-edit.vue?286341d2","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = EuP9\n// module chunks = 3","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-49e52881\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./manage-problem-edit.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./manage-problem-edit.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-49e52881\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./manage-problem-edit.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-49e52881\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/manager/manage-problem-edit.vue\n// module id = HbqP\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        vim.lastHPos = Infinity;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch));\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '['};\n        var selfPaired = {'\\'': true, '\"': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */);\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n');\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i];\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /-?\\d+/g;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        var token;\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0];\n          start = match.index;\n          end = start + token.length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1;\n          var number = parseInt(token) + (increment * actionArgs.repeat);\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          numberStr = number.toString();\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1;\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      };\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm);\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done;\n        var event = history[history.length - 2];\n        return event && event.ranges && event.ranges[0].head;\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySlash(argString) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart);\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            regexPart = regexPart + '/' + flagsPart;\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); };\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = [];\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;\n        var changes = lastChange.changes;\n        var text = [];\n        var i = 0;\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i]);\n          if (changes[i] instanceof InsertModeKey) {\n             i++;\n          } else {\n             i+= selLength;\n          }\n        }\n        lastChange.changes = text;\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      };\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n            } else {\n                lastChange.changes.push(text);\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    };\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim;\n        var lastSel = vim.lastSelection;\n        var offset = getOffset(lastSel.anchor, lastSel.head);\n        selectForInsert(cm, head, offset.line + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/vim.js\n// module id = Hyg2\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldgutter.js\n// module id = Kk9m\n// module chunks = 2 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../css-loader/index.js??ref--6-2!./dialog.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../vue-style-loader/lib/addStylesClient.js\")(\"e2c66042\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/dialog/dialog.css\n// module id = LxZp\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var Pos = CodeMirror.Pos;\n\n  function forEach(arr, f) {\n    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);\n  }\n\n  function arrayContains(arr, item) {\n    if (!Array.prototype.indexOf) {\n      var i = arr.length;\n      while (i--) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return arr.indexOf(item) != -1;\n  }\n\n  function scriptHint(editor, keywords, getToken, options) {\n    // Find the token at the cursor\n    var cur = editor.getCursor(), token = getToken(editor, cur);\n    if (/\\b(?:string|comment)\\b/.test(token.type)) return;\n    token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;\n\n    // If it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n      token = {start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n               type: token.string == \".\" ? \"property\" : null};\n    } else if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var tprop = token;\n    // If it is a property, find out what it is a property of.\n    while (tprop.type == \"property\") {\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (tprop.string != \".\") return;\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (!context) var context = [];\n      context.push(tprop);\n    }\n    return {list: getCompletions(token, context, keywords, options),\n            from: Pos(cur.line, token.start),\n            to: Pos(cur.line, token.end)};\n  }\n\n  function javascriptHint(editor, options) {\n    return scriptHint(editor, javascriptKeywords,\n                      function (e, cur) {return e.getTokenAt(cur);},\n                      options);\n  };\n  CodeMirror.registerHelper(\"hint\", \"javascript\", javascriptHint);\n\n  function getCoffeeScriptToken(editor, cur) {\n  // This getToken, it is for coffeescript, imitates the behavior of\n  // getTokenAt method in javascript.js, that is, returning \"property\"\n  // type and treat \".\" as indepenent token.\n    var token = editor.getTokenAt(cur);\n    if (cur.ch == token.start + 1 && token.string.charAt(0) == '.') {\n      token.end = token.start;\n      token.string = '.';\n      token.type = \"property\";\n    }\n    else if (/^\\.[\\w$_]*$/.test(token.string)) {\n      token.type = \"property\";\n      token.start++;\n      token.string = token.string.replace(/\\./, '');\n    }\n    return token;\n  }\n\n  function coffeescriptHint(editor, options) {\n    return scriptHint(editor, coffeescriptKeywords, getCoffeeScriptToken, options);\n  }\n  CodeMirror.registerHelper(\"hint\", \"coffeescript\", coffeescriptHint);\n\n  var stringProps = (\"charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight \" +\n                     \"toUpperCase toLowerCase split concat match replace search\").split(\" \");\n  var arrayProps = (\"length concat join splice push pop shift unshift slice reverse sort indexOf \" +\n                    \"lastIndexOf every some filter forEach map reduce reduceRight \").split(\" \");\n  var funcProps = \"prototype apply call bind\".split(\" \");\n  var javascriptKeywords = (\"break case catch continue debugger default delete do else false finally for function \" +\n                  \"if in instanceof new null return switch throw true try typeof var void while with\").split(\" \");\n  var coffeescriptKeywords = (\"and break catch class continue delete do else extends false finally for \" +\n                  \"if in instanceof isnt new no not null of off on or return switch then throw true try typeof until void while with yes\").split(\" \");\n\n  function forAllProps(obj, callback) {\n    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n      for (var name in obj) callback(name)\n    } else {\n      for (var o = obj; o; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(callback)\n    }\n  }\n\n  function getCompletions(token, context, keywords, options) {\n    var found = [], start = token.string, global = options && options.globalScope || window;\n    function maybeAdd(str) {\n      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);\n    }\n    function gatherCompletions(obj) {\n      if (typeof obj == \"string\") forEach(stringProps, maybeAdd);\n      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);\n      else if (obj instanceof Function) forEach(funcProps, maybeAdd);\n      forAllProps(obj, maybeAdd)\n    }\n\n    if (context && context.length) {\n      // If this is a property, see if it belongs to some object we can\n      // find in the current environment.\n      var obj = context.pop(), base;\n      if (obj.type && obj.type.indexOf(\"variable\") === 0) {\n        if (options && options.additionalContext)\n          base = options.additionalContext[obj.string];\n        if (!options || options.useGlobalScope !== false)\n          base = base || global[obj.string];\n      } else if (obj.type == \"string\") {\n        base = \"\";\n      } else if (obj.type == \"atom\") {\n        base = 1;\n      } else if (obj.type == \"function\") {\n        if (global.jQuery != null && (obj.string == '$' || obj.string == 'jQuery') &&\n            (typeof global.jQuery == 'function'))\n          base = global.jQuery();\n        else if (global._ != null && (obj.string == '_') && (typeof global._ == 'function'))\n          base = global._();\n      }\n      while (base != null && context.length)\n        base = base[context.pop().string];\n      if (base != null) gatherCompletions(base);\n    } else {\n      // If not, just look in the global object and any local scope\n      // (reading into JS mode internals to get at the local and global variables)\n      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);\n      for (var v = token.state.globalVars; v; v = v.next) maybeAdd(v.name);\n      if (!options || options.useGlobalScope !== false)\n        gatherCompletions(global);\n      forEach(keywords, maybeAdd);\n    }\n    return found;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/hint/javascript-hint.js\n// module id = Mixr\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./matchesonscrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp(\"\\\\b\" + query + \"\\\\b\") : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/match-highlighter.js\n// module id = OkRY\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/scroll/annotatescrollbar.js\n// module id = QSKu\n// module chunks = 2 3","exports = module.exports = require(\"../../../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".CodeMirror-dialog{position:absolute;left:0;right:0;background:inherit;z-index:15;padding:.1em .8em;overflow:hidden;color:inherit}.CodeMirror-dialog-top{border-bottom:1px solid #eee;top:0}.CodeMirror-dialog-bottom{border-top:1px solid #eee;bottom:0}.CodeMirror-dialog input{border:none;outline:none;background:transparent;width:20em;color:inherit;font-family:monospace}.CodeMirror-dialog button{font-size:70%}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/dialog/dialog.css\"],\"names\":[],\"mappings\":\"AAAA,mBACE,kBAAmB,AACnB,OAAQ,AAAC,QAAS,AAClB,mBAAoB,AACpB,WAAY,AACZ,kBAAmB,AACnB,gBAAiB,AACjB,aAAe,CAChB,AAED,uBACE,6BAA8B,AAC9B,KAAO,CACR,AAED,0BACE,0BAA2B,AAC3B,QAAU,CACX,AAED,yBACE,YAAa,AACb,aAAc,AACd,uBAAwB,AACxB,WAAY,AACZ,cAAe,AACf,qBAAuB,CACxB,AAED,0BACE,aAAe,CAChB\",\"file\":\"dialog.css\",\"sourcesContent\":[\".CodeMirror-dialog {\\n  position: absolute;\\n  left: 0; right: 0;\\n  background: inherit;\\n  z-index: 15;\\n  padding: .1em .8em;\\n  overflow: hidden;\\n  color: inherit;\\n}\\n\\n.CodeMirror-dialog-top {\\n  border-bottom: 1px solid #eee;\\n  top: 0;\\n}\\n\\n.CodeMirror-dialog-bottom {\\n  border-top: 1px solid #eee;\\n  bottom: 0;\\n}\\n\\n.CodeMirror-dialog input {\\n  border: none;\\n  outline: none;\\n  background: transparent;\\n  width: 20em;\\n  color: inherit;\\n  font-family: monospace;\\n}\\n\\n.CodeMirror-dialog button {\\n  font-size: 70%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/codemirror/addon/dialog/dialog.css\n// module id = RkAk\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/dialog/dialog.js\n// module id = RkhK\n// module chunks = 2 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".el-dropdown .el-input[data-v-2d96e4b2]{width:500px}.el-dropdown-menu__item[data-v-2d96e4b2]{width:auto}.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2]{display:inline-block}.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2]{float:right;margin-top:10px}.el-dropdown-menu[data-v-2d96e4b2]{width:500px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/search/search.vue\"],\"names\":[],\"mappings\":\"AACA,wCACE,WAAa,CACd,AACD,yCACE,UAAY,CACb,AACD,6DACE,oBAAsB,CACvB,AACD,2DACE,YAAa,AACb,eAAiB,CAClB,AACD,mCACE,WAAa,CACd\",\"file\":\"search.vue\",\"sourcesContent\":[\"\\n.el-dropdown .el-input[data-v-2d96e4b2] {\\n  width: 500px;\\n}\\n.el-dropdown-menu__item[data-v-2d96e4b2] {\\n  width: auto;\\n}\\n.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2] {\\n  display: inline-block;\\n}\\n.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2] {\\n  float: right;\\n  margin-top: 10px;\\n}\\n.el-dropdown-menu[data-v-2d96e4b2] {\\n  width: 500px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-2d96e4b2\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/search/search.vue\n// module id = RrKZ\n// module chunks = 0 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ffcf786\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./manage-problems.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"a0ec5c32\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-1ffcf786\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problems.vue\n// module id = S1i8\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldcode.js\n// module id = THjC\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/xml-fold.js\n// module id = TQy8\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/indent-fold.js\n// module id = U3HU\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line < CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/selection/mark-selection.js\n// module id = U80t\n// module chunks = 2 3","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2d96e4b2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./search.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./search.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2d96e4b2\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./search.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2d96e4b2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/search/search.vue\n// module id = YOyO\n// module chunks = 0 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../css-loader/index.js??ref--6-2!./foldgutter.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../vue-style-loader/lib/addStylesClient.js\")(\"da13b76a\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldgutter.css\n// module id = Yokd\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.indexOf(endString);\n    }\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/comment/comment.js\n// module id = Z6qg\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/selection/active-line.js\n// module id = aGTD\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type) || stringStartsAfter(cm, pos)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/closebrackets.js\n// module id = aX1R\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureGlobal(regexp) {\n    return regexp.global ? regexp : new RegExp(regexp.source, regexpFlags(regexp) + \"g\")\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (end.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureGlobal(query)\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/searchcursor.js\n// module id = c+I8\n// module chunks = 2 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"problem-edit\"\n  }, [_c('div', {\n    staticClass: \"panel\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_c('i', {\n    staticClass: \"el-icon-arrow-left\",\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }), _vm._v(\" \"), _c('h3', {\n    staticClass: \"panel-title\"\n  }, [_vm._v(_vm._s(_vm.editTitle))]), _vm._v(\" \"), _c('el-tag', {\n    staticClass: \"quit-tag\",\n    attrs: {\n      \"type\": \"danger\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }, [_vm._v(\"退出\")])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"model\": _vm.form,\n      \"label-width\": \"80px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标题\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.title),\n      callback: function($$v) {\n        _vm.form.title = $$v\n      },\n      expression: \"form.title\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标签\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.tag),\n      callback: function($$v) {\n        _vm.form.tag = $$v\n      },\n      expression: \"form.tag\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目难度\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.form.level),\n      callback: function($$v) {\n        _vm.form.level = $$v\n      },\n      expression: \"form.level\"\n    }\n  }, [_c('el-radio', {\n    attrs: {\n      \"label\": 1\n    }\n  }, [_vm._v(\"1\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 2\n    }\n  }, [_vm._v(\"2\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 3\n    }\n  }, [_vm._v(\"3\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 4\n    }\n  }, [_vm._v(\"4\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 5\n    }\n  }, [_vm._v(\"5\")])], 1)], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目描述\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 3\n    },\n    model: {\n      value: (_vm.form.description),\n      callback: function($$v) {\n        _vm.form.description = $$v\n      },\n      expression: \"form.description\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"官方程序代码\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5\n    },\n    model: {\n      value: (_vm.form.program),\n      callback: function($$v) {\n        _vm.form.program = $$v\n      },\n      expression: \"form.program\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输入样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample input testcase\"\n    },\n    model: {\n      value: (_vm.form.input),\n      callback: function($$v) {\n        _vm.form.input = $$v\n      },\n      expression: \"form.input\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输出样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample output testcase\"\n    },\n    model: {\n      value: (_vm.form.output),\n      callback: function($$v) {\n        _vm.form.output = $$v\n      },\n      expression: \"form.output\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"模板选择\"\n    }\n  }, [_c('el-checkbox-group', {\n    model: {\n      value: (_vm.form.checkLanguageList),\n      callback: function($$v) {\n        _vm.form.checkLanguageList = $$v\n      },\n      expression: \"form.checkLanguageList\"\n    }\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-checkbox', {\n      key: index,\n      attrs: {\n        \"label\": item\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor-wrapper\"\n  }, [_c('div', {\n    staticClass: \"dropdown-wrapper\"\n  }, [_c('el-dropdown', {\n    attrs: {\n      \"trigger\": \"click\",\n      \"menu-align\": \"start\"\n    },\n    on: {\n      \"command\": _vm.handleCommandLangage,\n      \"visible-change\": _vm.dropdownChange\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    }\n  }, [_vm._v(_vm._s(_vm.selectLanguage)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": index\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n                \")])\n  }))], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor\"\n  }, [_c('codemirror', {\n    ref: \"myEditor\",\n    attrs: {\n      \"options\": _vm.editorOptions\n    },\n    model: {\n      value: (_vm.code),\n      callback: function($$v) {\n        _vm.code = $$v\n      },\n      expression: \"code\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"setup-btn\",\n    attrs: {\n      \"type\": \"success\",\n      \"icon\": \"edit\"\n    },\n    on: {\n      \"click\": _vm.setupProblem\n    }\n  }, [_vm._v(\"创建题目\")])], 1)], 1)], 1)])])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-49e52881\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/manager/manage-problem-edit.vue\n// module id = c2Vz\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".problem-edit .panel[data-v-49e52881]{border-radius:5px;margin-bottom:20px;background-color:#fff;border:1px solid #ddd;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.problem-edit .panel .panel-heading[data-v-49e52881]{padding:10px 15px;color:#333;background-color:#f5f5f5;border-color:#ddd;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom:1px solid transparent}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]{color:#b0c4de}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-heading .panel-title[data-v-49e52881]{display:inline-block;margin-left:5px;margin-top:0;margin-bottom:0;font-size:18px;color:inherit;font-weight:500;line-height:1.1}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]{float:right}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-body[data-v-49e52881]{padding:15px 35px}.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881]{margin-right:10%}.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881]{width:50%}.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881]{position:relative}.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881]{position:absolute;top:0;left:10px;display:inline-block}.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881]{margin-left:100px;display:inline-block;width:70%;border:1px solid #ddd}.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881]{position:absolute;right:0;bottom:5px;width:150px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problem-edit.vue\"],\"names\":[],\"mappings\":\"AACA,sCACE,kBAAmB,AACnB,mBAAoB,AACpB,sBAAuB,AACvB,sBAAuB,AACvB,6CAA+C,AAC/C,oCAAuC,CACxC,AACD,qDACE,kBAAmB,AACnB,WAAY,AACZ,yBAA0B,AAC1B,kBAAmB,AACnB,2BAA4B,AAC5B,4BAA6B,AAC7B,mCAAqC,CACtC,AACD,yEACE,aAAe,CAChB,AACD,+EACE,cAAgB,CACjB,AACD,kEACE,qBAAsB,AACtB,gBAAiB,AACjB,aAAc,AACd,gBAAiB,AACjB,eAAgB,AAChB,cAAe,AACf,gBAAiB,AACjB,eAAiB,CAClB,AACD,+DACE,WAAa,CACd,AACD,qEACE,cAAgB,CACjB,AACD,kDACE,iBAAmB,CACpB,AACD,yEACE,gBAAkB,CACnB,AACD,sFACE,SAAW,CACZ,AACD,2EACE,iBAAmB,CACpB,AACD,6FACE,kBAAmB,AACnB,MAAO,AACP,UAAW,AACX,oBAAsB,CACvB,AACD,mFACE,kBAAmB,AACnB,qBAAsB,AACtB,UAAW,AACX,qBAAuB,CACxB,AACD,sFACE,kBAAmB,AACnB,QAAS,AACT,WAAY,AACZ,WAAa,CACd\",\"file\":\"manage-problem-edit.vue\",\"sourcesContent\":[\"\\n.problem-edit .panel[data-v-49e52881] {\\n  border-radius: 5px;\\n  margin-bottom: 20px;\\n  background-color: #fff;\\n  border: 1px solid #ddd;\\n  -webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n  box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n}\\n.problem-edit .panel .panel-heading[data-v-49e52881] {\\n  padding: 10px 15px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n  border-color: #ddd;\\n  border-top-left-radius: 5px;\\n  border-top-right-radius: 5px;\\n  border-bottom: 1px solid transparent;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881] {\\n  color: #b0c4de;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-heading .panel-title[data-v-49e52881] {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-size: 18px;\\n  color: inherit;\\n  font-weight: 500;\\n  line-height: 1.1;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881] {\\n  float: right;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-body[data-v-49e52881] {\\n  padding: 15px 35px;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881] {\\n  margin-right: 10%;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881] {\\n  width: 50%;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881] {\\n  position: relative;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881] {\\n  position: absolute;\\n  top: 0;\\n  left: 10px;\\n  display: inline-block;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881] {\\n  margin-left: 100px;\\n  display: inline-block;\\n  width: 70%;\\n  border: 1px solid #ddd;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881] {\\n  position: absolute;\\n  right: 0;\\n  bottom: 5px;\\n  width: 150px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-49e52881\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problem-edit.vue\n// module id = drNd\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/markdown-fold.js\n// module id = dxBS\n// module chunks = 2 3","exports = module.exports = require(\"../../../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".CodeMirror-foldmarker{color:blue;text-shadow:#b9f 1px 1px 2px,#b9f -1px -1px 2px,#b9f 1px -1px 2px,#b9f -1px 1px 2px;font-family:arial;line-height:.3;cursor:pointer}.CodeMirror-foldgutter{width:.7em}.CodeMirror-foldgutter-folded,.CodeMirror-foldgutter-open{cursor:pointer}.CodeMirror-foldgutter-open:after{content:\\\"\\\\25BE\\\"}.CodeMirror-foldgutter-folded:after{content:\\\"\\\\25B8\\\"}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/fold/foldgutter.css\"],\"names\":[],\"mappings\":\"AAAA,uBACE,WAAY,AACZ,oFAAwF,AACxF,kBAAmB,AACnB,eAAgB,AAChB,cAAgB,CACjB,AACD,uBACE,UAAY,CACb,AACD,0DAEE,cAAgB,CACjB,AACD,kCACE,eAAiB,CAClB,AACD,oCACE,eAAiB,CAClB\",\"file\":\"foldgutter.css\",\"sourcesContent\":[\".CodeMirror-foldmarker {\\n  color: blue;\\n  text-shadow: #b9f 1px 1px 2px, #b9f -1px -1px 2px, #b9f 1px -1px 2px, #b9f -1px 1px 2px;\\n  font-family: arial;\\n  line-height: .3;\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter {\\n  width: .7em;\\n}\\n.CodeMirror-foldgutter-open,\\n.CodeMirror-foldgutter-folded {\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter-open:after {\\n  content: \\\"\\\\25BE\\\";\\n}\\n.CodeMirror-foldgutter-folded:after {\\n  content: \\\"\\\\25B8\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/codemirror/addon/fold/foldgutter.css\n// module id = engA\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/brace-fold.js\n// module id = fo6W\n// module chunks = 2 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-49e52881\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./manage-problem-edit.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"aa779c20\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-49e52881\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problem-edit.vue\n// module id = hdeF\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/hint/show-hint.js\n// module id = jQeI\n// module chunks = 2 3","<template>\n  <div class=\"manage-problem\">\n    <transition name=\"el-fade-in-linear\">\n      <div v-show=\"!isShowEdit\">\n        <div class=\"handle-box\">\n          <el-button type=\"primary\" icon=\"edit\" @click.stop=\"showSetupProblem\">创建题目</el-button>\n          <div class=\"search-wrapper\">\n            <search></search>\n          </div>\n        </div>\n        <el-table :data=\"problemDatas\" border ref=\"multipleTable\" style=\"width: 80%\"\n                  @selection-change=\"handleSelectionChange\">\n          <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n          <el-table-column prop=\"id\" label=\"ID\" width=\"150\">\n          </el-table-column>\n          <el-table-column prop=\"title\" label=\"标题\" sortable width=\"350\">\n          </el-table-column>\n          <el-table-column prop=\"tag\" label=\"标签\" sortable width=\"250\" :formatter=\"calcTag\">\n          </el-table-column>\n          <el-table-column prop=\"level\" label=\"难度\" sortable width=\"100\">\n          </el-table-column>\n          <el-table-column prop=\"submitted\" label=\"提交数\" sortable width=\"100\">\n          </el-table-column>\n          <el-table-column prop=\"accepted\" label=\"通过数\" sortable width=\"100\">\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"150\">\n            <template scope=\"scope\">\n              <el-button size=\"small\"\n                         @click.stop=\"handleEdit(scope.$index, scope.row)\">编辑\n              </el-button>\n              <el-button size=\"small\" type=\"danger\"\n                         @click.stop=\"handleDelete(scope.$index, scope.row)\">删除\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <div class=\"pagination\">\n          <el-pagination\n            @current-change=\"handleCurrentChange\"\n            layout=\"prev, pager, next\"\n            :total=\"100\">\n          </el-pagination>\n        </div>\n      </div>\n    </transition>\n    <transition name=\"el-fade-in-linear\">\n      <problem-edit v-show=\"isShowEdit\" :isEdit=\"isEdit\" :editTitle=\"editTitle\" @editFinish=\"hideEdit\"></problem-edit>\n    </transition>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { baseUrl, MSG_OK } from 'common/js/data'\n  import axios from 'axios'\n  import ElFormItem from '../../../node_modules/element-ui/packages/form/src/form-item'\n  import Search from 'components/search/search'\n  import ProblemEdit from 'components/manager/manage-problem-edit'\n  import { mapActions } from 'vuex'\n  import Problem from 'common/js/problem'\n\n  export default{\n    data(){\n      return {\n        problemDatas: [],\n        cur_page: 1,\n        multipleSelection: [],\n        select_cate: '',\n        select_word: '',\n        del_list: [],\n        is_search: false,\n        rules: {\n          id: [\n            {required: true, message: 'id不能为空', trigger: 'blur'},\n            {min: 3, max: 3, message: 'id为3位字母', trigger: 'blur'}\n          ],\n          title: [\n            {required: true, message: '标题不能为空', trigger: 'blur'},\n            {min: 5, message: '标题过短', trigger: 'blur'}\n          ],\n          description: [\n            {required: true, message: '描述不能为空', trigger: 'blur'},\n            {min: 5, message: '描述过短', trigger: 'blur'}\n          ]\n        },\n        editTitle: '创建题目',\n        isShowEdit: false,\n        isEdit: false\n      }\n    },\n    created(){\n      this._getProblemsData(this.cur_page)\n    },\n    methods: {\n      showSetupProblem(){\n        this.editTitle = '创建题目'\n        this.isEdit = false\n        this.isShowEdit = true\n      },\n      handleCurrentChange(val){\n        this.cur_page = val\n        this._getProblemsData(this.cur_page)\n      },\n      _getProblemsData(curPage){\n        let url = `${baseUrl}/problems?page=${curPage}`\n        axios.get(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.problemDatas = response.data.result\n          }\n        }, response => {})\n      },\n      formatter(row, column){\n        return row.address\n      },\n      filterTag(value, row){\n        return row.tag === value\n      },\n      handleEdit(index, row){\n        console.log(row)\n        this.saveOneProblem(new Problem(row))\n        this.editTitle = '编辑题目'\n        this.isEdit = true\n        this.isShowEdit = true\n      },\n      handleDelete(index, row){\n        //this.$message.error('删除第' + (index + 1) + '行')\n        let url = `${baseUrl}/problems/${row.id}`\n        axios.delete(url).then(response => {\n          if (response.data.msg === 'ok') {\n            this._getProblemsData(this.cur_page)\n            this.$message({\n              message: `成功删除题目:${row.title}`,\n              type: 'success'\n            })\n          }\n        }, response => {\n          this.$message.error(`无法删除题目${row.title}`)\n        })\n      },\n      delAll(){\n        const self = this,\n          length = self.multipleSelection.length\n        let str = ''\n        self.del_list = self.del_list.concat(self.multipleSelection)\n        for (let i = 0; i < length; i++) {\n          str += self.multipleSelection[i].name + ' '\n        }\n        self.$message.error('删除了' + str)\n        self.multipleSelection = []\n      },\n      calcTag(row, column, cellValue) {\n        if (cellValue === '') {\n          return 'Nothing'\n        }\n        return cellValue.replace(',', ' & ')\n      },\n      handleSelectionChange(val){\n        this.multipleSelection = val\n      },\n      hideEdit(){\n        this.isShowEdit = false\n        this._getProblemsData(this.cur_page)\n      },\n      ...mapActions([\n        'saveOneProblem'\n      ])\n    },\n    computed: {\n      data(){\n        const self = this\n        return self.contestDatas.filter(function (d) {\n          let is_del = false\n          for (let i = 0; i < self.del_list.length; i++) {\n            if (d.name === self.del_list[i].name) {\n              is_del = true\n              break\n            }\n          }\n          if (!is_del) {\n            if (d.address.indexOf(self.select_cate) > -1 &&\n              (d.name.indexOf(self.select_word) > -1 ||\n              d.address.indexOf(self.select_word) > -1)\n            ) {\n              return d\n            }\n          }\n        })\n      }\n    },\n    components: {\n      ElFormItem,\n      Search,\n      ProblemEdit\n    }\n  }\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .manage-problem\n    .el-dialog\n      .block\n        .el-date-editor\n          width 100%\n    .handle-box\n      margin-bottom 15px\n      width 80%\n      .search-wrapper\n        float right\n\n  .pagination\n    margin: 20px 20% 0 0;\n    text-align: right;\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/manager/manage-problems.vue?632454d5","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"manage-problem\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isShowEdit),\n      expression: \"!isShowEdit\"\n    }]\n  }, [_c('div', {\n    staticClass: \"handle-box\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\",\n      \"icon\": \"edit\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.showSetupProblem($event)\n      }\n    }\n  }, [_vm._v(\"创建题目\")]), _vm._v(\" \"), _c('div', {\n    staticClass: \"search-wrapper\"\n  }, [_c('search')], 1)], 1), _vm._v(\" \"), _c('el-table', {\n    ref: \"multipleTable\",\n    staticStyle: {\n      \"width\": \"80%\"\n    },\n    attrs: {\n      \"data\": _vm.problemDatas,\n      \"border\": \"\"\n    },\n    on: {\n      \"selection-change\": _vm.handleSelectionChange\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"type\": \"selection\",\n      \"width\": \"55\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"id\",\n      \"label\": \"ID\",\n      \"width\": \"150\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"title\",\n      \"label\": \"标题\",\n      \"sortable\": \"\",\n      \"width\": \"350\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"tag\",\n      \"label\": \"标签\",\n      \"sortable\": \"\",\n      \"width\": \"250\",\n      \"formatter\": _vm.calcTag\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"level\",\n      \"label\": \"难度\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"submitted\",\n      \"label\": \"提交数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"accepted\",\n      \"label\": \"通过数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"label\": \"操作\",\n      \"width\": \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleEdit(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"编辑\\n            \")]), _vm._v(\" \"), _c('el-button', {\n          attrs: {\n            \"size\": \"small\",\n            \"type\": \"danger\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleDelete(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"删除\\n            \")])]\n      }\n    }])\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"pagination\"\n  }, [_c('el-pagination', {\n    attrs: {\n      \"layout\": \"prev, pager, next\",\n      \"total\": 100\n    },\n    on: {\n      \"current-change\": _vm.handleCurrentChange\n    }\n  })], 1)], 1)]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('problem-edit', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isShowEdit),\n      expression: \"isShowEdit\"\n    }],\n    attrs: {\n      \"isEdit\": _vm.isEdit,\n      \"editTitle\": _vm.editTitle\n    },\n    on: {\n      \"editFinish\": _vm.hideEdit\n    }\n  })], 1)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-1ffcf786\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/manager/manage-problems.vue\n// module id = oxMS\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786]{width:100%}.manage-problem .handle-box[data-v-1ffcf786]{margin-bottom:15px;width:80%}.manage-problem .handle-box .search-wrapper[data-v-1ffcf786]{float:right}.pagination[data-v-1ffcf786]{margin:20px 20% 0 0;text-align:right}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problems.vue\"],\"names\":[],\"mappings\":\"AACA,mEACE,UAAY,CACb,AACD,6CACE,mBAAoB,AACpB,SAAW,CACZ,AACD,6DACE,WAAa,CACd,AACD,6BACE,oBAAqB,AACrB,gBAAkB,CACnB\",\"file\":\"manage-problems.vue\",\"sourcesContent\":[\"\\n.manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786] {\\n  width: 100%;\\n}\\n.manage-problem .handle-box[data-v-1ffcf786] {\\n  margin-bottom: 15px;\\n  width: 80%;\\n}\\n.manage-problem .handle-box .search-wrapper[data-v-1ffcf786] {\\n  float: right;\\n}\\n.pagination[data-v-1ffcf786] {\\n  margin: 20px 20% 0 0;\\n  text-align: right;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-1ffcf786\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problems.vue\n// module id = qm6i\n// module chunks = 3","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = sOR5\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/comment-fold.js\n// module id = soCA\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  // Kill 'ring'\n\n  var killRing = [];\n  function addToRing(str) {\n    killRing.push(str);\n    if (killRing.length > 50) killRing.shift();\n  }\n  function growRingTop(str) {\n    if (!killRing.length) return addToRing(str);\n    killRing[killRing.length - 1] += str;\n  }\n  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || \"\"; }\n  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }\n\n  var lastKill = null;\n\n  function kill(cm, from, to, mayGrow, text) {\n    if (text == null) text = cm.getRange(from, to);\n\n    if (mayGrow && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))\n      growRingTop(text);\n    else\n      addToRing(text);\n    cm.replaceRange(\"\", from, to, \"+delete\");\n\n    if (mayGrow) lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};\n    else lastKill = null;\n  }\n\n  // Boundaries of various units\n\n  function byChar(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"char\", true);\n  }\n\n  function byWord(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"word\", true);\n  }\n\n  function byLine(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"line\", cm.doc.sel.goalColumn);\n  }\n\n  function byPage(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"page\", cm.doc.sel.goalColumn);\n  }\n\n  function byParagraph(cm, pos, dir) {\n    var no = pos.line, line = cm.getLine(no);\n    var sawText = /\\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));\n    var fst = cm.firstLine(), lst = cm.lastLine();\n    for (;;) {\n      no += dir;\n      if (no < fst || no > lst)\n        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));\n      line = cm.getLine(no);\n      var hasText = /\\S/.test(line);\n      if (hasText) sawText = true;\n      else if (sawText) return Pos(no, 0);\n    }\n  }\n\n  function bySentence(cm, pos, dir) {\n    var line = pos.line, ch = pos.ch;\n    var text = cm.getLine(pos.line), sawWord = false;\n    for (;;) {\n      var next = text.charAt(ch + (dir < 0 ? -1 : 0));\n      if (!next) { // End/beginning of line reached\n        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);\n        text = cm.getLine(line + dir);\n        if (!/\\S/.test(text)) return Pos(line, ch);\n        line += dir;\n        ch = dir < 0 ? text.length : 0;\n        continue;\n      }\n      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));\n      if (!sawWord) sawWord = /\\w/.test(next);\n      ch += dir;\n    }\n  }\n\n  function byExpr(cm, pos, dir) {\n    var wrap;\n    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))\n        && wrap.match && (wrap.forward ? 1 : -1) == dir)\n      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;\n\n    for (var first = true;; first = false) {\n      var token = cm.getTokenAt(pos);\n      var after = Pos(pos.line, dir < 0 ? token.start : token.end);\n      if (first && dir > 0 && token.end == pos.ch || !/\\w/.test(token.string)) {\n        var newPos = cm.findPosH(after, dir, \"char\");\n        if (posEq(after, newPos)) return pos;\n        else pos = newPos;\n      } else {\n        return after;\n      }\n    }\n  }\n\n  // Prefixes (only crudely supported)\n\n  function getPrefix(cm, precise) {\n    var digits = cm.state.emacsPrefix;\n    if (!digits) return precise ? null : 1;\n    clearPrefix(cm);\n    return digits == \"-\" ? -1 : Number(digits);\n  }\n\n  function repeated(cmd) {\n    var f = typeof cmd == \"string\" ? function(cm) { cm.execCommand(cmd); } : cmd;\n    return function(cm) {\n      var prefix = getPrefix(cm);\n      f(cm);\n      for (var i = 1; i < prefix; ++i) f(cm);\n    };\n  }\n\n  function findEnd(cm, pos, by, dir) {\n    var prefix = getPrefix(cm);\n    if (prefix < 0) { dir = -dir; prefix = -prefix; }\n    for (var i = 0; i < prefix; ++i) {\n      var newPos = by(cm, pos, dir);\n      if (posEq(newPos, pos)) break;\n      pos = newPos;\n    }\n    return pos;\n  }\n\n  function move(by, dir) {\n    var f = function(cm) {\n      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));\n    };\n    f.motion = true;\n    return f;\n  }\n\n  function killTo(cm, by, dir) {\n    var selections = cm.listSelections(), cursor;\n    var i = selections.length;\n    while (i--) {\n      cursor = selections[i].head;\n      kill(cm, cursor, findEnd(cm, cursor, by, dir), true);\n    }\n  }\n\n  function killRegion(cm) {\n    if (cm.somethingSelected()) {\n      var selections = cm.listSelections(), selection;\n      var i = selections.length;\n      while (i--) {\n        selection = selections[i];\n        kill(cm, selection.anchor, selection.head);\n      }\n      return true;\n    }\n  }\n\n  function addPrefix(cm, digit) {\n    if (cm.state.emacsPrefix) {\n      if (digit != \"-\") cm.state.emacsPrefix += digit;\n      return;\n    }\n    // Not active yet\n    cm.state.emacsPrefix = digit;\n    cm.on(\"keyHandled\", maybeClearPrefix);\n    cm.on(\"inputRead\", maybeDuplicateInput);\n  }\n\n  var prefixPreservingKeys = {\"Alt-G\": true, \"Ctrl-X\": true, \"Ctrl-Q\": true, \"Ctrl-U\": true};\n\n  function maybeClearPrefix(cm, arg) {\n    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))\n      clearPrefix(cm);\n  }\n\n  function clearPrefix(cm) {\n    cm.state.emacsPrefix = null;\n    cm.off(\"keyHandled\", maybeClearPrefix);\n    cm.off(\"inputRead\", maybeDuplicateInput);\n  }\n\n  function maybeDuplicateInput(cm, event) {\n    var dup = getPrefix(cm);\n    if (dup > 1 && event.origin == \"+input\") {\n      var one = event.text.join(\"\\n\"), txt = \"\";\n      for (var i = 1; i < dup; ++i) txt += one;\n      cm.replaceSelection(txt);\n    }\n  }\n\n  function addPrefixMap(cm) {\n    cm.state.emacsPrefixMap = true;\n    cm.addKeyMap(prefixMap);\n    cm.on(\"keyHandled\", maybeRemovePrefixMap);\n    cm.on(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  function maybeRemovePrefixMap(cm, arg) {\n    if (typeof arg == \"string\" && (/^\\d$/.test(arg) || arg == \"Ctrl-U\")) return;\n    cm.removeKeyMap(prefixMap);\n    cm.state.emacsPrefixMap = false;\n    cm.off(\"keyHandled\", maybeRemovePrefixMap);\n    cm.off(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  // Utilities\n\n  function setMark(cm) {\n    cm.setCursor(cm.getCursor());\n    cm.setExtending(!cm.getExtending());\n    cm.on(\"change\", function() { cm.setExtending(false); });\n  }\n\n  function clearMark(cm) {\n    cm.setExtending(false);\n    cm.setCursor(cm.getCursor());\n  }\n\n  function getInput(cm, msg, f) {\n    if (cm.openDialog)\n      cm.openDialog(msg + \": <input type=\\\"text\\\" style=\\\"width: 10em\\\"/>\", f, {bottom: true});\n    else\n      f(prompt(msg, \"\"));\n  }\n\n  function operateOnWord(cm, op) {\n    var start = cm.getCursor(), end = cm.findPosH(start, 1, \"word\");\n    cm.replaceRange(op(cm.getRange(start, end)), start, end);\n    cm.setCursor(end);\n  }\n\n  function toEnclosingExpr(cm) {\n    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;\n    var stack = [];\n    while (line >= cm.firstLine()) {\n      var text = cm.getLine(line);\n      for (var i = ch == null ? text.length : ch; i > 0;) {\n        var ch = text.charAt(--i);\n        if (ch == \")\")\n          stack.push(\"(\");\n        else if (ch == \"]\")\n          stack.push(\"[\");\n        else if (ch == \"}\")\n          stack.push(\"{\");\n        else if (/[\\(\\{\\[]/.test(ch) && (!stack.length || stack.pop() != ch))\n          return cm.extendSelection(Pos(line, i));\n      }\n      --line; ch = null;\n    }\n  }\n\n  function quit(cm) {\n    cm.execCommand(\"clearSearch\");\n    clearMark(cm);\n  }\n\n  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};\n\n  // Actual keymap\n\n  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({\n    \"Ctrl-W\": function(cm) {kill(cm, cm.getCursor(\"start\"), cm.getCursor(\"end\"));},\n    \"Ctrl-K\": repeated(function(cm) {\n      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));\n      var text = cm.getRange(start, end);\n      if (!/\\S/.test(text)) {\n        text += \"\\n\";\n        end = Pos(start.line + 1, 0);\n      }\n      kill(cm, start, end, true, text);\n    }),\n    \"Alt-W\": function(cm) {\n      addToRing(cm.getSelection());\n      clearMark(cm);\n    },\n    \"Ctrl-Y\": function(cm) {\n      var start = cm.getCursor();\n      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, \"paste\");\n      cm.setSelection(start, cm.getCursor());\n    },\n    \"Alt-Y\": function(cm) {cm.replaceSelection(popFromRing(), \"around\", \"paste\");},\n\n    \"Ctrl-Space\": setMark, \"Ctrl-Shift-2\": setMark,\n\n    \"Ctrl-F\": move(byChar, 1), \"Ctrl-B\": move(byChar, -1),\n    \"Right\": move(byChar, 1), \"Left\": move(byChar, -1),\n    \"Ctrl-D\": function(cm) { killTo(cm, byChar, 1); },\n    \"Delete\": function(cm) { killRegion(cm) || killTo(cm, byChar, 1); },\n    \"Ctrl-H\": function(cm) { killTo(cm, byChar, -1); },\n    \"Backspace\": function(cm) { killRegion(cm) || killTo(cm, byChar, -1); },\n\n    \"Alt-F\": move(byWord, 1), \"Alt-B\": move(byWord, -1),\n    \"Alt-D\": function(cm) { killTo(cm, byWord, 1); },\n    \"Alt-Backspace\": function(cm) { killTo(cm, byWord, -1); },\n\n    \"Ctrl-N\": move(byLine, 1), \"Ctrl-P\": move(byLine, -1),\n    \"Down\": move(byLine, 1), \"Up\": move(byLine, -1),\n    \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStart\",\n\n    \"Alt-V\": move(byPage, -1), \"Ctrl-V\": move(byPage, 1),\n    \"PageUp\": move(byPage, -1), \"PageDown\": move(byPage, 1),\n\n    \"Ctrl-Up\": move(byParagraph, -1), \"Ctrl-Down\": move(byParagraph, 1),\n\n    \"Alt-A\": move(bySentence, -1), \"Alt-E\": move(bySentence, 1),\n    \"Alt-K\": function(cm) { killTo(cm, bySentence, 1); },\n\n    \"Ctrl-Alt-K\": function(cm) { killTo(cm, byExpr, 1); },\n    \"Ctrl-Alt-Backspace\": function(cm) { killTo(cm, byExpr, -1); },\n    \"Ctrl-Alt-F\": move(byExpr, 1), \"Ctrl-Alt-B\": move(byExpr, -1),\n\n    \"Shift-Ctrl-Alt-2\": function(cm) {\n      var cursor = cm.getCursor();\n      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);\n    },\n    \"Ctrl-Alt-T\": function(cm) {\n      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);\n      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);\n      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +\n                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);\n    },\n    \"Ctrl-Alt-U\": repeated(toEnclosingExpr),\n\n    \"Alt-Space\": function(cm) {\n      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);\n      while (from && /\\s/.test(text.charAt(from - 1))) --from;\n      while (to < text.length && /\\s/.test(text.charAt(to))) ++to;\n      cm.replaceRange(\" \", Pos(pos.line, from), Pos(pos.line, to));\n    },\n    \"Ctrl-O\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"start\"); }),\n    \"Ctrl-T\": repeated(function(cm) {\n      cm.execCommand(\"transposeChars\");\n    }),\n\n    \"Alt-C\": repeated(function(cm) {\n      operateOnWord(cm, function(w) {\n        var letter = w.search(/\\w/);\n        if (letter == -1) return w;\n        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();\n      });\n    }),\n    \"Alt-U\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toUpperCase(); });\n    }),\n    \"Alt-L\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toLowerCase(); });\n    }),\n\n    \"Alt-;\": \"toggleComment\",\n\n    \"Ctrl-/\": repeated(\"undo\"), \"Shift-Ctrl--\": repeated(\"undo\"),\n    \"Ctrl-Z\": repeated(\"undo\"), \"Cmd-Z\": repeated(\"undo\"),\n    \"Shift-Alt-,\": \"goDocStart\", \"Shift-Alt-.\": \"goDocEnd\",\n    \"Ctrl-S\": \"findPersistentNext\", \"Ctrl-R\": \"findPersistentPrev\", \"Ctrl-G\": quit, \"Shift-Alt-5\": \"replace\",\n    \"Alt-/\": \"autocomplete\",\n    \"Enter\": \"newlineAndIndent\",\n    \"Ctrl-J\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"end\"); }),\n    \"Tab\": \"indentAuto\",\n\n    \"Alt-G G\": function(cm) {\n      var prefix = getPrefix(cm, true);\n      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);\n\n      getInput(cm, \"Goto line\", function(str) {\n        var num;\n        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)\n          cm.setCursor(num - 1);\n      });\n    },\n\n    \"Ctrl-X Tab\": function(cm) {\n      cm.indentSelection(getPrefix(cm, true) || cm.getOption(\"indentUnit\"));\n    },\n    \"Ctrl-X Ctrl-X\": function(cm) {\n      cm.setSelection(cm.getCursor(\"head\"), cm.getCursor(\"anchor\"));\n    },\n    \"Ctrl-X Ctrl-S\": \"save\",\n    \"Ctrl-X Ctrl-W\": \"save\",\n    \"Ctrl-X S\": \"saveAll\",\n    \"Ctrl-X F\": \"open\",\n    \"Ctrl-X U\": repeated(\"undo\"),\n    \"Ctrl-X K\": \"close\",\n    \"Ctrl-X Delete\": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), true); },\n    \"Ctrl-X H\": \"selectAll\",\n\n    \"Ctrl-Q Tab\": repeated(\"insertTab\"),\n    \"Ctrl-U\": addPrefixMap\n  });\n\n  var prefixMap = {\"Ctrl-G\": clearPrefix};\n  function regPrefix(d) {\n    prefixMap[d] = function(cm) { addPrefix(cm, d); };\n    keyMap[\"Ctrl-\" + d] = function(cm) { addPrefix(cm, d); };\n    prefixPreservingKeys[\"Ctrl-\" + d] = true;\n  }\n  for (var i = 0; i < 10; ++i) regPrefix(String(i));\n  regPrefix(\"-\");\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/emacs.js\n// module id = tjx/\n// module chunks = 2 3","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = ujcs\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||\n        matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/matchbrackets.js\n// module id = vq+x\n// module chunks = 2 3","/*\n * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n\n(function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.3.2\";\n    // if node.js, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = require('buffer').Buffer;\n        } catch (err) {}\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (typeof define === 'function' && define.amd) {\t\t\n        // AMD. Register as an anonymous module.\t\n        define([], function(){ return global.Base64 });\n    }\n    // that's it!\n})(   typeof self   !== 'undefined' ? self\n    : typeof window !== 'undefined' ? window\n    : typeof global !== 'undefined' ? global\n    : this\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-base64/base64.js\n// module id = xrTZ\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2d96e4b2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./search.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"56e4b5b6\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-2d96e4b2\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/search/search.vue\n// module id = yGpH\n// module chunks = 0 3"],"sourceRoot":""}