{"version":3,"sources":["webpack:///static/js/3.4e99bf76ac1cfcf85d6c.js","webpack:///./~/codemirror/addon/edit/closetag.js?5e13","webpack:///./~/codemirror/addon/search/matchesonscrollbar.js?ba1e","webpack:///./src/components/search/search.vue?195a*","webpack:///./src/base/confirm/confirm.vue?ec96","webpack:///src/base/confirm/confirm.vue","webpack:///./src/common/js/problem.js?e44c*","webpack:///./~/codemirror/keymap/sublime.js?595d","webpack:///src/components/search/search.vue?a000","webpack:///./src/components/manager/manage-problems.vue","webpack:///./~/codemirror/addon/search/search.js?82ab","webpack:///./~/base64-js/index.js","webpack:///src/components/manager/manage-problem-edit.vue","webpack:///./~/buffer/index.js","webpack:///./src/components/manager/manage-problem-edit.vue","webpack:///./~/codemirror/keymap/vim.js?4baf","webpack:///./src/base/confirm/confirm.vue?f15f","webpack:///./src/base/confirm/confirm.vue?f1f9","webpack:///./~/codemirror/addon/fold/foldgutter.js?8645","webpack:///./~/codemirror/addon/dialog/dialog.css?ae99*","webpack:///./~/codemirror/addon/hint/javascript-hint.js?7f9d","webpack:///./~/codemirror/addon/search/match-highlighter.js?bf60","webpack:///./~/codemirror/addon/scroll/annotatescrollbar.js?2d94","webpack:///./~/codemirror/addon/dialog/dialog.css?7d4f","webpack:///./~/codemirror/addon/dialog/dialog.js?3114","webpack:///./src/components/search/search.vue?1980*","webpack:///./src/components/manager/manage-problems.vue?6356","webpack:///./~/codemirror/addon/fold/foldcode.js?1a0b","webpack:///./~/codemirror/addon/fold/xml-fold.js?8688","webpack:///./~/codemirror/addon/fold/indent-fold.js?3b0d","webpack:///./~/codemirror/addon/selection/mark-selection.js?0c6f","webpack:///./src/base/confirm/confirm.vue?73d0","webpack:///./src/components/search/search.vue?f391","webpack:///./~/codemirror/addon/fold/foldgutter.css?9068*","webpack:///./~/codemirror/addon/comment/comment.js?8634","webpack:///./~/codemirror/addon/selection/active-line.js?3dbe","webpack:///./~/codemirror/addon/edit/closebrackets.js?d13b","webpack:///./~/codemirror/addon/search/searchcursor.js?b9a9","webpack:///./src/components/manager/manage-problem-edit.vue?d772","webpack:///./src/components/manager/manage-problem-edit.vue?5540","webpack:///./~/codemirror/addon/fold/markdown-fold.js?4d58","webpack:///./~/codemirror/addon/fold/foldgutter.css?cc73","webpack:///./~/codemirror/addon/fold/brace-fold.js?b412","webpack:///./src/components/manager/manage-problem-edit.vue?dbf8","webpack:///./~/codemirror/addon/hint/show-hint.js?12d2","webpack:///src/components/manager/manage-problems.vue","webpack:///./~/babel-runtime/core-js/json/stringify.js?4574*","webpack:///./src/components/manager/manage-problems.vue?9bc3","webpack:///./~/core-js/library/fn/json/stringify.js?6708*","webpack:///./src/components/manager/manage-problems.vue?d6b0","webpack:///./~/isarray/index.js","webpack:///./~/codemirror/addon/fold/comment-fold.js?8312","webpack:///./~/codemirror/keymap/emacs.js?dd5c","webpack:///./~/ieee754/index.js","webpack:///./~/codemirror/addon/edit/matchbrackets.js?0c12","webpack:///./~/js-base64/base64.js","webpack:///./src/components/search/search.vue?afb0*"],"names":["webpackJsonp","+/ra","module","exports","__webpack_require__","mod","CodeMirror","autoCloseGT","cm","getOption","Pass","ranges","listSelections","replacements","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","mode","name","tagName","opt","html","configuration","dontCloseTags","htmlDontClose","indentTags","htmlIndent","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","indexOf","closingTagExists","indent","text","newPos","Pos","line","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","start","replacement","context","getLine","replaceSelections","autoCloseSlash","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","cx","onCx","prev","to","next","defineOption","val","old","Init","removeKeyMap","map","whenClosing","whenOpening","addKeyMap","commands","closeTag","/A6h","SearchAnnotation","query","caseFold","options","this","annotateOptions","listenForChanges","prop","className","annotation","annotateScrollbar","gap","from","firstLine","matches","update","findMatches","self","on","changeHandler","_cm","change","onChange","offsetLine","changeStart","sizeChange","max","defineExtension","prototype","match","splice","cursor","getSearchCursor","maxMatches","findNext","startLine","endLine","changeEnd","newFrom","newTo","clearTimeout","setTimeout","updateAfterChange","clear","off","0tR3","__webpack_exports__","render","_vm","_h","$createElement","_c","_self","command","handleCommandDropdown","staticClass","attrs","placeholder","icon","spellcheck","on-icon-click","_onSearch","focus","model","value","callback","$$v","mysearch","trim","expression","_v","slot","directives","rawName","_l","item","index","dropdownLoading","key","id","_s","title","width","height","src","staticRenderFns","esExports","2EAN","push","version","sources","names","mappings","file","sourcesContent","sourceRoot","3CS+","props","String","default","confirmBtnText","cancelBtnText","data","visible","methods","show","hide","confirm","$emit","cancel","5Ey+","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default","n","Problem","_ref","level","description","accepted","submitted","like_nums","hate_nums","7Xsf","findPosSubword","doc","dir","clipPos","cat","isWordChar","toUpperCase","moveSubword","extendSelectionsBy","range","display","shift","extend","insertLine","above","isReadOnly","operation","len","newSelection","last","at","execCommand","wordAt","word","addCursorToSelection","newRanges","newAnchor","findPosV","newHead","newRange","isSelectedRange","selectBetweenBrackets","opening","scanForBracket","closing","mirror","sortLines","caseSensitive","selected","toSort","lines","getRange","sort","a","b","au","bu","modifyWordOrSelection","indices","cmpPos","getTarget","getCursor","findAndGoTo","forward","target","cur","findPrevious","setSelection","keyMap","sublime","fallthrough","cmds","mac","macDefault","ctrl","goSubwordCombo","scrollLineCombo","getScrollInfo","somethingSelected","visibleBottomLine","lineAtHeight","top","clientHeight","scrollTo","defaultTextHeight","visibleTopLine","lineRanges","scroll","extended","fullWord","sublimeFindFullWord","RegExp","found","addSelection","addCursorToLineCombo","swapLineCombo","linesToMove","newSels","scrollIntoView","toggleComment","joined","offset","obj","actual","exec","rangeCount","marks","sublimeBookmarks","current","find","unshift","pop","findMarks","j","sublimeBookmark","k","markText","clearWhenEmpty","cK","cursors","indentUnit","toStartOfLine","column","countColumn","deletePos","findPosH","prevIndent","findColumn","str","sublimeMark","setBookmark","tmp","sublimeKilled","setCursor","replaceSelection","cursorCoords","bottom","selectLinesCombo","primaryIndex","normalizeKeyMap","A1IV","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default","__WEBPACK_IMPORTED_MODULE_1_common_js_problem__","__WEBPACK_IMPORTED_MODULE_2_axios__","__WEBPACK_IMPORTED_MODULE_2_axios___default","__WEBPACK_IMPORTED_MODULE_3_common_js_data__","__WEBPACK_IMPORTED_MODULE_4_vuex__","searchResult","_this","console","log","url","post","content","then","response","result","setProblem","$router","BUZr","injectStyle","ssrContext","Object","defineProperty","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problems_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ffcf786_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problems_vue__","normalizeComponent","__vue_styles__","Component","CK2l","searchOverlay","caseInsensitive","replace","global","source","ignoreCase","token","stream","lastIndex","skipToEnd","SearchState","posFrom","posTo","lastQuery","overlay","getSearchState","search","queryCaseInsensitive","multiline","persistentDialog","deflt","onEnter","onKeyDown","openDialog","selectValueOnOpen","closeOnEnter","onClose","clearSearch","dialog","shortText","f","prompt","confirmDialog","fs","openConfirm","parseString","_","parseQuery","isRE","startSearch","queryText","removeOverlay","addOverlay","showMatchesOnScrollbar","annotate","doSearch","rev","persistent","immediate","q","getSelection","hiding","searchNext","event","e_stop","style","opacity","shiftKey","document","querySelector","wrapper","getBoundingClientRect","queryDialog","keyName","extra","cmd","replaceAll","all","dialogText","replaceQueryDialog","replacementQueryDialog","advance","doReplaceConfirm","doReplace","findPersistent","findPersistentNext","findPersistentPrev","findPrev","EKta","placeHoldersCount","b64","Error","byteLength","toByteArray","l","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","output","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","code","ELu2","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default","__WEBPACK_IMPORTED_MODULE_2_codemirror_mode_javascript_javascript__","__WEBPACK_IMPORTED_MODULE_3_codemirror_mode_go_go__","__WEBPACK_IMPORTED_MODULE_4_codemirror_mode_python_python__","__WEBPACK_IMPORTED_MODULE_5_codemirror_mode_ruby_ruby__","__WEBPACK_IMPORTED_MODULE_6_codemirror_mode_clike_clike__","__WEBPACK_IMPORTED_MODULE_7_codemirror_theme_ambiance_css__","__WEBPACK_IMPORTED_MODULE_8_codemirror_theme_base16_dark_css__","__WEBPACK_IMPORTED_MODULE_9_codemirror_theme_cobalt_css__","__WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_light_css__","__WEBPACK_IMPORTED_MODULE_11_codemirror_theme_paraiso_dark_css__","__WEBPACK_IMPORTED_MODULE_12_codemirror_theme_rubyblue_css__","__WEBPACK_IMPORTED_MODULE_13_codemirror_theme_solarized_css__","__WEBPACK_IMPORTED_MODULE_14_codemirror_theme_mbo_css__","__WEBPACK_IMPORTED_MODULE_15_vuex__","__WEBPACK_IMPORTED_MODULE_16_common_js_data__","__WEBPACK_IMPORTED_MODULE_17_axios__","__WEBPACK_IMPORTED_MODULE_17_axios___default","isEdit","Boolean","form","program","input","checkLanguageList","toolbars","bold","italic","header","underline","strikethrough","mark","quote","ol","ul","link","table","undo","redo","trash","alignleft","aligncenter","alignright","preview","editorOptions1","tabSize","theme","lineNumbers","foldGutter","gutters","styleSelectedText","highlightSelectionMatches","showToken","editorOptions2","editorThemes","selectTheme","Languages","selectLanguage","editorModes","templetC","defaultCode","templetCpp","templetCsharp","templetJava","templetPython","templetJs","templetRuby","templetGolang","quit","_clearAllData","clickBtn","Base64","_addTemplet","array","_pushALLTemplets","resultTemplets","reviseProblem","setupProblem","_this2","encode","msg","$notify","message","error","_this3","problem","put","setTemplets","handleCommandLangage","_this4","templets","dropdownChange","isShow","res","showPromblemInfo","_this5","url1","get","url2","JSON","parse","changeTemplets","_this6","tempC","tempCpp","tempCsharp","tempJava","tempPython","tempJs","tempRuby","tempGo","calcBtnText","handleCommandTheme","computed","EuP9","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","isEncoding","write","fromArrayLike","byteOffset","isBuffer","copy","buffer","isnan","isArray","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","bidirectionalIndexOf","isNaN","arrayIndexOf","call","lastIndexOf","read","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","INVALID_BASE64_RE","units","Infinity","leadSurrogate","byteArray","c","hi","lo","dst","INSPECT_MAX_BYTES","foo","subarray","poolSize","_augment","Symbol","species","configurable","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","swap16","swap32","swap64","arguments","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","HbqP","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problem_edit_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e52881_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problem_edit_vue__","Hyg2","defaultKeymap","keys","toKeys","action","motion","motionArgs","linewise","toJumplist","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultExCommandMap","shortName","possiblyAsync","excludeFromCommandHistory","Vim","enterVimMode","setOption","signal","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","vim","detachVimMap","rmClass","getWrapperElement","attach","attachVimMap","addClass","cmKey","vimKey","cmKeyToVimKey","findKey","pieces","split","lastPiece","hasCharacter","piece","modifiers","specialKeys","isUpperCase","onPasteFn","insertMode","offsetCursor","actions","enterInsertMode","makeKeyRange","isLine","isLowerCase","isMatchableSymbol","isNumber","numberRegex","isWhiteSpaceString","inArray","defaultValue","aliases","cfg","option","scope","local","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","createInsertModeChanges","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","resetVimGlobalState","vimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","createCircularJumpList","macroModeState","lastCharacterSearch","increment","selectedCharacter","registerController","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","prefixRepeat","motionRepeat","keyBuffer","registerName","clearInputState","reason","Register","insertModeChanges","searchQueries","defineRegister","register","registers","validRegisters","unnamedRegister","historyBuffer","iterator","initialPrefix","defineMotion","fn","motions","fillArray","times","defineOperator","operators","defineAction","clipCursorToContent","includeLineBreak","maxCh","lineLength","copyArgs","args","hasOwnProperty","offsetCh","getOffset","commandMatches","partial","full","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","lastChar","repeatFn","repeat","copyCursor","cursorEqual","cur1","cur2","cursorIsBefore","cursorMin","cursorMax","cursorIsBetween","cur3","cur1before2","cur2before3","lineNum","s","escapeRegex","extendLineToColumn","endCh","spaces","selectBlock","selectionEnd","selections","isClipped","curHead","primIndex","getIndex","wasClipped","base","baseCh","headCh","newDir","selectForInsert","lineHead","atAnchor","atHead","getSelectedAreaRange","selectionStart","block","anchorMark","headMark","updateLastSelection","posFromIndex","indexFromPos","expandSelection","updateCmSelection","cmSel","makeCmSelection","primary","updateFakeCursor","exclusive","headOffset","anchorOffset","left","right","getHead","exitVisualMode","moveHead","clipToLine","curStart","curEnd","selection","expandSelectionToLine","findFirstNonWhiteSpaceCharacter","firstNonWS","expandWordUnderCursor","_forward","noSymbol","idx","wordCharTest","bigWordCharTest","wordStart","recordJumpPosition","oldCur","newCur","add","recordLastCharacterSearch","findSymbol","symb","lineCount","curCh","lineText","nextCh","lastCh","reverseSymb",")","}","(","{","depth","curMoveThrough","symbolToMode","init","findSymbolModes","isComplete","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","moveToWord","words","eodCh","shortCircuit","firstWord","lastWord","moveToCharacter","character","charIdxInLine","moveToColumn","updateMark","markName","validMarks","includeChar","findParagraph","isEmpty","isBoundary","any","startState","selectCompanionObject","bracketRegexp","[","]","openSym","curChar","bracketRegex","findBeginningAndEnd","chars","firstIndex","searchState_","template","onKeyUp","splitBySlash","argString","slashes","findUnescapedSlashes","tokens","substring","escapeNextChar","translateRegex","specials","unescape","specialComesNext","translateRegexReplace","charUnescapes","unescapeRegexReplace","StringStream","eol","peek","matched","matcher","unescapes","smartCase","getRegister","setText","regexPart","forceIgnoreCase","showConfirm","openNotification","duration","alert","makePrompt","prefix","desc","raw","showPrompt","regexEqual","r1","r2","updateSearchQuery","rawQuery","highlightSearchMatches","getQuery","setQuery","matchSol","sol","backUp","searchState","getOverlay","getScrollbarAnnotate","setScrollbarAnnotate","setOverlay","clearSearchHighlight","isInRange","getUserVisibleLines","scrollInfo","coordsChar","bottomY","getMarkPos","history","done","lineStart","lineEnd","searchCursor","replaceWith","newText","lastPos","close","exMode","onPromptKeyDown","_value","savedCallback","exitInsertMode","insertModeChangeRegister","lastChange","selLength","inVisualBlock","changes","InsertModeKey","onKeyEventTargetKeyDown","repeatLastEdit","repeatOverride","toggleOverwrite","logInsertModeChange","_mapCommand","mapCommand","executeMacroRegister","exCommandDispatcher","processCommand","imc","handleKey","repeatInsertModeChanges","logKey","pushText","pushInsertModeChanges","logSearchQuery","pushSearchQuery","changeObj","expectCursorActivityForChange","origin","maybeReset","overwrite","curOp","isVimOp","handleExternalSelection","onKeyFound","lookupKey","repeatForInsert","repeatCommand","isAction","commandDispatcher","processAction","evalInput","repeatInsert","changeObject","cachedInputState","keyHandler","binding","lastSel","Shift","Ctrl","Alt","Cmd","Mod","Enter","Backspace","Delete","Insert","upperCaseAlphabet","lowerCaseAlphabet","numbers","useNextSlot","pointer","trashMark","curMark","markPos","tail","move","inc","cachedCursor","exitMacroRecordMode","enterMacroRecordMode","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","lhs","rhs","ctx","unmap","defineEx","func","exCommands","commandMap_","handleMacroRecording","handleEsc","doKeyToKey","keysAreChars","matchCommand","thisMatch","window","here","keysMatcher","pushRepeatDigit","handleEx","getRepeat","isValidRegister","shiftNumericRegisters_","nextMatch","up","element","pushInput","reset","bestMatch","processMotion","processOperator","processOperatorMotion","processSearch","processEx","repeatIsExplicit","recordLastEdit","handleQuery","onPromptClose","originalScrollPos","onPromptKeyUp","parsedQuery","originalQuery","setReversed","promptPrefix","searchPromptDesc","isKeyword","exArgs","origHead","origAnchor","oldHead","oldAnchor","noRepeat","motionResult","lineOffset","abs","chOffset","operatorMoveTo","actionCommand","moveToTopLine","_head","moveToMiddleLine","moveToBottomLine","expandToLine","isReversed","goToMark","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","moveByCharacters","moveByLines","moveByDisplayLines","moveByScroll","moveToEol","first","moveToStartOfLine","charCoords","hitSide","lastCharCoords","goalCoords","resCoords","moveByPage","moveByParagraph","scrollbox","orig","dest","moveByWords","moveTillCharacter","moveToSymbol","retval","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","symbol","getTokenTypeAt","findMatchingBracket","moveToLineOrEdgeOfDocument","textObjectManipulation","mirroredPairs","selfPaired","'","\"","repeatLastCharacterSearch","lastSearch","moveH","finalHead","lastState","prevLineEnd","MAX_VALUE","wasLastLine","newlineAndIndent","delete","changeCase","getSelections","swapped","toSwap","yank","endPos","jumpListWalk","lineHeight","delta","ceil","newBottom","scrollToCursor","replayMacro","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineAndIndentContinueComment","paste","whitespaceLength","tabs","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","lastSelectionCurEnd","selectedArea","selectedText","emptyStrings","setRegister","setMark","replaceTo","replaceWithStr","incrementNumberToken","numberStr","lineStr","re","number","*","/","M","#","bracket","section","comment","method","preprocess","reversed","\\n","\\r","\\t","\\/","\\\\","ExCommandDispatcher","buildCommandMap_","opt_params","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","mapping","colorscheme","mapArgs","imap","nmap","vmap","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","setOptionReturn","setlocal","setglobal","regArgs","regInfo","compareFn","reverse","anum","bnum","radix","comparePatternFn","unique","pattern","err","eatSpace","opts","decimal","hex","octal","numPart","textPart","matchPart","textOld","matchedLines","nextCommand","substitute","trailing","flagsPart","count","replacePart","startPos","save","nohlsearch","delmarks","sym","startMark","finishMark","finish","detach","IruO","update:visible","$event","click","JM2O","locals","Kk9m","State","parseOptions","gutter","indicatorOpen","indicatorFolded","isFolded","__isFold","marker","spec","createElement","cloneNode","updateFoldInfo","minSize","foldOption","eachLine","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","folded","foldCode","rangeFinder","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","LxZp","Mixr","forEach","arrayContains","scriptHint","editor","keywords","getToken","tprop","getCompletions","javascriptHint","javascriptKeywords","getCoffeeScriptToken","coffeescriptHint","coffeescriptKeywords","forAllProps","getOwnPropertyNames","getPrototypeOf","o","maybeAdd","gatherCompletions","stringProps","arrayProps","Function","funcProps","globalScope","additionalContext","useGlobalScope","jQuery","v","localVars","globalVars","registerHelper","OkRY","defaults","timeout","matchesonscroll","active","cursorActivity","matchHighlighter","hasFocus","scheduleHighlight","onFocus","highlightMatches","delay","hasBoundary","makeOverlay","searchFor","wordsOnly","isWord","minChars","chr","boundariesAround","skipTo","QSKu","Annotation","scheduleRedraw","doRedraw","redraw","buttonHeight","scrollButtonHeight","annotations","doUpdate","div","appendChild","cssText","computeScale","resizeHandler","hScale","barHeight","getScrollerElement","scrollHeight","compute","getY","curLine","curLineObj","getLineHandle","widgets","wrapping","singleLineH","heightAtLine","frag","createDocumentFragment","anns","barWidth","nextTop","ann","setAttribute","textContent","parentNode","removeChild","RkAk","RkhK","dialogDiv","wrap","innerHTML","closeNotification","newVal","currentNotificationClose","inp","closed","me","button","getElementsByTagName","select","onInput","keyCode","blur","closeOnBlur","callbacks","buttons","blurring","e_preventDefault","doneTimer","RrKZ","S1i8","THjC","doFold","force","allowFolded","finder","findMarksAt","cleared","myWidget","makeWidget","myRange","replacedWith","clearOnEnter","widget","createTextNode","editorOptions","foldOptions","defaultOptions","newFoldFunction","toggleFold","fold","unfold","foldAll","unfoldAll","funcs","helpers","getHelpers","auto","minFoldSize","scanUp","TQy8","cmp","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","toNextTag","toPrevTag","findMatchingClose","stack","startCh","findMatchingOpen","nameStartChar","openTag","findMatchingTag","open","findEnclosingTag","U3HU","lineIndent","lineNo","spaceTo","myIndent","lastLineInFold","U80t","markedSelection","coverRange","addAt","cls","markedSelectionStyle","CHUNK_SIZE","atEnd","coverStart","coverEnd","XEAW","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_confirm_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_48f25eaf_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_confirm_vue__","YOyO","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_search_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d96e4b2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_search_vue__","Yokd","Z6qg","nonWS","probablyInsideString","useInnerComments","getModeAt","noOptions","minLine","uncomment","lineComment","commentString","blockCommentStart","fullLines","blockComment","pad","padding","blankLines","commentBlankLines","baseString","whitespace","cut","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","didSomething","lineString","insideStart","insideEnd","lastStart","firstEnd","almostLastStart","openEnd","foundEnd","aGTD","clearActiveLines","activeLines","removeLineClass","WRAP_CLASS","BACK_CLASS","GUTT_CLASS","sameArray","updateActiveLines","nonEmpty","getLineHandleVisualStart","addLineClass","selectionChange","aX1R","conf","getConfig","closeBrackets","override","handleBackspace","pairs","around","charsAround","handleEnter","explode","contractSelection","inverted","handleChar","triples","identical","curType","enteringString","isClosingBracket","stringStartsAfter","sels","triggerElectric","type1","bind","c+I8","regexpFlags","regexp","flags","ensureGlobal","maybeMultiline","searchRegexpForward","searchRegexpForwardMultiline","chunk","before","inside","lastMatchIn","cutOff","newMatch","searchRegexpBackward","searchRegexpBackwardMultiline","adjustPos","foldFunc","mid","searchStringForward","noFold","cutFrom","searchStringBackward","topString","SearchCursor","atOccurrence","normalize","splitLines","defineDocExtension","c2Vz","stopPropagation","nativeOn","ref","label-width","label","default_open","rows","trigger","menu-align","visible-change","domProps","drNd","dxBS","isHeader","tokentype","headerLevel","maxDepth","lastLineNo","nextNextLine","engA","fo6W","findOpening","openCh","pass","tokenType","startToken","endToken","outer","nextOpen","hasImport","semi","has","hasInclude","hdeF","jQeI","Completion","debounce","tick","startLen","activityFunc","isNewCompletion","nw","hintOptions","hint","resolve","getText","completion","handle","addBinding","bound","baseMap","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","pick","Tab","Esc","custom","customKeys","extraKeys","getHintElement","hintsElement","el","nodeName","Widget","picked","hints","selectedHint","completions","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","displayText","hintId","alignWithWord","below","winW","innerWidth","body","offsetWidth","documentElement","winH","innerHeight","offsetHeight","container","box","overlapY","scrolls","startScroll","overlapX","node","firstChild","nextSibling","paddingRight","nativeBarWidth","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onScroll","curScroll","newTop","point","pageYOffset","scrollTop","t","srcElement","completeOnSingleClick","applicableHelpers","supportsSelection","fetchHints","async","resolveAutoHints","resolved","run","app","getHelper","fromList","anyword","showHint","getHints","newOpts","completionActive","requestAnimationFrame","cancelAnimationFrame","closeCharacters","disable","myTick","finishUpdate","completeSingle","childNodes","offsetTop","term","autocomplete","kYSO","__WEBPACK_IMPORTED_MODULE_1_common_js_data__","__WEBPACK_IMPORTED_MODULE_3__node_modules_element_ui_packages_form_src_form_item__","__WEBPACK_IMPORTED_MODULE_4_components_search_search__","__WEBPACK_IMPORTED_MODULE_5_components_manager_manage_problem_edit__","__WEBPACK_IMPORTED_MODULE_6_vuex__","__WEBPACK_IMPORTED_MODULE_7_common_js_problem__","__WEBPACK_IMPORTED_MODULE_8_base_confirm_confirm__","problemDatas","cur_page","multipleSelection","select_cate","select_word","del_list","is_search","rules","required","isShowEdit","confirmText","curProblemId","curProblemTitle","created","_getProblemsData","showSetupProblem","handleCurrentChange","curPage","formatter","row","address","filterTag","handleEdit","saveOneProblem","$refs","problemEdit","handleDelete","confirmDele","$message","delAll","calcTag","cellValue","handleSelectionChange","hideEdit","refreshProblems","contestDatas","filter","d","is_del","components","ElFormItem","Search","ProblemEdit","Confirm","mvHQ","__esModule","oxMS","staticStyle","border","selection-change","sortable","fixed","scopedSlots","_u","$index","layout","current-page","total","current-change","editFinish","qkKv","core","$JSON","stringify","it","qm6i","sOR5","soCA","registerGlobalHelper","tjx/","posEq","addToRing","killRing","growRingTop","getFromRing","popFromRing","kill","mayGrow","lastKill","isClean","gen","changeGeneration","byChar","byWord","byLine","goalColumn","byPage","byParagraph","no","sawText","fst","lst","bySentence","sawWord","byExpr","strict","getPrefix","precise","digits","emacsPrefix","clearPrefix","repeated","findEnd","by","extendSelection","killTo","killRegion","addPrefix","digit","maybeClearPrefix","maybeDuplicateInput","emacsPrefixMap","prefixPreservingKeys","dup","one","txt","addPrefixMap","prefixMap","maybeRemovePrefixMap","setExtending","getExtending","clearMark","getInput","operateOnWord","op","toEnclosingExpr","regPrefix","Alt-G","Ctrl-X","Ctrl-Q","Ctrl-U","emacs","Ctrl-W","Ctrl-K","Alt-W","Ctrl-Y","Alt-Y","Ctrl-Space","Ctrl-Shift-2","Ctrl-F","Ctrl-B","Right","Left","Ctrl-D","Ctrl-H","Alt-F","Alt-B","Alt-D","Alt-Backspace","Ctrl-N","Ctrl-P","Ctrl-A","Ctrl-E","Alt-V","Ctrl-V","Ctrl-Up","Ctrl-Down","Alt-A","Alt-E","Alt-K","Ctrl-Alt-K","Ctrl-Alt-Backspace","Ctrl-Alt-F","Ctrl-Alt-B","Shift-Ctrl-Alt-2","Ctrl-Alt-T","leftStart","leftEnd","rightEnd","rightStart","Ctrl-Alt-U","Alt-Space","Ctrl-O","Ctrl-T","Alt-C","w","letter","Alt-U","Alt-L","Alt-;","Ctrl-/","Shift-Ctrl--","Ctrl-Z","Cmd-Z","Shift-Alt-,","Shift-Alt-.","Ctrl-S","Ctrl-R","Ctrl-G","Shift-Alt-5","Alt-/","Ctrl-J","Alt-G G","Ctrl-X Tab","indentSelection","Ctrl-X Ctrl-X","Ctrl-X Ctrl-S","Ctrl-X Ctrl-W","Ctrl-X S","Ctrl-X F","Ctrl-X U","Ctrl-X K","Ctrl-X Delete","Ctrl-X H","Ctrl-Q Tab","ujcs","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","vq+x","where","config","afterCursor","matching","maxScanLen","maxScanLineLength","maxScanLines","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","ie_lt8","focused","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","oldConfig","xrTZ","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_Base64","b64chars","b64tab","bin","cb_utob","cc","re_utob","utob","u","cb_encode","ccc","padlen","ord","btoa","_encode","constructor","urisafe","m0","encodeURI","re_btou","cb_btou","cccc","cp","btou","cb_decode","atob","_decode","decode","noConflict","VERSION","fromBase64","toBase64","noEnum","enumerable","writable","extendString","yGpH"],"mappings":"AAAAA,cAAc,IAERC,OACA,SAAUC,EAAQC,EAASC,ICwBjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,UAKC,SAAAE,GAkBD,QAAAC,GAAAC,GACA,GAAAA,EAAAC,UAAA,sBAAAH,GAAAI,IAEA,QADAC,GAAAH,EAAAI,iBAAAC,KACAC,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,IAAAH,EAAAG,GAAAE,QAAA,MAAAV,GAAAI,IACA,IAAAO,GAAAN,EAAAG,GAAAI,KAAAC,EAAAX,EAAAY,WAAAH,GACAI,EAAAf,EAAAgB,UAAAd,EAAAe,UAAAJ,EAAAK,SAAAH,EAAAG,KACA,WAAAH,EAAAI,KAAAC,OAAAF,EAAAG,QAAA,MAAArB,GAAAI,IAEA,IAAAkB,GAAApB,EAAAC,UAAA,iBAAAoB,EAAA,QAAAR,EAAAI,KAAAK,cACAC,EAAA,gBAAAH,MAAAG,eAAAF,GAAAG,EACAC,EAAA,gBAAAL,MAAAK,YAAAJ,GAAAK,EAEAP,EAAAH,EAAAG,OACAR,GAAAgB,IAAAlB,EAAAmB,KAAAT,IAAAU,MAAA,EAAAV,EAAAZ,OAAAI,EAAAgB,IAAAlB,EAAAmB,IACA,IAAAE,GAAAX,EAAAY,aAEA,KAAAZ,GACA,UAAAR,EAAAqB,OAAArB,EAAAgB,KAAAlB,EAAAmB,KAAA,SAAAK,KAAAtB,EAAAuB,OAAAC,OAAAxB,EAAAuB,OAAA3B,OAAA,QAAAI,EAAAuB,OAAA3B,SACA,OAAAI,EAAAqB,MAAA,YAAAhB,EAAAgB,MACArB,EAAAuB,OAAAE,QAAA,MAAAzB,EAAAuB,OAAA3B,OAAA,GACAgB,GAAAa,EAAAb,EAAAO,IAAA,GACAO,EAAArC,EAAAmB,EAAAV,EAAAO,GAAA,GACA,MAAAlB,GAAAI,IAEA,IAAAoC,GAAAb,GAAAW,EAAAX,EAAAK,IAAA,CACAzB,GAAAC,IAAyBgC,SACzBC,KAAA,KAAAD,EAAA,gBAAAnB,EAAA,IACAqB,OAAAF,EAAAxC,EAAA2C,IAAAhC,EAAAiC,KAAA,KAAA5C,EAAA2C,IAAAhC,EAAAiC,KAAAjC,EAAAmB,GAAA,IAGA,OAAAtB,GAAAH,EAAAI,OAAA,EAAmCD,GAAA,EAAQA,IAAA,CAC3C,GAAAqC,GAAAtC,EAAAC,EACAN,GAAA4C,aAAAD,EAAAJ,KAAApC,EAAAG,GAAAI,KAAAP,EAAAG,GAAAuC,OAAA,UACA,IAAAC,GAAA9C,EAAAI,iBAAAyB,MAAA,EACAiB,GAAAxC,IAAgBI,KAAAiC,EAAAH,OAAAK,OAAAF,EAAAH,QAChBxC,EAAA+C,cAAAD,GACAH,EAAAL,SACAtC,EAAAgD,WAAAL,EAAAH,OAAAE,KAAA,SACA1C,EAAAgD,WAAAL,EAAAH,OAAAE,KAAA,aAKA,QAAAO,GAAAjD,EAAAkD,GAGA,OAFA/C,GAAAH,EAAAI,iBAAAC,KACAK,EAAAwC,EAAA,SACA5C,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,IAAAH,EAAAG,GAAAE,QAAA,MAAAV,GAAAI,IACA,IAAAO,GAAAN,EAAAG,GAAAI,KAAAC,EAAAX,EAAAY,WAAAH,GACAI,EAAAf,EAAAgB,UAAAd,EAAAe,UAAAJ,EAAAK,SAAAH,EAAAG,KACA,IAAAkC,IAAA,UAAAvC,EAAAqB,MAAA,KAAArB,EAAAuB,OAAAC,OAAA,IACAxB,EAAAwC,OAAA1C,EAAAmB,GAAA,GACA,MAAA9B,GAAAI,IAKA,IAAAkD,EACA,WAAAvC,EAAAI,KAAAC,KACA,gBAAAlB,EAAAe,UAAAG,MAAA,cAAAL,EAAAI,KAAAC,KACAkC,EAAA1C,EAAA,aACA,iBAAAV,EAAAe,UAAAG,MAAA,OAAAL,EAAAI,KAAAC,KAGA,MAAApB,GAAAI,IAFAkD,GAAA1C,EAAA,YAGO,CACP,IAAAM,EAAAqC,UAAArC,EAAAqC,QAAAlC,SACAkB,EAAArC,EAAAgB,EAAAqC,QAAAlC,QAAAV,EAAAO,GACA,MAAAlB,GAAAI,IACAkD,GAAA1C,EAAAM,EAAAqC,QAAAlC,QAEA,KAAAnB,EAAAsD,QAAA7C,EAAAiC,MAAAP,OAAAxB,EAAAgB,OAAAyB,GAAA,KACA/C,EAAAC,GAAA8C,EAEApD,EAAAuD,kBAAAlD,GACAF,EAAAH,EAAAI,gBACA,QAAAE,GAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,KACtCA,GAAAH,EAAAI,OAAA,GAAAJ,EAAAG,GAAAI,KAAAgC,KAAAvC,EAAAG,EAAA,GAAAI,KAAAgC,OACA1C,EAAAgD,WAAA7C,EAAAG,GAAAI,KAAAgC,MAGA,QAAAc,GAAAxD,GACA,MAAAA,GAAAC,UAAA,gBAAAH,EAAAI,KACA+C,EAAAjD,GAAA,GAKA,QAAAoC,GAAAqB,EAAAC,GACA,GAAAD,EAAArB,QAAA,MAAAqB,GAAArB,QAAAsB,EACA,QAAApD,GAAA,EAAAqD,EAAAF,EAAAlD,OAA0CD,EAAAqD,IAAOrD,EACjD,GAAAmD,EAAAnD,IAAAoD,EAAA,MAAApD,EACA,UAKA,QAAA+B,GAAArC,EAAAmB,EAAAV,EAAAO,EAAA4C,GACA,IAAA9D,EAAA+D,kBAAA,QACA,IAAAlC,GAAAmC,KAAAC,IAAA/D,EAAAgE,WAAA,EAAAvD,EAAAiC,KAAA,KACAuB,EAAAnE,EAAA+D,kBAAA7D,EAAAS,EAAA,KAAAkB,EACA,KAAAsC,KAAAC,KAAA/C,EAAA,QAKA,QAJAgD,GAAAnD,EAAAqC,QAIAe,EAAAR,EAAA,IAAmCO,KAAAhD,WAA6BgD,IAAAE,OAAAD,CAChE3D,GAAAwD,EAAAK,EACA,QAAAhE,GAAA,EAAmBA,EAAA8D,EAAU9D,IAAA,CAC7B,GAAAiE,GAAAzE,EAAA+D,kBAAA7D,EAAAS,EAAA,KAAAkB,EACA,KAAA4C,KAAAL,KAAA/C,EAAA,QACAV,GAAA8D,EAAAD,GAEA,SAnIAxE,EAAA0E,aAAA,4BAAAxE,EAAAyE,EAAAC,GAGA,GAFAA,GAAA5E,EAAA6E,MAAAD,GACA1E,EAAA4E,aAAA,iBACAH,EAAA,CACA,GAAAI,IAAe3D,KAAA,kBACf,gBAAAuD,MAAAK,eACAD,EAAA,gBAAA7E,GAAiC,MAAAwD,GAAAxD,MACjC,gBAAAyE,MAAAM,eACAF,EAAA,gBAAA7E,GAAiC,MAAAD,GAAAC,KACjCA,EAAAgF,UAAAH,KAGA,IAAArD,IAAA,6FACA,wBACAE,GAAA,kGACA,0FAyFA5B,GAAAmF,SAAAC,SAAA,SAAAlF,GAA+C,MAAAiD,GAAAjD,ODuCzCmF,OACA,SAAUzF,EAAQC,EAASC,IEhLjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,QAAAA,EAAA,UAKC,SAAAE,GACD,YAQA,SAAAsF,GAAApF,EAAAqF,EAAAC,EAAAC,GACAC,KAAAxF,KACAwF,KAAAD,SACA,IAAAE,IAA2BC,kBAAA,EAC3B,QAAAC,KAAAJ,GAAAE,EAAAE,GAAAJ,EAAAI,EACAF,GAAAG,YAAAH,EAAAG,UAAA,2BACAJ,KAAAK,WAAA7F,EAAA8F,kBAAAL,GACAD,KAAAH,QACAG,KAAAF,WACAE,KAAAO,KAAgBC,KAAAhG,EAAAiG,YAAA3B,GAAAtE,EAAAgE,WAAA,GAChBwB,KAAAU,WACAV,KAAAW,OAAA,KAEAX,KAAAY,cACAZ,KAAAK,WAAAM,OAAAX,KAAAU,QAEA,IAAAG,GAAAb,IACAxF,GAAAsG,GAAA,SAAAd,KAAAe,cAAA,SAAAC,EAAAC,GAAgEJ,EAAAK,SAAAD,KAuBhE,QAAAE,GAAAjE,EAAAkE,EAAAC,GACA,MAAAnE,IAAAkE,EAAAlE,EACAoB,KAAAgD,IAAAF,EAAAlE,EAAAmE,GAhDA/G,EAAAiH,gBAAA,kCAAA1B,EAAAC,EAAAC,GAGA,MAFA,gBAAAA,QAA+CK,UAAAL,IAC/CA,UACA,GAAAH,GAAAI,KAAAH,EAAAC,EAAAC,IAyBAH,GAAA4B,UAAAZ,YAAA,WACA,GAAAZ,KAAAO,IAAA,CACA,OAAAzF,GAAA,EAAmBA,EAAAkF,KAAAU,QAAA3F,OAAyBD,IAAA,CAC5C,GAAA2G,GAAAzB,KAAAU,QAAA5F,EACA,IAAA2G,EAAAjB,KAAAtD,MAAA8C,KAAAO,IAAAzB,GAAA,KACA2C,GAAA3C,GAAA5B,MAAA8C,KAAAO,IAAAC,MAAAR,KAAAU,QAAAgB,OAAA5G,IAAA,GAIA,IAFA,GAAA6G,GAAA3B,KAAAxF,GAAAoH,gBAAA5B,KAAAH,MAAAvF,EAAA2C,IAAA+C,KAAAO,IAAAC,KAAA,GAAAR,KAAAF,UACA+B,EAAA7B,KAAAD,SAAAC,KAAAD,QAAA8B,YAVA,IAWAF,EAAAG,YAAA,CACA,GAAAL,IAAmBjB,KAAAmB,EAAAnB,OAAA1B,GAAA6C,EAAA7C,KACnB,IAAA2C,EAAAjB,KAAAtD,MAAA8C,KAAAO,IAAAzB,GAAA,KAEA,IADAkB,KAAAU,QAAAgB,OAAA5G,IAAA,EAAA2G,GACAzB,KAAAU,QAAA3F,OAAA8G,EAAA,MAEA7B,KAAAO,IAAA,OAQAX,EAAA4B,UAAAN,SAAA,SAAAD,GACA,GAAAc,GAAAd,EAAAT,KAAAtD,KACA8E,EAAA1H,EAAA2H,UAAAhB,GAAA/D,KACAmE,EAAAW,EAAAf,EAAAnC,GAAA5B,IAQA,IAPA8C,KAAAO,KACAP,KAAAO,IAAAC,KAAAlC,KAAAC,IAAA4C,EAAAnB,KAAAO,IAAAC,KAAAuB,EAAAV,GAAAJ,EAAAT,KAAAtD,MACA8C,KAAAO,IAAAzB,GAAAR,KAAAgD,IAAAH,EAAAnB,KAAAO,IAAAzB,GAAAiD,EAAAV,GAAAJ,EAAAT,KAAAtD,OAEA8C,KAAAO,KAAkBC,KAAAS,EAAAT,KAAAtD,KAAA4B,GAAAkD,EAAA,GAGlBX,EAAA,OAAAvG,GAAA,EAAmCA,EAAAkF,KAAAU,QAAA3F,OAAyBD,IAAA,CAC5D,GAAA2G,GAAAzB,KAAAU,QAAA5F,GACAoH,EAAAf,EAAAM,EAAAjB,KAAAtD,KAAA6E,EAAAV,EACAa,IAAAT,EAAAjB,KAAAtD,OAAAuE,EAAAjB,KAAAlG,EAAA2C,IAAAiF,EAAAT,EAAAjB,KAAApE,IACA,IAAA+F,GAAAhB,EAAAM,EAAA3C,GAAA5B,KAAA6E,EAAAV,EACAc,IAAAV,EAAA3C,GAAA5B,OAAAuE,EAAA3C,GAAAxE,EAAA2C,IAAAkF,EAAAV,EAAA3C,GAAA1C,KAEAgG,aAAApC,KAAAW,OACA,IAAAE,GAAAb,IACAA,MAAAW,OAAA0B,WAAA,WAAyCxB,EAAAyB,qBAA4B,MAGrE1C,EAAA4B,UAAAc,kBAAA,WACAtC,KAAAY,cACAZ,KAAAK,WAAAM,OAAAX,KAAAU,UAGAd,EAAA4B,UAAAe,MAAA,WACAvC,KAAAxF,GAAAgI,IAAA,SAAAxC,KAAAe,eACAf,KAAAK,WAAAkC,YF4LME,OACA,SAAUvI,EAAQwI,EAAqBtI,GAE7C,YG7RA,IAAAuI,GAAA,WAA0B,GAAAC,GAAA5C,KAAa6C,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CACjE,OAAAE,GAAA,eACAjC,IACAmC,QAAAL,EAAAM,yBAEGH,EAAA,YACHI,YAAA,eACAC,OACAC,YAAA,YACAC,KAAA,SACAC,WAAA,QACAC,gBAAAZ,EAAAa,WAEA3C,IACAG,OAAA2B,EAAAa,UACAC,MAAAd,EAAAa,WAEAE,OACAC,MAAAhB,EAAA,SACAiB,SAAA,SAAAC,GACAlB,EAAAmB,SAAA,gBAAAD,KAAAE,OAAAF,GAEAG,WAAA,cAEGrB,EAAAsB,GAAA,KAAAnB,EAAA,oBACHoB,KAAA,aACGpB,EAAA,oBACHqB,aACA1I,KAAA,OACA2I,QAAA,SACAT,MAAAhB,EAAA,gBACAqB,WAAA,sBAEGrB,EAAAsB,GAAA,cAAAtB,EAAAsB,GAAA,KAAAtB,EAAA0B,GAAA1B,EAAA,sBAAA2B,EAAAC,GACH,MAAAzB,GAAA,oBACAqB,aACA1I,KAAA,OACA2I,QAAA,SACAT,MAAAY,GAAA,KAAA5B,EAAA6B,gBACAR,WAAA,oCAEAS,IAAAF,EACApB,OACAH,QAAAsB,EAAAI,MAEK5B,EAAA,QACLI,YAAA,uBACKP,EAAAsB,GAAAtB,EAAAgC,GAAAL,EAAAM,UAAAjC,EAAAsB,GAAA,KAAAnB,EAAA,OACLI,YAAA,mBACAC,OACA0B,MAAA,KACAC,OAAA,MACAC,IAAA,6BAGG,QAEHC,KACAC,GAAiBvC,SAAAsC,kBACjBvC,GAAA,KHkSMyC,OACA,SAAUjL,EAAQC,EAASC,GI9VjCD,EAAAD,EAAAC,QAAAC,EAAA,YAKAD,EAAAiL,MAAAlL,EAAAY,EAAA,oJAA2K,IAAQuK,QAAA,EAAAC,SAAA,8DAAAC,SAAAC,SAAA,6DAAAC,KAAA,cAAAC,gBAAA,gLAA4XC,WAAA,OJuWziBC,OACA,SAAU1L,EAAQwI,EAAqBtI,GAE7C,YKlWAsI,GAAA,GLiXEmD,OACE9I,MACEP,KK/WNsJ,OLgXMC,QK9WN,ILgXIC,gBACExJ,KK/WNsJ,OLgXMC,QK9WN,OLgXIE,eACEzJ,KK/WNsJ,OLgXMC,QK7WN,QLgXEG,KAAM,WACJ,OACEC,SK9WN,ILkXEC,SACEC,KAAM,WACJrG,KAAKmG,SKhXX,GLkXIG,KAAM,WACJtG,KAAKmG,SKhXX,GLkXII,QAAS,WACPvG,KKhXNsG,OLiXMtG,KAAKwG,MKhXX,YLkXIC,OAAQ,WACNzG,KKhXNsG,OLiXMtG,KAAKwG,MKhXX,cLuXME,OACA,SAAUxM,EAAQwI,EAAqBtI,GAE7C,YACqB,IAAIuM,GAAqEvM,EAAoB,QACzFwM,EAA6ExM,EAAoByM,EAAEF,GMxavGG,EACnB,QAAAA,GAAAC,GAA8F,GAAhFpC,GAAgFoC,EAAhFpC,GAAIE,EAA4EkC,EAA5ElC,MAAOnG,EAAqEqI,EAArErI,IAAKsI,EAAgED,EAAhEC,MAAOC,EAAyDF,EAAzDE,YAAaC,EAA4CH,EAA5CG,SAAUC,EAAkCJ,EAAlCI,UAAWC,EAAuBL,EAAvBK,UAAWC,EAAYN,EAAZM,SAAYT,KAAA5G,KAAA8G,GAC5F9G,KAAK2E,GAAKA,EACV3E,KAAK6E,MAAQA,EACb7E,KAAKtB,IAAMA,EACXsB,KAAKgH,MAAQA,EACbhH,KAAKiH,YAAcA,EACnBjH,KAAKkH,SAAWA,EAChBlH,KAAKmH,UAAYA,EACjBnH,KAAKoH,UAAYA,EACjBpH,KAAKqH,UAAYA,EN4bQ3E,GAAuB,EAAI,GAIlD4E,OACA,SAAUpN,EAAQC,EAASC,IOxcjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,QAAAA,EAAA,UAKC,SAAAE,GACD,YASA,SAAAiN,GAAAC,EAAA7J,EAAA8J,GACA,GAAAA,EAAA,MAAA9J,EAAAvB,GAAA,MAAAoL,GAAAE,QAAAzK,EAAAU,EAAAT,KAAA,GACA,IAAAA,GAAAsK,EAAA1J,QAAAH,EAAAT,KACA,IAAAuK,EAAA,GAAA9J,EAAAvB,IAAAc,EAAAnC,OAAA,MAAAyM,GAAAE,QAAAzK,EAAAU,EAAAT,KAAA,KAEA,QADAV,GAAAhB,EAAA,QACAP,EAAA0C,EAAAvB,GAAA+B,EAAAsJ,EAAA,IAAAvK,EAAAnC,OAAAD,EAAA,EAAkEG,GAAAkD,EAAUlD,GAAAwM,EAAA3M,IAAA,CAC5E,GAAAiE,GAAA7B,EAAAP,OAAA8K,EAAA,EAAAxM,EAAA,EAAAA,GACA0M,EAAA,KAAA5I,GAAAzE,EAAAsN,WAAA7I,GAAA,OAEA,IADA,KAAA4I,GAAA5I,EAAA8I,eAAA9I,IAAA4I,EAAA,KACA,SAAAnM,EACA,KAAAmM,IAAyBnM,EAAA,KAAcgB,EAAAmL,OAChC,UAAAnM,GACPgB,GAAAmL,EAAA,CAEA,GADA,KAAAnL,GAAA,KAAAmL,GAAAF,EAAA,GAAAxM,IACA,KAAAuB,GAAA,KAAAmL,GAAAF,EAAA,GAAqDjL,EAAA,GAAY,UACjE,OAIA,MAAAS,GAAAU,EAAAT,KAAAjC,GAGA,QAAA6M,GAAAtN,EAAAiN,GACAjN,EAAAuN,mBAAA,SAAAC,GACA,MAAAxN,GAAAyN,QAAAC,OAAA1N,EAAAgN,IAAAW,QAAAH,EAAAhN,QACAuM,EAAA/M,EAAAgN,IAAAQ,EAAA9M,KAAAuM,GAEAA,EAAA,EAAAO,EAAAxH,OAAAwH,EAAAlJ,OA+DA,QAAAsJ,GAAA5N,EAAA6N,GACA,GAAA7N,EAAA8N,aAAA,MAAAhO,GAAAI,IACAF,GAAA+N,UAAA,WAEA,OADAC,GAAAhO,EAAAI,iBAAAG,OAAA0N,KAAAC,GAAA,EACA5N,EAAA,EAAqBA,EAAA0N,EAAS1N,IAAA,CAC9B,GAAAI,GAAAV,EAAAI,iBAAAE,GAAAI,IACA,MAAAA,EAAAgC,MAAAwL,GAAA,CACA,GAAAC,GAAA1L,EAAA/B,EAAAgC,MAAAmL,EAAA,OACA7N,GAAA4C,aAAA,KAAAuL,EAAA,oBACAnO,EAAAgD,WAAAmL,EAAAzL,KAAA,SACAuL,EAAArD,MAA2BlK,KAAAyN,EAAAtL,OAAAsL,IAC3BD,EAAAxN,EAAAgC,KAAA,GAEA1C,EAAA+C,cAAAkL,KAEAjO,EAAAoO,YAAA,cAOA,QAAAC,GAAArO,EAAAS,GAEA,IADA,GAAA0C,GAAA1C,EAAAmB,GAAAD,EAAAwB,EAAAT,EAAA1C,EAAAsD,QAAA7C,EAAAiC,MACAS,GAAArD,EAAAsN,WAAA1K,EAAAP,OAAAgB,EAAA,OAAAA,CACA,MAAAxB,EAAAe,EAAAnC,QAAAT,EAAAsN,WAAA1K,EAAAP,OAAAR,QACA,QAAYqE,KAAAvD,EAAAhC,EAAAiC,KAAAS,GAAAmB,GAAA7B,EAAAhC,EAAAiC,KAAAf,GAAA2M,KAAA5L,EAAAb,MAAAsB,EAAAxB,IA4BZ,QAAA4M,GAAAvO,EAAAiN,GAEA,OADA9M,GAAAH,EAAAI,iBAAAoO,KACAlO,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAkN,GAAArN,EAAAG,GACAmO,EAAAzO,EAAA0O,SAAAlB,EAAA3K,OAAAoK,EAAA,QACA0B,EAAA3O,EAAA0O,SAAAlB,EAAA9M,KAAAuM,EAAA,QACA2B,GAAsB/L,OAAA4L,EAAA/N,KAAAiO,EACtBH,GAAA5D,KAAA4C,GACAgB,EAAA5D,KAAAgE,GAEA5O,EAAA+C,cAAAyL,GAOA,QAAAK,GAAA1O,EAAA6F,EAAA1B,GACA,OAAAhE,GAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IACtC,GAAAH,EAAAG,GAAA0F,WAAA7F,EAAAG,GAAAgE,QAAA,QACA,UAIA,QAAAwK,GAAA9O,GAEA,OADAG,GAAAH,EAAAI,iBAAAoO,KACAlO,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAkN,GAAArN,EAAAG,GAAAG,EAAA+M,EAAA9M,KAAAqO,EAAA/O,EAAAgP,eAAAvO,GAAA,EACA,KAAAsO,EAAA,QACA,QAAa,CACb,GAAAE,GAAAjP,EAAAgP,eAAAvO,EAAA,EACA,KAAAwO,EAAA,QACA,IAAAA,EAAArN,IAAAsN,EAAA/M,OAAA+M,EAAA9M,QAAA2M,EAAAnN,IAAA,IACA4M,EAAA5D,MAA0B/H,OAAAJ,EAAAsM,EAAAtO,IAAAiC,KAAAqM,EAAAtO,IAAAmB,GAAA,GAC1BlB,KAAAuO,EAAAxO,KACA,OAEAA,EAAAgC,EAAAwM,EAAAxO,IAAAiC,KAAAuM,EAAAxO,IAAAmB,GAAA,IAIA,MADA5B,GAAA+C,cAAAyL,IACA,EAwHA,QAAAW,GAAAnP,EAAAoP,GACA,GAAApP,EAAA8N,aAAA,MAAAhO,GAAAI,IAEA,QADAmP,GAAAlP,EAAAH,EAAAI,iBAAAkP,KACAhP,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAkN,GAAArN,EAAAG,EACA,KAAAkN,EAAAhN,QAAA,CAEA,IADA,GAAAwF,GAAAwH,EAAAxH,OAAAtD,KAAA4B,EAAAkJ,EAAAlJ,KAAA5B,KACApC,EAAAH,EAAAI,OAAA,GAAAJ,EAAAG,EAAA,GAAA0F,OAAAtD,MAAA4B,GACAA,EAAAnE,IAAAG,GAAAgE,KAAA5B,IACAvC,GAAAG,GAAAgE,KAAA1C,IAAA0C,IACAgL,EAAA1E,KAAA5E,EAAA1B,IAEAgL,EAAA/O,OAAA8O,GAAA,EACAC,EAAA1E,KAAA5K,EAAAiG,YAAAjG,EAAAgE,YAEAhE,EAAA+N,UAAA,WAEA,OADA5N,MACAG,EAAA,EAAqBA,EAAAgP,EAAA/O,OAAmBD,GAAA,GACxC,GAAA0F,GAAAsJ,EAAAhP,GAAAgE,EAAAgL,EAAAhP,EAAA,GACA6C,EAAAV,EAAAuD,EAAA,GAAArE,EAAAc,EAAA6B,GACAiL,EAAAvP,EAAAwP,SAAArM,EAAAxB,GAAA,EACAyN,GACAG,EAAAE,OAEAF,EAAAE,KAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAArC,cAAAwC,EAAAF,EAAAtC,aAEA,OADAuC,IAAAC,IAA2BH,EAAAE,EAAQD,EAAAE,GACnCH,EAAAC,GAAA,EAAAD,GAAAC,EAAA,MAEA3P,EAAA4C,aAAA2M,EAAApM,EAAAxB,GACA0N,GAAAlP,EAAAyK,MAAmC/H,OAAAM,EAAAzC,KAAA+B,EAAA6B,EAAA,OAEnC+K,GAAArP,EAAA+C,cAAA5C,EAAA,KA0EA,QAAA2P,GAAA9P,EAAAH,GACAG,EAAA+N,UAAA,WAEA,OADA5N,GAAAH,EAAAI,iBAAA2P,KAAA1P,KACAC,EAAA,EAAqBA,EAAAH,EAAAI,OAAmBD,IAAA,CACxC,GAAAkN,GAAArN,EAAAG,EACAkN,GAAAhN,SAA4BuP,EAAAnF,KAAAtK,GAAiBD,EAAAuK,KAAA,KAC7CvK,EAAAuK,KAAA/K,EAAAG,EAAAwP,SAAAhC,EAAAxH,OAAAwH,EAAAlJ,QAEAtE,EAAAuD,kBAAAlD,EAAA,gBACA,QAAA8N,GAAA7N,EAAAyP,EAAAxP,OAAA,EAA0CD,GAAA,EAAQA,IAAA,CAClD,GAAAkN,GAAArN,EAAA4P,EAAAzP,GACA,MAAA6N,GAAArO,EAAAkQ,OAAAxC,EAAA9M,KAAAyN,GAAA,IACA,GAAAG,GAAAD,EAAArO,EAAAwN,EAAA9M,KACAyN,GAAAG,EAAAtI,KACAhG,EAAA4C,aAAA/C,EAAAyO,UAAAtI,KAAAsI,EAAAhK,QA6GA,QAAA2L,GAAAjQ,GACA,GAAAgG,GAAAhG,EAAAkQ,UAAA,QAAA5L,EAAAtE,EAAAkQ,UAAA,KACA,OAAApQ,EAAAkQ,OAAAhK,EAAA1B,GAAA,CACA,GAAAgK,GAAAD,EAAArO,EAAAgG,EACA,KAAAsI,OAAA,MACAtI,GAAAsI,EAAAtI,KACA1B,EAAAgK,EAAAhK,GAEA,OAAY0B,OAAA1B,KAAAe,MAAArF,EAAAwP,SAAAxJ,EAAA1B,GAAAgK,QAGZ,QAAA6B,GAAAnQ,EAAAoQ,GACA,GAAAC,GAAAJ,EAAAjQ,EACA,IAAAqQ,EAAA,CACA,GAAAhL,GAAAgL,EAAAhL,MACAiL,EAAAtQ,EAAAoH,gBAAA/B,EAAA+K,EAAAC,EAAA/L,GAAA+L,EAAArK,OAEAoK,EAAAE,EAAAhJ,WAAAgJ,EAAAC,gBACAvQ,EAAAwQ,aAAAF,EAAAtK,OAAAsK,EAAAhM,OAEAgM,EAAAtQ,EAAAoH,gBAAA/B,EAAA+K,EAAA3N,EAAAzC,EAAAiG,YAAA,GACAjG,EAAAkN,QAAAzK,EAAAzC,EAAAgE,eACAoM,EAAAE,EAAAhJ,WAAAgJ,EAAAC,gBACAvQ,EAAAwQ,aAAAF,EAAAtK,OAAAsK,EAAAhM,MACA+L,EAAA/B,MACAtO,EAAAwQ,aAAAH,EAAArK,KAAAqK,EAAA/L,MAtjBA,GAAAO,GAAA/E,EAAA2Q,OAAAC,SAAyCC,YAAA,WACzCC,EAAA9Q,EAAAmF,SACAxC,EAAA3C,EAAA2C,IACAoO,EAAA/Q,EAAA2Q,OAAA,SAAA3Q,EAAA2Q,OAAAK,WACAC,EAAAF,EAAA,eAkCAG,EAAAH,EAAA,cAEAD,GAAA/L,EAAAmM,EAAA,kCAAAhR,GAAuEsN,EAAAtN,GAAA,IACvE4Q,EAAA/L,EAAAmM,EAAA,oCAAAhR,GAAyEsN,EAAAtN,EAAA,IAEzE6Q,IAAAhM,EAAA,+BAEA,IAAAoM,GAAAJ,EAAA,mBAEAD,GAAA/L,EAAAoM,EAAA,+BAAAjR,GACA,GAAA2C,GAAA3C,EAAAkR,eACA,KAAAlR,EAAAmR,oBAAA,CACA,GAAAC,GAAApR,EAAAqR,aAAA1O,EAAA2O,IAAA3O,EAAA4O,aAAA,QACAvR,GAAAkQ,YAAAxN,MAAA0O,GACApR,EAAAoO,YAAA,YAEApO,EAAAwR,SAAA,KAAA7O,EAAA2O,IAAAtR,EAAAyR,sBAEAb,EAAA/L,EAAAoM,EAAA,mCAAAjR,GACA,GAAA2C,GAAA3C,EAAAkR,eACA,KAAAlR,EAAAmR,oBAAA,CACA,GAAAO,GAAA1R,EAAAqR,aAAA1O,EAAA2O,IAAA,UACAtR,GAAAkQ,YAAAxN,MAAAgP,GACA1R,EAAAoO,YAAA,cAEApO,EAAAwR,SAAA,KAAA7O,EAAA2O,IAAAtR,EAAAyR,sBAGAb,EAAA/L,EAAA,SAAAkM,EAAA,sCAAA/Q,GAEA,OADAG,GAAAH,EAAAI,iBAAAuR,KACArR,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAEtC,OADA0F,GAAA7F,EAAAG,GAAA0F,OAAA1B,EAAAnE,EAAAG,GAAAgE,KACA5B,EAAAsD,EAAAtD,KAAgCA,GAAA4B,EAAA5B,OAAiBA,EACjD4B,EAAA5B,KAAAsD,EAAAtD,SAAA4B,EAAA5B,MAAA,GAAA4B,EAAA1C,IACA+P,EAAA/G,MAA2B/H,OAAAH,GAAAsD,EAAAtD,KAAAsD,EAAAvD,EAAAC,EAAA,GAC3BhC,KAAAgC,GAAA4B,EAAA5B,KAAA4B,EAAA7B,EAAAC,IAEA1C,GAAA+C,cAAA4O,EAAA,IAGA9M,EAAA,0BAEA+L,EAAA/L,EAAA,mCAAA7E,GACA,GAAAwN,GAAAxN,EAAAI,iBAAA,EACAJ,GAAAwQ,aAAAhD,EAAA3K,OAAA2K,EAAA9M,MAA+CkR,QAAA,KAG/ChB,EAAA/L,EAAAkM,EAAA,4BAAA/Q,GAEA,OADAG,GAAAH,EAAAI,iBAAAyR,KACAvR,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAkN,GAAArN,EAAAG,EACAuR,GAAAjH,MAAqB/H,OAAAJ,EAAA+K,EAAAxH,OAAAtD,KAAA,GACrBhC,KAAA+B,EAAA+K,EAAAlJ,KAAA5B,KAAA,OAEA1C,EAAA+C,cAAA8O,IAGAhN,EAAA,6BAoBA+L,EAAA/L,EAAAkM,EAAA,qCAAA/Q,GAAgE,MAAA4N,GAAA5N,GAAA,IAEhE4Q,EAAA/L,EAAA,SAAAkM,EAAA,sCAAA/Q,GAA4E,MAAA4N,GAAA5N,GAAA,IAS5E4Q,EAAA/L,EAAAkM,EAAA,sCAAA/Q,GACA,GAAAgG,GAAAhG,EAAAkQ,UAAA,QAAA5L,EAAAtE,EAAAkQ,UAAA,MACA4B,EAAA9R,EAAAgB,MAAA+Q,qBAAA/R,EAAAgN,IAAAlK,GACA,OAAAhD,EAAAkQ,OAAAhK,EAAA1B,GAAA,CACA,GAAAgK,GAAAD,EAAArO,EAAAgG,EACA,KAAAsI,OAAA,MACAtO,GAAAwQ,aAAAlC,EAAAtI,KAAAsI,EAAAhK,IACAwN,GAAA,MACK,CACL,GAAAvP,GAAAvC,EAAAwP,SAAAxJ,EAAA1B,GACAe,EAAAyM,EAAA,GAAAE,QAAA,MAAAzP,EAAA,OAAAA,EACA+N,EAAAtQ,EAAAoH,gBAAA/B,EAAAf,GACA2N,EAAA3B,EAAAhJ,UAKA,IAJA2K,IACA3B,EAAAtQ,EAAAoH,gBAAA/B,EAAA5C,EAAAzC,EAAAiG,YAAA,IACAgM,EAAA3B,EAAAhJ,aAEA2K,GAAApD,EAAA7O,EAAAI,iBAAAkQ,EAAAtK,OAAAsK,EAAAhM,MACA,MAAAxE,GAAAI,IACAF,GAAAkS,aAAA5B,EAAAtK,OAAAsK,EAAAhM,MAEAwN,IACA9R,EAAAgB,MAAA+Q,oBAAA/R,EAAAgN,IAAAlK,KAgBA,IAAAqP,GAAAtB,EAAA,sBACAD,GAAA/L,EAAAsN,EAAA,sCAAAnS,GAAiFuO,EAAAvO,GAAA,IACjF4Q,EAAA/L,EAAAsN,EAAA,wCAAAnS,GAAmFuO,EAAAvO,EAAA,GAQnF,IAAAkP,GAAA,QAqBA0B,GAAA/L,EAAA,SAAAkM,EAAA,iCAAA/Q,GACA8O,EAAA9O,MAAAoO,YAAA,cAEAwC,EAAA/L,EAAA,SAAAkM,EAAA,uCAAA/Q,GACA,IAAA8O,EAAA9O,GAAA,MAAAF,GAAAI,MAGA0Q,EAAA/L,EAAAkM,EAAA,6BAAA/Q,GACAA,EAAAuN,mBAAA,SAAAC,GACA,GAAAjJ,GAAAvE,EAAAgP,eAAAxB,EAAA9M,KAAA,EACA,IAAA6D,GAAA,GAAAzE,EAAAkQ,OAAAzL,EAAA9D,IAAA+M,EAAA9M,MAAA,MAAA6D,GAAA9D,GACA,IAAA4D,GAAArE,EAAAgP,eAAAxB,EAAA9M,MAAA,EACA,OAAA2D,IAAA5B,EAAA4B,EAAA5D,IAAAiC,KAAA2B,EAAA5D,IAAAmB,GAAA,IAAA4L,EAAA9M,OAIA,IAAA0R,GAAAvB,EAAA,yBAEAD,GAAA/L,EAAAuN,EAAA,6BAAApS,GACA,GAAAA,EAAA8N,aAAA,MAAAhO,GAAAI,IAEA,QADAC,GAAAH,EAAAI,iBAAAiS,KAAAlE,EAAAnO,EAAAiG,YAAA,EAAAqM,KACAhS,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAkN,GAAArN,EAAAG,GAAA0F,EAAAwH,EAAAxH,OAAAtD,KAAA,EAAA4B,EAAAkJ,EAAAlJ,KAAA5B,IACA4P,GAAA1H,MAAoB/H,OAAAJ,EAAA+K,EAAA3K,OAAAH,KAAA,EAAA8K,EAAA3K,OAAAjB,IACpBlB,KAAA+B,EAAA+K,EAAA9M,KAAAgC,KAAA,EAAA8K,EAAA9M,KAAAkB,MACA,GAAA4L,EAAAlJ,KAAA1C,IAAA4L,EAAAhN,WAAA8D,EACA0B,EAAAmI,EAAAkE,EAAAzH,KAAA5E,EAAA1B,GACA+N,EAAA9R,SAAA8R,IAAA9R,OAAA,GAAA+D,GACA6J,EAAA7J,EAEAtE,EAAA+N,UAAA,WACA,OAAAzN,GAAA,EAAqBA,EAAA+R,EAAA9R,OAAwBD,GAAA,GAC7C,GAAA0F,GAAAqM,EAAA/R,GAAAgE,EAAA+N,EAAA/R,EAAA,GACAoC,EAAA1C,EAAAsD,QAAA0C,EACAhG,GAAA4C,aAAA,GAAAH,EAAAuD,EAAA,GAAAvD,EAAAuD,EAAA,kBACA1B,EAAAtE,EAAAgE,WACAhE,EAAA4C,aAAA,KAAAF,EAAAD,EAAAzC,EAAAgE,YAAA,kBAEAhE,EAAA4C,aAAAF,EAAA,KAAAD,EAAA6B,EAAA,qBAEAtE,EAAA+C,cAAAuP,GACAtS,EAAAuS,oBAIA3B,EAAA/L,EAAAuN,EAAA,iCAAApS,GACA,GAAAA,EAAA8N,aAAA,MAAAhO,GAAAI,IAEA,QADAC,GAAAH,EAAAI,iBAAAiS,KAAAlE,EAAAnO,EAAAgE,WAAA,EACA1D,EAAAH,EAAAI,OAAA,EAAmCD,GAAA,EAAQA,IAAA,CAC3C,GAAAkN,GAAArN,EAAAG,GAAA0F,EAAAwH,EAAAlJ,KAAA5B,KAAA,EAAA4B,EAAAkJ,EAAAxH,OAAAtD,IACA,IAAA8K,EAAAlJ,KAAA1C,IAAA4L,EAAAhN,SAAAwF,IACAA,EAAAmI,EAAAkE,EAAAzH,KAAA5E,EAAA1B,GACA+N,EAAA9R,SAAA8R,IAAA9R,OAAA,GAAA+D,GACA6J,EAAA7J,EAEAtE,EAAA+N,UAAA,WACA,OAAAzN,GAAA+R,EAAA9R,OAAA,EAA0CD,GAAA,EAAQA,GAAA,GAClD,GAAA0F,GAAAqM,EAAA/R,GAAAgE,EAAA+N,EAAA/R,EAAA,GACAoC,EAAA1C,EAAAsD,QAAA0C,EACAA,IAAAhG,EAAAgE,WACAhE,EAAA4C,aAAA,GAAAH,EAAAuD,EAAA,GAAAvD,EAAAuD,GAAA,aAEAhG,EAAA4C,aAAA,GAAAH,EAAAuD,EAAA,GAAAvD,EAAAuD,EAAA,kBACAhG,EAAA4C,aAAAF,EAAA,KAAAD,EAAA6B,EAAA,qBAEAtE,EAAAuS,oBAIA3B,EAAA/L,EAAAkM,EAAA,uCAAA/Q,GACAA,EAAAwS,eAAsBlQ,QAAA,KAGtBsO,EAAA/L,EAAAkM,EAAA,2BAAA/Q,GAEA,OADAG,GAAAH,EAAAI,iBAAAqS,KACAnS,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CAGtC,IAFA,GAAAkN,GAAArN,EAAAG,GAAA0F,EAAAwH,EAAAxH,OACA7C,EAAA6C,EAAAtD,KAAAf,EAAA6L,EAAAlJ,KAAA5B,KACApC,EAAAH,EAAAI,OAAA,GAAAJ,EAAAG,EAAA,GAAA0F,OAAAtD,MAAAf,GACAA,EAAAxB,IAAAG,GAAAgE,KAAA5B,IACA+P,GAAA7H,MAAmBzH,QAAAxB,MAAAkB,QAAA2K,EAAAhN,SAAAwF,IAEnBhG,EAAA+N,UAAA,WAEA,OADA2E,GAAA,EAAAvS,KACAG,EAAA,EAAqBA,EAAAmS,EAAAlS,OAAmBD,IAAA,CAGxC,OADAI,GADAiS,EAAAF,EAAAnS,GACAuC,EAAA8P,EAAA9P,QAAAJ,EAAAkQ,EAAA9P,OAAAH,KAAAgQ,EAAAC,EAAA9P,OAAAjB,IACAc,EAAAiQ,EAAAxP,MAAkCT,GAAAiQ,EAAAhR,IAAiBe,IAAA,CACnD,GAAAkQ,GAAAlQ,EAAAgQ,CACAhQ,IAAAiQ,EAAAhR,MAAAjB,EAAA+B,EAAAmQ,EAAA5S,EAAAsD,QAAAsP,GAAArS,OAAA,IACAqS,EAAA5S,EAAAgE,aACAhE,EAAA4C,aAAA,IAAAH,EAAAmQ,GAAAnQ,EAAAmQ,EAAA,SAAAC,KAAA7S,EAAAsD,QAAAsP,EAAA,OAAArS,WACAmS,GAGAvS,EAAAyK,MAAqB/H,UAAAnC,WAErBV,EAAA+C,cAAA5C,EAAA,MAIAyQ,EAAA/L,EAAA,SAAAkM,EAAA,+BAAA/Q,GACAA,EAAA+N,UAAA,WAEA,OADA+E,GAAA9S,EAAAI,iBAAAG,OACAD,EAAA,EAAqBA,EAAAwS,EAAgBxS,IAAA,CACrC,GAAAkN,GAAAxN,EAAAI,iBAAAE,EACAkN,GAAAhN,QACAR,EAAA4C,aAAA5C,EAAAsD,QAAAkK,EAAA9M,KAAAgC,MAAA,KAAAD,EAAA+K,EAAA9M,KAAAgC,KAAA,IAEA1C,EAAA4C,aAAA5C,EAAAwP,SAAAhC,EAAAxH,OAAAwH,EAAAlJ,MAAAkJ,EAAAxH,QAEAhG,EAAAuS,oBAIA1B,IAAAhM,EAAAkM,EAAA,uBAsCAH,EAAA/L,EAAA,yBAAA7E,GAAgDmP,EAAAnP,GAAA,IAChD4Q,EAAA/L,EAAAkM,EAAA,uCAAA/Q,GAAkEmP,EAAAnP,GAAA,IAElE4Q,EAAA/L,EAAA,4BAAA7E,GACA,GAAA+S,GAAA/S,EAAAgB,MAAAgS,gBACA,IAAAD,EAAA,KAAAA,EAAAxS,QAAA,CACA,GAAA0S,GAAAF,EAAArF,QACAuE,EAAAgB,EAAAC,MACA,IAAAjB,EAEA,MADAc,GAAAnI,KAAAqI,GACAjT,EAAAwQ,aAAAyB,EAAAjM,KAAAiM,EAAA3N,MAKAsM,EAAA/L,EAAA,qCAAA7E,GACA,GAAA+S,GAAA/S,EAAAgB,MAAAgS,gBACA,IAAAD,EAAA,KAAAA,EAAAxS,QAAA,CACAwS,EAAAI,QAAAJ,EAAAK,MACA,IAAAnB,GAAAc,IAAAxS,OAAA,GAAA2S,MACA,IAAAjB,EAGA,MAAAjS,GAAAwQ,aAAAyB,EAAAjM,KAAAiM,EAAA3N,GAFAyO,GAAAK,QAMAxC,EAAA/L,EAAAkM,EAAA,iCAAA/Q,GAGA,OAFAG,GAAAH,EAAAI,iBACA2S,EAAA/S,EAAAgB,MAAAgS,mBAAAhT,EAAAgB,MAAAgS,qBACA1S,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CAGtC,OAFA0F,GAAA7F,EAAAG,GAAA0F,OAAA1B,EAAAnE,EAAAG,GAAAgE,KACA2N,EAAAjS,EAAAqT,UAAArN,EAAA1B,GACAgP,EAAA,EAAqBA,EAAArB,EAAA1R,OAAkB+S,IACvC,GAAArB,EAAAqB,GAAAC,gBAAA,CACAtB,EAAAqB,GAAAvL,OACA,QAAAyL,GAAA,EAAyBA,EAAAT,EAAAxS,OAAkBiT,IAC3CT,EAAAS,IAAAvB,EAAAqB,IACAP,EAAA7L,OAAAsM,IAAA,EACA,OAGAF,GAAArB,EAAA1R,QACAwS,EAAAnI,KAAA5K,EAAAyT,SAAAzN,EAAA1B,GAA0CiP,iBAAA,EAAAG,gBAAA,OAI1C9C,EAAA/L,EAAA,SAAAkM,EAAA,iCAAA/Q,GACA,GAAA+S,GAAA/S,EAAAgB,MAAAgS,gBACA,IAAAD,EAAA,OAAAzS,GAAA,EAA8BA,EAAAyS,EAAAxS,OAAkBD,IAAAyS,EAAAzS,GAAAyH,OAChDgL,GAAAxS,OAAA,GAGAqQ,EAAA/L,EAAA,sCAAA7E,GACA,GAAA+S,GAAA/S,EAAAgB,MAAAgS,iBAAA7S,IACA,IAAA4S,EAAA,OAAAzS,GAAA,EAA8BA,EAAAyS,EAAAxS,OAAkBD,IAAA,CAChD,GAAA2R,GAAAc,EAAAzS,GAAA4S,MACAjB,GAGA9R,EAAAyK,MAAqB/H,OAAAoP,EAAAjM,KAAAtF,KAAAuR,EAAA3N,KAFrByO,EAAA7L,OAAA5G,IAAA,GAIAH,EAAAI,QACAP,EAAA+C,cAAA5C,EAAA,IAGA0E,EAAA,oBAEA,IAAA8O,GAAA5C,EAAA,IAqBAlM,GAAA8O,EAAA5C,EAAA,2BAEAH,EAAA/L,EAAA,qCAAA7E,GACA,GAAAA,EAAAmR,oBAAA,MAAArR,GAAAI,IAEAF,GAAA+N,UAAA,WAIA,OAHA6F,GAAA5T,EAAAI,iBACAyT,EAAA7T,EAAAC,UAAA,cAEAK,EAAAsT,EAAArT,OAAA,EAAsCD,GAAA,EAAQA,IAAA,CAC9C,GAAA6G,GAAAyM,EAAAtT,GAAAI,KACAoT,EAAA9T,EAAAwP,UAAyC9M,KAAAyE,EAAAzE,KAAAd,GAAA,GAAyBuF,GAClE4M,EAAAjU,EAAAkU,YAAAF,EAAA,KAAA9T,EAAAC,UAAA,YAGAgU,EAAAjU,EAAAkU,SAAA/M,GAAA,YAEA,IAAA2M,IAAA,KAAA7R,KAAA6R,IAAAC,EAAAF,GAAA,GACA,GAAAM,GAAA,GAAA1R,GAAA0E,EAAAzE,KACA5C,EAAAsU,WAAAN,EAAAC,EAAAF,KAGAM,GAAAvS,IAAAuF,EAAAvF,KAAAqS,EAAAE,GAGAnU,EAAA4C,aAAA,GAAAqR,EAAA9M,EAAA,eAKAyJ,EAAA/L,EAAA8O,EAAA5C,EAAA,8BAAA/Q,GACAA,EAAA+N,UAAA,WAEA,OADA5N,GAAAH,EAAAI,iBACAE,EAAAH,EAAAI,OAAA,EAAqCD,GAAA,EAAQA,IAC7CN,EAAA4C,aAAA,GAAAzC,EAAAG,GAAAuC,OAAAJ,EAAAtC,EAAAG,GAAAgE,KAAA5B,MAAA,UACA1C,GAAAuS,oBAIA3B,EAAA/L,EAAA8O,EAAA5C,EAAA,gCAAA/Q,GACA8P,EAAA9P,EAAA,SAAAqU,GAA6C,MAAAA,GAAAhH,iBAE7CuD,EAAA/L,EAAA8O,EAAA5C,EAAA,kCAAA/Q,GACA8P,EAAA9P,EAAA,SAAAqU,GAA6C,MAAAA,GAAAtS,iBAG7C6O,EAAA/L,EAAA8O,EAAA5C,EAAA,oCAAA/Q,GACAA,EAAAgB,MAAAsT,aAAAtU,EAAAgB,MAAAsT,YAAAvM,QACA/H,EAAAgB,MAAAsT,YAAAtU,EAAAuU,YAAAvU,EAAAkQ,cAEAU,EAAA/L,EAAA8O,EAAA5C,EAAA,qCAAA/Q,GACA,GAAAiS,GAAAjS,EAAAgB,MAAAsT,aAAAtU,EAAAgB,MAAAsT,YAAApB,MACAjB,IAAAjS,EAAAwQ,aAAAxQ,EAAAkQ,YAAA+B,IAEArB,EAAA/L,EAAA8O,EAAA5C,EAAA,qCAAA/Q,GACA,GAAAiS,GAAAjS,EAAAgB,MAAAsT,aAAAtU,EAAAgB,MAAAsT,YAAApB,MACA,IAAAjB,EAAA,CACA,GAAAjM,GAAAhG,EAAAkQ,YAAA5L,EAAA2N,CACA,IAAAnS,EAAAkQ,OAAAhK,EAAA1B,GAAA,GAA4C,GAAAkQ,GAAAlQ,CAAcA,GAAA0B,EAAWA,EAAAwO,EACrExU,EAAAgB,MAAAyT,cAAAzU,EAAAwP,SAAAxJ,EAAA1B,GACAtE,EAAA4C,aAAA,GAAAoD,EAAA1B,KAGAsM,EAAA/L,EAAA8O,EAAA5C,EAAA,qCAAA/Q,GACA,GAAAiS,GAAAjS,EAAAgB,MAAAsT,aAAAtU,EAAAgB,MAAAsT,YAAApB,MACAjB,KACAjS,EAAAgB,MAAAsT,YAAAvM,QACA/H,EAAAgB,MAAAsT,YAAAtU,EAAAuU,YAAAvU,EAAAkQ,aACAlQ,EAAA0U,UAAAzC,KAGArB,EAAA/L,EAAA8O,EAAA5C,EAAA,6BAAA/Q,GACA,MAAAA,EAAAgB,MAAAyT,eACAzU,EAAA2U,iBAAA3U,EAAAgB,MAAAyT,cAAA,eAGA5P,EAAA8O,EAAA5C,EAAA,sBACAH,EAAA/L,EAAA8O,EAAA5C,EAAA,8BAAA/Q,GACA,GAAAS,GAAAT,EAAA4U,aAAA,aACA5U,GAAAwR,SAAA,MAAA/Q,EAAA6Q,IAAA7Q,EAAAoU,QAAA,EAAA7U,EAAAkR,gBAAAK,aAAA,GAGA,IAAAuD,GAAAjE,EAAA,yBACAD,GAAA/L,EAAAiQ,EAAA,oCAAA9U,GACAA,EAAA+N,UAAA,WAEA,OADA5N,GAAAH,EAAAI,iBACAE,EAAA,EAAqBA,EAAAH,EAAAI,OAAmBD,IAAA,CACxC,GAAAkN,GAAArN,EAAAG,EACAkN,GAAA9M,KAAAgC,KAAA1C,EAAAiG,aACAjG,EAAAkS,aAAAzP,EAAA+K,EAAA9M,KAAAgC,KAAA,EAAA8K,EAAA9M,KAAAkB,SAIAgP,EAAA/L,EAAAiQ,EAAA,wCAAA9U,GACAA,EAAA+N,UAAA,WAEA,OADA5N,GAAAH,EAAAI,iBACAE,EAAA,EAAqBA,EAAAH,EAAAI,OAAmBD,IAAA,CACxC,GAAAkN,GAAArN,EAAAG,EACAkN,GAAA9M,KAAAgC,KAAA1C,EAAAgE,YACAhE,EAAAkS,aAAAzP,EAAA+K,EAAA9M,KAAAgC,KAAA,EAAA8K,EAAA9M,KAAAkB,SAiCAgP,EAAA/L,EAAAkM,EAAA,4BAAA/Q,GAAuDmQ,EAAAnQ,GAAA,IACvD4Q,EAAA/L,EAAA,SAAAkM,EAAA,oCAAA/Q,GAA0EmQ,EAAAnQ,GAAA,IAC1E4Q,EAAA/L,EAAA,mCAAA7E,GACA,GAAAqQ,GAAAJ,EAAAjQ,EACA,IAAAqQ,EAAA,CAIA,IAHA,GAAAC,GAAAtQ,EAAAoH,gBAAAiJ,EAAAhL,OACAa,KACA6O,GAAA,EACAzE,EAAAhJ,YACApB,EAAA0E,MAAoB/H,OAAAyN,EAAAtK,OAAAtF,KAAA4P,EAAAhM,OACpBgM,EAAAtK,OAAAtD,MAAA2N,EAAArK,KAAAtD,MAAA4N,EAAAtK,OAAApE,IAAAyO,EAAArK,KAAApE,IACAmT,GAEA/U,GAAA+C,cAAAmD,EAAA6O,KAGAlQ,EAAA,SAAAkM,EAAA,YACAlM,EAAA,SAAAkM,EAAA,cACAlM,EAAA8O,EAAA5C,EAAA,KAAAlM,EAAA8O,EAAA5C,EAAA,iBAEAlM,EAAAkM,EAAA,uBACAlM,EAAA,SAAAkM,EAAA,8BACAlM,EAAAkM,EAAA,eACAlM,EAAA,cACAA,EAAA,uBAEA/E,EAAAkV,gBAAAnQ,MPsdMoQ,KACA,SAAUvV,EAAQwI,EAAqBtI,GAE7C,YACqB,IAAIsV,GAA8DtV,EAAoB,QAClFuV,EAAsEvV,EAAoByM,EAAE6I,GAC5FE,EAAkDxV,EAAoB,QACtEyV,EAAsCzV,EAAoB,QAC1D0V,EAA8C1V,EAAoByM,EAAEgJ,GACpEE,EAA+C3V,EAAoB,QACnE4V,EAAqC5V,EAAoB,OA+BrDsI,GAAuB,GAClDwD,KAAM,WACJ,OACEnC,SQpkCN,GRqkCMU,iBQpkCN,ERqkCMwL,kBQjkCN7J,QAAAuJ,KRskCIlM,UAAW,WQrkCf,GAAAyM,GAAAlQ,IRwkCM,IAAsB,KAAlBA,KAAK+D,SQrkCf,YRskCQ/D,KAAKiQ,gBAGPjQ,MAAKyE,iBQvkCX,ERwkCM0L,QAAQC,IQvkCd,cRwkCM,IAAIC,GQvkCVN,EAAA,WRykCM/P,MAAKiQ,gBACLH,EAA4C5F,EAAEoG,KAAKD,GACjDxF,OQvkCR,URwkCQ0F,QAAWvQ,KQvkCnB+D,SRwkCQvH,KQvkCR,UAHAgU,KAAA,SAAAC,GR4kC4C,IAAhCA,EAASvK,KAAKwK,OAAO3V,OACvBmV,EAAMD,eAAkBpL,MAAO,cAAkEqL,EQvkC3GnM,SAAA,QRykCUmM,EAAMD,aAAeQ,EAASvK,KQvkCxCwK,ORykCQR,EAAMzL,iBQvkCd,GRwkCS,SAAUgM,GACXN,QAAQC,IQvkChBK,GRwkCQP,EQvkCRzM,eR0kCIP,sBAAuB,SAA+BD,GACpDjD,KAAK2Q,WAAW,GAAIf,GAAiE,GACnFjL,GQtkCR1B,KRwkCMjD,KAAK4Q,QAAQxL,KQvkCnB,mBRykCKhL,EAAoBU,EAAEkV,EAAyD,IAChFW,WQrkCJ,mBR2kCME,KACA,SAAU3W,EAAQwI,EAAqBtI,GAE7C,YSxpCA,SAAA0W,GAAAC,GACA3W,EAAA,QTwpCA4W,OAAOC,eAAevO,EAAqB,cAAgBkB,OAAO,GAC7C,IAAIsN,GAA2H9W,EAAoB,QS1pCxK+W,EAAA/W,EAAA,QAGAgX,EAAAhX,EAAA,QAMAiX,EAAAP,EAKAQ,EAAAF,EACAF,EAAA,EACAC,EAAA,EACAE,EANA,kBAEA,KASA3O,GAAA,QAAA4O,EAAA,STiqCMC,KACA,SAAUrX,EAAQC,EAASC,IU7qCjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,QAAAA,EAAA,UAKC,SAAAE,GACD,YAEA,SAAAkX,GAAA3R,EAAA4R,GAMA,MALA,gBAAA5R,GACAA,EAAA,GAAA2M,QAAA3M,EAAA6R,QAAA,sCAAqD,QAAAD,EAAA,UACrD5R,EAAA8R,SACA9R,EAAA,GAAA2M,QAAA3M,EAAA+R,OAAA/R,EAAAgS,WAAA,YAEYC,MAAA,SAAAC,GACZlS,EAAAmS,UAAAD,EAAA9W,GACA,IAAAwG,GAAA5B,EAAAwN,KAAA0E,EAAArV,OACA,IAAA+E,KAAA+C,OAAAuN,EAAA9W,IAEA,MADA8W,GAAA9W,KAAAwG,EAAA,GAAA1G,QAAA,EACA,WACO0G,GACPsQ,EAAA9W,IAAAwG,EAAA+C,MAEAuN,EAAAE,cAKA,QAAAC,KACAlS,KAAAmS,QAAAnS,KAAAoS,MAAApS,KAAAqS,UAAArS,KAAAH,MAAA,KACAG,KAAAsS,QAAA,KAGA,QAAAC,GAAA/X,GACA,MAAAA,GAAAgB,MAAAgX,SAAAhY,EAAAgB,MAAAgX,OAAA,GAAAN,IAGA,QAAAO,GAAA5S,GACA,sBAAAA,SAAAtD,cAGA,QAAAqF,GAAApH,EAAAqF,EAAA5E,GAEA,MAAAT,GAAAoH,gBAAA/B,EAAA5E,GAA2C6E,SAAA2S,EAAA5S,GAAA6S,WAAA,IAG3C,QAAAC,GAAAnY,EAAAuC,EAAA6V,EAAAC,EAAAC,GACAtY,EAAAuY,WAAAhW,EAAA8V,GACAjP,MAAAgP,EACAI,mBAAA,EACAC,cAAA,EACAC,QAAA,WAA2BC,EAAA3Y,IAC3BsY,cAIA,QAAAM,GAAA5Y,EAAAuC,EAAAsW,EAAAT,EAAAU,GACA9Y,EAAAuY,WAAAvY,EAAAuY,WAAAhW,EAAAuW,GAA+C1P,MAAAgP,EAAAI,mBAAA,IAC/CM,EAAAC,OAAAF,EAAAT,IAGA,QAAAY,GAAAhZ,EAAAuC,EAAAsW,EAAAI,GACAjZ,EAAAkZ,YAAAlZ,EAAAkZ,YAAA3W,EAAA0W,GACAlN,QAAA8M,IAAAI,EAAA,KAGA,QAAAE,GAAAjX,GACA,MAAAA,GAAAgV,QAAA,kBAAAkC,EAAAxX,GACA,WAAAA,EAAA,KACA,KAAAA,EAAA,KACAA,IAIA,QAAAyX,GAAAhU,GACA,GAAAiU,GAAAjU,EAAA4B,MAAA,qBACA,IAAAqS,EACA,IAAWjU,EAAA,GAAA2M,QAAAsH,EAAA,OAAAA,EAAA,GAAAlX,QAAA,aACX,MAAAuB,QAEA0B,GAAA8T,EAAA9T,EAIA,QAFA,gBAAAA,GAAA,IAAAA,IAAApD,KAAA,OACAoD,EAAA,MACAA,EAMA,QAAAkU,GAAAvZ,EAAAgB,EAAAqE,GACArE,EAAAwY,UAAAnU,EACArE,EAAAqE,MAAAgU,EAAAhU,GACArF,EAAAyZ,cAAAzY,EAAA8W,QAAAG,EAAAjX,EAAAqE,QACArE,EAAA8W,QAAAd,EAAAhW,EAAAqE,MAAA4S,EAAAjX,EAAAqE,QACArF,EAAA0Z,WAAA1Y,EAAA8W,SACA9X,EAAA2Z,yBACA3Y,EAAA4Y,WAA2B5Y,EAAA4Y,SAAA7R,QAAwB/G,EAAA4Y,SAAA,MACnD5Y,EAAA4Y,SAAA5Z,EAAA2Z,uBAAA3Y,EAAAqE,MAAA4S,EAAAjX,EAAAqE,SAIA,QAAAwU,GAAA7Z,EAAA8Z,EAAAC,EAAAC,GACA,GAAAhZ,GAAA+W,EAAA/X,EACA,IAAAgB,EAAAqE,MAAA,MAAAiC,GAAAtH,EAAA8Z,EACA,IAAAG,GAAAja,EAAAka,gBAAAlZ,EAAA6W,SACA,IAAAkC,GAAA/Z,EAAAuY,WAAA,CACA,GAAA4B,GAAA,KACAC,EAAA,SAAA/U,EAAAgV,GACAva,EAAAwa,OAAAD,GACAhV,IACAA,GAAArE,EAAAwY,YACAD,EAAAvZ,EAAAgB,EAAAqE,GACArE,EAAA2W,QAAA3W,EAAA4W,MAAA5X,EAAAkQ,aAEAiK,MAAAI,MAAAC,QAAA,GACAlT,EAAAtH,EAAAqa,EAAAI,SAAA,SAAArB,EAAA9U,GACA,GAAAsU,EACAtU,GAAA5B,KAAA,GAAAgY,SAAAC,gBACA/B,EAAA5Y,EAAAyN,QAAAmN,QAAAD,cAAA,wBACA/B,EAAAiC,wBAAAhG,OAAA,EAAA7U,EAAA4U,aAAAtQ,EAAA,UAAAgN,OACA6I,EAAAvB,GAAA2B,MAAAC,QAAA,OAGArC,GAAAnY,EAAA8a,EAAAb,EAAAG,EAAA,SAAAC,EAAAhV,GACA,GAAA0V,GAAAjb,EAAAib,QAAAV,GACAW,EAAAhb,EAAAC,UAAA,aAAAgb,EAAAD,KAAAD,IAAAjb,EAAA2Q,OAAAzQ,EAAAC,UAAA,WAAA8a,EACA,aAAAE,GAAA,YAAAA,GACA,sBAAAA,GAAA,sBAAAA,GACAnb,EAAAwa,OAAAD,GACAd,EAAAvZ,EAAA+X,EAAA/X,GAAAqF,GACArF,EAAAoO,YAAA6M,IACS,QAAAA,GAAA,kBAAAA,IACTnb,EAAAwa,OAAAD,GACAD,EAAA/U,EAAAgV,MAGAL,GAAAC,IACAV,EAAAvZ,EAAAgB,EAAAiZ,GACA3S,EAAAtH,EAAA8Z,QAGAlB,GAAA5Y,EAAA8a,EAAA,cAAAb,EAAA,SAAA5U,GACAA,IAAArE,EAAAqE,OAAArF,EAAA+N,UAAA,WACAwL,EAAAvZ,EAAAgB,EAAAqE,GACArE,EAAA2W,QAAA3W,EAAA4W,MAAA5X,EAAAkQ,YACA5I,EAAAtH,EAAA8Z,OAMA,QAAAxS,GAAAtH,EAAA8Z,EAAAzQ,GAAwCrJ,EAAA+N,UAAA,WACxC,GAAA/M,GAAA+W,EAAA/X,GACAmH,EAAAC,EAAApH,EAAAgB,EAAAqE,MAAAyU,EAAA9Y,EAAA2W,QAAA3W,EAAA4W,QACAzQ,EAAA+L,KAAA4G,KACA3S,EAAAC,EAAApH,EAAAgB,EAAAqE,MAAAyU,EAAAha,EAAA2C,IAAAzC,EAAAgE,YAAAlE,EAAA2C,IAAAzC,EAAAiG,YAAA,IACAkB,EAAA+L,KAAA4G,OAEA9Z,EAAAwQ,aAAArJ,EAAAnB,OAAAmB,EAAA7C,MACAtE,EAAAuS,gBAAuBvM,KAAAmB,EAAAnB,OAAA1B,GAAA6C,EAAA7C,MAAqC,IAC5DtD,EAAA2W,QAAAxQ,EAAAnB,OAAkChF,EAAA4W,MAAAzQ,EAAA7C,KAClC+E,KAAAlC,EAAAnB,OAAAmB,EAAA7C,SAGA,QAAAqU,GAAA3Y,GAA4BA,EAAA+N,UAAA,WAC5B,GAAA/M,GAAA+W,EAAA/X,EACAgB,GAAA6W,UAAA7W,EAAAqE,MACArE,EAAAqE,QACArE,EAAAqE,MAAArE,EAAAwY,UAAA,KACAxZ,EAAAyZ,cAAAzY,EAAA8W,SACA9W,EAAA4Y,WAAyB5Y,EAAA4Y,SAAA7R,QAAwB/G,EAAA4Y,SAAA,SAQjD,QAAAsB,GAAAlb,EAAAqF,EAAA9C,GACAvC,EAAA+N,UAAA,WACA,OAAA5G,GAAAC,EAAApH,EAAAqF,GAAmD8B,EAAAG,YACnD,mBAAAjC,GAAA,CACA,GAAA4B,GAAAjH,EAAAwP,SAAArI,EAAAnB,OAAAmB,EAAA7C,MAAA2C,MAAA5B,EACA8B,GAAA+P,QAAA3U,EAAA2U,QAAA,mBAAAkC,EAAA9Y,GAAiE,MAAA2G,GAAA3G,UACxD6G,GAAA+P,QAAA3U,KAKT,QAAA2U,GAAAlX,EAAAmb,GACA,IAAAnb,EAAAC,UAAA,aACA,GAAAoF,GAAArF,EAAAka,gBAAAnC,EAAA/X,GAAA6X,UACAuD,EAAA,0CAAAD,EAAA,oCACAvC,GAAA5Y,EAAAob,EAAAC,EAAAD,EAAA/V,EAAA,SAAAA,GACAA,IACAA,EAAAgU,EAAAhU,GACAuT,EAAA5Y,EAAAsb,EAAA,4BAAA/Y,GAEA,GADAA,EAAA4W,EAAA5W,GACA4Y,EACAD,EAAAlb,EAAAqF,EAAA9C,OACS,CACToW,EAAA3Y,EACA,IAAAmH,GAAAC,EAAApH,EAAAqF,EAAArF,EAAAkQ,UAAA,SACAqL,EAAA,WACA,GAAAtU,GAAA9D,EAAAgE,EAAAnB,SACAiB,EAAAE,EAAAG,cACAH,EAAAC,EAAApH,EAAAqF,KACA4B,EAAAE,EAAAG,aACAnE,GAAAgE,EAAAnB,OAAAtD,MAAAS,EAAAT,MAAAyE,EAAAnB,OAAApE,IAAAuB,EAAAvB,MAEA5B,EAAAwQ,aAAArJ,EAAAnB,OAAAmB,EAAA7C,MACAtE,EAAAuS,gBAA+BvM,KAAAmB,EAAAnB,OAAA1B,GAAA6C,EAAA7C,OAC/B0U,EAAAhZ,EAAAwb,EAAA,YACA,WAAuCC,EAAAxU,IAAkBsU,EACzD,WAAuCL,EAAAlb,EAAAqF,EAAA9C,QAEvCkZ,EAAA,SAAAxU,GACAE,EAAA+P,QAAA,gBAAA7R,GAAA9C,EACAA,EAAA2U,QAAA,mBAAAkC,EAAA9Y,GAAmE,MAAA2G,GAAA3G,MACnEib,IAEAA,YAvIA,GAAAT,GACA,oOAsFAO,EACA,gLACAC,EAAA,8HACAE,EAAA,2IAmDA1b,GAAAmF,SAAAiO,KAAA,SAAAlT,GAA2C2Y,EAAA3Y,GAAgB6Z,EAAA7Z,IAC3DF,EAAAmF,SAAAyW,eAAA,SAAA1b,GAAqD2Y,EAAA3Y,GAAgB6Z,EAAA7Z,GAAA,OACrEF,EAAAmF,SAAA0W,mBAAA,SAAA3b,GAAyD6Z,EAAA7Z,GAAA,UACzDF,EAAAmF,SAAA2W,mBAAA,SAAA5b,GAAyD6Z,EAAA7Z,GAAA,UACzDF,EAAAmF,SAAAqC,SAAAuS,EACA/Z,EAAAmF,SAAA4W,SAAA,SAAA7b,GAA+C6Z,EAAA7Z,GAAA,IAC/CF,EAAAmF,SAAA0T,cACA7Y,EAAAmF,SAAAiS,UACApX,EAAAmF,SAAAiW,WAAA,SAAAlb,GAAiDkX,EAAAlX,GAAA,OVgsC3C8b,KACA,SAAUpc,EAAQC,EAASC,GAEjC,YWz6CA,SAAAmc,GAAAC,GACA,GAAAhO,GAAAgO,EAAAzb,MACA,IAAAyN,EAAA,IACA,SAAAiO,OAAA,iDAQA,aAAAD,EAAAhO,EAAA,WAAAgO,EAAAhO,EAAA,OAGA,QAAAkO,GAAAF,GAEA,SAAAA,EAAAzb,OAAA,EAAAwb,EAAAC,GAGA,QAAAG,GAAAH,GACA,GAAA1b,GAAA8b,EAAA5H,EAAA6H,EAAAC,EACAtO,EAAAgO,EAAAzb,MACA8b,GAAAN,EAAAC,GAEAM,EAAA,GAAAC,GAAA,EAAAvO,EAAA,EAAAqO,GAGAD,EAAAC,EAAA,EAAArO,EAAA,EAAAA,CAEA,IAAAwO,GAAA,CAEA,KAAAlc,EAAA,EAAaA,EAAA8b,EAAO9b,GAAA,EACpBkU,EAAAiI,EAAAT,EAAAU,WAAApc,KAAA,GAAAmc,EAAAT,EAAAU,WAAApc,EAAA,QAAAmc,EAAAT,EAAAU,WAAApc,EAAA,OAAAmc,EAAAT,EAAAU,WAAApc,EAAA,IACAgc,EAAAE,KAAAhI,GAAA,OACA8H,EAAAE,KAAAhI,GAAA,MACA8H,EAAAE,KAAA,IAAAhI,CAYA,OATA,KAAA6H,GACA7H,EAAAiI,EAAAT,EAAAU,WAAApc,KAAA,EAAAmc,EAAAT,EAAAU,WAAApc,EAAA,OACAgc,EAAAE,KAAA,IAAAhI,GACG,IAAA6H,IACH7H,EAAAiI,EAAAT,EAAAU,WAAApc,KAAA,GAAAmc,EAAAT,EAAAU,WAAApc,EAAA,OAAAmc,EAAAT,EAAAU,WAAApc,EAAA,OACAgc,EAAAE,KAAAhI,GAAA,MACA8H,EAAAE,KAAA,IAAAhI,GAGA8H,EAGA,QAAAK,GAAAC,GACA,MAAAC,GAAAD,GAAA,OAAAC,EAAAD,GAAA,OAAAC,EAAAD,GAAA,MAAAC,EAAA,GAAAD,GAGA,QAAAE,GAAAC,EAAA5Z,EAAAxB,GAGA,OAFA6S,GACAwI,KACA1c,EAAA6C,EAAqB7C,EAAAqB,EAASrB,GAAA,EAC9BkU,GAAAuI,EAAAzc,IAAA,KAAAyc,EAAAzc,EAAA,OAAAyc,EAAAzc,EAAA,GACA0c,EAAApS,KAAA+R,EAAAnI,GAEA,OAAAwI,GAAAC,KAAA,IAGA,QAAAC,GAAAH,GASA,OARAvI,GACAxG,EAAA+O,EAAAxc,OACA4c,EAAAnP,EAAA,EACAgP,EAAA,GACAI,KAIA9c,EAAA,EAAA+c,EAAArP,EAAAmP,EAA0C7c,EAAA+c,EAAU/c,GAHpD,MAIA8c,EAAAxS,KAAAkS,EAAAC,EAAAzc,IAJA,MAIA+c,IAAA/c,EAJA,OAuBA,OAfA,KAAA6c,GACA3I,EAAAuI,EAAA/O,EAAA,GACAgP,GAAAH,EAAArI,GAAA,GACAwI,GAAAH,EAAArI,GAAA,MACAwI,GAAA,MACG,IAAAG,IACH3I,GAAAuI,EAAA/O,EAAA,OAAA+O,EAAA/O,EAAA,GACAgP,GAAAH,EAAArI,GAAA,IACAwI,GAAAH,EAAArI,GAAA,MACAwI,GAAAH,EAAArI,GAAA,MACAwI,GAAA,KAGAI,EAAAxS,KAAAoS,GAEAI,EAAAH,KAAA,IA9GAtd,EAAAuc,aACAvc,EAAAwc,cACAxc,EAAAud,eAOA,QALAL,MACAJ,KACAF,EAAA,mBAAAe,uBAAAC,MAEAC,EAAA,mEACAld,EAAA,EAAA0N,EAAAwP,EAAAjd,OAAkCD,EAAA0N,IAAS1N,EAC3Cuc,EAAAvc,GAAAkd,EAAAld,GACAmc,EAAAe,EAAAd,WAAApc,KAGAmc,GAAA,IAAAC,WAAA,OACAD,EAAA,IAAAC,WAAA,QXkiDMe,KACA,SAAU/d,EAAQwI,EAAqBtI,GAE7C,YACqB,IAAI8d,GAAqE9d,EAAoB,QACzF+d,EAA6E/d,EAAoByM,EAAEqR,GACnGE,EAA8Dhe,EAAoB,QAClFie,EAAsEje,EAAoByM,EAAEuR,GAC5FE,EAAsEle,EAAoB,QAE1Fme,GAD8Ene,EAAoByM,EAAEyR,GAC9Cle,EAAoB,SAE1Eoe,GAD8Dpe,EAAoByM,EAAE0R,GACtBne,EAAoB,SAElFqe,GADsEre,EAAoByM,EAAE2R,GAClCpe,EAAoB,SAE9Ese,GADkEte,EAAoByM,EAAE4R,GAC5Bre,EAAoB,SAEhFue,GADoEve,EAAoByM,EAAE6R,GAC5Bte,EAAoB,SAElFwe,GADsExe,EAAoByM,EAAE8R,GAC3Bve,EAAoB,SAErFye,GADyEze,EAAoByM,EAAE+R,GACnCxe,EAAoB,SAEhF0e,GADoE1e,EAAoByM,EAAEgS,GACtBze,EAAoB,SAExF2e,GAD4E3e,EAAoByM,EAAEiS,GAC/B1e,EAAoB,SAEvF4e,GAD2E5e,EAAoByM,EAAEkS,GAClC3e,EAAoB,SAEnF6e,GADuE7e,EAAoByM,EAAEmS,GAC7B5e,EAAoB,SAEpF8e,GADwE9e,EAAoByM,EAAEoS,GACpC7e,EAAoB,SAE9E+e,GADkE/e,EAAoByM,EAAEqS,GAClD9e,EAAoB,SAC1Dgf,EAAgDhf,EAAoB,QACpEif,EAAuCjf,EAAoB,QAC3Dkf,EAA+Clf,EAAoByM,EAAEwS,EYz/C9Fjf,GAAA,QAGAA,EAAA,QAGAA,EAAA,QACAA,EAAA,QAGAA,EAAA,QACAA,EAAA,QACAA,EAAA,QAGAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QAGAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QAGAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QAGAA,EAAA,QAuBAsI,EAAA,GZ4lDEmD,OACE0T,QACE/c,KY1lDNgd,QZ2lDMzT,SYxlDN,IZ2lDEG,KAAM,WACJ,OACEuT,MACE5U,MY1lDR,GZ2lDQoC,YY1lDR,GZ2lDQD,MY1lDR,EZ2lDQtI,IY1lDR,GZ2lDQgb,QY1lDR,GZ2lDQC,MY1lDR,GZ2lDQnC,OY1lDR,GZ2lDQoC,mBYzlDR,MZ2lDMC,UACEC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,eAAe,EACfC,MAAM,EACNC,OAAO,EACPC,IAAI,EACJC,IAAI,EACJC,MAAM,EACNvC,MAAM,EACNwC,OAAO,EACPC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZC,SAAS,GAEXC,gBACEC,QY1lDR,EZ2lDQxf,KY1lDR,cZ2lDQyf,MY1lDR,UZ2lDQC,aY1lDR,EZ2lDQje,MY1lDR,EZ2lDQ+N,OY1lDR,UZ2lDQmQ,YY1lDR,EZ2lDQC,SAAU,yBY1lDlB,yBZ4lDQC,mBY1lDR,EZ2lDQC,2BAA6BC,UAAW,KAAMlb,mBY1lDtD,IZ6lDMmb,gBACER,QY1lDR,EZ2lDQxf,KY1lDR,cZ2lDQyf,MY1lDR,UZ2lDQC,aY1lDR,EZ2lDQje,MY1lDR,EZ2lDQ+N,OY1lDR,UZ2lDQmQ,YY1lDR,EZ2lDQC,SAAU,yBY1lDlB,yBZ4lDQC,mBY1lDR,EZ2lDQC,2BAA6BC,UAAW,KAAMlb,mBY1lDtD,IZ6lDMob,aY1lDNtC,EAAA,EZ2lDMuC,YAAavC,EAAoE,EY1lDvF,GZ2lDMwC,UY1lDNxC,EAAA,EZ2lDMyC,eAAgBzC,EAAiE,EY1lDvF,GZ2lDM0C,YY1lDN1C,EAAA,EZ2lDMpB,KY1lDN,GZ2lDM+D,UAAYnY,MAAO,IAAK7G,KAAM,IAAKif,YY1lDzC,IZ2lDMC,YAAcrY,MAAO,MAAO7G,KAAM,MAAOif,YY1lD/C,IZ2lDME,eAAiBtY,MAAO,SAAU7G,KAAM,KAAMif,YY1lDpD,IZ2lDMG,aAAevY,MAAO,OAAQ7G,KAAM,OAAQif,YY1lDlD,IZ2lDMI,eAAiBxY,MAAO,UAAW7G,KAAM,UAAWif,YY1lD1D,IZ2lDMK,WAAazY,MAAO,aAAc7G,KAAM,aAAcif,YY1lD5D,IZ2lDMM,aAAe1Y,MAAO,OAAQ7G,KAAM,OAAQif,YY1lDlD,IZ2lDMO,eAAiB3Y,MAAO,SAAU7G,KAAM,KAAMif,YYzlDpD,MAEA5V,QAAAiS,KZ4lDImE,KAAM,WACJxc,KY3lDNyc,gBZ4lDMzc,KAAKwG,MY3lDX,eZ6lDIkW,SAAU,WY3lDd,GAAAxM,GAAAlQ,KZ8lDU2c,EAASviB,EAAoB,QY7lDvCuiB,MZ+lDM3c,MY7lDN4c,aZ8lDM,IAAIC,GAAQ7c,KY7lDlB8c,kBZ8lDM3M,SAAQC,IY7lDdyM,EZsmDM,KAAK,GARDE,MAQKjiB,EAAI,EAAGA,EAAIkF,KAAKyZ,KAAKG,kBAAkB7e,OAAQD,KAN5C,SAAeA,GACzBiiB,EAAe3X,KAAKyX,EAAMnP,KAAK,SAAUnJ,GACvC,MAAOA,GAAKxH,OAASmT,EAAMuJ,KAAKG,kBY/lD1C9e,OADAA,EZwmDMqV,SAAQC,IAAIpQ,KYnmDlBuZ,QZqmDUvZ,KAAKuZ,QAEPpJ,QAAQC,IYpmDhB,QZqmDQpQ,KAAKgd,cAAcL,EYpmD3BI,IZumDQ/c,KAAKid,aAAaN,EYpmD1BI,IZumDIE,aAAc,SAAsBN,EAAQI,GYpmDhD,GAAAG,GAAAld,KZumDUqQ,EYtmDV+I,EAAA,aZumDME,GAA6CpP,EAAEoG,KAAKD,GAClDxL,MAAO7E,KAAKyZ,KYtmDpB5U,MZumDQoC,YAAajH,KAAKyZ,KYtmD1BxS,YZumDQD,MAAOhH,KAAKyZ,KAAKzS,MYtmDzB,GZumDQtI,IAAKsB,KAAKyZ,KYtmDlB/a,IZumDQgb,QAASiD,EAAOQ,OAAOnd,KAAKyZ,KYtmDpCC,SZumDQ1B,KAAMG,IYtmDd4E,GZumDQpD,MAAOgD,EAAOQ,OAAOnd,KAAKyZ,KYtmDlCE,OZumDQnC,OAAQmF,EAAOQ,OAAOnd,KAAKyZ,KYtmDnCjC,UARAhH,KAAA,SAAAC,GZgnDYA,EAASvK,KAAKkX,MAAQhE,EAA8D,GACtF8D,EAAOG,SACLxY,MYtmDZ,KZumDYyY,QAAS,UAA0C7M,EAASvK,KAAKwK,OAAO,GYtmDpF7L,MZumDYrI,KYrmDZ,YZwmDU0gB,EYtmDVT,gBZumDUS,EAAO1W,MYtmDjB,eZumDmBiK,EAASvK,KAAKkX,MAAQhE,EAA8D,GAC7F8D,EAAOG,SACLxY,MYtmDZ,OZumDYyY,QAAS,GAAK7M,EAASvK,KYtmDnCqX,MZumDY/gB,KYrmDZ,WZwmDS,SAAUiU,OAEfuM,cAAe,SAAuBL,EAAQI,GYtmDlD,GAAAS,GAAAxd,KZymDUqQ,EAAM+I,EAA+D,EAAI,aAAepZ,KAAKyd,QYxmDvG9Y,EZymDM2U,GAA6CpP,EAAEwT,IAAIrN,GACjDxL,MAAO7E,KAAKyZ,KYxmDpB5U,MZymDQoC,YAAajH,KAAKyZ,KYxmD1BxS,YZymDQD,MAAOhH,KAAKyZ,KAAKzS,MYxmDzB,GZymDQtI,IAAKsB,KAAKyZ,KYxmDlB/a,IZymDQgb,QAASiD,EAAOQ,OAAOnd,KAAKyZ,KYxmDpCC,SZymDQ1B,KAAMG,IYxmDd4E,GZymDQpD,MAAOgD,EAAOQ,OAAOnd,KAAKyZ,KYxmDlCE,OZymDQnC,OAAQmF,EAAOQ,OAAOnd,KAAKyZ,KYxmDnCjC,UARAhH,KAAA,SAAAC,GZknDYA,EAASvK,KAAKkX,MAAQhE,EAA8D,GACtFoE,EAAOH,SACLxY,MYxmDZ,KZymDYyY,QYxmDZ,SZymDY9gB,KYvmDZ,YZ0mDUghB,EYxmDVf,gBZymDUe,EAAOhX,MYxmDjB,eZymDmBiK,EAASvK,KAAKkX,MAAQhE,EAA8D,GAC7FoE,EAAOH,SACLxY,MYxmDZ,OZymDYyY,QAAS,GAAK7M,EAASvK,KYxmDnCqX,MZymDY/gB,KYvmDZ,WZ0mDS,SAAUiU,OAEfgM,cAAe,WAEbzc,KAAKyZ,KAAK5U,MYxmDhB,GZymDM7E,KAAKyZ,KAAKxS,YYxmDhB,GZymDMjH,KAAKyZ,KAAKzS,MYxmDhB,EZymDMhH,KAAKyZ,KAAK/a,IYxmDhB,GZymDMsB,KAAKyZ,KAAKC,QYxmDhB,GZymDM1Z,KAAKyZ,KAAKE,MYxmDhB,GZymDM3Z,KAAKyZ,KAAKjC,OYxmDhB,GZymDMxX,KAAKyZ,KAAKG,mBYxmDhB,KZymDM5Z,KAAKgY,KYxmDX,GZymDMhY,KAAK2b,YAAcvC,EAAoE,EYxmD7F,GZymDMpZ,KAAK6b,eAAiBzC,EAAiE,EYxmD7F,GZymDMpZ,KAAKyb,eAAehgB,KAAOuE,KAAK8b,YYxmDtC,GZymDM9b,KAAKyb,eAAeP,MAAQlb,KYxmDlC2b,YZymDM3b,KAAK+b,UAAanY,MAAO,IAAK7G,KAAM,IAAKif,YYxmD/C,IZymDMhc,KAAKic,YAAerY,MAAO,MAAO7G,KAAM,MAAOif,YYxmDrD,IZymDMhc,KAAKkc,eAAkBtY,MAAO,SAAU7G,KAAM,KAAMif,YYxmD1D,IZymDMhc,KAAKmc,aAAgBvY,MAAO,OAAQ7G,KAAM,OAAQif,YYxmDxD,IZymDMhc,KAAKoc,eAAkBxY,MAAO,UAAW7G,KAAM,UAAWif,YYxmDhE,IZymDMhc,KAAKqc,WAAczY,MAAO,aAAc7G,KAAM,aAAcif,YYxmDlE,IZymDMhc,KAAKsc,aAAgB1Y,MAAO,OAAQ7G,KAAM,OAAQif,YYxmDxD,IZymDMhc,KAAKuc,eAAkB3Y,MAAO,SAAU7G,KAAM,KAAMif,YYxmD1D,IZ0mDQhc,KAAK2d,iBAETC,qBAAsB,SAA8BpZ,GYxmDxD,GAAAqZ,GAAA7d,IZ4mDMmQ,SAAQC,IAAI,QY1mDlB5L,GZ2mDMxE,KAAKyb,eAAehgB,KAAOuE,KAAK8b,YY1mDtCtX,GZ2mDMxE,KAAK6b,eAAiB7b,KAAK4b,UY1mDjCpX,EZ4mDM,IAAIkM,GAAS1Q,KAAK8d,SAASpQ,KAAK,SAAUnJ,GACxC,MAAOA,IAAQA,EAAKxH,OAAS8gB,EY3mDrChC,gBZ8mDQ7b,MAAKgY,KADHtH,EACUA,EY5mDpBsL,YAEA,IZ+mDI+B,eAAgB,SAAwBC,GAEtC,GAAIA,EY5mDV,CZ8mDQhe,KY5mDR4c,aZ6mDQ,IAAIqB,GAAMje,KY5mDlB8c,kBZ+mDQ9c,MAAK2d,YY5mDbM,KZ+mDInB,iBAAkB,WAEhB,GAAIpM,KASJ,OARAA,GAAOtL,KAAKpF,KY5mDlB+b,UZ6mDMrL,EAAOtL,KAAKpF,KY5mDlBic,YZ6mDMvL,EAAOtL,KAAKpF,KY5mDlBkc,eZ6mDMxL,EAAOtL,KAAKpF,KY5mDlBmc,aZ6mDMzL,EAAOtL,KAAKpF,KY5mDlBoc,eZ6mDM1L,EAAOtL,KAAKpF,KY5mDlBqc,WZ6mDM3L,EAAOtL,KAAKpF,KY5mDlBsc,aZ6mDM5L,EAAOtL,KAAKpF,KY5mDlBuc,eACA7L,GZ8mDIkM,YAAa,WAEiB,MAAxB5c,KAAK6b,eACP7b,KAAK+b,SAASC,YAAchc,KY5mDpCgY,KZ6mDyC,QAAxBhY,KAAK6b,eACd7b,KAAKic,WAAWD,YAAchc,KY5mDtCgY,KZ6mDyC,OAAxBhY,KAAK6b,eACd7b,KAAKkc,cAAcF,YAAchc,KY5mDzCgY,KZ6mDyC,SAAxBhY,KAAK6b,eACd7b,KAAKmc,YAAYH,YAAchc,KY5mDvCgY,KZ6mDyC,YAAxBhY,KAAK6b,eACd7b,KAAKoc,cAAcJ,YAAchc,KY5mDzCgY,KZ6mDyC,eAAxBhY,KAAK6b,eACd7b,KAAKqc,UAAUL,YAAchc,KY5mDrCgY,KZ6mDyC,SAAxBhY,KAAK6b,eACd7b,KAAKsc,YAAYN,YAAchc,KY5mDvCgY,KZ6mDyC,OAAxBhY,KAAK6b,iBACd7b,KAAKuc,cAAcP,YAAchc,KY5mDzCgY,OZ+mDIkG,iBAAkB,WY5mDtB,GAAAC,GAAAne,IZ+mDMA,MY9mDNyc,eZgnDM,IAAI2B,GAAOhF,EAA+D,EAAI,aAAepZ,KAAKyd,QY9mDxG9Y,EZ+mDM2U,GAA6CpP,EAAEmU,IAAID,GAAM5N,KAAK,SAAUC,GAClEA,EAASvK,KAAKkX,MAAQhE,EAA8D,IACtF+E,EAAO1E,KAAK5U,MAAQ4L,EAASvK,KAAKwK,OAAO,GY9mDnD7L,MZ+mDUsZ,EAAO1E,KAAKxS,YAAcwJ,EAASvK,KAAKwK,OAAO,GY9mDzDzJ,YZ+mDUkX,EAAO1E,KAAKzS,MAAQyJ,EAASvK,KAAKwK,OAAO,GY9mDnD1J,MZ+mDUmX,EAAO1E,KAAK/a,IAAM+R,EAASvK,KAAKwK,OAAO,GY9mDjDhS,MZgnDS,SAAU+R,KACb,IAAI6N,GAAOlF,EAA+D,EAAI,aAAepZ,KAAKyd,QY9mDxG9Y,GAAA,QZ+mDM2U,GAA6CpP,EAAEmU,IAAIC,GAAM9N,KAAK,SAAUC,GAClEA,EAASvK,KAAKkX,MAAQhE,EAA8D,IACtFjJ,QAAQC,IAAImO,KAAKC,MAAM/N,EAASvK,KAAKwK,OAAO,GY9mDtDsH,OZ+mDUmG,EAAOR,YAAYY,KAAKC,MAAM/N,EAASvK,KAAKwK,OAAO,GY9mD7DsH,OZgnDUmG,EY9mDVM,mBZgnDS,SAAUhO,OAEfgO,eAAgB,WY9mDpB,GAAAC,GAAA1e,KZinDU2e,EAAQ3e,KAAK8d,SAASpQ,KAAK,SAAUnJ,GACvC,GAAIA,EACF,MYhnDV,MZgnDiBA,EAAKxH,MAGZ4hB,KACF3e,KAAK+b,SYhnDb4C,EZmnDM,IAAIC,GAAU5e,KAAK8d,SAASpQ,KAAK,SAAUnJ,GACzC,GAAIA,EACF,MYhnDV,QZgnDiBA,EAAKxH,MAGZ6hB,KACF5e,KAAKic,WYhnDb2C,EZmnDM,IAAIC,GAAa7e,KAAK8d,SAASpQ,KAAK,SAAUnJ,GAC5C,GAAIA,EACF,MYhnDV,OZgnDiBA,EAAKxH,MAGZ8hB,KACF7e,KAAKkc,cYhnDb2C,EZmnDM,IAAIC,GAAW9e,KAAK8d,SAASpQ,KAAK,SAAUnJ,GAC1C,GAAIA,EACF,MYhnDV,SZgnDiBA,EAAKxH,MAGZ+hB,KACF9e,KAAKmc,YYhnDb2C,EZknDM,IAAIC,GAAa/e,KAAK8d,SAASpQ,KAAK,SAAUnJ,GAC5C,GAAIA,EACF,MYhnDV,YZgnDiBA,EAAKxH,MAGZgiB,KACF/e,KAAKoc,cYhnDb2C,EZmnDM,IAAIC,GAAShf,KAAK8d,SAASpQ,KAAK,SAAUnJ,GACxC,GAAIA,EACF,MYhnDV,eZgnDiBA,EAAKxH,MAGZiiB,KACFhf,KAAKqc,UYhnDb2C,EZmnDM,IAAIC,GAAWjf,KAAK8d,SAASpQ,KAAK,SAAUnJ,GAC1C,GAAIA,EACF,MYhnDV,SZgnDiBA,EAAKxH,MAGZkiB,KACFjf,KAAKsc,YYhnDb2C,EZmnDM,IAAIC,GAASlf,KAAK8d,SAASpQ,KAAK,SAAUnJ,GACxC,GAAIA,EACF,MYhnDV,OZgnDiBA,EAAKxH,MAGZmiB,KACFlf,KAAKuc,cYhnDb2C,GZmnDMlf,KAAKgY,KAAOhY,KAAK8d,SAASpQ,KAAK,SAAUnJ,GACvC,MAAOA,IAAQA,EAAKxH,OAAS2hB,EAAO7C,iBACnCG,aYlnDT,IZonDImD,YAAa,WAEX,MAAInf,MAAKuZ,OYjnDf,OAEA,QZqnDI6F,mBAAoB,SAA4Bnc,GAE9CjD,KAAKyb,eAAeP,MYlnD1BjY,EZmnDMjD,KAAK2b,YYlnDX1Y,IZonDK7I,EAAoBU,EAAEqe,EAA0D,IACjFwE,YYhnDJ,kBACA0B,SAAAhH,OAAAje,EAAAU,EAAAqe,EAAA,IAEA,UAGA,gBZinDMmG,KACA,SAAUplB,EAAQC,EAASC,GAEjC,ca1oEA,SAAAuX,GA+DA,QAAA4N,KACA,MAAAC,GAAAC,oBACA,WACA,WAGA,QAAAC,GAAAC,EAAA5kB,GACA,GAAAwkB,IAAAxkB,EACA,SAAA6kB,YAAA,6BAcA,OAZAJ,GAAAC,qBAEAE,EAAA,GAAA7H,YAAA/c,GACA4kB,EAAAE,UAAAL,EAAAhe,YAGA,OAAAme,IACAA,EAAA,GAAAH,GAAAzkB,IAEA4kB,EAAA5kB,UAGA4kB,EAaA,QAAAH,GAAAM,EAAAC,EAAAhlB,GACA,KAAAykB,EAAAC,qBAAAzf,eAAAwf,IACA,UAAAA,GAAAM,EAAAC,EAAAhlB,EAIA,oBAAA+kB,GAAA,CACA,mBAAAC,GACA,SAAAtJ,OACA,oEAGA,OAAAuJ,GAAAhgB,KAAA8f,GAEA,MAAAtf,GAAAR,KAAA8f,EAAAC,EAAAhlB,GAWA,QAAAyF,GAAAmf,EAAA/b,EAAAmc,EAAAhlB,GACA,mBAAA6I,GACA,SAAAqc,WAAA,wCAGA,0BAAAC,cAAAtc,YAAAsc,aACAC,EAAAR,EAAA/b,EAAAmc,EAAAhlB,GAGA,gBAAA6I,GACAwc,EAAAT,EAAA/b,EAAAmc,GAGAM,EAAAV,EAAA/b,GA4BA,QAAA0c,GAAAC,GACA,mBAAAA,GACA,SAAAN,WAAA,mCACG,IAAAM,EAAA,EACH,SAAAX,YAAA,wCAIA,QAAAY,GAAAb,EAAAY,EAAAE,EAAAC,GAEA,MADAJ,GAAAC,GACAA,GAAA,EACAb,EAAAC,EAAAY,OAEAI,KAAAF,EAIA,gBAAAC,GACAhB,EAAAC,EAAAY,GAAAE,OAAAC,GACAhB,EAAAC,EAAAY,GAAAE,QAEAf,EAAAC,EAAAY,GAWA,QAAAP,GAAAL,EAAAY,GAGA,GAFAD,EAAAC,GACAZ,EAAAD,EAAAC,EAAAY,EAAA,MAAAK,EAAAL,KACAf,EAAAC,oBACA,OAAA3kB,GAAA,EAAmBA,EAAAylB,IAAUzlB,EAC7B6kB,EAAA7kB,GAAA,CAGA,OAAA6kB,GAgBA,QAAAS,GAAAT,EAAAjjB,EAAAgkB,GAKA,GAJA,gBAAAA,IAAA,KAAAA,IACAA,EAAA,SAGAlB,EAAAqB,WAAAH,GACA,SAAAT,WAAA,6CAGA,IAAAllB,GAAA,EAAA2b,EAAAha,EAAAgkB,EACAf,GAAAD,EAAAC,EAAA5kB,EAEA,IAAAqS,GAAAuS,EAAAmB,MAAApkB,EAAAgkB,EASA,OAPAtT,KAAArS,IAIA4kB,IAAAtjB,MAAA,EAAA+Q,IAGAuS,EAGA,QAAAoB,GAAApB,EAAA9C,GACA,GAAA9hB,GAAA8hB,EAAA9hB,OAAA,MAAA6lB,EAAA/D,EAAA9hB,OACA4kB,GAAAD,EAAAC,EAAA5kB,EACA,QAAAD,GAAA,EAAiBA,EAAAC,EAAYD,GAAA,EAC7B6kB,EAAA7kB,GAAA,IAAA+hB,EAAA/hB,EAEA,OAAA6kB,GAGA,QAAAQ,GAAAR,EAAA9C,EAAAmE,EAAAjmB,GAGA,GAFA8hB,EAAAnG,WAEAsK,EAAA,GAAAnE,EAAAnG,WAAAsK,EACA,SAAApB,YAAA,4BAGA,IAAA/C,EAAAnG,WAAAsK,GAAAjmB,GAAA,GACA,SAAA6kB,YAAA,4BAmBA,OAfA/C,OADA8D,KAAAK,OAAAL,KAAA5lB,EACA,GAAA+c,YAAA+E,OACG8D,KAAA5lB,EACH,GAAA+c,YAAA+E,EAAAmE,GAEA,GAAAlJ,YAAA+E,EAAAmE,EAAAjmB,GAGAykB,EAAAC,qBAEAE,EAAA9C,EACA8C,EAAAE,UAAAL,EAAAhe,WAGAme,EAAAoB,EAAApB,EAAA9C,GAEA8C,EAGA,QAAAU,GAAAV,EAAAxS,GACA,GAAAqS,EAAAyB,SAAA9T,GAAA,CACA,GAAA3E,GAAA,EAAAoY,EAAAzT,EAAApS,OAGA,OAFA4kB,GAAAD,EAAAC,EAAAnX,GAEA,IAAAmX,EAAA5kB,OACA4kB,GAGAxS,EAAA+T,KAAAvB,EAAA,IAAAnX,GACAmX,GAGA,GAAAxS,EAAA,CACA,sBAAA+S,cACA/S,EAAAgU,iBAAAjB,cAAA,UAAA/S,GACA,sBAAAA,GAAApS,QAAAqmB,EAAAjU,EAAApS,QACA2kB,EAAAC,EAAA,GAEAoB,EAAApB,EAAAxS,EAGA,eAAAA,EAAA3Q,MAAA6kB,EAAAlU,EAAAjH,MACA,MAAA6a,GAAApB,EAAAxS,EAAAjH,MAIA,SAAA+Z,WAAA,sFAGA,QAAAW,GAAA7lB,GAGA,GAAAA,GAAAwkB,IACA,SAAAK,YAAA,0DACAL,IAAA+B,SAAA,aAEA,UAAAvmB,EAGA,QAAAwmB,GAAAxmB,GAIA,OAHAA,OACAA,EAAA,GAEAykB,EAAAgB,OAAAzlB,GA+EA,QAAA2b,GAAAha,EAAAgkB,GACA,GAAAlB,EAAAyB,SAAAvkB,GACA,MAAAA,GAAA3B,MAEA,uBAAAmlB,cAAA,kBAAAA,aAAAsB,SACAtB,YAAAsB,OAAA9kB,gBAAAwjB,cACA,MAAAxjB,GAAAga,UAEA,iBAAAha,KACAA,EAAA,GAAAA,EAGA,IAAA8L,GAAA9L,EAAA3B,MACA,QAAAyN,EAAA,QAIA,KADA,GAAAiZ,IAAA,IAEA,OAAAf,GACA,YACA,aACA,aACA,MAAAlY,EACA,YACA,YACA,SAAAmY,GACA,MAAAe,GAAAhlB,GAAA3B,MACA,YACA,YACA,cACA,eACA,SAAAyN,CACA,WACA,MAAAA,KAAA,CACA,cACA,MAAAmZ,GAAAjlB,GAAA3B,MACA,SACA,GAAA0mB,EAAA,MAAAC,GAAAhlB,GAAA3B,MACA2lB,IAAA,GAAAA,GAAAnkB,cACAklB,GAAA,GAMA,QAAAG,GAAAlB,EAAA/iB,EAAAxB,GACA,GAAAslB,IAAA,CAcA,SALAd,KAAAhjB,KAAA,KACAA,EAAA,GAIAA,EAAAqC,KAAAjF,OACA,QAOA,SAJA4lB,KAAAxkB,KAAA6D,KAAAjF,UACAoB,EAAA6D,KAAAjF,QAGAoB,GAAA,EACA,QAOA,IAHAA,KAAA,EACAwB,KAAA,EAEAxB,GAAAwB,EACA,QAKA,KAFA+iB,MAAA,UAGA,OAAAA,GACA,UACA,MAAAmB,GAAA7hB,KAAArC,EAAAxB,EAEA,YACA,YACA,MAAA2lB,GAAA9hB,KAAArC,EAAAxB,EAEA,aACA,MAAA4lB,GAAA/hB,KAAArC,EAAAxB,EAEA,cACA,aACA,MAAA6lB,GAAAhiB,KAAArC,EAAAxB,EAEA,cACA,MAAA8lB,GAAAjiB,KAAArC,EAAAxB,EAEA,YACA,YACA,cACA,eACA,MAAA+lB,GAAAliB,KAAArC,EAAAxB,EAEA,SACA,GAAAslB,EAAA,SAAAxB,WAAA,qBAAAS,EACAA,MAAA,IAAAnkB,cACAklB,GAAA,GASA,QAAAU,GAAAhY,EAAAtD,EAAAub,GACA,GAAAtnB,GAAAqP,EAAAtD,EACAsD,GAAAtD,GAAAsD,EAAAiY,GACAjY,EAAAiY,GAAAtnB,EAmIA,QAAAunB,GAAAlB,EAAAliB,EAAA+hB,EAAAN,EAAAjZ,GAEA,OAAA0Z,EAAApmB,OAAA,QAmBA,IAhBA,gBAAAimB,IACAN,EAAAM,EACAA,EAAA,GACGA,EAAA,WACHA,EAAA,WACGA,GAAA,aACHA,GAAA,YAEAA,KACAsB,MAAAtB,KAEAA,EAAAvZ,EAAA,EAAA0Z,EAAApmB,OAAA,GAIAimB,EAAA,IAAAA,EAAAG,EAAApmB,OAAAimB,GACAA,GAAAG,EAAApmB,OAAA,CACA,GAAA0M,EAAA,QACAuZ,GAAAG,EAAApmB,OAAA,MACG,IAAAimB,EAAA,GACH,IAAAvZ,EACA,QADAuZ,GAAA,EAUA,GALA,gBAAA/hB,KACAA,EAAAugB,EAAAhf,KAAAvB,EAAAyhB,IAIAlB,EAAAyB,SAAAhiB,GAEA,WAAAA,EAAAlE,QACA,EAEAwnB,EAAApB,EAAAliB,EAAA+hB,EAAAN,EAAAjZ,EACG,oBAAAxI,GAEH,MADAA,IAAA,IACAugB,EAAAC,qBACA,kBAAA3H,YAAAtW,UAAA5E,QACA6K,EACAqQ,WAAAtW,UAAA5E,QAAA4lB,KAAArB,EAAAliB,EAAA+hB,GAEAlJ,WAAAtW,UAAAihB,YAAAD,KAAArB,EAAAliB,EAAA+hB,GAGAuB,EAAApB,GAAAliB,GAAA+hB,EAAAN,EAAAjZ,EAGA,UAAAwY,WAAA,wCAGA,QAAAsC,GAAAzL,EAAA7X,EAAA+hB,EAAAN,EAAAjZ,GAmBA,QAAAib,GAAAC,EAAA7nB,GACA,WAAA8nB,EACAD,EAAA7nB,GAEA6nB,EAAAE,aAAA/nB,EAAA8nB,GAtBA,GAAAA,GAAA,EACAE,EAAAhM,EAAA/b,OACAgoB,EAAA9jB,EAAAlE,MAEA,QAAA4lB,KAAAD,IAEA,UADAA,EAAA5a,OAAA4a,GAAAnkB,gBACA,UAAAmkB,GACA,YAAAA,GAAA,aAAAA,GAAA,CACA,GAAA5J,EAAA/b,OAAA,GAAAkE,EAAAlE,OAAA,EACA,QAEA6nB,GAAA,EACAE,GAAA,EACAC,GAAA,EACA/B,GAAA,EAYA,GAAAlmB,EACA,IAAA2M,EAAA,CACA,GAAAub,IAAA,CACA,KAAAloB,EAAAkmB,EAAwBlmB,EAAAgoB,EAAehoB,IACvC,GAAA4nB,EAAA5L,EAAAhc,KAAA4nB,EAAAzjB,GAAA,IAAA+jB,EAAA,EAAAloB,EAAAkoB,IAEA,IADA,IAAAA,MAAAloB,GACAA,EAAAkoB,EAAA,IAAAD,EAAA,MAAAC,GAAAJ,OAEA,IAAAI,IAAAloB,KAAAkoB,GACAA,GAAA,MAKA,KADAhC,EAAA+B,EAAAD,IAAA9B,EAAA8B,EAAAC,GACAjoB,EAAAkmB,EAAwBlmB,GAAA,EAAQA,IAAA,CAEhC,OADA2R,IAAA,EACAqB,EAAA,EAAqBA,EAAAiV,EAAejV,IACpC,GAAA4U,EAAA5L,EAAAhc,EAAAgT,KAAA4U,EAAAzjB,EAAA6O,GAAA,CACArB,GAAA,CACA,OAGA,GAAAA,EAAA,MAAA3R,GAIA,SAeA,QAAAmoB,GAAAN,EAAAjmB,EAAAwQ,EAAAnS,GACAmS,EAAAgW,OAAAhW,IAAA,CACA,IAAAiW,GAAAR,EAAA5nB,OAAAmS,CACAnS,IAGAA,EAAAmoB,OAAAnoB,IACAooB,IACApoB,EAAAooB,GAJApoB,EAAAooB,CASA,IAAAC,GAAA1mB,EAAA3B,MACA,IAAAqoB,EAAA,cAAAnD,WAAA,qBAEAllB,GAAAqoB,EAAA,IACAroB,EAAAqoB,EAAA,EAEA,QAAAtoB,GAAA,EAAiBA,EAAAC,IAAYD,EAAA,CAC7B,GAAAuoB,GAAAC,SAAA5mB,EAAA6mB,OAAA,EAAAzoB,EAAA,MACA,IAAAwnB,MAAAe,GAAA,MAAAvoB,EACA6nB,GAAAzV,EAAApS,GAAAuoB,EAEA,MAAAvoB,GAGA,QAAA0oB,GAAAb,EAAAjmB,EAAAwQ,EAAAnS,GACA,MAAA0oB,GAAA/B,EAAAhlB,EAAAimB,EAAA5nB,OAAAmS,GAAAyV,EAAAzV,EAAAnS,GAGA,QAAA2oB,GAAAf,EAAAjmB,EAAAwQ,EAAAnS,GACA,MAAA0oB,GAAAE,EAAAjnB,GAAAimB,EAAAzV,EAAAnS,GAGA,QAAA6oB,GAAAjB,EAAAjmB,EAAAwQ,EAAAnS,GACA,MAAA2oB,GAAAf,EAAAjmB,EAAAwQ,EAAAnS,GAGA,QAAA8oB,GAAAlB,EAAAjmB,EAAAwQ,EAAAnS,GACA,MAAA0oB,GAAA9B,EAAAjlB,GAAAimB,EAAAzV,EAAAnS,GAGA,QAAA+oB,GAAAnB,EAAAjmB,EAAAwQ,EAAAnS,GACA,MAAA0oB,GAAAM,EAAArnB,EAAAimB,EAAA5nB,OAAAmS,GAAAyV,EAAAzV,EAAAnS,GAkFA,QAAAknB,GAAAU,EAAAhlB,EAAAxB,GACA,WAAAwB,GAAAxB,IAAAwmB,EAAA5nB,OACAipB,EAAAtM,cAAAiL,GAEAqB,EAAAtM,cAAAiL,EAAAtmB,MAAAsB,EAAAxB,IAIA,QAAA2lB,GAAAa,EAAAhlB,EAAAxB,GACAA,EAAAmC,KAAAC,IAAAokB,EAAA5nB,OAAAoB,EAIA,KAHA,GAAA8hB,MAEAnjB,EAAA6C,EACA7C,EAAAqB,GAAA,CACA,GAAA8nB,GAAAtB,EAAA7nB,GACAopB,EAAA,KACAC,EAAAF,EAAA,MACAA,EAAA,MACAA,EAAA,MACA,CAEA,IAAAnpB,EAAAqpB,GAAAhoB,EAAA,CACA,GAAAioB,GAAAC,EAAAC,EAAAC,CAEA,QAAAJ,GACA,OACAF,EAAA,MACAC,EAAAD,EAEA,MACA,QACAG,EAAAzB,EAAA7nB,EAAA,GACA,UAAAspB,KACAG,GAAA,GAAAN,IAAA,KAAAG,GACA,MACAF,EAAAK,EAGA,MACA,QACAH,EAAAzB,EAAA7nB,EAAA,GACAupB,EAAA1B,EAAA7nB,EAAA,GACA,UAAAspB,IAAA,UAAAC,KACAE,GAAA,GAAAN,IAAA,OAAAG,IAAA,KAAAC,GACA,OAAAE,EAAA,OAAAA,EAAA,SACAL,EAAAK,EAGA,MACA,QACAH,EAAAzB,EAAA7nB,EAAA,GACAupB,EAAA1B,EAAA7nB,EAAA,GACAwpB,EAAA3B,EAAA7nB,EAAA,GACA,UAAAspB,IAAA,UAAAC,IAAA,UAAAC,KACAC,GAAA,GAAAN,IAAA,OAAAG,IAAA,OAAAC,IAAA,KAAAC,GACA,OAAAC,EAAA,UACAL,EAAAK,IAMA,OAAAL,GAGAA,EAAA,MACAC,EAAA,GACKD,EAAA,QAELA,GAAA,MACAjG,EAAA7Y,KAAA8e,IAAA,eACAA,EAAA,WAAAA,GAGAjG,EAAA7Y,KAAA8e,GACAppB,GAAAqpB,EAGA,MAAAK,GAAAvG,GAQA,QAAAuG,GAAAC,GACA,GAAAjc,GAAAic,EAAA1pB,MACA,IAAAyN,GAAAkc,EACA,MAAA5e,QAAA6e,aAAAC,MAAA9e,OAAA2e,EAMA,KAFA,GAAAxG,GAAA,GACAnjB,EAAA,EACAA,EAAA0N,GACAyV,GAAAnY,OAAA6e,aAAAC,MACA9e,OACA2e,EAAApoB,MAAAvB,KAAA4pB,GAGA,OAAAzG,GAGA,QAAA8D,GAAAY,EAAAhlB,EAAAxB,GACA,GAAA0oB,GAAA,EACA1oB,GAAAmC,KAAAC,IAAAokB,EAAA5nB,OAAAoB,EAEA,QAAArB,GAAA6C,EAAqB7C,EAAAqB,IAASrB,EAC9B+pB,GAAA/e,OAAA6e,aAAA,IAAAhC,EAAA7nB,GAEA,OAAA+pB,GAGA,QAAA7C,GAAAW,EAAAhlB,EAAAxB,GACA,GAAA0oB,GAAA,EACA1oB,GAAAmC,KAAAC,IAAAokB,EAAA5nB,OAAAoB,EAEA,QAAArB,GAAA6C,EAAqB7C,EAAAqB,IAASrB,EAC9B+pB,GAAA/e,OAAA6e,aAAAhC,EAAA7nB,GAEA,OAAA+pB,GAGA,QAAAhD,GAAAc,EAAAhlB,EAAAxB,GACA,GAAAqM,GAAAma,EAAA5nB,SAEA4C,KAAA,KAAAA,EAAA,KACAxB,KAAA,GAAAA,EAAAqM,KAAArM,EAAAqM,EAGA,QADAsc,GAAA,GACAhqB,EAAA6C,EAAqB7C,EAAAqB,IAASrB,EAC9BgqB,GAAAC,EAAApC,EAAA7nB,GAEA,OAAAgqB,GAGA,QAAA5C,GAAAS,EAAAhlB,EAAAxB,GAGA,OAFA6oB,GAAArC,EAAAtmB,MAAAsB,EAAAxB,GACA8hB,EAAA,GACAnjB,EAAA,EAAiBA,EAAAkqB,EAAAjqB,OAAkBD,GAAA,EACnCmjB,GAAAnY,OAAA6e,aAAAK,EAAAlqB,GAAA,IAAAkqB,EAAAlqB,EAAA,GAEA,OAAAmjB,GA0CA,QAAAgH,GAAA/X,EAAAgY,EAAAnqB,GACA,GAAAmS,EAAA,MAAAA,EAAA,WAAA0S,YAAA,qBACA,IAAA1S,EAAAgY,EAAAnqB,EAAA,SAAA6kB,YAAA,yCA+JA,QAAAuF,GAAAxC,EAAA/e,EAAAsJ,EAAAgY,EAAA5jB,EAAA/C,GACA,IAAAihB,EAAAyB,SAAA0B,GAAA,SAAA1C,WAAA,8CACA,IAAArc,EAAAtC,GAAAsC,EAAArF,EAAA,SAAAqhB,YAAA,oCACA,IAAA1S,EAAAgY,EAAAvC,EAAA5nB,OAAA,SAAA6kB,YAAA,sBAkDA,QAAAwF,GAAAzC,EAAA/e,EAAAsJ,EAAAmY,GACAzhB,EAAA,IAAAA,EAAA,MAAAA,EAAA,EACA,QAAA9I,GAAA,EAAAgT,EAAAxP,KAAAC,IAAAokB,EAAA5nB,OAAAmS,EAAA,GAAuDpS,EAAAgT,IAAOhT,EAC9D6nB,EAAAzV,EAAApS,IAAA8I,EAAA,QAAAyhB,EAAAvqB,EAAA,EAAAA,MACA,GAAAuqB,EAAAvqB,EAAA,EAAAA,GA8BA,QAAAwqB,GAAA3C,EAAA/e,EAAAsJ,EAAAmY,GACAzhB,EAAA,IAAAA,EAAA,WAAAA,EAAA,EACA,QAAA9I,GAAA,EAAAgT,EAAAxP,KAAAC,IAAAokB,EAAA5nB,OAAAmS,EAAA,GAAuDpS,EAAAgT,IAAOhT,EAC9D6nB,EAAAzV,EAAApS,GAAA8I,IAAA,GAAAyhB,EAAAvqB,EAAA,EAAAA,GAAA,IAmJA,QAAAyqB,GAAA5C,EAAA/e,EAAAsJ,EAAAgY,EAAA5jB,EAAA/C,GACA,GAAA2O,EAAAgY,EAAAvC,EAAA5nB,OAAA,SAAA6kB,YAAA,qBACA,IAAA1S,EAAA,WAAA0S,YAAA,sBAGA,QAAA4F,GAAA7C,EAAA/e,EAAAsJ,EAAAmY,EAAAI,GAKA,MAJAA,IACAF,EAAA5C,EAAA/e,EAAAsJ,EAAA,gDAEAwY,EAAA5E,MAAA6B,EAAA/e,EAAAsJ,EAAAmY,EAAA,MACAnY,EAAA,EAWA,QAAAyY,GAAAhD,EAAA/e,EAAAsJ,EAAAmY,EAAAI,GAKA,MAJAA,IACAF,EAAA5C,EAAA/e,EAAAsJ,EAAA,kDAEAwY,EAAA5E,MAAA6B,EAAA/e,EAAAsJ,EAAAmY,EAAA,MACAnY,EAAA,EAgIA,QAAA0Y,GAAA/W,GAIA,GAFAA,EAAAgX,EAAAhX,GAAA6C,QAAAoU,GAAA,IAEAjX,EAAA9T,OAAA,UAEA,MAAA8T,EAAA9T,OAAA,MACA8T,GAAA,GAEA,OAAAA,GAGA,QAAAgX,GAAAhX,GACA,MAAAA,GAAA7K,KAAA6K,EAAA7K,OACA6K,EAAA6C,QAAA,iBAGA,QAAAqT,GAAAle,GACA,MAAAA,GAAA,OAAAA,EAAAya,SAAA,IACAza,EAAAya,SAAA,IAGA,QAAAI,GAAAhlB,EAAAqpB,GACAA,KAAAC,GAMA,QALA9B,GACAnpB,EAAA2B,EAAA3B,OACAkrB,EAAA,KACAjB,KAEAlqB,EAAA,EAAiBA,EAAAC,IAAYD,EAAA,CAI7B,IAHAopB,EAAAxnB,EAAAwa,WAAApc,IAGA,OAAAopB,EAAA,OAEA,IAAA+B,EAAA,CAEA,GAAA/B,EAAA,QAEA6B,GAAA,OAAAf,EAAA5f,KAAA,YACA,UACS,GAAAtK,EAAA,IAAAC,EAAA,EAETgrB,GAAA,OAAAf,EAAA5f,KAAA,YACA,UAIA6gB,EAAA/B,CAEA,UAIA,GAAAA,EAAA,QACA6B,GAAA,OAAAf,EAAA5f,KAAA,aACA6gB,EAAA/B,CACA,UAIAA,EAAA,OAAA+B,EAAA,UAAA/B,EAAA,WACK+B,KAELF,GAAA,OAAAf,EAAA5f,KAAA,YAMA,IAHA6gB,EAAA,KAGA/B,EAAA,KACA,IAAA6B,GAAA,UACAf,GAAA5f,KAAA8e,OACK,IAAAA,EAAA,MACL,IAAA6B,GAAA,UACAf,GAAA5f,KACA8e,GAAA,MACA,GAAAA,EAAA,SAEK,IAAAA,EAAA,OACL,IAAA6B,GAAA,UACAf,GAAA5f,KACA8e,GAAA,OACAA,GAAA,SACA,GAAAA,EAAA,SAEK,MAAAA,EAAA,SASL,SAAAzN,OAAA,qBARA,KAAAsP,GAAA,UACAf,GAAA5f,KACA8e,GAAA,OACAA,GAAA,UACAA,GAAA,SACA,GAAAA,EAAA,MAOA,MAAAc,GAGA,QAAArB,GAAA9U,GAEA,OADAqX,MACAprB,EAAA,EAAiBA,EAAA+T,EAAA9T,SAAgBD,EAEjCorB,EAAA9gB,KAAA,IAAAyJ,EAAAqI,WAAApc,GAEA,OAAAorB,GAGA,QAAAnC,GAAAlV,EAAAkX,GAGA,OAFAI,GAAAC,EAAAC,EACAH,KACAprB,EAAA,EAAiBA,EAAA+T,EAAA9T,WACjBgrB,GAAA,QADiCjrB,EAGjCqrB,EAAAtX,EAAAqI,WAAApc,GACAsrB,EAAAD,GAAA,EACAE,EAAAF,EAAA,IACAD,EAAA9gB,KAAAihB,GACAH,EAAA9gB,KAAAghB,EAGA,OAAAF,GAGA,QAAAvE,GAAA9S,GACA,MAAAmV,GAAArN,YAAAiP,EAAA/W,IAGA,QAAA4U,GAAAze,EAAAshB,EAAApZ,EAAAnS,GACA,OAAAD,GAAA,EAAiBA,EAAAC,KACjBD,EAAAoS,GAAAoZ,EAAAvrB,QAAAD,GAAAkK,EAAAjK,UAD6BD,EAE7BwrB,EAAAxrB,EAAAoS,GAAAlI,EAAAlK,EAEA,OAAAA,GAGA,QAAAsmB,GAAAniB,GACA,MAAAA;;;;;;AAjvDA,GAAA+kB,GAAA5pB,EAAA,QACAsrB,EAAAtrB,EAAA,QACAinB,EAAAjnB,EAAA,OAEAD,GAAAqlB,SACArlB,EAAAonB,aACApnB,EAAAosB,kBAAA,GA0BA/G,EAAAC,wBAAAkB,KAAAhP,EAAA8N,oBACA9N,EAAA8N,oBAQA,WACA,IACA,GAAA3I,GAAA,GAAAgB,YAAA,EAEA,OADAhB,GAAA+I,WAAqBA,UAAA/H,WAAAtW,UAAAglB,IAAA,WAAmD,YACxE,KAAA1P,EAAA0P,OACA,kBAAA1P,GAAA2P,UACA,IAAA3P,EAAA2P,SAAA,KAAA/P,WACG,MAAAvY,GACH,aAVAhE,EAAAolB,eAkEAC,EAAAkH,SAAA,KAGAlH,EAAAmH,SAAA,SAAA7P,GAEA,MADAA,GAAA+I,UAAAL,EAAAhe,UACAsV,GA2BA0I,EAAAhf,KAAA,SAAAoD,EAAAmc,EAAAhlB,GACA,MAAAyF,GAAA,KAAAoD,EAAAmc,EAAAhlB,IAGAykB,EAAAC,sBACAD,EAAAhe,UAAAqe,UAAA/H,WAAAtW,UACAge,EAAAK,UAAA/H,WACA,mBAAA8O,gBAAAC,SACArH,EAAAoH,OAAAC,WAAArH,GAEAxO,OAAAC,eAAAuO,EAAAoH,OAAAC,SACAjjB,MAAA,KACAkjB,cAAA,KAiCAtH,EAAAgB,MAAA,SAAAD,EAAAE,EAAAC,GACA,MAAAF,GAAA,KAAAD,EAAAE,EAAAC,IAiBAlB,EAAAQ,YAAA,SAAAO,GACA,MAAAP,GAAA,KAAAO,IAKAf,EAAAuH,gBAAA,SAAAxG,GACA,MAAAP,GAAA,KAAAO,IAiHAf,EAAAyB,SAAA,SAAA9W,GACA,cAAAA,MAAA6c,YAGAxH,EAAAyH,QAAA,SAAA/c,EAAAC,GACA,IAAAqV,EAAAyB,SAAA/W,KAAAsV,EAAAyB,SAAA9W,GACA,SAAA8V,WAAA,4BAGA,IAAA/V,IAAAC,EAAA,QAKA,QAHA+c,GAAAhd,EAAAnP,OACAosB,EAAAhd,EAAApP,OAEAD,EAAA,EAAA0N,EAAAlK,KAAAC,IAAA2oB,EAAAC,GAAuCrsB,EAAA0N,IAAS1N,EAChD,GAAAoP,EAAApP,KAAAqP,EAAArP,GAAA,CACAosB,EAAAhd,EAAApP,GACAqsB,EAAAhd,EAAArP,EACA,OAIA,MAAAosB,GAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GAGA1H,EAAAqB,WAAA,SAAAH,GACA,OAAA5a,OAAA4a,GAAAnkB,eACA,UACA,WACA,YACA,YACA,aACA,aACA,aACA,WACA,YACA,cACA,eACA,QACA,SACA,WAIAijB,EAAA4H,OAAA,SAAAC,EAAAtsB,GACA,IAAAsmB,EAAAgG,GACA,SAAApH,WAAA,8CAGA,QAAAoH,EAAAtsB,OACA,MAAAykB,GAAAgB,MAAA,EAGA,IAAA1lB,EACA,QAAA6lB,KAAA5lB,EAEA,IADAA,EAAA,EACAD,EAAA,EAAeA,EAAAusB,EAAAtsB,SAAiBD,EAChCC,GAAAssB,EAAAvsB,GAAAC,MAIA,IAAAomB,GAAA3B,EAAAQ,YAAAjlB,GACAE,EAAA,CACA,KAAAH,EAAA,EAAaA,EAAAusB,EAAAtsB,SAAiBD,EAAA,CAC9B,GAAA6nB,GAAA0E,EAAAvsB,EACA,KAAA0kB,EAAAyB,SAAA0B,GACA,SAAA1C,WAAA,8CAEA0C,GAAAzB,KAAAC,EAAAlmB,GACAA,GAAA0nB,EAAA5nB,OAEA,MAAAomB,IA8CA3B,EAAA9I,aA0EA8I,EAAAhe,UAAAwlB,WAAA,EAQAxH,EAAAhe,UAAA8lB,OAAA,WACA,GAAA9e,GAAAxI,KAAAjF,MACA,IAAAyN,EAAA,KACA,SAAAoX,YAAA,4CAEA,QAAA9kB,GAAA,EAAiBA,EAAA0N,EAAS1N,GAAA,EAC1BqnB,EAAAniB,KAAAlF,IAAA,EAEA,OAAAkF,OAGAwf,EAAAhe,UAAA+lB,OAAA,WACA,GAAA/e,GAAAxI,KAAAjF,MACA,IAAAyN,EAAA,KACA,SAAAoX,YAAA,4CAEA,QAAA9kB,GAAA,EAAiBA,EAAA0N,EAAS1N,GAAA,EAC1BqnB,EAAAniB,KAAAlF,IAAA,GACAqnB,EAAAniB,KAAAlF,EAAA,EAAAA,EAAA,EAEA,OAAAkF,OAGAwf,EAAAhe,UAAAgmB,OAAA,WACA,GAAAhf,GAAAxI,KAAAjF,MACA,IAAAyN,EAAA,KACA,SAAAoX,YAAA,4CAEA,QAAA9kB,GAAA,EAAiBA,EAAA0N,EAAS1N,GAAA,EAC1BqnB,EAAAniB,KAAAlF,IAAA,GACAqnB,EAAAniB,KAAAlF,EAAA,EAAAA,EAAA,GACAqnB,EAAAniB,KAAAlF,EAAA,EAAAA,EAAA,GACAqnB,EAAAniB,KAAAlF,EAAA,EAAAA,EAAA,EAEA,OAAAkF,OAGAwf,EAAAhe,UAAA8f,SAAA,WACA,GAAAvmB,GAAA,EAAAiF,KAAAjF,MACA,YAAAA,EAAA,GACA,IAAA0sB,UAAA1sB,OAAA+mB,EAAA9hB,KAAA,EAAAjF,GACA6mB,EAAAgD,MAAA5kB,KAAAynB,YAGAjI,EAAAhe,UAAAkmB,OAAA,SAAAvd,GACA,IAAAqV,EAAAyB,SAAA9W,GAAA,SAAA8V,WAAA,4BACA,OAAAjgB,QAAAmK,GACA,IAAAqV,EAAAyH,QAAAjnB,KAAAmK,IAGAqV,EAAAhe,UAAAmmB,QAAA,WACA,GAAA9Y,GAAA,GACAvN,EAAAnH,EAAAosB,iBAKA,OAJAvmB,MAAAjF,OAAA,IACA8T,EAAA7O,KAAAshB,SAAA,QAAAhgB,GAAAG,MAAA,SAAkDgW,KAAA,KAClDzX,KAAAjF,OAAAuG,IAAAuN,GAAA,UAEA,WAAAA,EAAA,KAGA2Q,EAAAhe,UAAAylB,QAAA,SAAApc,EAAAlN,EAAAxB,EAAAyrB,EAAAC,GACA,IAAArI,EAAAyB,SAAApW,GACA,SAAAoV,WAAA,4BAgBA,QAbAU,KAAAhjB,IACAA,EAAA,OAEAgjB,KAAAxkB,IACAA,EAAA0O,IAAA9P,OAAA,OAEA4lB,KAAAiH,IACAA,EAAA,OAEAjH,KAAAkH,IACAA,EAAA7nB,KAAAjF,QAGA4C,EAAA,GAAAxB,EAAA0O,EAAA9P,QAAA6sB,EAAA,GAAAC,EAAA7nB,KAAAjF,OACA,SAAA6kB,YAAA,qBAGA,IAAAgI,GAAAC,GAAAlqB,GAAAxB,EACA,QAEA,IAAAyrB,GAAAC,EACA,QAEA,IAAAlqB,GAAAxB,EACA,QAQA,IALAwB,KAAA,EACAxB,KAAA,EACAyrB,KAAA,EACAC,KAAA,EAEA7nB,OAAA6K,EAAA,QASA,QAPAqc,GAAAW,EAAAD,EACAT,EAAAhrB,EAAAwB,EACA6K,EAAAlK,KAAAC,IAAA2oB,EAAAC,GAEAW,EAAA9nB,KAAA3D,MAAAurB,EAAAC,GACAE,EAAAld,EAAAxO,MAAAsB,EAAAxB,GAEArB,EAAA,EAAiBA,EAAA0N,IAAS1N,EAC1B,GAAAgtB,EAAAhtB,KAAAitB,EAAAjtB,GAAA,CACAosB,EAAAY,EAAAhtB,GACAqsB,EAAAY,EAAAjtB,EACA,OAIA,MAAAosB,GAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GA6HA1H,EAAAhe,UAAAwmB,SAAA,SAAA/oB,EAAA+hB,EAAAN,GACA,WAAA1gB,KAAApD,QAAAqC,EAAA+hB,EAAAN,IAGAlB,EAAAhe,UAAA5E,QAAA,SAAAqC,EAAA+hB,EAAAN,GACA,MAAA2B,GAAAriB,KAAAf,EAAA+hB,EAAAN,GAAA,IAGAlB,EAAAhe,UAAAihB,YAAA,SAAAxjB,EAAA+hB,EAAAN,GACA,MAAA2B,GAAAriB,KAAAf,EAAA+hB,EAAAN,GAAA,IAkDAlB,EAAAhe,UAAAsf,MAAA,SAAApkB,EAAAwQ,EAAAnS,EAAA2lB,GAEA,OAAAC,KAAAzT,EACAwT,EAAA,OACA3lB,EAAAiF,KAAAjF,OACAmS,EAAA,MAEG,QAAAyT,KAAA5lB,GAAA,gBAAAmS,GACHwT,EAAAxT,EACAnS,EAAAiF,KAAAjF,OACAmS,EAAA,MAEG,KAAA+a,SAAA/a,GAWH,SAAAuJ,OACA,0EAXAvJ,IAAA,EACA+a,SAAAltB,IACAA,GAAA,MACA4lB,KAAAD,MAAA,UAEAA,EAAA3lB,EACAA,MAAA4lB,IASA,GAAAwC,GAAAnjB,KAAAjF,OAAAmS,CAGA,SAFAyT,KAAA5lB,KAAAooB,KAAApoB,EAAAooB,GAEAzmB,EAAA3B,OAAA,IAAAA,EAAA,GAAAmS,EAAA,IAAAA,EAAAlN,KAAAjF,OACA,SAAA6kB,YAAA,yCAGAc,OAAA,OAGA,KADA,GAAAe,IAAA,IAEA,OAAAf,GACA,UACA,MAAAuC,GAAAjjB,KAAAtD,EAAAwQ,EAAAnS,EAEA,YACA,YACA,MAAAyoB,GAAAxjB,KAAAtD,EAAAwQ,EAAAnS,EAEA,aACA,MAAA2oB,GAAA1jB,KAAAtD,EAAAwQ,EAAAnS,EAEA,cACA,aACA,MAAA6oB,GAAA5jB,KAAAtD,EAAAwQ,EAAAnS,EAEA,cAEA,MAAA8oB,GAAA7jB,KAAAtD,EAAAwQ,EAAAnS,EAEA,YACA,YACA,cACA,eACA,MAAA+oB,GAAA9jB,KAAAtD,EAAAwQ,EAAAnS,EAEA,SACA,GAAA0mB,EAAA,SAAAxB,WAAA,qBAAAS,EACAA,IAAA,GAAAA,GAAAnkB,cACAklB,GAAA,IAKAjC,EAAAhe,UAAA0mB,OAAA,WACA,OACA1rB,KAAA,SACA0J,KAAA6R,MAAAvW,UAAAnF,MAAAmmB,KAAAxiB,KAAAmoB,MAAAnoB,KAAA,IAwFA,IAAA0kB,GAAA,IA8DAlF,GAAAhe,UAAAnF,MAAA,SAAAsB,EAAAxB,GACA,GAAAqM,GAAAxI,KAAAjF,MACA4C,OACAxB,MAAAwkB,KAAAxkB,EAAAqM,IAAArM,EAEAwB,EAAA,GACAA,GAAA6K,GACA,IAAA7K,EAAA,GACGA,EAAA6K,IACH7K,EAAA6K,GAGArM,EAAA,GACAA,GAAAqM,GACA,IAAArM,EAAA,GACGA,EAAAqM,IACHrM,EAAAqM,GAGArM,EAAAwB,IAAAxB,EAAAwB,EAEA,IAAAyqB,EACA,IAAA5I,EAAAC,oBACA2I,EAAApoB,KAAAymB,SAAA9oB,EAAAxB,GACAisB,EAAAvI,UAAAL,EAAAhe,cACG,CACH,GAAA6mB,GAAAlsB,EAAAwB,CACAyqB,GAAA,GAAA5I,GAAA6I,MAAA1H,GACA,QAAA7lB,GAAA,EAAmBA,EAAAutB,IAAcvtB,EACjCstB,EAAAttB,GAAAkF,KAAAlF,EAAA6C,GAIA,MAAAyqB,IAWA5I,EAAAhe,UAAA8mB,WAAA,SAAApb,EAAAwJ,EAAA+O,GACAvY,GAAA,EACAwJ,GAAA,EACA+O,GAAAR,EAAA/X,EAAAwJ,EAAA1W,KAAAjF,OAKA,KAHA,GAAAkE,GAAAe,KAAAkN,GACAqb,EAAA,EACAztB,EAAA,IACAA,EAAA4b,IAAA6R,GAAA,MACAtpB,GAAAe,KAAAkN,EAAApS,GAAAytB,CAGA,OAAAtpB,IAGAugB,EAAAhe,UAAAgnB,WAAA,SAAAtb,EAAAwJ,EAAA+O,GACAvY,GAAA,EACAwJ,GAAA,EACA+O,GACAR,EAAA/X,EAAAwJ,EAAA1W,KAAAjF,OAKA,KAFA,GAAAkE,GAAAe,KAAAkN,IAAAwJ,GACA6R,EAAA,EACA7R,EAAA,IAAA6R,GAAA,MACAtpB,GAAAe,KAAAkN,IAAAwJ,GAAA6R,CAGA,OAAAtpB,IAGAugB,EAAAhe,UAAAinB,UAAA,SAAAvb,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACAiF,KAAAkN,IAGAsS,EAAAhe,UAAAknB,aAAA,SAAAxb,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACAiF,KAAAkN,GAAAlN,KAAAkN,EAAA,OAGAsS,EAAAhe,UAAAqhB,aAAA,SAAA3V,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACAiF,KAAAkN,IAAA,EAAAlN,KAAAkN,EAAA,IAGAsS,EAAAhe,UAAAmnB,aAAA,SAAAzb,EAAAuY,GAGA,MAFAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,SAEAiF,KAAAkN,GACAlN,KAAAkN,EAAA,MACAlN,KAAAkN,EAAA,QACA,SAAAlN,KAAAkN,EAAA,IAGAsS,EAAAhe,UAAAonB,aAAA,SAAA1b,EAAAuY,GAGA,MAFAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QAEA,SAAAiF,KAAAkN,IACAlN,KAAAkN,EAAA,OACAlN,KAAAkN,EAAA,MACAlN,KAAAkN,EAAA,KAGAsS,EAAAhe,UAAAqnB,UAAA,SAAA3b,EAAAwJ,EAAA+O,GACAvY,GAAA,EACAwJ,GAAA,EACA+O,GAAAR,EAAA/X,EAAAwJ,EAAA1W,KAAAjF,OAKA,KAHA,GAAAkE,GAAAe,KAAAkN,GACAqb,EAAA,EACAztB,EAAA,IACAA,EAAA4b,IAAA6R,GAAA,MACAtpB,GAAAe,KAAAkN,EAAApS,GAAAytB,CAMA,OAJAA,IAAA,IAEAtpB,GAAAspB,IAAAtpB,GAAAX,KAAAwqB,IAAA,IAAApS,IAEAzX,GAGAugB,EAAAhe,UAAAunB,UAAA,SAAA7b,EAAAwJ,EAAA+O,GACAvY,GAAA,EACAwJ,GAAA,EACA+O,GAAAR,EAAA/X,EAAAwJ,EAAA1W,KAAAjF,OAKA,KAHA,GAAAD,GAAA4b,EACA6R,EAAA,EACAtpB,EAAAe,KAAAkN,IAAApS,GACAA,EAAA,IAAAytB,GAAA,MACAtpB,GAAAe,KAAAkN,IAAApS,GAAAytB,CAMA,OAJAA,IAAA,IAEAtpB,GAAAspB,IAAAtpB,GAAAX,KAAAwqB,IAAA,IAAApS,IAEAzX,GAGAugB,EAAAhe,UAAAwnB,SAAA,SAAA9b,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACA,IAAAiF,KAAAkN,IACA,OAAAlN,KAAAkN,GAAA,GADAlN,KAAAkN,IAIAsS,EAAAhe,UAAAynB,YAAA,SAAA/b,EAAAuY,GACAA,GAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,OACA,IAAAkE,GAAAe,KAAAkN,GAAAlN,KAAAkN,EAAA,KACA,cAAAjO,EAAA,WAAAA,KAGAugB,EAAAhe,UAAA0nB,YAAA,SAAAhc,EAAAuY,GACAA,GAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,OACA,IAAAkE,GAAAe,KAAAkN,EAAA,GAAAlN,KAAAkN,IAAA,CACA,cAAAjO,EAAA,WAAAA,KAGAugB,EAAAhe,UAAA2nB,YAAA,SAAAjc,EAAAuY,GAGA,MAFAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QAEAiF,KAAAkN,GACAlN,KAAAkN,EAAA,MACAlN,KAAAkN,EAAA,OACAlN,KAAAkN,EAAA,QAGAsS,EAAAhe,UAAA4nB,YAAA,SAAAlc,EAAAuY,GAGA,MAFAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QAEAiF,KAAAkN,IAAA,GACAlN,KAAAkN,EAAA,OACAlN,KAAAkN,EAAA,MACAlN,KAAAkN,EAAA,IAGAsS,EAAAhe,UAAA6nB,YAAA,SAAAnc,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACA2qB,EAAAhD,KAAA1iB,KAAAkN,GAAA,SAGAsS,EAAAhe,UAAA8nB,YAAA,SAAApc,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACA2qB,EAAAhD,KAAA1iB,KAAAkN,GAAA,SAGAsS,EAAAhe,UAAA+nB,aAAA,SAAArc,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACA2qB,EAAAhD,KAAA1iB,KAAAkN,GAAA,SAGAsS,EAAAhe,UAAAgoB,aAAA,SAAAtc,EAAAuY,GAEA,MADAA,IAAAR,EAAA/X,EAAA,EAAAlN,KAAAjF,QACA2qB,EAAAhD,KAAA1iB,KAAAkN,GAAA,SASAsS,EAAAhe,UAAAioB,YAAA,SAAA7lB,EAAAsJ,EAAAwJ,EAAA+O,GAIA,GAHA7hB,KACAsJ,GAAA,EACAwJ,GAAA,GACA+O,EAAA,CAEAN,EAAAnlB,KAAA4D,EAAAsJ,EAAAwJ,EADApY,KAAAwqB,IAAA,IAAApS,GAAA,EACA,GAGA,GAAA6R,GAAA,EACAztB,EAAA,CAEA,KADAkF,KAAAkN,GAAA,IAAAtJ,IACA9I,EAAA4b,IAAA6R,GAAA,MACAvoB,KAAAkN,EAAApS,GAAA8I,EAAA2kB,EAAA,GAGA,OAAArb,GAAAwJ,GAGA8I,EAAAhe,UAAAkoB,YAAA,SAAA9lB,EAAAsJ,EAAAwJ,EAAA+O,GAIA,GAHA7hB,KACAsJ,GAAA,EACAwJ,GAAA,GACA+O,EAAA,CAEAN,EAAAnlB,KAAA4D,EAAAsJ,EAAAwJ,EADApY,KAAAwqB,IAAA,IAAApS,GAAA,EACA,GAGA,GAAA5b,GAAA4b,EAAA,EACA6R,EAAA,CAEA,KADAvoB,KAAAkN,EAAApS,GAAA,IAAA8I,IACA9I,GAAA,IAAAytB,GAAA,MACAvoB,KAAAkN,EAAApS,GAAA8I,EAAA2kB,EAAA,GAGA,OAAArb,GAAAwJ,GAGA8I,EAAAhe,UAAAmoB,WAAA,SAAA/lB,EAAAsJ,EAAAuY,GAMA,MALA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,SACAsS,EAAAC,sBAAA7b,EAAAtF,KAAAsrB,MAAAhmB,IACA5D,KAAAkN,GAAA,IAAAtJ,EACAsJ,EAAA,GAWAsS,EAAAhe,UAAAqoB,cAAA,SAAAjmB,EAAAsJ,EAAAuY,GAUA,MATA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,WACAsS,EAAAC,qBACAzf,KAAAkN,GAAA,IAAAtJ,EACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,GAEAwhB,EAAAplB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAGAsS,EAAAhe,UAAAsoB,cAAA,SAAAlmB,EAAAsJ,EAAAuY,GAUA,MATA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,WACAsS,EAAAC,qBACAzf,KAAAkN,GAAAtJ,IAAA,EACA5D,KAAAkN,EAAA,OAAAtJ,GAEAwhB,EAAAplB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAUAsS,EAAAhe,UAAAuoB,cAAA,SAAAnmB,EAAAsJ,EAAAuY,GAYA,MAXA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,gBACAsS,EAAAC,qBACAzf,KAAAkN,EAAA,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,EACA5D,KAAAkN,GAAA,IAAAtJ,GAEA0hB,EAAAtlB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAGAsS,EAAAhe,UAAAwoB,cAAA,SAAApmB,EAAAsJ,EAAAuY,GAYA,MAXA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,gBACAsS,EAAAC,qBACAzf,KAAAkN,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,EACA5D,KAAAkN,EAAA,OAAAtJ,GAEA0hB,EAAAtlB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAGAsS,EAAAhe,UAAAyoB,WAAA,SAAArmB,EAAAsJ,EAAAwJ,EAAA+O,GAGA,GAFA7hB,KACAsJ,GAAA,GACAuY,EAAA,CACA,GAAAyE,GAAA5rB,KAAAwqB,IAAA,IAAApS,EAAA,EAEAyO,GAAAnlB,KAAA4D,EAAAsJ,EAAAwJ,EAAAwT,EAAA,GAAAA,GAGA,GAAApvB,GAAA,EACAytB,EAAA,EACA4B,EAAA,CAEA,KADAnqB,KAAAkN,GAAA,IAAAtJ,IACA9I,EAAA4b,IAAA6R,GAAA,MACA3kB,EAAA,OAAAumB,GAAA,IAAAnqB,KAAAkN,EAAApS,EAAA,KACAqvB,EAAA,GAEAnqB,KAAAkN,EAAApS,IAAA8I,EAAA2kB,GAAA,GAAA4B,EAAA,GAGA,OAAAjd,GAAAwJ,GAGA8I,EAAAhe,UAAA4oB,WAAA,SAAAxmB,EAAAsJ,EAAAwJ,EAAA+O,GAGA,GAFA7hB,KACAsJ,GAAA,GACAuY,EAAA,CACA,GAAAyE,GAAA5rB,KAAAwqB,IAAA,IAAApS,EAAA,EAEAyO,GAAAnlB,KAAA4D,EAAAsJ,EAAAwJ,EAAAwT,EAAA,GAAAA,GAGA,GAAApvB,GAAA4b,EAAA,EACA6R,EAAA,EACA4B,EAAA,CAEA,KADAnqB,KAAAkN,EAAApS,GAAA,IAAA8I,IACA9I,GAAA,IAAAytB,GAAA,MACA3kB,EAAA,OAAAumB,GAAA,IAAAnqB,KAAAkN,EAAApS,EAAA,KACAqvB,EAAA,GAEAnqB,KAAAkN,EAAApS,IAAA8I,EAAA2kB,GAAA,GAAA4B,EAAA,GAGA,OAAAjd,GAAAwJ,GAGA8I,EAAAhe,UAAA6oB,UAAA,SAAAzmB,EAAAsJ,EAAAuY,GAOA,MANA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,YACAsS,EAAAC,sBAAA7b,EAAAtF,KAAAsrB,MAAAhmB,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,GACA5D,KAAAkN,GAAA,IAAAtJ,EACAsJ,EAAA,GAGAsS,EAAAhe,UAAA8oB,aAAA,SAAA1mB,EAAAsJ,EAAAuY,GAUA,MATA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,gBACAsS,EAAAC,qBACAzf,KAAAkN,GAAA,IAAAtJ,EACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,GAEAwhB,EAAAplB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAGAsS,EAAAhe,UAAA+oB,aAAA,SAAA3mB,EAAAsJ,EAAAuY,GAUA,MATA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,gBACAsS,EAAAC,qBACAzf,KAAAkN,GAAAtJ,IAAA,EACA5D,KAAAkN,EAAA,OAAAtJ,GAEAwhB,EAAAplB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAGAsS,EAAAhe,UAAAgpB,aAAA,SAAA5mB,EAAAsJ,EAAAuY,GAYA,MAXA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,0BACAsS,EAAAC,qBACAzf,KAAAkN,GAAA,IAAAtJ,EACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,EACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,IAEA0hB,EAAAtlB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAGAsS,EAAAhe,UAAAipB,aAAA,SAAA7mB,EAAAsJ,EAAAuY,GAaA,MAZA7hB,MACAsJ,GAAA,EACAuY,GAAAN,EAAAnlB,KAAA4D,EAAAsJ,EAAA,0BACAtJ,EAAA,IAAAA,EAAA,WAAAA,EAAA,GACA4b,EAAAC,qBACAzf,KAAAkN,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,GACA5D,KAAAkN,EAAA,GAAAtJ,IAAA,EACA5D,KAAAkN,EAAA,OAAAtJ,GAEA0hB,EAAAtlB,KAAA4D,EAAAsJ,GAAA,GAEAA,EAAA,GAgBAsS,EAAAhe,UAAAkpB,aAAA,SAAA9mB,EAAAsJ,EAAAuY,GACA,MAAAD,GAAAxlB,KAAA4D,EAAAsJ,GAAA,EAAAuY,IAGAjG,EAAAhe,UAAAmpB,aAAA,SAAA/mB,EAAAsJ,EAAAuY,GACA,MAAAD,GAAAxlB,KAAA4D,EAAAsJ,GAAA,EAAAuY,IAWAjG,EAAAhe,UAAAopB,cAAA,SAAAhnB,EAAAsJ,EAAAuY,GACA,MAAAE,GAAA3lB,KAAA4D,EAAAsJ,GAAA,EAAAuY,IAGAjG,EAAAhe,UAAAqpB,cAAA,SAAAjnB,EAAAsJ,EAAAuY,GACA,MAAAE,GAAA3lB,KAAA4D,EAAAsJ,GAAA,EAAAuY,IAIAjG,EAAAhe,UAAA0f,KAAA,SAAArW,EAAAigB,EAAAntB,EAAAxB,GAQA,GAPAwB,MAAA,GACAxB,GAAA,IAAAA,MAAA6D,KAAAjF,QACA+vB,GAAAjgB,EAAA9P,SAAA+vB,EAAAjgB,EAAA9P,QACA+vB,MAAA,GACA3uB,EAAA,GAAAA,EAAAwB,IAAAxB,EAAAwB,GAGAxB,IAAAwB,EAAA,QACA,QAAAkN,EAAA9P,QAAA,IAAAiF,KAAAjF,OAAA,QAGA,IAAA+vB,EAAA,EACA,SAAAlL,YAAA,4BAEA,IAAAjiB,EAAA,GAAAA,GAAAqC,KAAAjF,OAAA,SAAA6kB,YAAA,4BACA,IAAAzjB,EAAA,WAAAyjB,YAAA,0BAGAzjB,GAAA6D,KAAAjF,SAAAoB,EAAA6D,KAAAjF,QACA8P,EAAA9P,OAAA+vB,EAAA3uB,EAAAwB,IACAxB,EAAA0O,EAAA9P,OAAA+vB,EAAAntB,EAGA,IACA7C,GADA0N,EAAArM,EAAAwB,CAGA,IAAAqC,OAAA6K,GAAAlN,EAAAmtB,KAAA3uB,EAEA,IAAArB,EAAA0N,EAAA,EAAqB1N,GAAA,IAAQA,EAC7B+P,EAAA/P,EAAAgwB,GAAA9qB,KAAAlF,EAAA6C,OAEG,IAAA6K,EAAA,MAAAgX,EAAAC,oBAEH,IAAA3kB,EAAA,EAAeA,EAAA0N,IAAS1N,EACxB+P,EAAA/P,EAAAgwB,GAAA9qB,KAAAlF,EAAA6C,OAGAma,YAAAtW,UAAAupB,IAAAvI,KACA3X,EACA7K,KAAAymB,SAAA9oB,IAAA6K,GACAsiB,EAIA,OAAAtiB,IAOAgX,EAAAhe,UAAAif,KAAA,SAAAxhB,EAAAtB,EAAAxB,EAAAukB,GAEA,mBAAAzhB,GAAA,CASA,GARA,gBAAAtB,IACA+iB,EAAA/iB,EACAA,EAAA,EACAxB,EAAA6D,KAAAjF,QACK,gBAAAoB,KACLukB,EAAAvkB,EACAA,EAAA6D,KAAAjF,QAEA,IAAAkE,EAAAlE,OAAA,CACA,GAAAid,GAAA/Y,EAAAiY,WAAA,EACAc,GAAA,MACA/Y,EAAA+Y,GAGA,OAAA2I,KAAAD,GAAA,gBAAAA,GACA,SAAAT,WAAA,4BAEA,oBAAAS,KAAAlB,EAAAqB,WAAAH,GACA,SAAAT,WAAA,qBAAAS,OAEG,gBAAAzhB,KACHA,GAAA,IAIA,IAAAtB,EAAA,GAAAqC,KAAAjF,OAAA4C,GAAAqC,KAAAjF,OAAAoB,EACA,SAAAyjB,YAAA,qBAGA,IAAAzjB,GAAAwB,EACA,MAAAqC,KAGArC,MAAA,EACAxB,MAAAwkB,KAAAxkB,EAAA6D,KAAAjF,OAAAoB,IAAA,EAEA8C,MAAA,EAEA,IAAAnE,EACA,oBAAAmE,GACA,IAAAnE,EAAA6C,EAAmB7C,EAAAqB,IAASrB,EAC5BkF,KAAAlF,GAAAmE,MAEG,CACH,GAAA+lB,GAAAxF,EAAAyB,SAAAhiB,GACAA,EACAyiB,EAAA,GAAAlC,GAAAvgB,EAAAyhB,GAAAY,YACA9Y,EAAAwc,EAAAjqB,MACA,KAAAD,EAAA,EAAeA,EAAAqB,EAAAwB,IAAiB7C,EAChCkF,KAAAlF,EAAA6C,GAAAqnB,EAAAlqB,EAAA0N,GAIA,MAAAxI,MAMA,IAAA8lB,IAAA,uBb4xE6BtD,KAAKroB,EAASC,EAAoB,UAIzD4wB,KACA,SAAU9wB,EAAQwI,EAAqBtI,GAE7C,Ych5HA,SAAA0W,GAAAC,GACA3W,EAAA,Qdg5HqB,GAAI6wB,GAA+H7wB,EAAoB,Qcj5H5K8wB,EAAA9wB,EAAA,QAGAgX,EAAAhX,EAAA,QAMAiX,EAAAP,EAKAQ,EAAAF,EACA6Z,EAAA,EACAC,EAAA,EACA7Z,EANA,kBAEA,KASA3O,GAAA,EAAA4O,EAAA,Sdw5HM6Z,KACA,SAAUjxB,EAAQC,EAASC,Ie34HjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,UAKC,SAAAE,GACD,YAEA,IAAA8wB,KAGKC,KAAA,SAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,UAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,OAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,SAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,UAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,OAAA7uB,KAAA,WAAA8uB,OAAA,IAAAztB,QAAA,WACAwtB,KAAA,YAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,SAAA7uB,KAAA,WAAA8uB,OAAA,IAAAztB,QAAA,WACAwtB,KAAA,YAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,SAAA7uB,KAAA,WAAA8uB,OAAA,IAAAztB,QAAA,WACAwtB,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,UACAD,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,UACAD,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,QAAAztB,QAAA,WACAwtB,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,QAAAztB,QAAA,WACAwtB,KAAA,IAAA7uB,KAAA,WAAA8uB,OAAA,KAAAztB,QAAA,WACAwtB,KAAA,IAAA7uB,KAAA,WAAA8uB,OAAA,IAAAztB,QAAA,WACAwtB,KAAA,IAAA7uB,KAAA,WAAA8uB,OAAA,KAAAztB,QAAA,WACAwtB,KAAA,IAAA7uB,KAAA,WAAA8uB,OAAA,MAAAztB,QAAA,WACAwtB,KAAA,SAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,QAAA7uB,KAAA,WAAA8uB,OAAA,MACAD,KAAA,WAAA7uB,KAAA,WAAA8uB,OAAA,UACAD,KAAA,aAAA7uB,KAAA,WAAA8uB,OAAA,UACAD,KAAA,OAAA7uB,KAAA,WAAA8uB,OAAA,KAAAztB,QAAA,WACAwtB,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,kBAAA1tB,QAAA,WAEAwtB,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,gBAAAC,YAAkEC,UAAA,EAAAC,YAAA,KAClEN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,mBAAAC,YAAqEC,UAAA,EAAAC,YAAA,KACrEN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,mBAAAC,YAAqEC,UAAA,EAAAC,YAAA,KACrEN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,mBAAAC,YAAqE7gB,SAAA,KACrEygB,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,mBAAAC,YAAqE7gB,SAAA,KACrEygB,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAA8gB,UAAA,KAChEL,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAA8gB,UAAA,KAChEL,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,qBAAAC,YAAwE7gB,SAAA,KACxEygB,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,qBAAAC,YAAwE7gB,SAAA,KACxEygB,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAghB,SAAA,KAChEP,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAghB,SAAA,EAAAC,SAAA,KAChER,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAghB,SAAA,EAAAE,WAAA,KAChET,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAghB,SAAA,EAAAC,SAAA,EAAAC,WAAA,KAChET,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAghB,SAAA,KAChEP,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAghB,SAAA,EAAAC,SAAA,KAChER,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAiE7gB,SAAA,EAAAghB,SAAA,EAAAE,WAAA,KACjET,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAiE7gB,SAAA,EAAAghB,SAAA,EAAAC,SAAA,EAAAC,WAAA,KACjET,KAAA,IAAS7uB,KAAA,SAAAgvB,OAAA,kBAAAC,YAA2D7gB,SAAA,EAAA+gB,YAAA,KACpEN,KAAA,IAAS7uB,KAAA,SAAAgvB,OAAA,kBAAAC,YAA2D7gB,SAAA,EAAA+gB,YAAA,KACpEN,KAAA,QAAA7uB,KAAA,SAAAgvB,OAAA,aAAAC,YAAmE7gB,SAAA,KACnEygB,KAAA,QAAA7uB,KAAA,SAAAgvB,OAAA,aAAAC,YAAmE7gB,SAAA,KACnEygB,KAAA,QAAA7uB,KAAA,SAAAgvB,OAAA,eAAAC,YAAqE7gB,SAAA,EAAAmhB,gBAAA,KACrEV,KAAA,QAAA7uB,KAAA,SAAAgvB,OAAA,eAAAC,YAAqE7gB,SAAA,EAAAmhB,gBAAA,KACrEV,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,6BAAAC,YAAgF7gB,SAAA,EAAAmhB,gBAAA,EAAAL,UAAA,EAAAC,YAAA,KAChFN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,6BAAAC,YAA+E7gB,SAAA,EAAAmhB,gBAAA,EAAAL,UAAA,EAAAC,YAAA,KAC/EN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,sBACAH,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,sCACAH,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAohB,aAAA,KAChEX,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAohB,aAAA,KAChEX,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,cAAAC,YAAgE7gB,SAAA,EAAAohB,aAAA,EAAAC,cAAA,KAChEZ,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,YAAAC,YAA8DK,WAAA,KAC9DT,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,sBAAAC,YAAwEK,WAAA,EAAAH,YAAA,KACxEN,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,kBAAAC,YAA+E7gB,SAAA,EAAAkhB,WAAA,KAC/ET,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,kBAAAC,YAA+E7gB,SAAA,KAC/EygB,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,oBAAAC,YAAiF7gB,SAAA,EAAAkhB,WAAA,KACjFT,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,oBAAAC,YAAiF7gB,SAAA,KACjFygB,KAAA,IAAS7uB,KAAA,SAAAgvB,OAAA,4BAAAC,YAAqE7gB,SAAA,KAC9EygB,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,4BAAAC,YAA8E7gB,SAAA,KAC9EygB,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,WAAAC,YAAyEE,YAAA,EAAAD,UAAA,KACzEL,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,WAAAC,YAAwEE,YAAA,KACxEN,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,aAAAC,YAAgE7gB,SAAA,KAChEygB,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,aAAAC,YAAgE7gB,SAAA,KAChEygB,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,aAAAC,YAAiE7gB,SAAA,EAAA8gB,UAAA,KACjEL,KAAA,KAAA7uB,KAAA,SAAAgvB,OAAA,aAAAC,YAAiE7gB,SAAA,EAAA8gB,UAAA,KAEjEL,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,QAAAhS,QAAA,EAAA2S,YAAyEC,OAAA,EAAA5S,QAAA,EAAA6S,aAAA,KACzEf,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,QAAAhS,QAAA,EAAA2S,YAAyEC,OAAA,EAAA5S,QAAA,EAAA6S,aAAA,KACzEf,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,eAAAC,YAA4E7gB,SAAA,EAAA+gB,YAAA,KAC5EN,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,eAAAC,YAA4E7gB,SAAA,EAAA+gB,YAAA,KAC5EN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,iBACAH,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,4BAAA3tB,QAAA,WACAwtB,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,4BAAAC,YAA8EY,UAAA,GAAexuB,QAAA,WAE7FwtB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,WACAjB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,SACAjB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,WACAjB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,SAAAC,cAAiEC,aAAA,KACjEnB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,SAAAC,cAAiEC,aAAA,KACjEnB,KAAA,KAAA7uB,KAAA,WAAA8vB,SAAA,eACAjB,KAAA,KAAA7uB,KAAA,WAAA8vB,SAAA,aAAAC,cAAsEE,SAAA,GAAclT,QAAA,IACpF8R,KAAA,KAAA7uB,KAAA,WAAA8vB,SAAA,aAAAC,cAAsEE,SAAA,GAAelT,QAAA,IACrF8R,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,WAAAC,YAA6D7gB,SAAA,EAAA+gB,YAAA,KAC7DN,KAAA,IAAA7uB,KAAA,SAAAgvB,OAAA,WAAAC,YAA6D7gB,SAAA,EAAA+gB,YAAA,KAE7DN,KAAA,IAAA7uB,KAAA,iBAAA8vB,SAAA,SAAAd,OAAA,mBAAAC,YAAiG7gB,SAAA,GAAgB8hB,oBAAuBC,YAAA,KACxItB,KAAA,IAAA7uB,KAAA,iBAAA8vB,SAAA,SAAAd,OAAA,mBAAAC,YAAiG7gB,SAAA,GAAiB8hB,oBAAuBC,YAAA,KACzItB,KAAA,IAAA7uB,KAAA,iBAAA8vB,SAAA,SAAAd,OAAA,YAAAC,YAA0FK,WAAA,GAAkBjuB,QAAA,WAC5GwtB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,SAAAC,cAAiEb,UAAA,GAAiB7tB,QAAA,WAClFwtB,KAAA,IAAA7uB,KAAA,iBAAA8vB,SAAA,OAAAd,OAAA,eAAAC,YAA2FC,UAAA,GAAiB7tB,QAAA,WAC5GwtB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,OAAAC,cAA+Db,UAAA,GAAiB7tB,QAAA,WAChFwtB,KAAA,IAAA7uB,KAAA,iBAAA8vB,SAAA,SAAAd,OAAA,YAAAC,YAA0FK,WAAA,GAAkBjuB,QAAA,WAC5GwtB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,SAAAC,cAAiEb,UAAA,GAAiB7tB,QAAA,WAClFwtB,KAAA,IAAA7uB,KAAA,iBAAA8vB,SAAA,aAAAd,OAAA,mBAAAC,YAAqG7gB,SAAA,GAAgB2hB,cAAiBK,kBAAA,GAAyB/uB,QAAA,WAC/JwtB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,aAAAzuB,QAAA,WACAwtB,KAAA,QAAA7uB,KAAA,iBAAA8vB,SAAA,SAAAd,OAAA,cAAAC,YAAgG7gB,SAAA,EAAAghB,SAAA,GAAiC/tB,QAAA,WAEjIwtB,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,eAAAW,YAAqEthB,SAAA,KACrEygB,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,eAAAW,YAAqEthB,SAAA,KACrEygB,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,SAAAW,YAA+DthB,SAAA,EAAA8gB,UAAA,KAC/DL,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,SAAAW,YAA+DthB,SAAA,EAAA8gB,UAAA,KAC/DL,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFW,SAAA,aAAwBhvB,QAAA,WAC1GwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFW,SAAA,OAAkBhvB,QAAA,WACpGwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFW,SAAA,qBAAgChvB,QAAA,WAClHwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFW,SAAA,WAAsBhvB,QAAA,WACxGwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFW,SAAA,iBAA2BhvB,QAAA,WAC7GwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFW,SAAA,uBAAkChvB,QAAA,WACpHwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,4BAAAhS,QAAA,EAAAuT,uBAAA,EAAAZ,YAAyHC,OAAA,GAActuB,QAAA,WACvIwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,4BAAAhS,QAAA,EAAAuT,uBAAA,EAAAZ,YAAyHC,OAAA,GAAetuB,QAAA,WACxIwtB,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,qBACAF,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,mBAAAW,YAAqER,UAAA,KACrEL,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,mBAAAW,YAAyEa,WAAA,KACzE1B,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,mBAAAW,YAAyEa,WAAA,KACzE1B,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,0BACAF,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,YAAAhS,QAAA,IACA8R,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,QAAAhS,QAAA,EAAA2S,YAAwEC,OAAA,EAAA5S,QAAA,KACxE8R,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,QAAAhS,QAAA,EAAA2S,YAAwEC,OAAA,EAAA5S,QAAA,KACxE8R,KAAA,eAAA7uB,KAAA,SAAA+uB,OAAA,UAAAhS,QAAA,IACA8R,KAAA,eAAA7uB,KAAA,SAAA+uB,OAAA,gBACAF,KAAA,eAAA7uB,KAAA,SAAA+uB,OAAA,yBAEAF,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,kBAAAhS,QAAA,EAAA2S,YAAkFxa,SAAA,KAClF2Z,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,OAAA1tB,QAAA,WACAwtB,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,aAAAC,cAAqEE,SAAA,GAAc5uB,QAAA,SAAA0b,QAAA,IACnF8R,KAAA,IAAA7uB,KAAA,WAAA8vB,SAAA,aAAAC,cAAqEE,SAAA,GAAe5uB,QAAA,SAAA0b,QAAA,IACpF8R,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,SACAF,KAAA,eAAA7uB,KAAA,SAAA+uB,OAAA,YACAF,KAAA,eAAA7uB,KAAA,SAAA+uB,OAAA,gBACAF,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,iBAAAW,YAAoEc,SAAA,YACpE3B,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,iBAAAW,YAAoEc,SAAA,UAAqBxB,OAAA,sCACzFH,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,iBAAAW,YAAoEc,SAAA,SACpE3B,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,iBAAAW,YAAuEc,SAAA,OAAkBxB,OAAA,sCACzFH,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,iBAAAW,YAAoEc,SAAA,YACpE3B,KAAA,KAAA7uB,KAAA,SAAA+uB,OAAA,iBAAAW,YAAoEc,SAAA,UAAqBxB,OAAA,sCACzFH,KAAA,IAAA7uB,KAAA,SAAA+uB,OAAA,mBACAF,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,uBAAAhS,QAAA,EAAA2S,YAA2Fe,UAAA,EAAAC,WAAA,KAC3F7B,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,uBAAAhS,QAAA,EAAA2S,YAA2Fe,UAAA,EAAAC,WAAA,KAC3F7B,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,SAAAW,YAA+DM,aAAA,GAAoB3uB,QAAA,WACnFwtB,KAAA,QAAA7uB,KAAA,SAAA+uB,OAAA,SAAAW,YAA+DM,aAAA,GAAqB3uB,QAAA,WAEpFwtB,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,2BACAH,KAAA,eAAA7uB,KAAA,SAAAgvB,OAAA,yBAAAC,YAAsF0B,iBAAA,KAEtF9B,KAAA,IAAA7uB,KAAA,SAAA4wB,YAAyCxiB,SAAA,EAAAyiB,SAAA,SAAA1B,YAAA,KACzCN,KAAA,IAAA7uB,KAAA,SAAA4wB,YAAyCxiB,SAAA,EAAAyiB,SAAA,SAAA1B,YAAA,KACzCN,KAAA,IAAA7uB,KAAA,SAAA4wB,YAAyCxiB,SAAA,EAAAyiB,SAAA,kBAAAC,eAAA,EAAA3B,YAAA,KACzCN,KAAA,IAAA7uB,KAAA,SAAA4wB,YAAyCxiB,SAAA,EAAAyiB,SAAA,kBAAAC,eAAA,EAAA3B,YAAA,KACzCN,KAAA,KAAA7uB,KAAA,SAAA4wB,YAA0CxiB,SAAA,EAAAyiB,SAAA,kBAAA1B,YAAA,KAC1CN,KAAA,KAAA7uB,KAAA,SAAA4wB,YAA0CxiB,SAAA,EAAAyiB,SAAA,kBAAA1B,YAAA,KAE1CN,KAAA,IAAA7uB,KAAA,OASL+wB,IACK7xB,KAAA,cAAA8xB,UAAA,SACA9xB,KAAA,QACAA,KAAA,OAAA8xB,UAAA,OACA9xB,KAAA,OAAA8xB,UAAA,OACA9xB,KAAA,OAAA8xB,UAAA,OACA9xB,KAAA,UACAA,KAAA,QAAA8xB,UAAA,MACA9xB,KAAA,OAAA8xB,UAAA,MACA9xB,KAAA,OAAA8xB,UAAA,QACA9xB,KAAA,MAAA8xB,UAAA,OACA9xB,KAAA,MAAA8xB,UAAA,OACA9xB,KAAA,WAAA8xB,UAAA,SACA9xB,KAAA,YAAA8xB,UAAA,SACA9xB,KAAA,OAAA8xB,UAAA,QACA9xB,KAAA,aAAA8xB,UAAA,IAAAC,eAAA,IACA/xB,KAAA,aAAA8xB,UAAA,QACA9xB,KAAA,OAAA8xB,UAAA,MACA9xB,KAAA,WAAA8xB,UAAA,SACA9xB,KAAA,YAAA8xB,UAAA,MAAAE,2BAAA,IACAhyB,KAAA,SAAA8xB,UAAA,MAGLvwB,EAAA3C,EAAA2C,GAmzJA3C,GAAAqzB,IAjzJA,WACA,QAAAC,GAAApzB,GACAA,EAAAqzB,UAAA,mBACArzB,EAAAqzB,UAAA,8BACAvzB,EAAAwzB,OAAAtzB,EAAA,mBAAgDiB,KAAA,WAChDjB,EAAAsG,GAAA,iBAAAitB,IACAC,EAAAxzB,GACAF,EAAAwG,GAAAtG,EAAAyzB,gBAAA,QAAAC,EAAA1zB,IAGA,QAAA2zB,GAAA3zB,GACAA,EAAAqzB,UAAA,mBACArzB,EAAAgI,IAAA,iBAAAurB,IACAzzB,EAAAkI,IAAAhI,EAAAyzB,gBAAA,QAAAC,EAAA1zB,IACAA,EAAAgB,MAAA4yB,IAAA,KAGA,QAAAC,GAAA7zB,EAAAuE,GACAiB,MAAA1F,EAAA2Q,OAAAmjB,KACA9zB,EAAAg0B,QAAA9zB,EAAA+zB,oBAAA,iBAEAxvB,KAAAyvB,QAAAC,GACAN,EAAA3zB,GAEA,QAAAi0B,GAAAj0B,EAAAqE,GACAmB,MAAA1F,EAAA2Q,OAAAmjB,KACA9zB,EAAAo0B,SAAAl0B,EAAA+zB,oBAAA,iBAEA1vB,KAAA2vB,QAAAC,GACAb,EAAApzB,GAWA,QAAAm0B,GAAAjqB,EAAAlK,GACA,GAAAA,EAAA,CACA,GAAAwF,KAAA0E,GAAsB,MAAA1E,MAAA0E,EACtB,IAAAkqB,GAAAC,EAAAnqB,EACA,KAAAkqB,EACA,QAEA,IAAAnZ,GAAAnb,EAAAqzB,IAAAmB,QAAAt0B,EAAAo0B,EAIA,OAHA,kBAAAnZ,IACAnb,EAAAwzB,OAAAtzB,EAAA,eAAAo0B,GAEAnZ,GAKA,QAAAoZ,GAAAnqB,GACA,QAAAA,EAAA/H,OAAA,GAEA,MAAA+H,GAAA/H,OAAA,EAEA,IAAAoyB,GAAArqB,EAAAsqB,MAAA,UACAC,EAAAF,IAAAh0B,OAAA,EACA,OAAAg0B,EAAAh0B,QAAA,GAAAg0B,EAAA,GAAAh0B,OAEA,QACO,OAAAg0B,EAAAh0B,QAAA,SAAAg0B,EAAA,OAAAE,EAAAl0B,OAEP,QAGA,QADAm0B,IAAA,EACAp0B,EAAA,EAAqBA,EAAAi0B,EAAAh0B,OAAmBD,IAAA,CACxC,GAAAq0B,GAAAJ,EAAAj0B,EACAq0B,KAAAC,IAAiCL,EAAAj0B,GAAAs0B,GAAAD,GACnBD,GAAA,EACdC,IAAAE,MAAmCN,EAAAj0B,GAAAu0B,GAAAF,IAEnC,QAAAD,IAMAI,EAAAL,KACAF,IAAAh0B,OAAA,GAAAk0B,EAAA1yB,eAEA,IAAAwyB,EAAAtX,KAAA,UAGA,QAAAyW,GAAA1zB,GACA,GAAA4zB,GAAA5zB,EAAAgB,MAAA4yB,GASA,OARAA,GAAAmB,YACAnB,EAAAmB,UAAA,WACAnB,EAAAoB,aACAh1B,EAAA0U,UAAAugB,EAAAj1B,EAAAkQ,YAAA,MACAglB,GAAAC,gBAAAn1B,KAA0C4zB,MAI1CA,EAAAmB,UASA,QAAAK,GAAAjyB,EAAA4iB,GAEA,OADA8K,MACAvwB,EAAA6C,EAAyB7C,EAAA6C,EAAA4iB,EAAkBzlB,IAC3CuwB,EAAAjmB,KAAAU,OAAA6e,aAAA7pB,GAEA,OAAAuwB,GAQA,QAAAwE,GAAAr1B,EAAA0C,GACA,MAAAA,IAAA1C,EAAAiG,aAAAvD,GAAA1C,EAAAgE,WAEA,QAAAsxB,GAAA9hB,GACA,gBAAAvR,KAAAuR,GAEA,QAAA+hB,GAAA/hB,GACA,OAAoB,GAApB,SAAoBpR,QAAAoR,GAEpB,QAAAgiB,GAAAhiB,GACA,MAAAiiB,IAAAxzB,KAAAuR,GAEA,QAAAshB,GAAAthB,GACA,gBAAAvR,KAAAuR,GAEA,QAAAkiB,GAAAliB,GACA,cAAAvR,KAAAuR,GAEA,QAAAmiB,GAAAlxB,EAAA6X,GACA,OAAAhc,GAAA,EAAqBA,EAAAgc,EAAA/b,OAAgBD,IACrC,GAAAgc,EAAAhc,IAAAmE,EACA,QAGA,UAIA,QAAAD,GAAAtD,EAAA00B,EAAA5zB,EAAA6zB,EAAAxsB,GACA,OAAA8c,KAAAyP,IAAAvsB,EACA,KAAA4S,OAAA,uDAQA,IANAja,IAAkBA,EAAA,UAClBuD,GAAArE,IACAc,OACA4zB,eACAvsB,YAEAwsB,EACA,OAAAv1B,GAAA,EAAuBA,EAAAu1B,EAAAt1B,OAAoBD,IAC3CiF,GAAAswB,EAAAv1B,IAAAiF,GAAArE,EAGA00B,IACAvC,EAAAnyB,EAAA00B,GAIA,QAAAvC,GAAAnyB,EAAAkI,EAAApJ,EAAA81B,GACA,GAAAC,GAAAxwB,GAAArE,EACA40B,QACA,IAAAE,GAAAF,EAAAE,KACA,KAAAD,EACA,UAAA9Z,OAAA,mBAAA/a,EAEA,eAAA60B,EAAA/zB,KAAA,CACA,GAAAoH,IAAA,IAAAA,EACA,UAAA6S,OAAA,qBAAA/a,EAAA,IAAAkI,IACS,IAAAA,IAETA,GAAA,GAGA2sB,EAAA1sB,UACA,UAAA2sB,GACAD,EAAA1sB,SAAAD,MAAA+c,IAEA,WAAA6P,GAAAh2B,GACA+1B,EAAA1sB,SAAAD,EAAApJ,KAGA,UAAAg2B,IACAD,EAAA3sB,MAAA,WAAA2sB,EAAA/zB,OAAAoH,KAEA,WAAA4sB,GAAAh2B,IACAA,EAAAgB,MAAA4yB,IAAAruB,QAAArE,IAAwCkI,WAKxC,QAAAnJ,GAAAiB,EAAAlB,EAAA81B,GACA,GAAAC,GAAAxwB,GAAArE,EACA40B,QACA,IAAAE,GAAAF,EAAAE,KACA,KAAAD,EACA,UAAA9Z,OAAA,mBAAA/a,EAEA,MAAA60B,EAAA1sB,SAAA,CAUA,GAAA4sB,GAAA,WAAAD,GAAAh2B,KAAAgB,MAAA4yB,IAAAruB,QAAArE,EACA,QAAA+0B,GAAA,UAAAD,GAAAD,OAA4D3sB,MAV5D,GAAA6sB,GAAAj2B,GAAA+1B,EAAA1sB,aAAA8c,GAAAnmB,EACA,eAAAg2B,OAAA7P,KAAA8P,EACA,MAAAA,EAEA,cAAAD,EACA,MAAAD,GAAA1sB,YA6GA,QAAA6sB,KACA1wB,KAAA2wB,mBAAAhQ,GACA3gB,KAAA4wB,WAAA,EACA5wB,KAAA6wB,aAAA,EACA7wB,KAAA8wB,uBACA9wB,KAAA+wB,oBAAApQ,GACA3gB,KAAAgxB,sBAAAC,KA0BA,QAAAjD,GAAAxzB,GAwCA,MAvCAA,GAAAgB,MAAA4yB,MAEA5zB,EAAAgB,MAAA4yB,KACA8C,WAAA,GAAAC,GAGAC,uBAAAzQ,GAGA0Q,0BAAA1Q,GAMA2Q,UAAA,EAEAC,WAAA,EAGAC,WAAA,KACAjkB,SAEAkkB,WAAA,KACAjC,YAAA,EAGAkC,qBAAA/Q,GACAgR,YAAA,EAEAhF,YAAA,EACAiF,aAAA,EACAC,cAAA,KACAC,eAAA,KACAx0B,OAEAyC,aAGAvF,EAAAgB,MAAA4yB,IAGA,QAAA2D,KACAC,IAEAC,YAAA,KAEAC,kBAAA,EAEAC,8BAAAxR,GACAyR,SAAAC,KACAC,eAAA,GAAA5B,GAEA6B,qBAA8BC,UAAA,EAAA5nB,SAAA,EAAA6nB,kBAAA,IAC9BC,mBAAA,GAAAC,OAEAC,wBAAA,GAAAC,GAEAC,2BAAA,GAAAD,GAEA,QAAAE,KAAAhzB,IAAA,CACA,GAAAwwB,GAAAxwB,GAAAgzB,EACAxC,GAAA3sB,MAAA2sB,EAAAH,cAmNA,QAAAe,KACAnxB,KAAAgzB,gBACAhzB,KAAAizB,gBAEAjzB,KAAAssB,SAAA,KACAtsB,KAAAusB,aAAA,KACAvsB,KAAAwrB,OAAA,KACAxrB,KAAAyrB,WAAA,KACAzrB,KAAAkzB,aACAlzB,KAAAmzB,aAAA,KAuBA,QAAAC,GAAA54B,EAAA64B,GACA74B,EAAAgB,MAAA4yB,IAAA8C,WAAA,GAAAC,GACA72B,EAAAwzB,OAAAtzB,EAAA,mBAAA64B,GASA,QAAAC,GAAAv2B,EAAA2uB,EAAAqB,GACA/sB,KAAAuC,QACAvC,KAAAkzB,WAAAn2B,GAAA,IACAiD,KAAAuzB,qBACAvzB,KAAAwzB,iBACAxzB,KAAA0rB,aACA1rB,KAAA+sB,cA0CA,QAAA0G,GAAA/3B,EAAAg4B,GACA,GAAAC,GAAA3B,GAAAU,mBAAAiB,SACA,KAAAj4B,GAAA,GAAAA,EAAAX,OACA,KAAA0b,OAAA,oCAEA,IAAAkd,EAAAj4B,GACA,KAAA+a,OAAA,4BAAA/a,EAEAi4B,GAAAj4B,GAAAg4B,EACAE,GAAAxuB,KAAA1J,GAWA,QAAAi3B,GAAAgB,GACA3zB,KAAA2zB,YACA3zB,KAAA6zB,gBAAAF,EAAA,QAAAL,GACAK,EAAA,QAAAL,GACAK,EAAA,QAAAL,GACAK,EAAA,QAAAL,GAqEA,QAAAT,KACA7yB,KAAA8zB,iBACA9zB,KAAA+zB,SAAA,EACA/zB,KAAAg0B,cAAA,KAq3BA,QAAAC,GAAAv4B,EAAAw4B,GACAC,GAAAz4B,GAAAw4B,EAGA,QAAAE,GAAAn1B,EAAAo1B,GAEA,OADAvd,MACAhc,EAAA,EAAqBA,EAAAu5B,EAAWv5B,IAChCgc,EAAA1R,KAAAnG,EAEA,OAAA6X,GA0JA,QAAAwd,GAAA54B,EAAAw4B,GACAK,GAAA74B,GAAAw4B,EAghBA,QAAAM,GAAA94B,EAAAw4B,GACAxE,GAAAh0B,GAAAw4B,EAWA,QAAAO,GAAAj6B,EAAAsQ,EAAA4pB,GACA,GAAAx3B,GAAAoB,KAAAC,IAAAD,KAAAgD,IAAA9G,EAAAiG,YAAAqK,EAAA5N,MAAA1C,EAAAgE,YACAm2B,EAAAC,EAAAp6B,EAAA0C,GAAA,CACAy3B,GAAA,EAAAA,EAAA,EAAAA,CACA,IAAAv4B,GAAAkC,KAAAC,IAAAD,KAAAgD,IAAA,EAAAwJ,EAAA1O,IAAAu4B,EACA,OAAA13B,GAAAC,EAAAd,GAEA,QAAAy4B,GAAAC,GACA,GAAAjQ,KACA,QAAA1kB,KAAA20B,GACAA,EAAAC,eAAA50B,KACA0kB,EAAA1kB,GAAA20B,EAAA30B,GAGA,OAAA0kB,GAEA,QAAA4K,GAAA3kB,EAAA3J,EAAA6zB,GAKA,MAJA,gBAAA7zB,KACA6zB,EAAA7zB,EAAA/E,GACA+E,IAAAjE,MAEAD,EAAA6N,EAAA5N,KAAAiE,EAAA2J,EAAA1O,GAAA44B,GAEA,QAAAC,GAAA53B,EAAAnC,GACA,OACAgC,KAAAhC,EAAAgC,KAAAG,EAAAH,KACAd,GAAAlB,EAAAgC,KAAAG,EAAAH,MAGA,QAAAg4B,GAAA7J,EAAApgB,EAAApN,EAAAqzB,GAKA,OADAzvB,GAAA0zB,KAAAC,KACAt6B,EAAA,EAAqBA,EAAAmQ,EAAAlQ,OAAmBD,IAAA,CACxC,GAAAmI,GAAAgI,EAAAnQ,EACA,WAAA+C,GAAA,UAAAoF,EAAApF,SACAoF,EAAApF,SAAAoF,EAAApF,YACAqzB,EAAA5E,UAAA,UAAArpB,EAAAzG,QACAiF,EAAA4zB,EAAAhK,EAAApoB,EAAAooB,SACA,WAAA5pB,GAAiC0zB,EAAA/vB,KAAAnC,GACjC,QAAAxB,GAA8B2zB,EAAAhwB,KAAAnC,IAE9B,OACAkyB,UAAAp6B,QAAAo6B,EACAC,OAAAr6B,QAAAq6B,GAGA,QAAAC,GAAAC,EAAAC,GACA,kBAAAA,EAAAl5B,OAAA,KAEA,GAAAm5B,GAAAD,EAAAx6B,OAAA,GACA06B,EAAAH,EAAAj5B,MAAA,EAAAm5B,GACAE,EAAAH,EAAAl5B,MAAA,EAAAm5B,EACA,OAAAC,IAAAC,GAAAJ,EAAAv6B,OAAAy6B,EAAA,OACA,GAAAE,EAAA94B,QAAA64B,IAAA,UAEA,MAAAH,IAAAC,EAAA,OACA,GAAAA,EAAA34B,QAAA04B,IAAA,UAGA,QAAAK,GAAAtK,GACA,GAAA5pB,GAAA,gBAAA4L,KAAAge,GACAoH,EAAAhxB,IAAA,GAAA4pB,EAAAhvB,OAAA,EACA,IAAAo2B,EAAA13B,OAAA,EACA,OAAA03B,GACA,WACAA,EAAA,IACA,MACA,eACAA,EAAA,GACA,MACA,SACAA,EAAA,GAIA,MAAAA,GAEA,QAAAmD,GAAAp7B,EAAA05B,EAAA2B,GACA,kBACA,OAAA/6B,GAAA,EAAuBA,EAAA+6B,EAAY/6B,IACnCo5B,EAAA15B,IAIA,QAAAs7B,GAAAhrB,GACA,MAAA7N,GAAA6N,EAAA5N,KAAA4N,EAAA1O,IAEA,QAAA25B,GAAAC,EAAAC,GACA,MAAAD,GAAA55B,IAAA65B,EAAA75B,IAAA45B,EAAA94B,MAAA+4B,EAAA/4B,KAEA,QAAAg5B,GAAAF,EAAAC,GACA,MAAAD,GAAA94B,KAAA+4B,EAAA/4B,MAGA84B,EAAA94B,MAAA+4B,EAAA/4B,MAAA84B,EAAA55B,GAAA65B,EAAA75B,GAKA,QAAA+5B,GAAAH,EAAAC,GAIA,MAHAxO,WAAA1sB,OAAA,IACAk7B,EAAAE,EAAAvR,UAAAjE,GAAA5I,MAAAvW,UAAAnF,MAAAmmB,KAAAiF,UAAA,KAEAyO,EAAAF,EAAAC,GAAAD,EAAAC,EAEA,QAAAG,GAAAJ,EAAAC,GAIA,MAHAxO,WAAA1sB,OAAA,IACAk7B,EAAAG,EAAAxR,UAAAjE,GAAA5I,MAAAvW,UAAAnF,MAAAmmB,KAAAiF,UAAA,KAEAyO,EAAAF,EAAAC,KAAAD,EAEA,QAAAK,GAAAL,EAAAC,EAAAK,GAEA,GAAAC,GAAAL,EAAAF,EAAAC,GACAO,EAAAN,EAAAD,EAAAK,EACA,OAAAC,IAAAC,EAEA,QAAA5B,GAAAp6B,EAAAi8B,GACA,MAAAj8B,GAAAsD,QAAA24B,GAAA17B,OAEA,QAAAiJ,GAAA0yB,GACA,MAAAA,GAAA1yB,KACA0yB,EAAA1yB,OAEA0yB,EAAAhlB,QAAA,iBAEA,QAAAilB,GAAAD,GACA,MAAAA,GAAAhlB,QAAA,4BAA2C,QAE3C,QAAAklB,GAAAp8B,EAAAi8B,EAAAloB,GACA,GAAAsoB,GAAAjC,EAAAp6B,EAAAi8B,GACAK,EAAA,GAAA/e,OAAAxJ,EAAAsoB,EAAA,GAAApf,KAAA,IACAjd,GAAA0U,UAAAjS,EAAAw5B,EAAAI,IACAr8B,EAAA4C,aAAA05B,EAAAt8B,EAAAkQ,aAQA,QAAAqsB,GAAAv8B,EAAAw8B,GACA,GAAAC,MAAAt8B,EAAAH,EAAAI,iBACAM,EAAA46B,EAAAt7B,EAAAkN,QAAAsvB,IACAE,GAAAnB,EAAAiB,EAAA97B,GACAi8B,EAAA38B,EAAAkQ,UAAA,QACA0sB,EAAAC,GAAA18B,EAAAw8B,GACAG,EAAAvB,EAAAp7B,EAAAy8B,GAAAl8B,KAAAP,EAAAy8B,GAAA/5B,QACAiE,EAAA3G,EAAAI,OAAA,EACAyJ,EAAAlD,EAAA81B,IAAA91B,EAAA,EACAi2B,EAAA58B,EAAA6J,GAAAnH,OAEAoD,EAAAnC,KAAAC,IAAAg5B,EAAAr6B,KAAAhC,EAAAgC,MACAsB,EAAAF,KAAAgD,IAAAi2B,EAAAr6B,KAAAhC,EAAAgC,MACAs6B,EAAAD,EAAAn7B,GAAAq7B,EAAAv8B,EAAAkB,GAEAqL,EAAA9M,EAAA6J,GAAAtJ,KAAAkB,GAAAo7B,EACAE,EAAAD,EAAAD,CACA/vB,GAAA,GAAAiwB,GAAA,GACAF,IACAN,GAAyBO,KAClBhwB,EAAA,GAAAiwB,GAAA,GACPF,IACAF,GAA0BG,KACnBhwB,EAAA,OAAAiwB,IACPF,IACAC,IAEA,QAAAv6B,GAAAuD,EAAgCvD,GAAAsB,EAAkBtB,IAAA,CAClD,GAAA8K,IAAqB3K,OAAA,GAAAJ,GAAAC,EAAAs6B,GAAAt8B,KAAA,GAAA+B,GAAAC,EAAAu6B,GACrBR,GAAA7xB,KAAA4C,GAKA,MAHAxN,GAAA+C,cAAA05B,GACAD,EAAA56B,GAAAq7B,EACAF,EAAAn7B,GAAAo7B,EACAD,EAEA,QAAAI,IAAAn9B,EAAAU,EAAA6J,GAEA,OADAzH,MACAxC,EAAA,EAAqBA,EAAAiK,EAAYjK,IAAA,CACjC,GAAA88B,GAAAnI,EAAAv0B,EAAAJ,EAAA,EACAwC,GAAA8H,MAAkB/H,OAAAu6B,EAAA18B,KAAA08B,IAElBp9B,EAAA+C,cAAAD,EAAA,GAGA,QAAA+5B,IAAA18B,EAAAgH,EAAAxF,GACA,OAAArB,GAAA,EAAqBA,EAAAH,EAAAI,OAAmBD,IAAA,CACxC,GAAA+8B,GAAA,QAAA17B,GAAA45B,EAAAp7B,EAAAG,GAAAuC,OAAAsE,GACAm2B,EAAA,UAAA37B,GAAA45B,EAAAp7B,EAAAG,GAAAI,KAAAyG,EACA,IAAAk2B,GAAAC,EACA,MAAAh9B,GAGA,SAEA,QAAAi9B,IAAAv9B,EAAA4zB,GACA,GAAAyD,GAAAzD,EAAAyD,aAyCA,OAAAzD,GAAAuD,WAxCA,WACA,GAAAsF,GAAAz8B,EAAAI,iBACA+C,EAAAs5B,EAAA,GACA96B,EAAA86B,IAAAl8B,OAAA,EAGA,QAFAm7B,EAAAv4B,EAAAN,OAAAM,EAAAzC,MAAAyC,EAAAN,OAAAM,EAAAzC,KACAg7B,EAAA/5B,EAAAkB,OAAAlB,EAAAjB,MAAAiB,EAAAjB,KAAAiB,EAAAkB,WAGA,WACA,GAAA26B,GAAAx9B,EAAAkQ,YACAssB,EAAAx8B,EAAAkQ,YACAutB,EAAApG,EAAAD,WACA,IAAAqG,EAAA,CACA,GAAAnzB,GAAAmzB,EAAAnzB,MACAC,EAAAkzB,EAAAlzB,MACAiyB,GAAA/5B,EAAA+6B,EAAA96B,KAAA6H,EAAAizB,EAAA57B,GAAA0I,EAIA,QAHAmyB,MAGAn8B,EAAAk9B,EAAA96B,KAA2CpC,EAAAk8B,EAAA95B,KAAuBpC,IAAA,CAClE,GAAAuC,GAAAJ,EAAAnC,EAAAk9B,EAAA57B,IACAlB,EAAA+B,EAAAnC,EAAAk8B,EAAA56B,IACA4L,GAAyB3K,SAAAnC,OACzB+7B,GAAA7xB,KAAA4C,GAEAxN,EAAA+C,cAAA05B,OACS,CACT,GAAAt5B,GAAAk0B,EAAAqG,WAAAxqB,OACAvR,EAAA01B,EAAAsG,SAAAzqB,OACAxQ,EAAAf,EAAAe,KAAAS,EAAAT,KACAd,EAAAD,EAAAC,GAAAuB,EAAAvB,EACA46B,IAA0B95B,KAAA85B,EAAA95B,OAAAd,GAAAc,EAAA85B,EAAA56B,KAAA46B,EAAA56B,IAC1By1B,EAAAlF,aACAqL,EAAA/6B,EAAA+6B,EAAA96B,KAAA,GACA85B,EAAA/5B,EAAA+5B,EAAA95B,KAAA03B,EAAAp6B,EAAAw8B,EAAA95B,QAEA1C,EAAAwQ,aAAAgtB,EAAAhB,GAEA,OAAAgB,EAAAhB,MAWA,QAAAoB,IAAA59B,EAAA4zB,GACA,GAAA/wB,GAAA+wB,EAAA9wB,IAAAD,OACAnC,EAAAkzB,EAAA9wB,IAAApC,IAEAkzB,GAAA0D,iBACA52B,EAAAV,EAAA69B,aAAA79B,EAAA89B,aAAAj7B,GAAA+wB,EAAA0D,eAAA/2B,QACAqzB,EAAA0D,eAAA,MAEA1D,EAAAyD,eAA2BqG,WAAA19B,EAAAuU,YAAA1R,GAC3B86B,SAAA39B,EAAAuU,YAAA7T,GACAmC,OAAAy4B,EAAAz4B,GACAnC,KAAA46B,EAAA56B,GACAy2B,WAAAvD,EAAAuD,WACAhF,WAAAyB,EAAAzB,WACAiF,YAAAxD,EAAAwD,aAEA,QAAA2G,IAAA/9B,EAAAmD,EAAAxB,GACA,GAGA6S,GAHA1R,EAAA9C,EAAAgB,MAAA4yB,IAAA9wB,IACApC,EAAAoC,EAAApC,KACAmC,EAAAC,EAAAD,MAkBA,OAhBA64B,GAAA/5B,EAAAwB,KACAqR,EAAA7S,EACAA,EAAAwB,EACAA,EAAAqR,GAEAknB,EAAAh7B,EAAAmC,IACAnC,EAAAi7B,EAAAx4B,EAAAzC,GACAmC,EAAA+4B,EAAA/4B,EAAAlB,KAEAkB,EAAA84B,EAAAx4B,EAAAN,GACAnC,EAAAk7B,EAAAl7B,EAAAiB,GACAjB,EAAAu0B,EAAAv0B,EAAA,OACA,GAAAA,EAAAkB,IAAAlB,EAAAgC,MAAA1C,EAAAiG,cACAvF,EAAA+B,EAAA/B,EAAAgC,KAAA,EAAA03B,EAAAp6B,EAAAU,EAAAgC,KAAA,OAGAG,EAAAnC,GAMA,QAAAs9B,IAAAh+B,EAAA8C,EAAA7B,GACA,GAAA2yB,GAAA5zB,EAAAgB,MAAA4yB,GACA9wB,MAAA8wB,EAAA9wB,GACA,IAAA7B,MACA2yB,EAAAzB,WAAA,OAAAyB,EAAAwD,YAAA,eACA6G,EAAAC,GAAAl+B,EAAA8C,EAAA7B,EACAjB,GAAA+C,cAAAk7B,EAAA99B,OAAA89B,EAAAE,SACAC,GAAAp+B,GAEA,QAAAk+B,IAAAl+B,EAAA8C,EAAA7B,EAAAo9B,GACA,GAAA39B,GAAA46B,EAAAx4B,EAAApC,MACAmC,EAAAy4B,EAAAx4B,EAAAD,OACA,YAAA5B,EAAA,CACA,GAAAq9B,GAAAD,GAAA3C,EAAA54B,EAAApC,KAAAoC,EAAAD,QAAA,IACA07B,EAAA7C,EAAA54B,EAAApC,KAAAoC,EAAAD,QAAA,GAGA,OAFAnC,GAAAu0B,EAAAnyB,EAAApC,KAAA,EAAA49B,GACAz7B,EAAAoyB,EAAAnyB,EAAAD,OAAA,EAAA07B,IAEAp+B,SAAoB0C,SAAAnC,SACpBy9B,QAAA,GAEO,WAAAl9B,EAAA,CACP,GAAAy6B,EAAA54B,EAAApC,KAAAoC,EAAAD,QASAnC,EAAAkB,GAAA,EACAiB,EAAAjB,GAAAw4B,EAAAp6B,EAAA6C,EAAAH,UAVA,CACAG,EAAAjB,GAAA,CAEA,IAAAoC,GAAAhE,EAAAgE,UACAtD,GAAAgC,KAAAsB,IACAtD,EAAAgC,KAAAsB,GAEAtD,EAAAkB,GAAAw4B,EAAAp6B,EAAAU,EAAAgC,MAKA,OACAvC,SAAoB0C,SAAAnC,SACpBy9B,QAAA,GAEO,YAAAl9B,EAAA,CAQP,OAPAqQ,GAAAxN,KAAAC,IAAAlB,EAAAH,KAAAhC,EAAAgC,MACA87B,EAAA16B,KAAAC,IAAAlB,EAAAjB,GAAAlB,EAAAkB,IACAiT,EAAA/Q,KAAAgD,IAAAjE,EAAAH,KAAAhC,EAAAgC,MACA+7B,EAAA36B,KAAAgD,IAAAjE,EAAAjB,GAAAlB,EAAAkB,IAAA,EACA2I,EAAAsK,EAAAvD,EAAA,EACA6sB,EAAAz9B,EAAAgC,MAAA4O,EAAA,EAAA/G,EAAA,EACApK,KACAG,EAAA,EAAuBA,EAAAiK,EAAYjK,IACnCH,EAAAyK,MACA/H,OAAAJ,EAAA6O,EAAAhR,EAAAk+B,GACA99B,KAAA+B,EAAA6O,EAAAhR,EAAAm+B,IAGA,QACAt+B,SACAg+B,YAIA,QAAAO,IAAA1+B,GACA,GAAAsQ,GAAAtQ,EAAAkQ,UAAA,OAMA,OALA,IAAAlQ,EAAAka,eAAA3Z,SAGA+P,EAAAqrB,EAAArrB,EAAAtQ,EAAAkQ,UAAA,YAEAI,EAQA,QAAAquB,IAAA3+B,EAAA4+B,GACA,GAAAhL,GAAA5zB,EAAAgB,MAAA4yB,KACA,IAAAgL,GACA5+B,EAAA0U,UAAAulB,EAAAj6B,EAAA4zB,EAAA9wB,IAAApC,OAEAk9B,GAAA59B,EAAA4zB,GACAA,EAAAuD,YAAA,EACAvD,EAAAzB,YAAA,EACAyB,EAAAwD,aAAA,EACAt3B,EAAAwzB,OAAAtzB,EAAA,mBAAgDiB,KAAA,WAChD2yB,EAAAqD,YACArD,EAAAqD,WAAAlvB,QAQA,QAAA82B,IAAA7+B,EAAA8+B,EAAAC,GACA,GAAAC,GAAAh/B,EAAAwP,SAAAsvB,EAAAC,EAEA,aAAA98B,KAAA+8B,GAAA,CACA,GAAAzvB,GAAAyvB,EAAAxK,MAAA,KAEAjlB,GAAA6D,KAQA,QAHA1Q,GAGAA,EAAA6M,EAAA6D,MAAoC7D,EAAAhP,OAAA,GAAAmC,GAAAgzB,EAAAhzB,GAAsDA,EAAA6M,EAAA6D,MAC1F2rB,EAAAr8B,OACAq8B,EAAAn9B,GAAA,CAGAc,IACAq8B,EAAAr8B,OACAq8B,EAAAn9B,GAAAw4B,EAAAp6B,EAAA++B,EAAAr8B,OAEAq8B,EAAAn9B,GAAA,GAMA,QAAAq9B,IAAAz4B,EAAAs4B,EAAAC,GACAD,EAAAl9B,GAAA,EACAm9B,EAAAn9B,GAAA,EACAm9B,EAAAr8B,OAGA,QAAAw8B,IAAA38B,GACA,IAAAA,EACA,QAEA,IAAA48B,GAAA58B,EAAAyV,OAAA,KACA,WAAAmnB,EAAA58B,EAAAhC,OAAA4+B,EAGA,QAAAC,IAAAp/B,EAAAsxB,EAAA+N,EAAAhO,EAAAiO,GAQA,IAPA,GAAAhvB,GAAAouB,GAAA1+B,GACA0C,EAAA1C,EAAAsD,QAAAgN,EAAA5N,MACA68B,EAAAjvB,EAAA1O,GAIAK,EAAAq9B,EAAAE,GAAA,GAAAC,GAAA,IACAx9B,EAAAS,EAAAP,OAAAo9B,KAEA,KADAA,GACA78B,EAAAnC,OAAiC,WAGjC8wB,GACApvB,EAAAw9B,GAAA,IAEAx9B,EAAAu9B,GAAA,IACA98B,EAAAP,OAAAo9B,MACAt9B,EAAAu9B,GAAA,GAKA,KADA,GAAA79B,GAAA49B,EAAAp8B,EAAAo8B,EACAt9B,EAAAS,EAAAP,OAAAR,OAAAe,EAAAnC,QAA2DoB,GAC3D,MAAAM,EAAAS,EAAAP,OAAAgB,QAAA,GAAsDA,GAGtD,IAFAA,IAEAmuB,EAAA,CAIA,IADA,GAAAF,GAAAzvB,EACA,KAAAM,KAAAS,EAAAP,OAAAR,OAAAe,EAAAnC,QAAkEoB,GAClE,IAAAyvB,GAAAzvB,EAAA,CAEA,IADA,GAAA+9B,GAAAv8B,EACA,KAAAlB,KAAAS,EAAAP,OAAAgB,EAAA,KAAAA,EAAA,GAAkEA,GAClEA,KAAuBA,EAAAu8B,IAGvB,OAAcv8B,MAAAV,EAAA6N,EAAA5N,KAAAS,GAAAxB,IAAAc,EAAA6N,EAAA5N,KAAAf,IAGd,QAAAg+B,IAAA3/B,EAAA4/B,EAAAC,GACAtE,EAAAqE,EAAAC,IACArI,GAAAI,SAAAkI,IAAA9/B,EAAA4/B,EAAAC,GAIA,QAAAE,IAAA/H,EAAAsC,GACA9C,GAAAO,oBAAAC,YACAR,GAAAO,oBAAA3nB,QAAAkqB,EAAAlqB,QACAonB,GAAAO,oBAAAE,kBAAAqC,EAAArC,kBA2EA,QAAA+H,IAAAhgC,EAAAq7B,EAAAjrB,EAAA6vB,GACA,GAAA3vB,GAAAgrB,EAAAt7B,EAAAkQ,aACA8nB,EAAA5nB,EAAA,KACA5I,EAAA4I,EAAApQ,EAAAkgC,aAAA,EACAC,EAAA7vB,EAAA1O,GACAc,EAAA4N,EAAA5N,KACA09B,EAAApgC,EAAAsD,QAAAZ,GACA1B,GACAo/B,WACAC,OAAAD,EAAAj+B,OAAAg+B,GACAG,OAAA,KACAt2B,MAAAm2B,EACAF,OACAM,aAAAnwB,GAAkCowB,IAAA,IAAAC,IAAa,MAAYC,IAAA,IAAAC,IAAa,MAAQV,GAChF7vB,UACAwwB,MAAA,EACAC,gBAAA,GAEA5/B,EAAA6/B,GAAAb,EACA,KAAAh/B,EAAA,MAAAqP,EACA,IAAAywB,GAAAC,GAAA//B,GAAA8/B,KACAE,EAAAD,GAAA//B,GAAAggC,UAEA,KADAF,GAAiBA,EAAA//B,GACjB0B,IAAA8E,GAAA6zB,GAAA,CAGA,GAFAr6B,EAAAgJ,OAAAguB,EACAh3B,EAAAq/B,OAAAr/B,EAAAo/B,SAAAj+B,OAAAnB,EAAAgJ,QACAhJ,EAAAq/B,OAAA,CAGA,GAFA39B,GAAAs1B,EACAh3B,EAAAo/B,SAAApgC,EAAAsD,QAAAZ,IAAA,GACAs1B,EAAA,EACAh3B,EAAAgJ,MAAA,MACW,CACX,GAAAk3B,GAAAlgC,EAAAo/B,SAAA7/B,MACAS,GAAAgJ,MAAAk3B,EAAA,EAAAA,EAAA,IAEAlgC,EAAAq/B,OAAAr/B,EAAAo/B,SAAAj+B,OAAAnB,EAAAgJ,OAEAi3B,EAAAjgC,KACAsP,EAAA5N,OACA4N,EAAA1O,GAAAZ,EAAAgJ,MACAqxB,KAGA,MAAAr6B,GAAAq/B,QAAAr/B,EAAA6/B,eACAp+B,EAAAC,EAAA1B,EAAAgJ,OAEAsG,EAoBA,QAAA6wB,IAAAnhC,EAAAsQ,EAAAF,EAAAihB,EAAA+P,GACA,GAAAnF,GAAA3rB,EAAA5N,KACAjC,EAAA6P,EAAA1O,GACAc,EAAA1C,EAAAsD,QAAA24B,GACAhvB,EAAAmD,EAAA,KACAixB,EAAAhQ,EAAAoO,GAAAD,EAEA,IAAA4B,GAAA,IAAA1+B,EAAA,CAGA,GAFAu5B,GAAAhvB,EACAvK,EAAA1C,EAAAsD,QAAA24B,IACA5G,EAAAr1B,EAAAi8B,GACA,WAEAx7B,GAAA,IAAAiC,EAAAnC,OAGA,QACA,GAAA6gC,GAAA,IAAA1+B,EACA,OAAkBsD,KAAA,EAAA1B,GAAA,EAAA5B,KAAAu5B,EAKlB,KAHA,GAAAqF,GAAAr0B,EAAA,EAAAvK,EAAAnC,QAAA,EACAm/B,EAAA4B,EAAAlQ,EAAAkQ,EAEA7gC,GAAA6gC,GAAA,CAEA,OADAC,IAAA,EACAjhC,EAAA,EAAyBA,EAAA+gC,EAAA9gC,SAAAghC,IAAoCjhC,EAC7D,GAAA+gC,EAAA/gC,GAAAoC,EAAAP,OAAA1B,IAAA,CAGA,IAFAi/B,EAAAj/B,EAEAA,GAAA6gC,GAAAD,EAAA/gC,GAAAoC,EAAAP,OAAA1B,KACAA,GAAAwM,CAIA,IAFAmkB,EAAA3wB,EACA8gC,EAAA7B,GAAAtO,EACAsO,GAAApvB,EAAA1O,IAAAq6B,GAAA3rB,EAAA5N,MACA0uB,GAAAsO,EAAAzyB,EAEA,QAEA,QACAjH,KAAAlC,KAAAC,IAAA27B,EAAAtO,EAAA,GACA9sB,GAAAR,KAAAgD,IAAA44B,EAAAtO,GACA1uB,KAAAu5B,GAIAsF,IACA9gC,GAAAwM,GAKA,GADAgvB,GAAAhvB,GACAooB,EAAAr1B,EAAAi8B,GACA,WAEAv5B,GAAA1C,EAAAsD,QAAA24B,GACAx7B,EAAAwM,EAAA,IAAAvK,EAAAnC,QAgBA,QAAAihC,IAAAxhC,EAAAsQ,EAAA+qB,EAAAjrB,EAAAghB,EAAAC,GACA,GAAAyN,GAAAxD,EAAAhrB,GACAmxB,MACArxB,IAAAghB,IAAAhhB,GAAAghB,IACAiK,GAIA,QADA+F,KAAAhxB,GAAAghB,GACA9wB,EAAA,EAAqBA,EAAA+6B,EAAY/6B,IAAA,CACjC,GAAAgO,GAAA6yB,GAAAnhC,EAAAsQ,EAAAF,EAAAihB,EAAA+P,EACA,KAAA9yB,EAAA,CACA,GAAAozB,GAAAtH,EAAAp6B,IAAAgE,WACAy9B,GAAA72B,KAAAwF,GACiB1N,KAAA1C,EAAAgE,WAAAgC,KAAA07B,EAAAp9B,GAAAo9B,IACAh/B,KAAA,EAAAsD,KAAA,EAAA1B,GAAA,GACjB,OAEAm9B,EAAA72B,KAAA0D,GACAgC,EAAA7N,EAAA6L,EAAA5L,KAAA0N,EAAA9B,EAAAhK,GAAA,EAAAgK,EAAAtI,MAEA,GAAA27B,GAAAF,EAAAlhC,QAAA86B,EACAuG,EAAAH,EAAA,GACAI,EAAAJ,EAAAruB,KACA,OAAAhD,KAAAghB,GAEAuQ,GAAAC,EAAA57B,MAAA84B,EAAAl9B,IAAAggC,EAAAl/B,MAAAo8B,EAAAp8B,OAEAm/B,EAAAJ,EAAAruB,OAEA3Q,EAAAo/B,EAAAn/B,KAAAm/B,EAAA77B,OACOoK,GAAAghB,EACP3uB,EAAAo/B,EAAAn/B,KAAAm/B,EAAAv9B,GAAA,IACO8L,GAAAghB,GAEPuQ,GAAAC,EAAAt9B,IAAAw6B,EAAAl9B,IAAAggC,EAAAl/B,MAAAo8B,EAAAp8B,OAEAm/B,EAAAJ,EAAAruB,OAEA3Q,EAAAo/B,EAAAn/B,KAAAm/B,EAAAv9B,KAGA7B,EAAAo/B,EAAAn/B,KAAAm/B,EAAA77B,MAIA,QAAA87B,IAAA9hC,EAAAq7B,EAAAjrB,EAAA2xB,GAIA,OADAxC,GAFAjvB,EAAAtQ,EAAAkQ,YACA/M,EAAAmN,EAAA1O,GAEAtB,EAAA,EAAqBA,EAAA+6B,EAAY/6B,IAAA,CAGjC,QADAi/B,EAAAyC,GAAA7+B,EADAnD,EAAAsD,QAAAgN,EAAA5N,MACAq/B,EAAA3xB,GAAA,IAEA,WAEAjN,GAAAo8B,EAEA,MAAA98B,GAAAzC,EAAAkQ,YAAAxN,KAAA68B,GAGA,QAAA0C,IAAAjiC,EAAAq7B,GAGA,GAAA34B,GAAA1C,EAAAkQ,YAAAxN,IACA,OAAAu3B,GAAAj6B,EAAAyC,EAAAC,EAAA24B,EAAA,IAGA,QAAA6G,IAAAliC,EAAA4zB,EAAAuO,EAAA1hC,GACAk1B,EAAAwM,EAAAC,MAGAxO,EAAA7gB,MAAAovB,IACAvO,EAAA7gB,MAAAovB,GAAAp6B,QAEA6rB,EAAA7gB,MAAAovB,GAAAniC,EAAAuU,YAAA9T,IAGA,QAAAuhC,IAAA7+B,EAAAT,EAAAq/B,EAAA3xB,EAAAiyB,GAMA,GAAA9C,EAYA,OAXAnvB,IAEA,IADAmvB,EAAA78B,EAAAN,QAAA2/B,EAAA5+B,EAAA,KACAk/B,IACA9C,GAAA,IAIA,IADAA,EAAA78B,EAAAulB,YAAA8Z,EAAA5+B,EAAA,KACAk/B,IACA9C,GAAA,GAGAA,EAGA,QAAA+C,IAAAtiC,EAAAU,EAAA26B,EAAApuB,EAAAqkB,GAKA,QAAAiR,GAAAjiC,GAA2B,OAAAN,EAAAsD,QAAAhD,GAC3B,QAAAkiC,GAAAliC,EAAA2M,EAAAw1B,GACA,MAAAA,GAAkBF,EAAAjiC,IAAAiiC,EAAAjiC,EAAA2M,IAClBs1B,EAAAjiC,IAAAiiC,EAAAjiC,EAAA2M,GAPA,GAGA9J,GAAAxB,EAHAe,EAAAhC,EAAAgC,KACAqB,EAAA/D,EAAAiG,YACAa,EAAA9G,EAAAgE,WACA1D,EAAAoC,CAMA,IAAAuK,EAAA,CACA,KAAAlJ,GAAAzD,MAAAwG,GAAAu0B,EAAA,GACAmH,EAAAliC,EAAA2M,IAAmCouB,IACnC/6B,GAAA2M,CAEA,WAAAxK,GAAAnC,EAAA,GAGA,GAAAszB,GAAA5zB,EAAAgB,MAAA4yB,GACA,IAAAA,EAAAzB,YAAAqQ,EAAA9/B,EAAA,OACA,GAAAG,GAAA+wB,EAAA9wB,IAAAD,MACA2/B,GAAA3/B,EAAAH,MAAA,QACA4uB,GAAAzuB,EAAAH,UACAA,GAAA,IAIA,GAAAggC,GAAAH,EAAA7/B,EACA,KAAApC,EAAAoC,EAAoBpC,GAAAwG,GAAAu0B,EAAoB/6B,IACxCkiC,EAAAliC,EAAA,QACAgxB,GAAAiR,EAAAjiC,IAAAoiC,GACArH,IAQA,KAJA15B,EAAA,GAAAc,GAAAnC,EAAA,GAEAA,EAAAwG,IAAA47B,EAAmCA,GAAA,EACvBpR,GAAA,EACZhxB,EAAAoC,EAAoBpC,EAAAyD,IACpButB,GAAAiR,EAAAjiC,IAAAoiC,GAAApiC,GAAAoC,IACA8/B,EAAAliC,GAAA,OAF6BA,KAM7B,MADA6C,GAAA,GAAAV,GAAAnC,EAAA,IACc6C,QAAAxB,OAKd,QAAAghC,IAAA3iC,EAAAU,EAAAu/B,EAAA3O,GACA,GAAAnuB,GAAAxB,EAAA2O,EAAA5P,EAEAkiC,GACAlC,IAAA,OAAAF,IAAA,OACAqC,IAAA,QAAAC,IAAA,QACAnC,IAAU,OAAOF,IAAM,QAAUR,GACjC8C,GACArC,IAAA,IAAAF,IAAA,IACAqC,IAAA,IAAAC,IAAA,IACAnC,IAAU,IAAKF,IAAK,KAAOR,GAC3B+C,EAAAhjC,EAAAsD,QAAAgN,EAAA5N,MAAAP,OAAAmO,EAAA1O,IAGA8Q,EAAAswB,IAAAD,EAAA,GAKA,IAHA5/B,EAAAnD,EAAAgP,eAAAvM,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA8Q,IAAA,QAA2EuwB,aAAAL,IAC3EjhC,EAAA3B,EAAAgP,eAAAvM,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA8Q,GAAA,QAAwEuwB,aAAAL,KAExEz/B,IAAAxB,EACA,OAAgBwB,MAAAmN,EAAA3O,IAAA2O,EAMhB,IAHAnN,IAAA1C,IACAkB,IAAAlB,IAEA0C,EAAAT,MAAAf,EAAAe,MAAAS,EAAAvB,GAAAD,EAAAC,IACAuB,EAAAT,KAAAf,EAAAe,KAAA,CACA,GAAA8R,GAAArR,CACAA,GAAAxB,EACAA,EAAA6S,EASA,MANA8c,GACA3vB,EAAAC,IAAA,EAEAuB,EAAAvB,IAAA,GAGcuB,QAAAxB,OAMd,QAAAuhC,IAAAljC,EAAAU,EAAAu/B,EAAA3O,GACA,GAGAnuB,GAAAxB,EAAArB,EAAA0N,EAHAsC,EAAAgrB,EAAA56B,GACAgC,EAAA1C,EAAAsD,QAAAgN,EAAA5N,MACAygC,EAAAzgC,EAAA8xB,MAAA,IAEA4O,EAAAD,EAAA/gC,QAAA69B,EAiBA,IAZA3vB,EAAA1O,GAAAwhC,EACA9yB,EAAA1O,GAAAwhC,EAKAA,EAAA9yB,EAAA1O,IAAAuhC,EAAA7yB,EAAA1O,KAAAq+B,IACAt+B,EAAA2O,EAAA1O,KACA0O,EAAA1O,IAIAuhC,EAAA7yB,EAAA1O,KAAAq+B,GAAAt+B,EAIA,IAAArB,EAAAgQ,EAAA1O,GAAwBtB,GAAA,IAAA6C,EAAkB7C,IAC1C6iC,EAAA7iC,IAAA2/B,IACA98B,EAAA7C,EAAA,OALA6C,GAAAmN,EAAA1O,GAAA,CAWA,IAAAuB,IAAAxB,EACA,IAAArB,EAAA6C,EAAA6K,EAAAm1B,EAAA5iC,OAA2CD,EAAA0N,IAAArM,EAAiBrB,IAC5D6iC,EAAA7iC,IAAA2/B,IACAt+B,EAAArB,EAMA,OAAA6C,IAAAxB,GAKA2vB,MACAnuB,IAAgBxB,IAIhBwB,MAAAV,EAAA6N,EAAA5N,KAAAS,GACAxB,IAAAc,EAAA6N,EAAA5N,KAAAf,MAVgBwB,MAAAmN,EAAA3O,IAAA2O,GAgBhB,QAAAoH,OA2BA,QAAAK,IAAA/X,GACA,GAAA4zB,GAAA5zB,EAAAgB,MAAA4yB,GACA,OAAAA,GAAAyP,eAAAzP,EAAAyP,aAAA,GAAA3rB,KAEA,QAAAkB,IAAA5Y,EAAAsjC,EAAAzqB,EAAAH,EAAAnT,GACAvF,EAAAuY,WACAvY,EAAAuY,WAAA+qB,EAAA5qB,GAA0C7D,QAAA,EAAAzL,MAAA7D,EAAA6D,MAC1CkP,UAAA/S,EAAA+S,UAAAirB,QAAAh+B,EAAAg+B,QACA/qB,mBAAA,IAGAE,EAAAK,OAAAF,EAAA,KAGA,QAAA2qB,IAAAC,GACA,GAAAC,GAAAC,GAAAF,MACA,KAAAC,EAAAnjC,OAAA,QACA,IAAAqjC,KAEA,QAAAF,EAAA,IACA,OAAApjC,GAAA,EAAqBA,EAAAojC,EAAAnjC,OAAoBD,IACzC,gBAAAojC,GAAApjC,IACAsjC,EAAAh5B,KAAA64B,EAAAI,UAAAH,EAAApjC,GAAA,EAAAojC,EAAApjC,EAAA,IAEA,OAAAsjC,IAGA,QAAAD,IAAAtvB,GAGA,OAFAyvB,IAAA,EACAJ,KACApjC,EAAA,EAAqBA,EAAA+T,EAAA9T,OAAgBD,IAAA,CACrC,GAAAqrB,GAAAtX,EAAAlS,OAAA7B,EACAwjC,IAAA,KAAAnY,GACA+X,EAAA94B,KAAAtK,GAEAwjC,MAAA,MAAAnY,EAEA,MAAA+X,GAIA,QAAAK,IAAA1vB,GAOA,OALA2vB,GAAA,OAEAC,EAAA,IACAH,GAAA,EACAxZ,KACAhqB,GAAA,EAAsBA,EAAA+T,EAAA9T,OAAgBD,IAAA,CACtC,GAAAqrB,GAAAtX,EAAAlS,OAAA7B,IAAA,GACA+L,EAAAgI,EAAAlS,OAAA7B,EAAA,OACA4jC,EAAA73B,IAAA,GAAA23B,EAAA5hC,QAAAiK,EACAy3B,IACA,OAAAnY,GAAAuY,GACA5Z,EAAA1f,KAAA+gB,GAEAmY,GAAA,GAEA,OAAAnY,GACAmY,GAAA,EAEAz3B,IAAA,GAAA43B,EAAA7hC,QAAAiK,KACA63B,GAAA,GAGAA,GAAA,OAAA73B,GACAie,EAAA1f,KAAA+gB,KAGArB,EAAA1f,KAAA+gB,GACAuY,GAAA,OAAA73B,GACAie,EAAA1f,KAAA,OAKA,MAAA0f,GAAArN,KAAA,IAOA,QAAAknB,IAAA9vB,GAGA,OAFAyvB,IAAA,EACAxZ,KACAhqB,GAAA,EAAsBA,EAAA+T,EAAA9T,OAAgBD,IAAA,CACtC,GAAAqrB,GAAAtX,EAAAlS,OAAA7B,IAAA,GACA+L,EAAAgI,EAAAlS,OAAA7B,EAAA,MACA8jC,IAAAzY,EAAAtf,IACAie,EAAA1f,KAAAw5B,GAAAzY,EAAAtf,IACA/L,KACSwjC,GAGTxZ,EAAA1f,KAAA+gB,GACAmY,GAAA,GAEA,OAAAnY,GACAmY,GAAA,EACAtO,EAAAnpB,IAAA,MAAAA,EACAie,EAAA1f,KAAA,KACa,MAAAyB,GAAA,OAAAA,GACbie,EAAA1f,KAAA,QAGA,MAAA+gB,GACArB,EAAA1f,KAAA,KAEA0f,EAAA1f,KAAA+gB,GACA,MAAAtf,GACAie,EAAA1f,KAAA,OAKA,MAAA0f,GAAArN,KAAA,IAKA,QAAAonB,IAAAhwB,GAGA,IAFA,GAAAkD,GAAA,GAAAzX,GAAAwkC,aAAAjwB,GACA2I,MACAzF,EAAAgtB,OAAA,CAEA,KAAAhtB,EAAAitB,QAAA,MAAAjtB,EAAAitB,QACAxnB,EAAApS,KAAA2M,EAAAhT,OAEA,IAAAkgC,IAAA,CACA,QAAAC,KAAAC,IACA,GAAAptB,EAAAtQ,MAAAy9B,GAAA,IACAD,GAAA,EACAznB,EAAApS,KAAA+5B,GAAAD,GACA,OAGAD,GAEAznB,EAAApS,KAAA2M,EAAAhT,QAGA,MAAAyY,GAAAC,KAAA,IAaA,QAAA5D,IAAAhU,EAAAgS,EAAAutB,GAKA,GAHApN,GAAAU,mBAAA2M,YAAA,KACAC,QAAAz/B,GAEAA,YAAA2M,QAAoC,MAAA3M,EAIpC,IACA0/B,GACAC,EAFAtB,EAAAC,GAAAt+B,EAGA,IAAAq+B,EAAAnjC,OAGO,CAEPwkC,EAAA1/B,EAAAw+B,UAAA,EAAAH,EAAA,GAEAsB,IAAA,GADA3/B,EAAAw+B,UAAAH,EAAA,IACAthC,QAAA,SALA2iC,GAAA1/B,CAOA,OAAA0/B,IAGA9kC,EAAA,UACA8kC,EAAAhB,GAAAgB,IAEAH,IACAvtB,EAAA,YAAApV,KAAA8iC,IAEA,GAAA/yB,QAAA+yB,EACA1tB,GAAA2tB,EAAA,QAAA7e,KATA,KAYA,QAAA8e,IAAAjlC,EAAAuC,GACAvC,EAAAklC,iBACAllC,EAAAklC,iBAAA,4BAAA3iC,EAAA,WAC6BsS,QAAA,EAAAswB,SAAA,MAE7BC,MAAA7iC,GAGA,QAAA8iC,IAAAC,EAAAC,GACA,GAAAC,GAAA,2DACAF,GAAA,gCAGA,OAFAC,KACAC,GAAA,8BAAAD,EAAA,WACAC,EAGA,QAAAC,IAAAzlC,EAAAuF,GACA,GAAAsT,IAAAtT,EAAA+/B,QAAA,SAAA//B,EAAAggC,MAAA,GAEA3sB,IAAA5Y,EADAqlC,GAAA9/B,EAAA+/B,OAAA//B,EAAAggC,MACA1sB,EAAAtT,EAAAmT,QAAAnT,GAEA,QAAAmgC,IAAAC,EAAAC,GACA,GAAAD,YAAA3zB,SAAA4zB,YAAA5zB,QAAA,CAEA,OADA3G,IAAA,4CACA/K,EAAA,EAAyBA,EAAA+K,EAAA9K,OAAkBD,IAAA,CAC3C,GAAAqF,GAAA0F,EAAA/K,EACA,IAAAqlC,EAAAhgC,KAAAigC,EAAAjgC,GACA,SAGA,SAEA,SAGA,QAAAkgC,IAAA7lC,EAAA8lC,EAAAzuB,EAAAutB,GACA,GAAAkB,EAAA,CAGA,GAAA9kC,GAAA+W,GAAA/X,GACAqF,EAAAgU,GAAAysB,IAAAzuB,IAAAutB,EACA,IAAAv/B,EAIA,MADA0gC,IAAA/lC,EAAAqF,GACAqgC,GAAArgC,EAAArE,EAAAglC,YACA3gC,GAEArE,EAAAilC,SAAA5gC,GACAA,IAEA,QAAA2R,IAAA3R,GACA,QAAAA,EAAA+R,OAAAjV,OAAA,GACA,GAAA+jC,IAAA,CAEA,QACA5uB,MAAA,SAAAC,GACA,GAAA2uB,IAAA3uB,EAAA4uB,MAEA,WADA5uB,GAAAE,WAGA,IAAAxQ,GAAAsQ,EAAAtQ,MAAA5B,GAAA,EACA,IAAA4B,EACA,UAAAA,EAAA,GAAA1G,QAEAgX,EAAAhT,OACA,aAEAgT,EAAA4uB,QAEA5uB,EAAA6uB,OAAA,GACA/gC,EAAAwN,KAAA0E,EAAAhT,OAAA0C,EAAA,MAKAsQ,EAAAtQ,MAAA5B,GACA,cALAkS,EAAAhT,OACA,KAMA,OAAAgT,EAAAgtB,QACAhtB,EAAAhT,QACAgT,EAAAtQ,MAAA5B,GAAA,QAGAA,SAGA,QAAA0gC,IAAA/lC,EAAAqF,GACA,GAAAghC,GAAAtuB,GAAA/X,GACA8X,EAAAuuB,EAAAC,YACAxuB,IAAAzS,GAAAyS,EAAAzS,QACAyS,GACA9X,EAAAyZ,cAAA3B,GAEAA,EAAAd,GAAA3R,GACArF,EAAA0Z,WAAA5B,GACA9X,EAAA2Z,yBACA0sB,EAAAE,wBACAF,EAAAE,uBAAAx+B,QAEAs+B,EAAAG,qBAAAxmC,EAAA2Z,uBAAAtU,KAEAghC,EAAAI,WAAA3uB,IAGA,QAAAxQ,IAAAtH,EAAAqE,EAAAgB,EAAAg2B,GAEA,WADAlV,KAAAkV,IAAiCA,EAAA,GACjCr7B,EAAA+N,UAAA,WAGA,OAFAtN,GAAAT,EAAAkQ,YACA/I,EAAAnH,EAAAoH,gBAAA/B,EAAA5E,GACAH,EAAA,EAAuBA,EAAA+6B,EAAY/6B,IAAA,CACnC,GAAA2R,GAAA9K,EAAA+L,KAAA7O,EAEA,IADA,GAAA/D,GAAA2R,GAAAspB,EAAAp0B,EAAAnB,OAAAvF,KAAmEwR,EAAA9K,EAAA+L,KAAA7O,KACnE4N,IAGA9K,EAAAnH,EAAAoH,gBAAA/B,EACA,EAAA5C,EAAAzC,EAAAgE,YAAAvB,EAAAzC,EAAAiG,YAAA,KACAkB,EAAA+L,KAAA7O,IACA,OAIA,MAAA8C,GAAAnB,SAGA,QAAA0gC,IAAA1mC,GACA,GAAAgB,GAAA+W,GAAA/X,EACAA,GAAAyZ,cAAA1B,GAAA/X,GAAAsmC,cACAtlC,EAAAylC,WAAA,MACAzlC,EAAAulC,yBACAvlC,EAAAulC,uBAAAx+B,QACA/G,EAAAwlC,qBAAA,OAcA,QAAAG,IAAAlmC,EAAA0C,EAAAxB,GAKA,MAJA,gBAAAlB,KAEAA,IAAAiC,MAEAS,YAAAoa,OACAoY,EAAAl1B,EAAA0C,GAEAxB,EACAlB,GAAA0C,GAAA1C,GAAAkB,EAEAlB,GAAA0C,EAIA,QAAAyjC,IAAA5mC,GACA,GAAA6mC,GAAA7mC,EAAAkR,gBAGAlL,EAAAhG,EAAA8mC,YAAgCtI,KAAA,EAAAltB,IAFhC,EAEgCu1B,EAAAv1B,KAAkD,SAClFy1B,EAAAF,EAAAt1B,aAFA,GAEAs1B,EAAAv1B,IACAhN,EAAAtE,EAAA8mC,YAA8BtI,KAAA,EAAAltB,IAAAy1B,GAAqB,QACnD,QAAcz1B,IAAAtL,EAAAtD,KAAAmS,OAAAvQ,EAAA5B,MAGd,QAAAskC,IAAAhnC,EAAA4zB,EAAAuO,GACA,QAAAA,EAAA,CACA,GAAA8E,GAAAjnC,EAAAgN,IAAAi6B,QAAAC,KACA7sB,EAAA4sB,IAAA1mC,OAAA,EACA,OAAA8Z,MAAAla,QAAAka,EAAAla,OAAA,GAAAO,KAGA,GAAAif,GAAAiU,EAAA7gB,MAAAovB,EACA,OAAAxiB,MAAAzM,OAurBA,QAAAuI,IAAAzb,EAAA+L,EAAAoL,EAAAgwB,EAAAC,EAAAC,EAAAhiC,EACAiiC,EAAAj+B,GAKA,QAAA6R,KACAlb,EAAA+N,UAAA,WACA,MAAAm5B,GACAhwB,IACA3S,GAEA+8B,OAGA,QAAApqB,KACA,GAAA3U,GAAAvC,EAAAwP,SAAA63B,EAAArhC,OAAAqhC,EAAA/iC,MACAijC,EAAAhlC,EAAA2U,QAAA7R,EAAAiiC,EACAD,GAAAnwB,QAAAqwB,GAEA,QAAAhjC,KAGA,KAAA8iC,EAAA//B,YACAq/B,GAAAU,EAAArhC,OAAAmhC,EAAAC,IACA,GAAAjwB,IAAAqwB,GAAAH,EAAArhC,OAAAtD,MAAA8kC,EAAA9kC,KAOA,MAJA1C,GAAAuS,eAAA80B,EAAArhC,OAAA,IACAhG,EAAAwQ,aAAA62B,EAAArhC,OAAAqhC,EAAA/iC,MACAkjC,EAAAH,EAAArhC,YACAkhC,GAAA,EAGAA,IAAA,EAEA,QAAA5F,GAAAmG,GAGA,GAFAA,GAAoBA,IACpBznC,EAAAkJ,QACAs+B,EAAA,CACAxnC,EAAA0U,UAAA8yB,EACA,IAAA5T,GAAA5zB,EAAAgB,MAAA4yB,GACAA,GAAA8T,QAAA,EACA9T,EAAAkD,SAAAlD,EAAAmD,UAAAyQ,EAAA5lC,GAEAyH,GAAuBA,IAEvB,QAAAs+B,GAAAhkC,EAAAikC,EAAAH,GAIA,OAFA3nC,EAAAwa,OAAA3W,GACA7D,EAAAib,QAAApX,IAEA,QACAuT,IAAsB3S,GAAQ,MAC9B,SACAA,GAAmB,MACnB,SAGA,GAAAsjC,GAAAx+B,CACAA,OAAA8c,GACAnmB,EAAA+N,UAAAmN,GACA7R,EAAAw+B,CACA,MACA,SACA3wB,GAEA,SACA,UACA,aACA,aACAoqB,EAAAmG,GAIA,MADAP,IAAmB5F,EAAAmG,IACnB,EAxEAznC,EAAAgB,MAAA4yB,IAAA8T,QAAA,CACA,IAAAR,IAAA,EACAM,EAAAH,EAAArhC,MA2EA,OADAzB,KACA2iC,MACAjC,IAAAjlC,EAAA,kBAAAqF,EAAA+R,QAGArL,MAKA05B,IAAAzlC,GACAslC,OAAA,wBAAAgC,EAAA,wBACAhvB,UAAAqvB,KANAzsB,SACA7R,GAAuBA,MAevB,QAAAy+B,IAAA9nC,GACA,GAAA4zB,GAAA5zB,EAAAgB,MAAA4yB,IACAkE,EAAAN,GAAAM,eACAiQ,EAAAvQ,GAAAU,mBAAA2M,YAAA,KACAzO,EAAA0B,EAAA1B,UACA4R,EAAAlQ,EAAAtB,sBAIAj0B,IACA,KAAA6zB,EAAA,CAWA,IAVA,GAAA6R,GAAAD,EAAAE,cAAAtU,EAAAyD,cAAAD,YAAA7sB,OAAA,EACA49B,EAAAH,EAAAG,QACA5lC,KACAjC,EAAA,EAOAA,EAAA6nC,EAAA5nC,QAEAgC,EAAAqI,KAAAu9B,EAAA7nC,IACA6nC,EAAA7nC,YAAA8nC,IACA9nC,IAEAA,GAAA2nC,CAGAD,GAAAG,QAAA5lC,EACAvC,EAAAgI,IAAA,SAAAtB,IACA5G,EAAAkI,IAAAhI,EAAAyzB,gBAAA,UAAA4U,KAEAjS,GAAAxC,EAAAsD,iBAAA,IAEAoR,GAAAtoC,EAAA4zB,IAAAsD,iBAAA,GACA,GACAtD,EAAAgD,mBAAA2R,eAAA3U,EAAAsD,wBAEAtD,GAAAsD,iBACAtD,EAAAoB,YAAA,EACAh1B,EAAA0U,UAAA1U,EAAAkQ,YAAAxN,KAAA1C,EAAAkQ,YAAAtO,GAAA,GACA5B,EAAAqzB,UAAA,gBACArzB,EAAAqzB,UAAA,mBACArzB,EAAAwoC,iBAAA,GAEAT,EAAAjD,QAAAkD,EAAAG,QAAAlrB,KAAA,KACAnd,EAAAwzB,OAAAtzB,EAAA,mBAAgDiB,KAAA,WAChD62B,EAAAzB,aACAoS,GAAA3Q,GAIA,QAAA4Q,IAAAjgC,GACAmoB,EAAAzd,QAAA1K,GAGA,QAAAkgC,IAAA9X,EAAA7uB,EAAAd,EAAAo5B,EAAAtf,GACA,GAAAvS,IAAqBooB,OAAA7uB,OACrByG,GAAAzG,GAAAd,EACAuH,EAAAzG,EAAA,QAAAs4B,CACA,QAAApwB,KAAA8Q,GACAvS,EAAAyB,GAAA8Q,EAAA9Q,EACAw+B,IAAAjgC,GAwBA,QAAAmgC,IAAA5oC,EAAA4zB,EAAAkE,EAAAa,GACA,GAAAO,GAAA1B,GAAAU,mBAAA2M,YAAAlM,EACA,SAAAA,EAMA,MAJAO,GAAAR,UAAA,IACAmQ,GAAAC,eAAA9oC,EAAAk5B,EAAAR,UAAA,SAEAZ,EAAA1B,WAAA,EAGA,IAAAsC,GAAAQ,EAAAR,UACAqQ,EAAA,CACAjR,GAAA1B,WAAA,EACA0B,EAAAxB,oBAAA4C,EAAAF,cAAAn3B,MAAA,EACA,QAAAvB,GAAA,EAAqBA,EAAAo4B,EAAAn4B,OAAsBD,IAG3C,IAFA,GACA2G,GAAAiD,EADA3H,EAAAm2B,EAAAp4B,GAEAiC,GAOA,GAJA0E,EAAA,oBAAA4L,KAAAtQ,GACA2H,EAAAjD,EAAA,GACA1E,IAAAshC,UAAA58B,EAAA+C,MAAAE,EAAA3J,QACAT,EAAAqzB,IAAA6V,UAAAhpC,EAAAkK,EAAA,SACA0pB,EAAAoB,WAAA,CACA,GAAAmT,GAAAjP,EAAAH,kBAAAgQ,KAAAZ,OACA3Q,IAAAM,eAAAtB,sBAAA2R,QACAA,EACAc,GAAAjpC,EAAAmoC,EAAA,GACAL,GAAA9nC,GAIA83B,EAAA1B,WAAA,EAGA,QAAA8S,IAAApR,EAAA5tB,GACA,IAAA4tB,EAAA1B,UAAA,CACA,GAAAuC,GAAAb,EAAA3B,eACA+C,EAAA1B,GAAAU,mBAAA2M,YAAAlM,EACAO,IACAA,EAAAiQ,SAAAj/B,IAIA,QAAAu+B,IAAA3Q,GACA,IAAAA,EAAA1B,UAAA,CACA,GAAAuC,GAAAb,EAAA3B,eACA+C,EAAA1B,GAAAU,mBAAA2M,YAAAlM,EACAO,MAAAkQ,uBACAlQ,EAAAkQ,sBAAAtR,EAAAtB,wBAIA,QAAA6S,IAAAvR,EAAAzyB,GACA,IAAAyyB,EAAA1B,UAAA,CACA,GAAAuC,GAAAb,EAAA3B,eACA+C,EAAA1B,GAAAU,mBAAA2M,YAAAlM,EACAO,MAAAoQ,iBACApQ,EAAAoQ,gBAAAjkC,IAQA,QAAAqB,IAAA1G,EAAAupC,GACA,GAAAzR,GAAAN,GAAAM,eACAkQ,EAAAlQ,EAAAtB,qBACA,KAAAsB,EAAA1B,UACA,KAAAmT,GAAA,CAEA,GADAvB,EAAAwB,+BAAA,EACA,UAAAD,EAAAE,QAAA,SAAAF,EAAAE,YACAtjB,KAAAojB,EAAAE,OAAA,CACA,GAAAlnC,GAAAgnC,EAAAhnC,KAAA0a,KAAA,KACA+qB,GAAA0B,aACA1B,EAAAG,WACAH,EAAA0B,YAAA,GAEA1pC,EAAAgB,MAAA2oC,YAAA,KAAA1nC,KAAAM,GACAylC,EAAAG,QAAAv9B,MAAArI,IAEAylC,EAAAG,QAAAv9B,KAAArI,GAIAgnC,IAAAhlC,MAQA,QAAAgvB,IAAAvzB,GACA,GAAA4zB,GAAA5zB,EAAAgB,MAAA4yB,GACA,IAAAA,EAAAoB,WAAA,CAEA,GAAA8C,GAAAN,GAAAM,cACA,IAAAA,EAAA1B,UAAuC,MACvC,IAAA4R,GAAAlQ,EAAAtB,qBACAwR,GAAAwB,8BACAxB,EAAAwB,+BAAA,EAGAxB,EAAA0B,YAAA,MAEO1pC,GAAA4pC,MAAAC,SACPC,GAAA9pC,EAAA4zB,EAEAA,GAAAuD,YACAiH,GAAAp+B,GAGA,QAAAo+B,IAAAp+B,GACA,GAAA4zB,GAAA5zB,EAAAgB,MAAA4yB,IACA5tB,EAAAi0B,EAAAj6B,EAAAs7B,EAAA1H,EAAA9wB,IAAApC,OACA4D,EAAA2wB,EAAAjvB,EAAA,IACA4tB,GAAAqD,YACArD,EAAAqD,WAAAlvB,QAEA6rB,EAAAqD,WAAAj3B,EAAAyT,SAAAzN,EAAA1B,GAA8CsB,UAAA,0BAE9C,QAAAkkC,IAAA9pC,EAAA4zB,GACA,GAAA/wB,GAAA7C,EAAAkQ,UAAA,UACAxP,EAAAV,EAAAkQ,UAAA,OASA,IAPA0jB,EAAAuD,aAAAn3B,EAAAmR,oBACAwtB,GAAA3+B,GAAA,GACO4zB,EAAAuD,YAAAvD,EAAAoB,aAAAh1B,EAAAmR,sBACPyiB,EAAAuD,YAAA,EACAvD,EAAAzB,YAAA,EACAryB,EAAAwzB,OAAAtzB,EAAA,mBAAkDiB,KAAA,YAElD2yB,EAAAuD,WAAA,CAGA,GAAAmH,GAAA5C,EAAAh7B,EAAAmC,GAAA,KACA07B,EAAA7C,EAAAh7B,EAAAmC,IAAA,GACAnC,GAAAu0B,EAAAv0B,EAAA,EAAA49B,GACAz7B,EAAAoyB,EAAApyB,EAAA,EAAA07B,GACA3K,EAAA9wB,KACAD,SACAnC,QAEAwhC,GAAAliC,EAAA4zB,EAAA,IAAA+H,EAAAj7B,EAAAmC,IACAq/B,GAAAliC,EAAA4zB,EAAA,IAAAgI,EAAAl7B,EAAAmC,QACO+wB,GAAAoB,aAEPpB,EAAAkD,SAAA92B,EAAAkQ,YAAAtO,IAKA,QAAAwmC,IAAArtB,GACAvV,KAAAuV,UAQA,QAAAstB,IAAA1kC,GAKA,QAAAomC,KAMA,MALA/B,GAAA0B,aACA1B,EAAAG,WACAH,EAAA0B,YAAA,GAEA1B,EAAAG,QAAAv9B,KAAA,GAAAw9B,IAAArtB,KACA,EAVA,GAAA+c,GAAAN,GAAAM,eACAkQ,EAAAlQ,EAAAtB,sBACAzb,EAAAjb,EAAAib,QAAApX,EACAoX,MASA,GAAAA,EAAA3Y,QAAA,eAAA2Y,EAAA3Y,QAAA,cACAtC,EAAAkqC,UAAAjvB,EAAA,aAAAgvB,IAaA,QAAAzB,IAAAtoC,EAAA4zB,EAAAyH,EAAA4O,GAKA,QAAAC,KACAC,EACAC,GAAAC,cAAArqC,EAAA4zB,IAAAiD,uBAEAuT,GAAAE,UAAAtqC,EAAA4zB,GAGA,QAAA2W,GAAAlP,GACA,GAAAvD,EAAAtB,sBAAA2R,QAAA5nC,OAAA,GAGA86B,EAAAzH,EAAAiD,sBAAAwE,EAAA,CACA,IAAAmP,GAAA1S,EAAAtB,qBACAyS,IAAAjpC,EAAAwqC,EAAArC,QAAA9M,IAjBA,GAAAvD,GAAAN,GAAAM,cACAA,GAAA1B,WAAA,CACA,IAAA+T,KAAAvW,EAAAiD,sBACA4T,EAAA7W,EAAA8C,UAkBA,IADA9C,EAAA8C,WAAA9C,EAAAgD,mBACAuT,GAAAvW,EAAAiD,sBAAAvE,sBAGA,OAAAhyB,GAAA,EAAuBA,EAAA+6B,EAAY/6B,IACnC4pC,IACAK,EAAA,OAGAN,IAIAC,IAEAK,EAAAlP,EAEAzH,GAAA8C,WAAA+T,EACA7W,EAAAoB,aAAAiV,GAGAnC,GAAA9nC,GAEA83B,EAAA1B,WAAA,EAGA,QAAA6S,IAAAjpC,EAAAmoC,EAAA9M,GACA,QAAAqP,GAAAC,GAMA,MALA,gBAAAA,GACA7qC,EAAAmF,SAAA0lC,GAAA3qC,GAEA2qC,EAAA3qC,IAEA,EAEA,GAAAU,GAAAV,EAAAkQ,UAAA,QACAg4B,EAAA1Q,GAAAM,eAAAtB,sBAAA0R,aACA,IAAAA,EAAA,CAEA,GAAAtU,GAAA5zB,EAAAgB,MAAA4yB,IACAgX,EAAAhX,EAAAyD,cACA3kB,EAAA+nB,EAAAmQ,EAAA/nC,OAAA+nC,EAAAlqC,KACAy8B,IAAAn9B,EAAAU,EAAAgS,EAAAhQ,KAAA,GACA24B,EAAAr7B,EAAAI,iBAAAG,OACAP,EAAA0U,UAAAhU,GAEA,OAAAJ,GAAA,EAAqBA,EAAA+6B,EAAY/6B,IAAA,CACjC4nC,GACAloC,EAAA0U,UAAAugB,EAAAv0B,EAAAJ,EAAA,GAEA,QAAAgT,GAAA,EAAuBA,EAAA60B,EAAA5nC,OAAoB+S,IAAA,CAC3C,GAAA7M,GAAA0hC,EAAA70B,EACA,IAAA7M,YAAA2hC,IACAtoC,EAAAkqC,UAAAvjC,EAAAsU,QAAA,aAAA2vB,OACW,oBAAAjkC,GAAA,CACX,GAAA6J,GAAAtQ,EAAAkQ,WACAlQ,GAAA4C,aAAA6D,EAAA6J,SACW,CACX,GAAAnN,GAAAnD,EAAAkQ,YACAvO,EAAAszB,EAAA9xB,EAAA,EAAAsD,EAAA,GAAAlG,OACAP,GAAA4C,aAAA6D,EAAA,GAAAtD,EAAAxB,KAIAumC,GACAloC,EAAA0U,UAAAugB,EAAAv0B,EAAA,MAxwJAZ,EAAA0E,aAAA,sBAAAxE,EAAAyE,EAAAJ,GACAI,GAAA,OAAAzE,EAAAC,UAAA,UACAD,EAAAqzB,UAAA,iBACA5uB,GAAAJ,GAAAvE,EAAA6E,MAAA,OAAA1C,KAAAjC,EAAAC,UAAA,YACAD,EAAAqzB,UAAA,qBAiBA,IAAAuB,KAAqBiW,MAAA,IAAAC,KAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAAA,KACrBpW,IAAuBqW,MAAA,KAAAC,UAAA,KAAAC,OAAA,MAAAC,OAAA,OA+CvB5V,GAAA,OACA+J,IAAA1/B,EAAAsN,WAAA,SAAAxL,GACA,MAAAA,KAAA9B,EAAAsN,WAAAxL,KAAA,KAAAK,KAAAL,KACK69B,IAAA,SAAA79B,GACL,WAAAK,KAAAL,KASA0pC,GAAAlW,EAAA,OACAmW,GAAAnW,EAAA,OACAoW,GAAApW,EAAA,OACAgN,MAAAxV,OAAA0e,GAAAC,GAAAC,IAAA,UACApS,MAAAxM,OAAA0e,GAAAC,GAAAC,IAAA,sBA6BAjmC,KA2EAf,GAAA,eAAA2hB,GAAA,yBAAAjlB,EAAAlB,GAEA,OAAAmmB,KAAAnmB,EAAA,CAIA,OAAAmmB,KAAAjlB,EAAA,CACA,GAAAD,GAAAjB,EAAAC,UAAA,OACA,eAAAgB,EAAA,GAAAA,EAEA,GAAAA,GAAA,IAAAC,EAAA,OAAAA,CACAlB,GAAAqzB,UAAA,OAAApyB,KAIA,IAAA42B,IAAA,WAMA,QAAAiI,GAAA9/B,EAAA4/B,EAAAC,GAGA,QAAA4L,GAAAtkC,GACA,GAAA5C,KAAAmnC,EAAA3lB,EACA4lB,EAAAhlB,EAAApiB,EACAonC,IACAA,EAAA5jC,QAEA4e,EAAApiB,GAAAvE,EAAAuU,YAAApN,GARA,GAAA8L,GAAAy4B,EAAA3lB,EACA6lB,EAAAjlB,EAAA1T,EASA,IAAA24B,EAAA,CACA,GAAAC,GAAAD,EAAA14B,MAEA24B,KAAAtQ,EAAAsQ,EAAAjM,IACA6L,EAAA7L,OAGA6L,GAAA7L,EAEA6L,GAAA5L,GACAn/B,EAAAgrC,GACAI,EAAAJ,EAAA3lB,EAAA,GACA,IACA+lB,EAAA,GAGA,QAAAC,GAAA/rC,EAAA0S,GACAg5B,GAAAh5B,EACAg5B,EAAAhrC,EACAgrC,EAAAhrC,EACSgrC,EAAAI,IACTJ,EAAAI,EAEA,IAAAnsB,GAAAgH,GAAAZ,EAAA2lB,GAAA3lB,EAEA,IAAApG,MAAAzM,OAAA,CACA,GACA2sB,GADAmM,EAAAt5B,EAAA,OAEAktB,EAAA5/B,EAAAkQ,WACA,IAIA,GAHAw7B,GAAAM,GACArsB,EAAAgH,GAAAZ,EAAA2lB,GAAA3lB,MAGA8Z,EAAAlgB,EAAAzM,UACAqoB,EAAAqE,EAAAC,GACA,YAEW6L,EAAAhrC,GAAAgrC,EAAAI,GAEX,MAAAnsB,GAxDA,GAAAoG,GAAA,IACA2lB,GAAA,EACAhrC,EAAA,EACAorC,EAAA,EACAnlB,EAAA,GAAApJ,OAAAwI,EAsDA,QACAkmB,iBAAA9lB,GACA2Z,MACAiM,SAOAtV,GAAA,SAAA9K,GACA,MAAAA,IAGAwc,QAAAxc,EAAAwc,QACAqB,8BAAA7d,EAAA6d,gCAKArB,WAEAqB,+BAAA,GAYAtT,GAAAlvB,WACAklC,oBAAA,WACA,GAAApU,GAAAN,GAAAM,cACAA,GAAAvB,iBACAuB,EAAAvB,kBAEAuB,EAAAvB,oBAAApQ,GACA2R,EAAAzB,aAAA,GAEA8V,qBAAA,SAAAnsC,EAAA24B,GACA,GAAAO,GACA1B,GAAAU,mBAAA2M,YAAAlM,EACAO,KACAA,EAAAnxB,QACAvC,KAAA2wB,eAAAwC,EACA34B,EAAAuY,aACA/S,KAAA+wB,gBAAAv2B,EAAAuY,WACA,eAAAogB,EAAA,UAAwD9jB,QAAA,KAExDrP,KAAA6wB,aAAA,IA+CA,IAAAmB,IAyBA4U,GACAC,IACAC,YAAA,aAKAC,sBAAA,WACA,MAAA/U,IAAAU,oBAGAsU,qBAAAjV,EAGAkV,mBAAA,WACA,MAAAjV,KAIAkV,mBAAAlZ,EAEAmZ,sBAAA,EAEAvE,iBACAvjC,IAAA,SAAA+nC,EAAAC,EAAAC,GAEAjE,GAAAhkC,IAAA+nC,EAAAC,EAAAC,IAEAC,MAAA,SAAAH,EAAAE,GACAjE,GAAAkE,MAAAH,EAAAE,IAIAzZ,YACApzB,YACAuE,eACAwoC,SAAA,SAAA9rC,EAAAokC,EAAA2H,GACA,GAAA3H,GAES,OAAApkC,EAAAkB,QAAAkjC,GACT,SAAArpB,OAAA,mBAAAqpB,EAAA,yBAAApkC,EAAA,iCAFAokC,GAAApkC,CAIAgsC,IAAAhsC,GAAA+rC,EACApE,GAAAsE,YAAA7H,IAAiDpkC,OAAA8xB,UAAAsS,EAAAtjC,KAAA,QAEjDgnC,UAAA,SAAAhpC,EAAAkK,EAAAu/B,GACA,GAAAhhC,GAAAjD,KAAA8uB,QAAAt0B,EAAAkK,EAAAu/B,EACA,sBAAAhhC,GACA,MAAAA,MAaA6rB,QAAA,SAAAt0B,EAAAkK,EAAAu/B,GAEA,QAAA2D,KACA,GAAAtV,GAAAN,GAAAM,cACA,IAAAA,EAAAzB,YAAA,CACA,QAAAnsB,EAGA,MAFA4tB,GAAAoU,sBACAtT,EAAA54B,IACA,CAEA,YAAAypC,GACAP,GAAApR,EAAA5tB,IAIA,QAAAmjC,KACA,YAAAnjC,EAQA,MANA0uB,GAAA54B,GACA4zB,EAAAuD,WACAwH,GAAA3+B,GACa4zB,EAAAoB,YACb8S,GAAA9nC,IAEA,EAGA,QAAAstC,GAAAzc,GAGA,IADA,GAAA5pB,GACA4pB,GAGA5pB,EAAA,oBAAA4L,KAAAge,GACA3mB,EAAAjD,EAAA,GACA4pB,IAAAgT,UAAA58B,EAAA+C,MAAAE,EAAA3J,QACAT,EAAAqzB,IAAA6V,UAAAhpC,EAAAkK,EAAA,WAnCA,GA8FAzB,GA9FAmrB,EAAAJ,EAAAxzB,EAiGA,OAF6ByI,GAA7BmrB,EAAAoB,WAxDA,WACA,GAAAqY,IAA4B,QAK5B,KAJA,GAAAxc,GAAA+C,EAAA8C,WAAAgC,UAAA9E,EAAA8C,WAAAgC,UAAAxuB,EACAqjC,EAAA,GAAArjC,EAAA3J,OACA0G,EAAAmjC,GAAAoD,aAAA3c,EAAAD,EAAAgD,EAAA8C,WAAA,UAEA7F,EAAAtwB,OAAA,WAAA0G,EAAAjF,MAAA,CACA,GAAA6uB,GAAA+C,EAAA8C,WAAAgC,UAAA7H,EAAAhvB,MAAA,GACA4rC,EAAArD,GAAAoD,aAAA3c,EAAAD,EAAAgD,EAAA8C,WAAA,SACA,SAAA+W,EAAAzrC,OAA2CiF,EAAAwmC,GAE3C,WAAAxmC,EAAAjF,KAA0D,MAArB42B,GAAA54B,IAAqB,CAC1D,eAAAiH,EAAAjF,KAKA,MAJAoqC,KAAyCsB,OAAA9lC,aAAAwkC,IACzCA,GAAAsB,OAAA7lC,WACA,WAA0B+rB,EAAAoB,YAAApB,EAAA8C,WAAAgC,WAAkDE,EAAA54B,IAC5EC,EAAA,8BACAstC,CAIA,IADAnB,IAAuCsB,OAAA9lC,aAAAwkC,IACvCmB,EAAA,CAEA,OADA9Q,GAAAz8B,EAAAI,iBACAE,EAAA,EAA2BA,EAAAm8B,EAAAl8B,OAAuBD,IAAA,CAClD,GAAAqtC,GAAAlR,EAAAn8B,GAAAI,IACAV,GAAA4C,aAAA,GAAAqyB,EAAA0Y,EAAA,IAAA9c,EAAAtwB,OAAA,IAAAotC,EAAA,UAEAnW,GAAAM,eAAAtB,sBAAA2R,QAAA/0B,MAGA,MADAwlB,GAAA54B,GACAiH,EAAAwB,WAGA,WACA,GAAA2kC,KAAAC,IAAsD,QAEtD,IAAAxc,GAAA+C,EAAA8C,WAAAgC,UAAA9E,EAAA8C,WAAAgC,UAAAxuB,CACA,iBAAAjI,KAAA4uB,GAAwC,QAExC,IAAA+c,GAAA,cAAA/6B,KAAAge,EACA,KAAA+c,EAAkD,MAArBhV,GAAA54B,IAAqB,CAClD,IAAAqD,GAAAuwB,EAAAuD,WAAA,SACA,SACAlwB,EAAAmjC,GAAAoD,aAAAI,EAAA,IAAAA,EAAA,GAAAhd,EAAAgD,EAAA8C,WAAArzB,EACA,YAAA4D,EAAAjF,KAA0D,MAArB42B,GAAA54B,IAAqB,CAC1D,eAAAiH,EAAAjF,KAA6C,QAE7C4xB,GAAA8C,WAAAgC,UAAA,EACA,IAAAkV,GAAA,cAAA/6B,KAAAge,EAIA,OAHA+c,GAAA,SAAAA,EAAA,IACAha,EAAA8C,WAAAmX,gBAAAD,EAAA,IAEA3mC,EAAAwB,YAMA,IAAAA,MACA,IACS,IAAAA,EAIT,WAA6B,UAE7B,WACA,MAAAzI,GAAA+N,UAAA,WACA/N,EAAA4pC,MAAAC,SAAA,CACA,KACA,YAAAphC,EAAAzG,KACAsrC,EAAA7kC,EAAAqoB,QAEAsZ,GAAAtB,eAAA9oC,EAAA4zB,EAAAnrB,GAEe,MAAA9E,GAOf,KALA3D,GAAAgB,MAAA4yB,QAAAzN,GACAqN,EAAAxzB,GACAF,EAAAqzB,IAAAwZ,sBACAh3B,QAAA,IAAAhS,GAEAA,EAEA,aAKAmqC,SAAA,SAAA9tC,EAAAmf,GACA0pB,GAAAC,eAAA9oC,EAAAmf,IAGAsa,eACAO,eACAF,iBACA6O,cACAD,eAEAzP,iBAEA0F,kBACAmJ,kBAeAnR,GAAA3vB,UAAA6mC,gBAAA,SAAAxhC,GACA7G,KAAAssB,SAGAtsB,KAAAizB,aAAAjzB,KAAAizB,aAAA7L,OAAAvgB,GAFA7G,KAAAgzB,aAAAhzB,KAAAgzB,aAAA5L,OAAAvgB,IAKAsqB,EAAA3vB,UAAA+mC,UAAA,WACA,GAAA1S,GAAA,CAUA,QATA71B,KAAAgzB,aAAAj4B,OAAA,GAAAiF,KAAAizB,aAAAl4B,OAAA,KACA86B,EAAA,EACA71B,KAAAgzB,aAAAj4B,OAAA,IACA86B,GAAAvS,SAAAtjB,KAAAgzB,aAAAvb,KAAA,SAEAzX,KAAAizB,aAAAl4B,OAAA,IACA86B,GAAAvS,SAAAtjB,KAAAizB,aAAAxb,KAAA,UAGAoe,GAsBAvC,EAAA9xB,WACA89B,QAAA,SAAAviC,EAAA2uB,EAAAqB,GACA/sB,KAAAkzB,WAAAn2B,GAAA,IACAiD,KAAA0rB,aACA1rB,KAAA+sB,eAEA4W,SAAA,SAAA5mC,EAAA2uB,GAEAA,IACA1rB,KAAA0rB,UACA1rB,KAAAkzB,UAAA9tB,KAAA,MAEApF,KAAA0rB,UAAA,GAEA1rB,KAAAkzB,UAAA9tB,KAAArI,IAEA6mC,sBAAA,SAAAjB,GACA3iC,KAAAuzB,kBAAAnuB,KAAA6rB,GAAA0R,KAEAmB,gBAAA,SAAAjkC,GACAG,KAAAwzB,cAAApuB,KAAAvF,IAEA0C,MAAA,WACAvC,KAAAkzB,aACAlzB,KAAAuzB,qBACAvzB,KAAAwzB,iBACAxzB,KAAA0rB,UAAA,GAEApK,SAAA,WACA,MAAAthB,MAAAkzB,UAAAzb,KAAA,MAsCAkb,EAAAnxB,WACAmiC,SAAA,SAAAxQ,EAAA7G,EAAAvvB,EAAA2uB,EAAAqB,GACArB,GAAA,OAAA3uB,EAAAJ,OAAAI,EAAAhC,OAAA,KACAgC,GAAA,KAIA,IAAA22B,GAAA1zB,KAAAwoC,gBAAArV,GACAnzB,KAAAq/B,YAAAlM,GAAA,IAGA,KAAAO,EAAA,CACA,OAAApH,GACA,WAEAtsB,KAAA2zB,UAAA,MAAAL,GAAAv2B,EAAA2uB,EAAAqB,EACA,MACA,cACA,cACA,GAAAhwB,EAAAH,QAAA,MAEAoD,KAAA2zB,UAAA,QAAAL,GAAAv2B,EAAA2uB,IAIA1rB,KAAAyoC,yBACAzoC,KAAA2zB,UAAA,MAAAL,GAAAv2B,EAAA2uB,IAMA,WADA1rB,MAAA6zB,gBAAAyL,QAAAviC,EAAA2uB,EAAAqB,GAKAuC,EAAA6D,GAEAO,EAAAiQ,SAAA5mC,EAAA2uB,GAEAgI,EAAA4L,QAAAviC,EAAA2uB,EAAAqB,GAIA/sB,KAAA6zB,gBAAAyL,QAAA5L,EAAApS,WAAAoK,IAIA2T,YAAA,SAAA3jC,GACA,MAAAsE,MAAAwoC,gBAAA9sC,IAGAA,IAAAa,cACAyD,KAAA2zB,UAAAj4B,KACAsE,KAAA2zB,UAAAj4B,GAAA,GAAA43B,IAEAtzB,KAAA2zB,UAAAj4B,IANAsE,KAAA6zB,iBAQA2U,gBAAA,SAAA9sC,GACA,MAAAA,IAAAy0B,EAAAz0B,EAAAk4B,KAEA6U,uBAAA,WACA,OAAA3tC,GAAA,EAAuBA,GAAA,EAAQA,IAC/BkF,KAAA2zB,UAAA74B,GAAAkF,KAAAq/B,YAAA,IAAAvkC,EAAA,MASA+3B,EAAArxB,WAGAknC,UAAA,SAAA/uB,EAAAgvB,GACA,GAAA7U,GAAA9zB,KAAA8zB,cACArsB,EAAAkhC,GAAA,GACA,QAAA3oC,KAAAg0B,gBAAAh0B,KAAAg0B,cAAAra,EACA,QAAA7e,GAAAkF,KAAA+zB,SAAAtsB,EAAyCkhC,EAAA7tC,GAAA,EAAAA,EAAAg5B,EAAA/4B,OAAwCD,GAAA2M,EAEjF,OADAmhC,GAAA9U,EAAAh5B,GACAgT,EAAA,EAAyBA,GAAA86B,EAAA7tC,OAAqB+S,IAC9C,GAAA9N,KAAAg0B,eAAA4U,EAAAvK,UAAA,EAAAvwB,GAEA,MADA9N,MAAA+zB,SAAAj5B,EACA8tC,CAKA,OAAA9tC,IAAAg5B,EAAA/4B,QACAiF,KAAA+zB,SAAAD,EAAA/4B,OACAiF,KAAAg0B,eAGAl5B,EAAA,EAAA6e,MAAA,IAEAkvB,UAAA,SAAAlvB,GACA,GAAAnV,GAAAxE,KAAA8zB,cAAAl3B,QAAA+c,EACAnV,IAAA,GAAAxE,KAAA8zB,cAAApyB,OAAA8C,EAAA,GACAmV,EAAA5e,QAAAiF,KAAA8zB,cAAA1uB,KAAAuU,IAEAmvB,MAAA,WACA9oC,KAAAg0B,cAAA,KACAh0B,KAAA+zB,SAAA/zB,KAAA8zB,cAAA/4B,QAGA,IAAA6pC,KACAoD,aAAA,SAAA3c,EAAApgB,EAAAimB,EAAArzB,GACA,GAAA6C,GAAAw0B,EAAA7J,EAAApgB,EAAApN,EAAAqzB,EACA,KAAAxwB,EAAA00B,OAAA10B,EAAAy0B,QACA,OAAkB34B,KAAA,OACT,KAAAkE,EAAA00B,MAAA10B,EAAAy0B,QACT,OAAkB34B,KAAA,UAIlB,QADAusC,GACAjuC,EAAA,EAAuBA,EAAA4F,EAAA00B,KAAAr6B,OAAyBD,IAAA,CAChD,GAAA2G,GAAAf,EAAA00B,KAAAt6B,EACAiuC,KACAA,EAAAtnC,GAGA,kBAAAsnC,EAAA1d,KAAAhvB,OAAA,KACA,GAAAkgC,GAAA5G,EAAAtK,EACA,KAAAkR,EAAA,OAAkC//B,KAAA,OAClC00B,GAAAuB,kBAAA8J,EAEA,OAAgB//B,KAAA,OAAAyG,QAAA8lC,IAEhBzF,eAAA,SAAA9oC,EAAA4zB,EAAAnrB,GAEA,OADAmrB,EAAA8C,WAAA6R,eAAA9/B,EAAA8/B,eACA9/B,EAAAzG,MACA,aACAwD,KAAAgpC,cAAAxuC,EAAA4zB,EAAAnrB,EACA,MACA,gBACAjD,KAAAipC,gBAAAzuC,EAAA4zB,EAAAnrB,EACA,MACA,sBACAjD,KAAAkpC,sBAAA1uC,EAAA4zB,EAAAnrB,EACA,MACA,cACAjD,KAAA6kC,cAAArqC,EAAA4zB,EAAAnrB,EACA,MACA,cACAjD,KAAAmpC,cAAA3uC,EAAA4zB,EAAAnrB,EACA,MACA,UACA,cACAjD,KAAAopC,UAAA5uC,EAAA4zB,EAAAnrB,KAMA+lC,cAAA,SAAAxuC,EAAA4zB,EAAAnrB,GACAmrB,EAAA8C,WAAA1F,OAAAvoB,EAAAuoB,OACA4C,EAAA8C,WAAAzF,WAAAoJ,EAAA5xB,EAAAwoB,YACAzrB,KAAA8kC,UAAAtqC,EAAA4zB,IAEA6a,gBAAA,SAAAzuC,EAAA4zB,EAAAnrB,GACA,GAAAiuB,GAAA9C,EAAA8C,UACA,IAAAA,EAAA5E,SAAA,CACA,GAAA4E,EAAA5E,UAAArpB,EAAAqpB,SAMA,MAHA4E,GAAA1F,OAAA,eACA0F,EAAAzF,YAAqCC,UAAA,OACrC1rB,MAAA8kC,UAAAtqC,EAAA4zB,EAIAgF,GAAA54B,GAGA02B,EAAA5E,SAAArpB,EAAAqpB,SACA4E,EAAA3E,aAAAsI,EAAA5xB,EAAAspB,cACA6B,EAAAuD,YAEA3xB,KAAA8kC,UAAAtqC,EAAA4zB,IAGA8a,sBAAA,SAAA1uC,EAAA4zB,EAAAnrB,GACA,GAAA0uB,GAAAvD,EAAAuD,WACAjF,EAAAmI,EAAA5xB,EAAAypB,mBACAA,IAEAiF,GAAAjF,EAAAC,aACAyB,EAAAzB,YAAA,GAGA3sB,KAAAipC,gBAAAzuC,EAAA4zB,EAAAnrB,GACA0uB,GACA3xB,KAAAgpC,cAAAxuC,EAAA4zB,EAAAnrB,IAGA4hC,cAAA,SAAArqC,EAAA4zB,EAAAnrB,GACA,GAAAiuB,GAAA9C,EAAA8C,WACA2E,EAAA3E,EAAAqX,YACAc,IAAAxT,EACA3J,EAAA2I,EAAA5xB,EAAAipB,eACAgF,GAAAuB,oBACAvG,EAAAuG,kBAAAvB,EAAAuB,mBAGAxvB,EAAAqpB,UACAtsB,KAAAipC,gBAAAzuC,EAAA4zB,EAAAnrB,GAEAA,EAAAuoB,QACAxrB,KAAAgpC,cAAAxuC,EAAA4zB,EAAAnrB,IAEAA,EAAAuoB,QAAAvoB,EAAAqpB,WACAtsB,KAAA8kC,UAAAtqC,EAAA4zB,GAEAlC,EAAA2J,UAAA,EACA3J,EAAAmd,mBACAnd,EAAAiH,aAAAjC,EAAAiC,aACAC,EAAA54B,GACA4zB,EAAAoD,WAAA,KACAvuB,EAAAsW,QACAvZ,KAAAspC,eAAAlb,EAAA8C,EAAAjuB,GAEAysB,GAAAzsB,EAAAsoB,QAAA/wB,EAAA0xB,EAAAkC,IAEA+a,cAAA,SAAA3uC,EAAA4zB,EAAAnrB,GAWA,QAAAsmC,GAAA1pC,EAAAgS,EAAAutB,GACApN,GAAAY,wBAAAiW,UAAAhpC,GACAmyB,GAAAY,wBAAAkW,OACA,KACAzI,GAAA7lC,EAAAqF,EAAAgS,EAAAutB,GACW,MAAAjhC,GAGX,MAFAshC,IAAAjlC,EAAA,kBAAAqF,OACAuzB,GAAA54B,GAGAoqC,GAAAoE,cAAAxuC,EAAA4zB,GACA5xB,KAAA,SACAgvB,OAAA,WACAC,YAAyB7gB,SAAA,EAAA+gB,WAAA1oB,EAAAmqB,WAAAzB,cAGzB,QAAA6d,GAAA3pC,GACArF,EAAAwR,SAAAy9B,EAAAzQ,KAAAyQ,EAAA39B,KACAy9B,EAAA1pC,GAAA,KACA,IAAAyyB,GAAAN,GAAAM,cACAA,GAAAzB,aACAgT,GAAAvR,EAAAzyB,GAGA,QAAA6pC,GAAAvrC,EAAA0B,EAAAoiC,GACA,GAAA0G,GAAAz7B,EAAAqI,EAAAjb,EAAAib,QAAApX,EACA,OAAAoX,GAAA,QAAAA,GACAozB,EAAA,MAAApzB,EACArI,EAAA/O,EAAA0M,OAAA1M,EAAA0M,OAAAmsB,aAAA,EACAn3B,EAAAmyB,GAAAY,wBAAA8V,UAAA7oC,EAAA8oC,IAAA,GACA1G,EAAApiC,GACAqN,GAAA/O,EAAA0M,SAAA1M,EAAA0M,OAAAmsB,aAAA74B,EAAA0M,OAAAmtB,eAAA15B,KAAAC,IAAA2O,EAAA/O,EAAA0M,OAAAjH,MAAA7I,UAEA,QAAAwa,GAAA,SAAAA,GAAA,QAAAA,GAAA,OAAAA,GAAA,SAAAA,GACAyc,GAAAY,wBAAAkW,OAEA,IAAAa,EACA,KACAA,EAAAtJ,GAAA7lC,EAAAqF,GACA,MACW,MAAA1B,IAGXwrC,EACAnvC,EAAAuS,eAAAjL,GAAAtH,GAAAoQ,EAAA++B,GAAA,KAEAzI,GAAA1mC,GACAA,EAAAwR,SAAAy9B,EAAAzQ,KAAAyQ,EAAA39B,MAGA,QAAAq2B,GAAAhkC,EAAA0B,EAAAoiC,GACA,GAAA1sB,GAAAjb,EAAAib,QAAApX,EACA,QAAAoX,GAAA,UAAAA,GAAA,UAAAA,GACA,aAAAA,GAAA,IAAA1V,GACAmyB,GAAAY,wBAAAiW,UAAAhpC,GACAmyB,GAAAY,wBAAAkW,QACAzI,GAAA7lC,EAAAovC,GACA1I,GAAA1mC,GACAA,EAAAwR,SAAAy9B,EAAAzQ,KAAAyQ,EAAA39B,KACAxR,EAAAwa,OAAA3W,GACAi1B,EAAA54B,GACAynC,IACAznC,EAAAkJ,SACW,MAAA6R,GAAA,QAAAA,EACXjb,EAAAwa,OAAA3W,GACW,UAAAoX,IAEXjb,EAAAwa,OAAA3W,GACA8jC,EAAA,KA9EA,GAAAznC,EAAAoH,gBAAA,CAIA,GAAAgJ,GAAA3H,EAAAmqB,WAAAxiB,QACA0iB,EAAArqB,EAAAmqB,WAAAE,aACA/a,IAAA/X,GAAAqvC,aAAAj/B,EACA,IAAAk/B,GAAA,UACAF,EAAAr3B,GAAA/X,GAAAgmC,WACAiJ,EAAAjvC,EAAAkR,eAwEA,QAAAzI,EAAAmqB,WAAAC,UACA,aACA,GAAAiF,GAAAN,GAAAM,cACA,IAAAA,EAAA1B,UAAA,CACA,GAAA/wB,GAAAyyB,EAAAxB,oBAAA5oB,OACAqhC,GAAA1pC,GAAA,UAEAogC,IAAAzlC,GACA0Y,QAAAs2B,EACA1J,OAAAgK,EACA/J,KAAAgK,GACAhM,QAAA2L,EACA52B,UAAAqvB,GAGA,MACA,uBACA,GAAAr5B,GAAA8wB,GAAAp/B,GAAA,GACA,MACA,GACAwvC,GAAA,CAOA,IANAlhC,IACAA,EAAA8wB,GAAAp/B,GAAA,GACA,MACA,GACAwvC,GAAA,IAEAlhC,EACA,MAEA,IAAAjJ,GAAArF,EAAAsD,QAAAgL,EAAAnL,MAAAT,MAAAmhC,UAAAv1B,EAAAnL,MAAAvB,GACA0M,EAAA3M,IAAAC,GAEAyD,GADAmqC,GAAA1c,EACA,MAAAztB,EAAA,MAEA82B,EAAA92B,GAMAmyB,GAAAI,SAAAqU,aAAAjsC,EAAAkQ,YACAlQ,EAAA0U,UAAApG,EAAAnL,OAEA4rC,EAAA1pC,GAAA,SAIAupC,UAAA,SAAA5uC,EAAA4zB,EAAAnrB,GACA,QAAAumC,GAAA7vB,GAGAqY,GAAAc,2BAAA+V,UAAAlvB,GACAqY,GAAAc,2BAAAgW,QACAzF,GAAAC,eAAA9oC,EAAAmf,GAEA,QAAAwoB,GAAAhkC,EAAAwb,EAAAsoB,GACA,GAAA0G,GAAAz7B,EAAAqI,EAAAjb,EAAAib,QAAApX,IACA,OAAAoX,GAAA,UAAAA,GAAA,UAAAA,GACA,aAAAA,GAAA,IAAAoE,KACAqY,GAAAc,2BAAA+V,UAAAlvB,GACAqY,GAAAc,2BAAAgW,QACAxuC,EAAAwa,OAAA3W,GACAi1B,EAAA54B,GACAynC,IACAznC,EAAAkJ,SAEA,MAAA6R,GAAA,QAAAA,GACAjb,EAAAwa,OAAA3W,GACAwqC,EAAA,MAAApzB,EACArI,EAAA/O,EAAA0M,OAAA1M,EAAA0M,OAAAmsB,aAAA,EACArd,EAAAqY,GAAAc,2BAAA4V,UAAA/uB,EAAAgvB,IAAA,GACA1G,EAAAtoB,GACAzM,GAAA/O,EAAA0M,SAAA1M,EAAA0M,OAAAmsB,aAAA74B,EAAA0M,OAAAmtB,eAAA15B,KAAAC,IAAA2O,EAAA/O,EAAA0M,OAAAjH,MAAA7I,UACW,UAAAwa,GAEXjb,EAAAwa,OAAA3W,GACA8jC,EAAA,KAEA,QAAA1sB,GAAA,SAAAA,GAAA,QAAAA,GAAA,OAAAA,GAAA,SAAAA,GACAyc,GAAAc,2BAAAgW,QAGA,WAAA7lC,EAAAzG,KAEA6mC,GAAAC,eAAA9oC,EAAAyI,EAAAgnC,OAAAtwB,OAEAyU,EAAAuD,WACAsO,GAAAzlC,GAA4B0Y,QAAAs2B,EAAA1J,OAAA,IAAAl8B,MAAA,QAC5BkP,UAAAqvB,IAEAlC,GAAAzlC,GAA4B0Y,QAAAs2B,EAAA1J,OAAA,IAC5BhtB,UAAAqvB,KAIA2C,UAAA,SAAAtqC,EAAA4zB,GAGA,GAYAjlB,GAAAF,EACA4sB,EAbA3E,EAAA9C,EAAA8C,WACA1F,EAAA0F,EAAA1F,OACAC,EAAAyF,EAAAzF,eACAa,EAAA4E,EAAA5E,SACAC,EAAA2E,EAAA3E,iBACA4G,EAAAjC,EAAAiC,aACA71B,EAAA8wB,EAAA9wB,IAEA4sC,EAAApU,EAAA1H,EAAAuD,WAAA8C,EAAAj6B,EAAA8C,EAAApC,MAAAV,EAAAkQ,UAAA,SACAy/B,EAAArU,EAAA1H,EAAAuD,WAAA8C,EAAAj6B,EAAA8C,EAAAD,QAAA7C,EAAAkQ,UAAA,WACA0/B,EAAAtU,EAAAoU,GACAG,EAAAvU,EAAAqU,EA2BA,IAxBA7d,GACAtsB,KAAAspC,eAAAlb,EAAA8C,GAKA2E,MAHAlV,KAAAuQ,EAAA6R,eAGA7R,EAAA6R,eAEA7R,EAAAqX,YAEA1S,EAAA,GAAApK,EAAAM,eACAN,EAAA4d,kBAAA,GACS5d,EAAA6e,WACT7e,EAAAM,gBAAA,IAAA8J,KACAA,EAAA,EACApK,EAAA4d,kBAAA,GAEAnY,EAAAuB,oBAEAhH,EAAAgH,kBAAAlG,EAAAkG,kBACAvB,EAAAuB,mBAEAhH,EAAAoK,SACAzC,EAAA54B,GACAgxB,EAAA,CACA,GAAA+e,GAAApW,GAAA3I,GAAAhxB,EAAA0vC,EAAAze,EAAA2C,EAEA,IADAA,EAAAoD,WAAA2C,GAAA3I,IACA+e,EACA,MAEA,IAAA9e,EAAAE,WAAA,CACA,GAAAyG,GAAAJ,GAAAI,SAEAqU,EAAArU,EAAAqU,YACAA,IACAtM,GAAA3/B,EAAAisC,EAAA8D,SACAnY,GAAAqU,cAEAtM,GAAA3/B,EAAA0vC,EAAAK,GAGAA,YAAAxyB,QACA9O,EAAAshC,EAAA,GACAphC,EAAAohC,EAAA,IAEAphC,EAAAohC,EAGAphC,IACAA,EAAA2sB,EAAAoU,IAEA9b,EAAAuD,YACAvD,EAAAwD,aAAAzoB,EAAA/M,KAAA4pB,MACA7c,EAAAsrB,EAAAj6B,EAAA2O,EAAAilB,EAAAwD,cAEA3oB,IACAA,EAAAwrB,EAAAj6B,EAAAyO,GAAA,IAEAA,KAAAohC,EACA/sC,EAAAD,OAAA4L,EACA3L,EAAApC,KAAAiO,EACAqvB,GAAAh+B,GACAkiC,GAAAliC,EAAA4zB,EAAA,IACA8H,EAAAjtB,EAAAE,GAAAF,EACAE,GACAuzB,GAAAliC,EAAA4zB,EAAA,IACA8H,EAAAjtB,EAAAE,KACAF,IACWqjB,IACXnjB,EAAAsrB,EAAAj6B,EAAA2O,GACA3O,EAAA0U,UAAA/F,EAAAjM,KAAAiM,EAAA/M,KAGA,GAAAkwB,EAAA,CACA,GAAAC,EAAA6Y,QAAA,CAEAn8B,EAAAohC,CACA,IAAAjF,GAAA7Y,EAAA6Y,QACAoF,EAAAlsC,KAAAmsC,IAAArF,EAAAlqC,KAAAgC,KAAAkoC,EAAA/nC,OAAAH,MACAwtC,EAAApsC,KAAAmsC,IAAArF,EAAAlqC,KAAAkB,GAAAgpC,EAAA/nC,OAAAjB,GAGA+M,GAFAi8B,EAAAzY,WAEA1vB,EAAAotC,EAAAntC,KAAAstC,EAAAH,EAAAjuC,IACagpC,EAAAxT,YAEb30B,EAAAotC,EAAAntC,KAAAstC,EAAAH,EAAAjuC,GAAAsuC,GACatF,EAAAlqC,KAAAgC,MAAAkoC,EAAA/nC,OAAAH,KAEbD,EAAAotC,EAAAntC,KAAAmtC,EAAAjuC,GAAAsuC,GAIAztC,EAAAotC,EAAAntC,KAAAstC,EAAAH,EAAAjuC,IAEAgyB,EAAAuD,YAAA,EACAvD,EAAAzB,WAAAyY,EAAAzY,WACAyB,EAAAwD,YAAAwT,EAAAxT,YACAt0B,EAAA8wB,EAAA9wB,KACAD,OAAA4L,EACA/N,KAAAiO,GAEAqvB,GAAAh+B,OACW4zB,GAAAuD,aACXpF,EAAA6Y,SACA/nC,OAAAy4B,EAAAx4B,EAAAD,QACAnC,KAAA46B,EAAAx4B,EAAApC,MACA02B,YAAAxD,EAAAwD,YACAjF,WAAAyB,EAAAzB,YAGA,IAAA2M,GAAAC,EAAA7N,EAAAjwB,EACAg9B,CACA,IAAArK,EAAAuD,YAYA,GAVA2H,EAAAnD,EAAA74B,EAAApC,KAAAoC,EAAAD,QACAk8B,EAAAnD,EAAA94B,EAAApC,KAAAoC,EAAAD,QACAquB,EAAA0C,EAAAzB,YAAAJ,EAAAb,SACAjwB,EAAA2yB,EAAAwD,YAAA,QACAlG,EAAA,OACA,OACA+M,EAAAC,GAAAl+B,GACA6C,OAAAi8B,EACAp+B,KAAAq+B,GACa99B,GACbiwB,EAAA,CACA,GAAA/wB,GAAA89B,EAAA99B,MACA,aAAAc,EAEA,OAAAX,GAAA,EAA+BA,EAAAH,EAAAI,OAAmBD,IAClDH,EAAAG,GAAAI,KAAAkB,GAAAw4B,EAAAp6B,EAAAG,EAAAG,GAAAI,KAAAgC,UAEe,QAAAzB,IACfd,EAAA,GAAAO,KAAA+B,EAAAtC,EAAA,GAAAO,KAAAgC,KAAA,WAGW,CAIX,GAFAo8B,EAAAxD,EAAA7sB,GAAAohC,GACA9Q,EAAAzD,EAAA3sB,GAAAihC,GACAlU,EAAAqD,EAAAD,GAAA,CACA,GAAAtqB,GAAAsqB,CACAA,GAAAC,EACAA,EAAAvqB,EAEA0c,EAAAD,EAAAC,UAAAa,EAAAb,SACAA,EAEA+N,GAAAj/B,EAAA8+B,EAAAC,GACa9N,EAAA7gB,SAEbyuB,GAAA7+B,EAAA8+B,EAAAC,GAEA99B,EAAA,MAEAg9B,GAAAC,GAAAl+B,GACA6C,OAAAi8B,EACAp+B,KAAAq+B,GACa99B,GAJbgwB,EAAAK,WAAAJ,GAMAlxB,EAAA+C,cAAAk7B,EAAA99B,OAAA89B,EAAAE,SACAvK,EAAAoD,WAAA,KACAjF,EAAAsJ,SACAtJ,EAAA4G,eAEA5G,EAAAb,UACA,IAAAif,GAAApW,GAAAjI,GACA9xB,EAAA+xB,EAAAkM,EAAA99B,OAAA0vC,EAAAlhC,EACAilB,GAAAuD,YACAwH,GAAA3+B,EAAA,MAAAmwC,GAEAA,GACAnwC,EAAA0U,UAAAy7B,KAIArB,eAAA,SAAAlb,EAAA8C,EAAA0Z,GACA,GAAAtY,GAAAN,GAAAM,cACAA,GAAA1B,YACAxC,EAAAgD,mBAAAF,EACA9C,EAAAiD,sBAAAuZ,EACAtY,EAAAtB,sBAAA2R,WACArQ,EAAAtB,sBAAAgT,+BAAA,KASA7P,IACA0W,cAAA,SAAArwC,EAAAswC,EAAArf,GACA,GAAAvuB,GAAAkkC,GAAA5mC,GAAAsR,IAAA2f,EAAAoK,OAAA,CACA,OAAA54B,GAAAC,EAAAw8B,GAAAl/B,EAAAsD,QAAAZ,MAEA6tC,iBAAA,SAAAvwC,GACA,GAAAwN,GAAAo5B,GAAA5mC,GACA0C,EAAAoB,KAAAsrB,MAAA,IAAA5hB,EAAA8D,IAAA9D,EAAAqH,QACA,OAAApS,GAAAC,EAAAw8B,GAAAl/B,EAAAsD,QAAAZ,MAEA8tC,iBAAA,SAAAxwC,EAAAswC,EAAArf,GACA,GAAAvuB,GAAAkkC,GAAA5mC,GAAA6U,OAAAoc,EAAAoK,OAAA,CACA,OAAA54B,GAAAC,EAAAw8B,GAAAl/B,EAAAsD,QAAAZ,MAEA+tC,aAAA,SAAAjqC,EAAA9F,EAAAuwB,GAIA,MAAAxuB,GADA/B,EACAgC,KAAAuuB,EAAAoK,OAAA,EAAA7P,MAEAlkB,SAAA,SAAAtH,EAAAswC,EAAArf,GACA,GAAAjwB,GAAA+W,GAAA/X,GACAqF,EAAArE,EAAAglC,UACA,IAAA3gC,EAAA,CAGA,GAAAhB,IAAA4sB,EAAA7gB,OAIA,OAFA/L,GAAArD,EAAA0vC,cAAArsC,IACA0hC,GAAA/lC,EAAAqF,GACAiC,GAAAtH,EAAAqE,EAAAgB,EAAA4rB,EAAAoK,UAEAsV,SAAA,SAAA3wC,EAAAswC,EAAArf,EAAA2C,GACA,GAAAnzB,GAAAumC,GAAAhnC,EAAA4zB,EAAA3C,EAAAgH,kBACA,OAAAx3B,GACAwwB,EAAAC,UAAwCxuB,KAAAjC,EAAAiC,KAAAd,GAAAs9B,GAAAl/B,EAAAsD,QAAA7C,EAAAiC,QAA4EjC,EAEpH,MAEAmwC,0BAAA,SAAA5wC,EAAAswC,EAAArf,EAAA2C,GACA,GAAAA,EAAAwD,aAAAnG,EAAAY,SAAA,CACA,GAAA/uB,GAAA8wB,EAAA9wB,GACA,QACAm3B,EAAAj6B,EAAAyC,EAAAK,EAAAD,OAAAH,KAAAI,EAAApC,KAAAkB,KACAq4B,EAAAj6B,EAAAyC,EAAAK,EAAApC,KAAAgC,KAAAI,EAAAD,OAAAjB,MAGA,OAAAgyB,EAAA9wB,IAAApC,KAAAkzB,EAAA9wB,IAAAD,SAGAguC,WAAA,SAAA7wC,EAAAU,EAAAuwB,EAAA2C,GAEA,OADAkd,GAAApwC,EACAJ,EAAA,EAAuBA,EAAA2wB,EAAAoK,OAAuB/6B,IAAA,CAC9C,GAAA6G,GAAA2pC,CACA,QAAA5mC,KAAA0pB,GAAA7gB,MACA,GAAAuiB,EAAAprB,GAAA,CAGA,GAAAyV,GAAAiU,EAAA7gB,MAAA7I,GAAAgJ,OACA69B,EAAA9f,EAAA,QACAyK,EAAA/b,EAAAxY,GAAAu0B,EAAAv0B,EAAAwY,EAEA,MAAAoxB,GAGA9f,EAAAC,UAAAvR,EAAAjd,MAAAyE,EAAAzE,MAAA,CAIA,GAAAsuC,GAAAzV,EAAAp0B,EAAA2pC,GACAG,EAAAhgB,EAAA,QACA4K,EAAA10B,EAAAwY,EAAAmxB,GACAjV,EAAAiV,EAAAnxB,EAAAxY,IAEA6pC,GAAAC,KACAH,EAAAnxB,KAWA,MANAsR,GAAAC,WAIA4f,EAAAruC,EAAAquC,EAAApuC,KAAAw8B,GAAAl/B,EAAAsD,QAAAwtC,EAAApuC,SAEAouC,GAEAI,iBAAA,SAAA1qC,EAAA9F,EAAAuwB,GACA,GAAA3gB,GAAA5P,EACA26B,EAAApK,EAAAoK,OACAz5B,EAAAqvB,EAAA7gB,QAAAE,EAAA1O,GAAAy5B,EAAA/qB,EAAA1O,GAAAy5B,CACA,OAAA54B,GAAA6N,EAAA5N,KAAAd,IAEAuvC,YAAA,SAAAnxC,EAAAU,EAAAuwB,EAAA2C,GACA,GAAAtjB,GAAA5P,EACA27B,EAAA/rB,EAAA1O,EAMA,QAAAgyB,EAAAoD,YACA,IAAAxxB,MAAA2rC,YACA,IAAA3rC,MAAA4rC,mBACA,IAAA5rC,MAAA6rC,aACA,IAAA7rC,MAAAy8B,aACA,IAAAz8B,MAAA8rC,UACAjV,EAAAzI,EAAAkD,QACA,MACA,SACAlD,EAAAkD,SAAAuF,EAEA,GAAAhB,GAAApK,EAAAoK,QAAApK,EAAAQ,cAAA,GACA/uB,EAAAuuB,EAAA7gB,QAAAE,EAAA5N,KAAA24B,EAAA/qB,EAAA5N,KAAA24B,EACAkW,EAAAvxC,EAAAiG,YACAiI,EAAAlO,EAAAgE,UAGA,OAAAtB,GAAA6uC,GAAAjhC,EAAA5N,MAAA6uC,EACA/rC,KAAAgsC,kBAAAxxC,EAAAU,EAAAuwB,EAAA2C,GACSlxB,EAAAwL,GAAAoC,EAAA5N,MAAAwL,EACT1I,KAAA8rC,UAAAtxC,EAAAU,EAAAuwB,EAAA2C,IAEA3C,EAAAO,cACA6K,EAAA6C,GAAAl/B,EAAAsD,QAAAZ,IACAkxB,EAAAkD,SAAAuF,GAEAzI,EAAAmD,UAAA/2B,EAAAyxC,WAAAhvC,EAAAC,EAAA25B,GAAA,OAAAmC,KACA/7B,EAAAC,EAAA25B,KAEA+U,mBAAA,SAAApxC,EAAAU,EAAAuwB,EAAA2C,GACA,GAAAtjB,GAAA5P,CACA,QAAAkzB,EAAAoD,YACA,IAAAxxB,MAAA4rC,mBACA,IAAA5rC,MAAA6rC,aACA,IAAA7rC,MAAA2rC,YACA,IAAA3rC,MAAAy8B,aACA,IAAAz8B,MAAA8rC,UACA,KACA,SACA1d,EAAAmD,UAAA/2B,EAAAyxC,WAAAnhC,EAAA,OAAAkuB,KAEA,GAAAnD,GAAApK,EAAAoK,OACA5X,EAAAzjB,EAAA0O,SAAA4B,EAAA2gB,EAAA7gB,QAAAirB,KAAA,OAAAzH,EAAAmD,UACA,IAAAtT,EAAAiuB,QACA,GAAAzgB,EAAA7gB,QACA,GAAAuhC,GAAA3xC,EAAAyxC,WAAAhuB,EAAA,OACAmuB,GAA8BtgC,IAAAqgC,EAAArgC,IAAA,EAAAktB,KAAA5K,EAAAmD,WAC9BtT,EAAAzjB,EAAA8mC,WAAA8K,EAAA,WACW,CACX,GAAAC,GAAA7xC,EAAAyxC,WAAAhvC,EAAAzC,EAAAiG,YAAA,SACA4rC,GAAArT,KAAA5K,EAAAmD,UACAtT,EAAAzjB,EAAA8mC,WAAA+K,EAAA,OAIA,MADAje,GAAAkD,SAAArT,EAAA7hB,GACA6hB,GAEAquB,WAAA,SAAA9xC,EAAAU,EAAAuwB,GAIA,GAAA6N,GAAAp+B,EACA26B,EAAApK,EAAAoK,MACA,OAAAr7B,GAAA0O,SAAAowB,EAAA7N,EAAA7gB,QAAAirB,KAAA,SAEA0W,gBAAA,SAAA/xC,EAAAU,EAAAuwB,GACA,GAAAhkB,GAAAgkB,EAAA7gB,QAAA,IACA,OAAAkyB,IAAAtiC,EAAAU,EAAAuwB,EAAAoK,OAAApuB,IAEAokC,aAAA,SAAArxC,EAAAU,EAAAuwB,EAAA2C,GACA,GAAAoe,GAAAhyC,EAAAkR,gBACA6tB,EAAA,KACA1D,EAAApK,EAAAoK,MACAA,KACAA,EAAA2W,EAAAzgC,cAAA,EAAAvR,EAAAyR,qBAEA,IAAAwgC,GAAAjyC,EAAAyxC,WAAA/wC,EAAA,QACAuwB,GAAAoK,QACA,IAAA0D,GAAApF,GAAAyX,mBAAApxC,EAAAU,EAAAuwB,EAAA2C,EACA,KAAAmL,EACA,WAEA,IAAAmT,GAAAlyC,EAAAyxC,WAAA1S,EAAA,QAEA,OADA/+B,GAAAwR,SAAA,KAAAwgC,EAAA1gC,IAAA4gC,EAAA5gC,IAAA2gC,EAAA3gC,KACAytB,GAEAoT,YAAA,SAAAnyC,EAAAU,EAAAuwB,GACA,MAAAuQ,IAAAxhC,EAAAU,EAAAuwB,EAAAoK,SAAApK,EAAA7gB,UACA6gB,EAAAG,UAAAH,EAAAI,UAEA+gB,kBAAA,SAAApyC,EAAAswC,EAAArf,GACA,GAAAoK,GAAApK,EAAAoK,OACA0D,EAAA+C,GAAA9hC,EAAAq7B,EAAApK,EAAA7gB,QACA6gB,EAAAgH,mBACAD,EAAA/G,EAAA7gB,SAAA,GAEA,OADA2vB,IAAA/H,EAAA/G,GACA8N,GACAA,EAAAn9B,IAAAo2B,EACA+G,GAFA,MAIA+C,gBAAA,SAAA9hC,EAAAU,EAAAuwB,GACA,GAAAoK,GAAApK,EAAAoK,MAEA,OADA0E,IAAA,EAAA9O,GACA6Q,GAAA9hC,EAAAq7B,EAAApK,EAAA7gB,QACA6gB,EAAAgH,oBAAAv3B,GAEA2xC,aAAA,SAAAryC,EAAAU,EAAAuwB,GAEA,MAAA+O,IAAAhgC,EADAixB,EAAAoK,OACApK,EAAA7gB,QACA6gB,EAAAgH,oBAAAv3B,GAEAuhC,aAAA,SAAAjiC,EAAAU,EAAAuwB,EAAA2C,GACA,GAAAyH,GAAApK,EAAAoK,MAIA,OAFAzH,GAAAkD,SAAAuE,EAAA,EACAzH,EAAAmD,UAAA/2B,EAAAyxC,WAAA/wC,EAAA,OAAA89B,KACAyD,GAAAjiC,EAAAq7B,IAEAiW,UAAA,SAAAtxC,EAAAU,EAAAuwB,EAAA2C,GACA,GAAAtjB,GAAA5P,CACAkzB,GAAAkD,SAAAtL,GACA,IAAA8mB,GAAA7vC,EAAA6N,EAAA5N,KAAAuuB,EAAAoK,OAAA,EAAA7P,KACA7pB,EAAA3B,EAAAkN,QAAAolC,EAGA,OAFA3wC,GAAAC,KACAgyB,EAAAmD,UAAA/2B,EAAAyxC,WAAA9vC,EAAA,OAAA68B,KACA8T,GAEAC,kCAAA,SAAAvyC,EAAAU,GAGA,GAAAyG,GAAAzG,CACA,OAAA+B,GAAA0E,EAAAzE,KACAw8B,GAAAl/B,EAAAsD,QAAA6D,EAAAzE,SAEA8vC,oBAAA,SAAAxyC,EAAAU,GAMA,IALA,GAIA+xC,GAJAtrC,EAAAzG,EACAgC,EAAAyE,EAAAzE,KACAd,EAAAuF,EAAAvF,GACAw+B,EAAApgC,EAAAsD,QAAAZ,GAEcd,EAAAw+B,EAAA7/B,OAAsBqB,IAEpC,IADA6wC,EAAArS,EAAAj+B,OAAAP,KACA2zB,EAAAkd,GAAA,CACA,GAAAl4B,GAAAva,EAAA0yC,eAAAjwC,EAAAC,EAAAd,EAAA,GACA,eAAA2Y,GAAA,YAAAA,EACA,MAIA,GAAA3Y,EAAAw+B,EAAA7/B,OAAA,CAEA,MADAP,GAAA2yC,oBAAAlwC,EAAAC,EAAAd,IACA0C,GAEA,MAAA6C,IAGAqqC,kBAAA,SAAAhrC,EAAA9F,GACA,MAAA+B,GAAA/B,EAAAgC,KAAA,IAEAkwC,2BAAA,SAAA5yC,EAAAswC,EAAArf,GACA,GAAAgL,GAAAhL,EAAA7gB,QAAApQ,EAAAgE,WAAAhE,EAAAiG,WAIA,OAHAgrB,GAAA4d,mBACA5S,EAAAhL,EAAAoK,OAAAr7B,EAAAC,UAAA,oBAEAwC,EAAAw5B,EACAiD,GAAAl/B,EAAAsD,QAAA24B,MAEA4W,uBAAA,SAAA7yC,EAAAU,EAAAuwB,EAAA2C,GAMA,GAAAkf,IAA6BpS,IAAA,IAAAF,IAAA,IAC7BG,IAA+B,IAAKF,IAAK,IACzCoC,IAAA,IAAAC,IAAA,KACAiQ,GAA0BC,KAAA,EAAAC,KAAA,GAE1BlR,EAAA9Q,EAAAgH,iBAGA,MAAA8J,EACAA,EAAA,IACS,KAAAA,IACTA,EAAA,IAQA,IAEAvtB,GAFA8c,GAAAL,EAAA0B,eAGA,IAAAmgB,EAAA/Q,GACAvtB,EAAAmuB,GAAA3iC,EAAAU,EAAAqhC,EAAAzQ,OACS,IAAAyhB,EAAAhR,GACTvtB,EAAA0uB,GAAAljC,EAAAU,EAAAqhC,EAAAzQ,OACS,UAAAyQ,EACTvtB,EAAA4qB,GAAAp/B,EAAAsxB,GAAA,GACA,OACS,UAAAyQ,EACTvtB,EAAA4qB,GAAAp/B,EAAAsxB,GAAA,GACA,OACS,UAAAyQ,EAYT,WATA,IAFAvtB,EAAA8tB,GAAAtiC,EAAAU,EAAAuwB,EAAAoK,OAAA,EAAA/J,GACAL,EAAAC,UAAA,EACA0C,EAAAuD,WACAvD,EAAAzB,aAAkCyB,EAAAzB,YAAA,OACvB,CACX,GAAAJ,GAAA6B,EAAA8C,WAAA3E,YACAA,KAA+BA,EAAAb,UAAA,GAC/B1c,EAAA7S,IAAAe,QAOA,MAAA1C,GAAAgB,MAAA4yB,IAAAuD,WAGA4G,GAAA/9B,EAAAwU,EAAArR,MAAAqR,EAAA7S,MAFA6S,EAAArR,MAAAqR,EAAA7S,MAMAuxC,0BAAA,SAAAlzC,EAAAU,EAAAuwB,GACA,GAAAkiB,GAAA3b,GAAAO,oBACAsD,EAAApK,EAAAoK,OACAjrB,EAAA6gB,EAAA7gB,UAAA+iC,EAAA/iC,QACA4nB,GAAAmb,EAAAnb,UAAA,MAAA5nB,GAAA,IACApQ,GAAAozC,OAAApb,EAAA,QACA/G,EAAAK,YAAAlhB,CACA,IAAA2uB,GAAA+C,GAAA9hC,EAAAq7B,EAAAjrB,EAAA+iC,EAAAlb,kBACA,OAAA8G,IAIAA,EAAAn9B,IAAAo2B,EACA+G,IAJA/+B,EAAAozC,MAAApb,EAAA,QACAt3B,KAuBAq5B,IACAtzB,OAAA,SAAAzG,EAAAs6B,EAAAn6B,GACA,GAAAkzC,GAAA9wC,EACAqxB,EAAA5zB,EAAAgB,MAAA4yB,GAEA,IADA4D,GAAAM,eAAAtB,sBAAA0R,cAAAtU,EAAAwD,YACAxD,EAAAuD,WA8BS,CACT50B,EAAAvC,EAAAka,cACA,IAAA9W,GAAAw2B,EAAA,GAAAz5B,EAAAI,OACAP,GAAAuD,kBAAAH,GACAiwC,EAAA1X,EAAAx7B,EAAA,GAAAO,KAAAP,EAAA,GAAA0C,YAlCA,CACA,GAAAA,GAAA1C,EAAA,GAAA0C,OACAnC,EAAAP,EAAA,GAAAO,IACA6B,GAAAvC,EAAAwP,SAAA3M,EAAAnC,EACA,IAAA4yC,GAAA1f,EAAAgD,sBACA,mBAAA0c,EAAAtiB,SAAA0E,EAAAnzB,GAAA,CAEA,GAAA0E,GAAA,OAAA4L,KAAAtQ,EACA0E,IAAAqsC,EAAAriB,YAAAqiB,EAAAriB,WAAA7gB,UACA1P,EAAAu0B,EAAAv0B,EAAA,GAAAuG,EAAA,GAAA1G,QACAgC,IAAAV,MAAA,GAAAoF,EAAA,GAAA1G,SAGA,GAAAgzC,GAAA,GAAA9wC,GAAAI,EAAAH,KAAA,EAAAgmB,OAAA8qB,WACAC,EAAAzzC,EAAAiG,aAAAjG,EAAAgE,UACAtD,GAAAgC,KAAA1C,EAAAgE,YAAAs2B,EAAApJ,WAAAuiB,EACAzzC,EAAA4C,aAAA,GAAA2wC,EAAA7yC,GAEAV,EAAA4C,aAAA,GAAAC,EAAAnC,GAEA45B,EAAApJ,WAEAuiB,IACAzzC,EAAA0U,UAAA6+B,GACAzzC,EAAAmF,SAAAyuC,iBAAA1zC,IAGA6C,EAAAjB,GAAA8mB,OAAA8qB,WAEAH,EAAAxwC,EAOA20B,GAAAU,mBAAAiR,SACA7O,EAAA3B,aAAA,SAAAp2B,EACA+3B,EAAApJ,SAAA/wB,EAAAI,OAAA,GACA20B,GAAAC,gBAAAn1B,GAAqCU,KAAA2yC,GAAgBrzC,EAAAgB,MAAA4yB,MAGrD+f,OAAA,SAAA3zC,EAAAs6B,EAAAn6B,GACA,GAAAkzC,GAAA9wC,EACAqxB,EAAA5zB,EAAAgB,MAAA4yB,GACA,IAAAA,EAAAwD,YAoBS,CACT70B,EAAAvC,EAAAka,cACA,IAAA9W,GAAAw2B,EAAA,GAAAz5B,EAAAI,OACAP,GAAAuD,kBAAAH,GACAiwC,EAAAlzC,EAAA,GAAA0C,WAxBA,CACA,GAAAA,GAAA1C,EAAA,GAAA0C,OACAnC,EAAAP,EAAA,GAAAO,IACA45B,GAAApJ,UACAxwB,EAAAgC,MAAA1C,EAAAiG,aACApD,EAAAH,MAAA1C,EAAAgE,YACAnB,EAAAH,MAAAhC,EAAAgC,KAAA,IAEAG,EAAAH,MAAA1C,EAAAiG,YACApD,EAAAjB,GAAA,EAEAiB,EAAAJ,EAAAI,EAAAH,KAAA,EAAA03B,EAAAp6B,EAAA6C,EAAAH,KAAA,KAGAH,EAAAvC,EAAAwP,SAAA3M,EAAAnC,GACAV,EAAA4C,aAAA,GAAAC,EAAAnC,GACA2yC,EAAAxwC,EACAy3B,EAAApJ,WACAmiB,EAAA1Z,GAAA4Y,kCAAAvyC,EAAA6C,IAWA,MAHA20B,IAAAU,mBAAAiR,SACA7O,EAAA3B,aAAA,SAAAp2B,EACA+3B,EAAApJ,SAAA0C,EAAAwD,aACA6C,EAAAj6B,EAAAqzC,IAEA/wC,OAAA,SAAAtC,EAAAs6B,EAAAn6B,GACA,GAAAyzB,GAAA5zB,EAAAgB,MAAA4yB,IACArsB,EAAApH,EAAA,GAAA0C,OAAAH,KACA8E,EAAAosB,EAAAwD,YACAj3B,IAAAI,OAAA,GAAAsC,OAAAH,KACAvC,EAAA,GAAAO,KAAAgC,KAGA24B,EAAAzH,EAAA,WAAA0G,EAAAe,OAAA,CACAf,GAAApJ,UAIA1pB,GAEA,QAAAlH,GAAAiH,EAA+BjH,GAAAkH,EAAclH,IAC7C,OAAAgT,GAAA,EAAyBA,EAAA+nB,EAAY/nB,IACrCtT,EAAAgD,WAAA1C,EAAAg6B,EAAAtI,YAGA,OAAA2H,IAAA4Y,kCAAAvyC,EAAAG,EAAA,GAAA0C,SAEA+wC,WAAA,SAAA5zC,EAAAs6B,EAAAn6B,EAAA0vC,EAAAlhC,GAIA,OAHA8tB,GAAAz8B,EAAA6zC,gBACAC,KACA7hB,EAAAqI,EAAArI,QACA3e,EAAA,EAAuBA,EAAAmpB,EAAAl8B,OAAuB+S,IAAA,CAC9C,GAAAygC,GAAAtX,EAAAnpB,GACA/Q,EAAA,EACA,SAAA0vB,EACA1vB,EAAAwxC,EAAAhyC,kBACW,SAAAkwB,EACX1vB,EAAAwxC,EAAA1mC,kBAEA,QAAA/M,GAAA,EAA2BA,EAAAyzC,EAAAxzC,OAAmBD,IAAA,CAC9C,GAAAyhC,GAAAgS,EAAA5xC,OAAA7B,EACAiC,IAAAuyB,EAAAiN,KAAAhgC,cACAggC,EAAA10B,cAGAymC,EAAAlpC,KAAArI,GAGA,MADAvC,GAAAuD,kBAAAuwC,GACAxZ,EAAAlI,iBACAzjB,GACS3O,EAAAgB,MAAA4yB,IAAAuD,YAAAmD,EAAApJ,UAAA/wB,EAAA,GAAA0C,OAAAH,KAAA,GAAAvC,EAAA,GAAAO,KAAAgC,KACTi3B,GAAA4Y,kCAAAvyC,EAAA6vC,GACSvV,EAAApJ,SACT2e,EAEAlU,EAAAx7B,EAAA,GAAA0C,OAAA1C,EAAA,GAAAO,OAGAszC,KAAA,SAAAh0C,EAAAs6B,EAAAn6B,EAAA0vC,GACA,GAAAjc,GAAA5zB,EAAAgB,MAAA4yB,IACArxB,EAAAvC,EAAAka,eACA+5B,EAAArgB,EAAAuD,WACAwE,EAAA/H,EAAA9wB,IAAAD,OAAA+wB,EAAA9wB,IAAApC,KAAAP,EAAA,GAAAO,KAAAP,EAAA,GAAA0C,QACAgtC,CAIA,OAHArY,IAAAU,mBAAAiR,SACA7O,EAAA3B,aAAA,OACAp2B,EAAA+3B,EAAApJ,SAAA0C,EAAAwD,aACA6c,IAQA/e,IACAgf,aAAA,SAAAl0C,EAAA0xB,EAAAkC,GACA,IAAAA,EAAAuD,WAAA,CAGA,GAAAkE,GAAA3J,EAAA2J,OACAjrB,EAAAshB,EAAAthB,QACAwnB,EAAAJ,GAAAI,SAEAjY,EAAAiY,EAAAmU,KAAA/rC,EAAAoQ,EAAAirB,MACAwQ,EAAAlsB,IAAAzM,WAAAiT,EACA0lB,MAAA7rC,EAAAkQ,YACAlQ,EAAA0U,UAAAm3B,KAEAj6B,OAAA,SAAA5R,EAAA0xB,EAAAkC,GACA,IAAAA,EAAAuD,WAAA,CAGA,GAAAkE,GAAA3J,EAAA2J,QAAA,EACA8Y,EAAAn0C,EAAAyR,oBACAH,EAAAtR,EAAAkR,gBAAAI,IACA8iC,EAAAD,EAAA9Y,EACA74B,EAAAkvB,EAAAthB,QAAAkB,EAAA8iC,EAAA9iC,EAAA8iC,EACAjtC,EAAAm0B,EAAAt7B,EAAAkQ,aACA0E,EAAA5U,EAAAyxC,WAAAtqC,EAAA,QACA,IAAAuqB,EAAAthB,QACA5N,EAAAoS,EAAAtD,KACAnK,EAAAzE,OAAAF,EAAAoS,EAAAtD,KAAA6iC,EACAhtC,EAAAzE,KAAAoB,KAAAuwC,KAAAltC,EAAAzE,MACA1C,EAAA0U,UAAAvN,GACAyN,EAAA5U,EAAAyxC,WAAAtqC,EAAA,SACAnH,EAAAwR,SAAA,KAAAoD,EAAAtD,MAGAtR,EAAAwR,SAAA,KAAAhP,OAES,CACT,GAAA8xC,GAAA9xC,EAAAxC,EAAAkR,gBAAAK,YACA+iC,GAAA1/B,EAAAC,QACA1N,EAAAzE,OAAAkS,EAAAC,OAAAy/B,GAAAH,EACAhtC,EAAAzE,KAAAoB,KAAAsrB,MAAAjoB,EAAAzE,MACA1C,EAAA0U,UAAAvN,GACAyN,EAAA5U,EAAAyxC,WAAAtqC,EAAA,SACAnH,EAAAwR,SACA,KAAAoD,EAAAC,OAAA7U,EAAAkR,gBAAAK,eAGAvR,EAAAwR,SAAA,KAAAhP,MAIA+xC,eAAA,SAAAv0C,EAAA0xB,GACA,GAAAuK,GAAAj8B,EAAAkQ,YAAAxN,KACA+uC,EAAAzxC,EAAAyxC,WAAAhvC,EAAAw5B,EAAA,YACA1xB,EAAAvK,EAAAkR,gBAAAK,aACAob,EAAA8kB,EAAAngC,IACA6iC,EAAA1C,EAAA58B,OAAA8X,CACA,QAAA+E,EAAAc,UACA,aAAA7F,IAAApiB,EAAA,EAAA4pC,CACA,MACA,cAAAxnB,IAAApiB,EAAA4pC,EAGAn0C,EAAAwR,SAAA,KAAAmb,IAEA6nB,YAAA,SAAAx0C,EAAA0xB,EAAAkC,GACA,GAAA+E,GAAAjH,EAAAuG,kBACAoD,EAAA3J,EAAA2J,OACAvD,EAAAN,GAAAM,cAIA,KAHA,KAAAa,IACAA,EAAAb,EAAA3B,gBAEAkF,KACAuN,GAAA5oC,EAAA4zB,EAAAkE,EAAAa,IAGAwT,qBAAA,SAAAnsC,EAAA0xB,GACA,GAAAoG,GAAAN,GAAAM,eACAa,EAAAjH,EAAAuG,iBACAT,IAAAU,mBAAA8V,gBAAArV,IACAb,EAAAqU,qBAAAnsC,EAAA24B,IAGA6P,gBAAA,SAAAxoC,GACAA,EAAAgB,MAAA2oC,WAKA3pC,EAAAwoC,iBAAA,GACAxoC,EAAAqzB,UAAA,uBACAvzB,EAAAwzB,OAAAtzB,EAAA,mBAAoDiB,KAAA,aANpDjB,EAAAwoC,iBAAA,GACAxoC,EAAAqzB,UAAA,wBACAvzB,EAAAwzB,OAAAtzB,EAAA,mBAAoDiB,KAAA,cAOpDk0B,gBAAA,SAAAn1B,EAAA0xB,EAAAkC,GACA,IAAA5zB,EAAAC,UAAA,aACA2zB,EAAAoB,YAAA,EACApB,EAAAsD,iBAAAxF,KAAA2J,QAAA,CACA,IAAAhJ,GAAA,EAAAX,EAAAW,SAAA,KACAvvB,EAAA8wB,EAAA9wB,IACApC,EAAAgxB,EAAAhxB,MAAAV,EAAAkQ,UAAA,QACA3F,EAAAvK,EAAAI,iBAAAG,MACA,WAAA8xB,EACA3xB,EAAA+B,EAAA/B,EAAAgC,KAAA03B,EAAAp6B,EAAAU,EAAAgC,WACS,iBAAA2vB,EACT3xB,EAAAu0B,EAAAv0B,EAAA,SACS,qBAAA2xB,EACT3xB,EAAAi5B,GAAA4Y,kCAAAvyC,EAAAU,OACS,2BAAA2xB,EACTuB,EAAAwD,aAOA12B,EAAA+B,EACAqB,KAAAC,IAAAjB,EAAApC,KAAAgC,KAAAI,EAAAD,OAAAH,MACAoB,KAAAC,IAAAjB,EAAApC,KAAAkB,GAAAkB,EAAAD,OAAAjB,KACA2I,EAAAzG,KAAAmsC,IAAAntC,EAAApC,KAAAgC,KAAAI,EAAAD,OAAAH,MAAA,GARAhC,EADAoC,EAAApC,KAAAgC,KAAAI,EAAAD,OAAAH,KACAI,EAAApC,KAEA+B,EAAAK,EAAAD,OAAAH,KAAA,OAQS,yBAAA2vB,EACTuB,EAAAwD,aAOA12B,EAAA+B,EACAqB,KAAAC,IAAAjB,EAAApC,KAAAgC,KAAAI,EAAAD,OAAAH,MACAoB,KAAAgD,IAAAhE,EAAApC,KAAAkB,GAAA,EAAAkB,EAAAD,OAAAjB,KACA2I,EAAAzG,KAAAmsC,IAAAntC,EAAApC,KAAAgC,KAAAI,EAAAD,OAAAH,MAAA,GARAhC,EADAoC,EAAApC,KAAAgC,MAAAI,EAAAD,OAAAH,KACAuyB,EAAAnyB,EAAApC,KAAA,KAEA+B,EAAAK,EAAAD,OAAAH,KAAA,OAQS,eAAA2vB,GACTuB,EAAAuD,WACA,MAGAn3B,GAAAqzB,UAAA,mBACA3B,KAAAxa,SAEAlX,EAAAwoC,iBAAA,GACAxoC,EAAAqzB,UAAA,wBACAvzB,EAAAwzB,OAAAtzB,EAAA,mBAAoDiB,KAAA,cAEpDjB,EAAAwoC,iBAAA,GACAxoC,EAAAqzB,UAAA,uBACAvzB,EAAAwzB,OAAAtzB,EAAA,mBAAoDiB,KAAA,YAEpDu2B,GAAAM,eAAA1B,YAEAp2B,EAAAsG,GAAA,SAAAI,IACA5G,EAAAwG,GAAAtG,EAAAyzB,gBAAA,UAAA4U,KAEAzU,EAAAuD,YACAwH,GAAA3+B,GAEAm9B,GAAAn9B,EAAAU,EAAA6J,KAEAkqC,iBAAA,SAAAz0C,EAAA0xB,EAAAkC,GACA,GAEAlzB,GAFA26B,EAAA3J,EAAA2J,OACAx4B,EAAA7C,EAAAkQ,WAKA0jB,GAAAuD,WAgBSvD,EAAAzB,WAAAT,EAAAR,UACT0C,EAAAwD,YAAA1F,EAAAa,WAEAqB,EAAAzB,aAAAT,EAAAR,SACA0C,EAAAwD,cAAA1F,EAAAa,UACAzyB,EAAAwzB,OAAAtzB,EAAA,mBAAoDiB,KAAA,SAAAyzC,QAAA9gB,EAAAzB,WAAA,WAAAyB,EAAAwD,YAAA,iBACpD4G,GAAAh+B,IAEA2+B,GAAA3+B,IAtBA4zB,EAAAuD,YAAA,EACAvD,EAAAzB,aAAAT,EAAAR,SACA0C,EAAAwD,cAAA1F,EAAAa,UACA7xB,EAAAu5B,EACAj6B,EAAAyC,EAAAI,EAAAH,KAAAG,EAAAjB,GAAAy5B,EAAA,IACA,GACAzH,EAAA9wB,KACAD,SACAnC,QAEAZ,EAAAwzB,OAAAtzB,EAAA,mBAAoDiB,KAAA,SAAAyzC,QAAA9gB,EAAAzB,WAAA,WAAAyB,EAAAwD,YAAA,iBACpD4G,GAAAh+B,GACAkiC,GAAAliC,EAAA4zB,EAAA,IAAA+H,EAAA94B,EAAAnC,IACAwhC,GAAAliC,EAAA4zB,EAAA,IAAAgI,EAAA/4B,EAAAnC,MAYAi0C,sBAAA,SAAA30C,EAAA40C,EAAAhhB,GACA,GAAAyD,GAAAzD,EAAAyD,aAIA,IAHAzD,EAAAuD,YACAyG,GAAA59B,EAAA4zB,GAEAyD,EAAA,CACA,GAAAx0B,GAAAw0B,EAAAqG,WAAAxqB,OACAxS,EAAA22B,EAAAsG,SAAAzqB,MACA,KAAArQ,IAAAnC,EAEA,MAEAkzB,GAAA9wB,KACAD,SACAnC,QAEAkzB,EAAAuD,YAAA,EACAvD,EAAAzB,WAAAkF,EAAAlF,WACAyB,EAAAwD,YAAAC,EAAAD,YACA4G,GAAAh+B,GACAkiC,GAAAliC,EAAA4zB,EAAA,IAAA+H,EAAA94B,EAAAnC,IACAwhC,GAAAliC,EAAA4zB,EAAA,IAAAgI,EAAA/4B,EAAAnC,IACAZ,EAAAwzB,OAAAtzB,EAAA,mBACAiB,KAAA,SACAyzC,QAAA9gB,EAAAzB,WAAA,WACAyB,EAAAwD,YAAA,mBAGAyd,UAAA,SAAA70C,EAAA0xB,EAAAkC,GACA,GAAAkL,GAAAC,CACA,IAAAnL,EAAAuD,WAAA,CAGA,GAFA2H,EAAA9+B,EAAAkQ,UAAA,UACA6uB,EAAA/+B,EAAAkQ,UAAA,QACAwrB,EAAAqD,EAAAD,GAAA,CACA,GAAAtqB,GAAAuqB,CACAA,GAAAD,EACAA,EAAAtqB,EAEAuqB,EAAAn9B,GAAAw4B,EAAAp6B,EAAA++B,EAAAr8B,MAAA,MACS,CAET,GAAA24B,GAAAv3B,KAAAgD,IAAA4qB,EAAA2J,OAAA,EACAyD,GAAA9+B,EAAAkQ,YACA6uB,EAAA9E,EAAAj6B,EAAAyC,EAAAq8B,EAAAp8B,KAAA24B,EAAA,EACA7P,MAGA,OADAspB,GAAA,EACAx0C,EAAAw+B,EAAAp8B,KAAmCpC,EAAAy+B,EAAAr8B,KAAiBpC,IAAA,CACpDw0C,EAAA1a,EAAAp6B,EAAA8+B,EAAAp8B,KACA,IAAA8R,GAAA/R,EAAAq8B,EAAAp8B,KAAA,EACA03B,EAAAp6B,EAAA8+B,EAAAp8B,KAAA,IACAH,EAAAvC,EAAAwP,SAAAsvB,EAAAtqB,EACAjS,KAAA2U,QAAA,cACAlX,EAAA4C,aAAAL,EAAAu8B,EAAAtqB,GAEA,GAAAugC,GAAAtyC,EAAAq8B,EAAAp8B,KAAAoyC,EACAlhB,GAAAuD,YACAwH,GAAA3+B,GAAA,GAEAA,EAAA0U,UAAAqgC,IAEAC,0BAAA,SAAAh1C,EAAA0xB,EAAAkC,GACAA,EAAAoB,YAAA,CACA,IAAA3C,GAAAiJ,EAAAt7B,EAAAkQ,YACA,IAAAmiB,EAAA3vB,OAAA1C,EAAAiG,aAAAyrB,EAAAC,MAIS,CACTU,EAAA3vB,KAAAgvB,EAAA,MAAAW,EAAA3vB,KACA2vB,EAAA3vB,KAAA,EACA2vB,EAAAzwB,GAAAw4B,EAAAp6B,EAAAqyB,EAAA3vB,MACA1C,EAAA0U,UAAA2d,IACAvyB,EAAAmF,SAAAgwC,iCACAn1C,EAAAmF,SAAAyuC,kBACA1zC,OATAA,GAAA4C,aAAA,KAAAH,EAAAzC,EAAAiG,YAAA,IACAjG,EAAA0U,UAAA1U,EAAAiG,YAAA,EAUAT,MAAA2vB,gBAAAn1B,GAAkCq7B,OAAA3J,EAAA2J,QAA4BzH,IAE9DshB,MAAA,SAAAl1C,EAAA0xB,EAAAkC,GACA,GAAAtjB,GAAAgrB,EAAAt7B,EAAAkQ,aACAgpB,EAAA1B,GAAAU,mBAAA2M,YACAnT,EAAAiH,cACAp2B,EAAA22B,EAAApS,UACA,IAAAvkB,EAAA,CAGA,GAAAmvB,EAAAE,YAAA,CACA,GAAAnR,GAAAzgB,EAAAC,UAAA,WAEAk1C,EAAA,SAAA9gC,GACA,GAAA+gC,GAAA/gC,EAAAmgB,MAAA,MAAAj0B,OAAA,EACA+7B,EAAAjoB,EAAAmgB,MAAA,KAAAj0B,OAAA,CACA,OAAA60C,GAAA30B,EAAA,EAAA6b,GAEA+Y,EAAAr1C,EAAAsD,QAAAtD,EAAAkQ,YAAAxN,MACAJ,EAAA6yC,EAAAE,EAAApuC,MAAA,YAEAquC,EAAA/yC,EAAA2U,QAAA,UACAq+B,EAAAhzC,IAAA+yC,EACAE,EAAAL,EAAA5yC,EAAA0E,MAAA,YACA1E,EAAA+yC,EAAAp+B,QAAA,kBAAAu+B,GACA,GAAAC,GAAApzC,GAAA6yC,EAAAM,GAAAD,EACA,IAAAE,EAAA,EACA,QAEA,IAAA11C,EAAAC,UAAA,mBACA,GAAA01C,GAAA7xC,KAAAsrB,MAAAsmB,EAAAj1B,EACA,OAAAlD,OAAAo4B,EAAA,GAAA14B,KAAA,MAGA,MAAAM,OAAAm4B,EAAA,GAAAz4B,KAAA,MAGA1a,IAAAgzC,EAAA,QAEA,GAAA7jB,EAAA2J,OAAA,EACA,GAAA94B,GAAAgb,MAAAmU,EAAA2J,OAAA,GAAApe,KAAA1a,EAEA,IAAA2uB,GAAAgI,EAAAhI,SACAqB,EAAA2G,EAAA3G,SACA,IAAArB,EACA0C,EAAAuD,WACA50B,EAAAqxB,EAAAzB,WAAA5vB,EAAAV,MAAA,WAAAU,EAAAV,MAAA,EAAAU,EAAAhC,OAAA,QACWmxB,EAAAC,OAGXpvB,EAAA,KAAAA,EAAAV,MAAA,EAAAU,EAAAhC,OAAA,GACA+P,EAAA1O,GAAAw4B,EAAAp6B,EAAAsQ,EAAA5N,OAEA4N,EAAA1O,GAAA,MAES,CACT,GAAA2wB,EAAA,CACAhwB,IAAAiyB,MAAA,KACA,QAAAl0B,GAAA,EAA2BA,EAAAiC,EAAAhC,OAAiBD,IAC5CiC,EAAAjC,GAAA,IAAAiC,EAAAjC,GAAA,IAAAiC,EAAAjC,GAGAgQ,EAAA1O,IAAA8vB,EAAAC,MAAA,IAEA,GAAAikB,GACArW,CACA,IAAA3L,EAAAuD,WAAA,CAEAvD,EAAA0D,eAAA/0B,CACA,IAAAszC,GACAC,EAAAvY,GAAAv9B,EAAA4zB,GACA4J,EAAAsY,EAAA,GACAtZ,EAAAsZ,EAAA,GACAC,EAAA/1C,EAAAka,eACAuiB,EAAAz8B,EAAAI,iBACA41C,EAAA,GAAAz4B,OAAAkf,EAAAl8B,QAAA0c,KAAA,KAAAuX,MAAA,IAEAZ,GAAAyD,gBACAwe,EAAAjiB,EAAAyD,cAAAsG,SAAAzqB,QAGAskB,GAAAU,mBAAAmB,gBAAAyL,QAAAiR,GACAxjB,GAEAvyB,EAAAuD,kBAAAyyC,GAEAxZ,EAAA/5B,EAAA+6B,EAAA96B,KAAAH,EAAAhC,OAAA,EAAAi9B,EAAA57B,IACA5B,EAAA0U,UAAA8oB,GACAjB,EAAAv8B,EAAAw8B,GACAx8B,EAAAuD,kBAAAhB,GACAqzC,EAAApY,GACW5J,EAAAwD,aACXp3B,EAAAuD,kBAAAyyC,GACAh2C,EAAA0U,UAAA8oB,GACAx9B,EAAA4C,aAAAL,EAAAi7B,KACAoY,EAAApY,IAEAx9B,EAAA4C,aAAAL,EAAAi7B,EAAAhB,GACAoZ,EAAA51C,EAAA69B,aAAA79B,EAAA89B,aAAAN,GAAAj7B,EAAAhC,OAAA,IAGAs1C,IACAjiB,EAAAyD,cAAAsG,SAAA39B,EAAAuU,YAAAshC,IAEA3kB,IACA0kB,EAAAh0C,GAAA,OAGA,IAAA2wB,EAAA,CACAvyB,EAAA0U,UAAApE,EACA,QAAAhQ,GAAA,EAA2BA,EAAAiC,EAAAhC,OAAiBD,IAAA,CAC5C,GAAAoC,GAAA4N,EAAA5N,KAAApC,CACAoC,GAAA1C,EAAAgE,YACAhE,EAAA4C,aAAA,KAAAH,EAAAC,EAAA,GAEA,IAAA49B,GAAAlG,EAAAp6B,EAAA0C,EACA49B,GAAAhwB,EAAA1O,IACAw6B,EAAAp8B,EAAA0C,EAAA4N,EAAA1O,IAGA5B,EAAA0U,UAAApE,GACAisB,EAAAv8B,EAAAyC,EAAA6N,EAAA5N,KAAAH,EAAAhC,OAAA,EAAA+P,EAAA1O,KACA5B,EAAAuD,kBAAAhB,GACAqzC,EAAAtlC,MAEAtQ,GAAA4C,aAAAL,EAAA+N,GAEA4gB,GAAAQ,EAAAC,MACAikB,EAAAnzC,EACA6N,EAAA5N,KAAA,EACAw8B,GAAAl/B,EAAAsD,QAAAgN,EAAA5N,KAAA,KACawuB,IAAAQ,EAAAC,MACbikB,EAAAnzC,EACA6N,EAAA5N,KACAw8B,GAAAl/B,EAAAsD,QAAAgN,EAAA5N,SACawuB,GAAAQ,EAAAC,OACb4N,EAAAv/B,EAAA89B,aAAAxtB,GACAslC,EAAA51C,EAAA69B,aAAA0B,EAAAh9B,EAAAhC,OAAA,KAEAg/B,EAAAv/B,EAAA89B,aAAAxtB,GACAslC,EAAA51C,EAAA69B,aAAA0B,EAAAh9B,EAAAhC,QAIAqzB,GAAAuD,YACAwH,GAAA3+B,GAAA,GAEAA,EAAA0U,UAAAkhC,KAEA31B,KAAA,SAAAjgB,EAAA0xB,GACA1xB,EAAA+N,UAAA,WACAqtB,EAAAp7B,EAAAF,EAAAmF,SAAAgb,KAAAyR,EAAA2J,UACAr7B,EAAA0U,UAAA1U,EAAAkQ,UAAA,cAGAgQ,KAAA,SAAAlgB,EAAA0xB,GACA0J,EAAAp7B,EAAAF,EAAAmF,SAAAib,KAAAwR,EAAA2J,WAEA4a,YAAA,SAAAzvC,EAAAkrB,EAAAkC,GACAA,EAAA8C,WAAAiC,aAAAjH,EAAAuG,mBAEAie,QAAA,SAAAl2C,EAAA0xB,EAAAkC,GAEAsO,GAAAliC,EAAA4zB,EADAlC,EAAAuG,kBACAj4B,EAAAkQ,cAEAgH,QAAA,SAAAlX,EAAA0xB,EAAAkC,GACA,GAEAuiB,GACApX,EAHAuI,EAAA5V,EAAAuG,kBACA6G,EAAA9+B,EAAAkQ,YAGAusB,EAAAz8B,EAAAI,gBACA,IAAAwzB,EAAAuD,WACA2H,EAAA9+B,EAAAkQ,UAAA,SACA6uB,EAAA/+B,EAAAkQ,UAAA,WACS,CACT,GAAAxN,GAAA1C,EAAAsD,QAAAw7B,EAAAp8B,KACAyzC,GAAArX,EAAAl9B,GAAA8vB,EAAA2J,OACA8a,EAAAzzC,EAAAnC,SACA41C,EAAAzzC,EAAAnC,QAEAw+B,EAAAt8B,EAAAq8B,EAAAp8B,KAAAyzC,GAEA,SAAA7O,EACA1T,EAAAuD,YAAAn3B,EAAA4C,aAAA,GAAAk8B,EAAAC,IAEAj/B,EAAAmF,SAAAgwC,iCAAAn1C,EAAAmF,SAAAyuC,kBAAA1zC,OACS,CACT,GAAAo2C,GAAAp2C,EAAAwP,SAAAsvB,EAAAC,EAGA,IADAqX,IAAAl/B,QAAA,SAAAowB,GACA1T,EAAAwD,YAAA,CAEA,GAAAkF,GAAA,GAAA/e,OAAAvd,EAAAC,UAAA,cAAAgd,KAAA,IACAm5B,GAAAp2C,EAAAka,eACAk8B,IAAAl/B,QAAA,MAAAolB,GAAAplB,QAAA,SAAAowB,GAAA9S,MAAA,MACAx0B,EAAAuD,kBAAA6yC,OAEAp2C,GAAA4C,aAAAwzC,EAAAtX,EAAAC,EAEAnL,GAAAuD,YACA2H,EAAApD,EAAAe,EAAA,GAAA55B,OAAA45B,EAAA,GAAA/7B,MACA+7B,EAAA,GAAA55B,OAAA45B,EAAA,GAAA/7B,KACAV,EAAA0U,UAAAoqB,GACAH,GAAA3+B,GAAA,IAEAA,EAAA0U,UAAAugB,EAAA8J,EAAA,SAIAsX,qBAAA,SAAAr2C,EAAA0xB,GASA,IARA,GAGAzqB,GACA9D,EACAxB,EACA20C,EACAh/B,EAPAhH,EAAAtQ,EAAAkQ,YACAqmC,EAAAv2C,EAAAsD,QAAAgN,EAAA5N,MACA8zC,EAAA,SAMA,QAAAvvC,EAAAuvC,EAAA3jC,KAAA0jC,MACAj/B,EAAArQ,EAAA,GACA9D,EAAA8D,EAAA+C,MACArI,EAAAwB,EAAAmU,EAAA/W,SACA+P,EAAA1O,GAAAD,MAEA,IAAA+vB,EAAAgB,aAAA/wB,GAAA2O,EAAA1O,MACA0V,EAAA,CACA,GAAA0gB,GAAAtG,EAAAe,SAAA,KACAgkB,EAAA3tB,SAAAxR,GAAA0gB,EAAAtG,EAAA2J,OACAr1B,EAAAvD,EAAA6N,EAAA5N,KAAAS,GACAmB,EAAA7B,EAAA6N,EAAA5N,KAAAf,EACA20C,GAAAG,EAAA3vB,WACA9mB,EAAA4C,aAAA0zC,EAAAtwC,EAAA1B,GAIAtE,EAAA0U,UAAAjS,EAAA6N,EAAA5N,KAAAS,EAAAmzC,EAAA/1C,OAAA,MAEA+nC,eAAA,SAAAtoC,EAAA0xB,EAAAkC,GAEA,GADAA,EAAAgD,mBACA,CACA,GAAAyE,GAAA3J,EAAA2J,MACAA,IAAA3J,EAAAmd,iBACAjb,EAAAgD,mBAAA2R,eAAAlN,EAEAA,EAAAzH,EAAAgD,mBAAA2R,gBAAAlN,EAEAiN,GAAAtoC,EAAA4zB,EAAAyH,GAAA,KAEA/4B,OAAA,SAAAtC,EAAA0xB,GACA1xB,EAAAgD,WAAAhD,EAAAkQ,YAAAxN,KAAAgvB,EAAAM,cAEA8V,mBA+eAhH,IACAJ,IAAA,UAAAF,IAAA,UAAAG,IAA0C,UAAAF,IAAgB,UAC1DoC,IAAA,UAAAC,IAAA,UACA4T,IAAA,UAAAC,IAAA,UACA/uB,EAAA,SAAAgvB,EAAA,SACAC,IAAA,cAEA7V,IACA8V,SACA7V,WAAA,SAAAjgC,GACA,GAAAA,EAAAq/B,SAAAr/B,EAAAi/B,MAEA,KADAj/B,EAAA4/B,OACA,eACW5/B,GAAAq/B,SAAAr/B,EAAAu/B,aACXv/B,EAAA4/B,OAEA,YAGAmW,SACAhW,KAAA,SAAA//B,GACAA,EAAA6/B,gBAAA,EACA7/B,EAAAi/B,MAAAj/B,EAAAoP,QAAA,WAAApP,EAAAi/B,KAAA,IAAsE,KAEtEgB,WAAA,SAAAjgC,GACA,WAAAA,EAAAgJ,OAAAhJ,EAAAq/B,SAAAr/B,EAAAi/B,OAGA+W,SACA/V,WAAA,SAAAjgC,GACA,GAAAiR,GAAA,MAAAjR,EAAAs/B,QAAA,MAAAt/B,EAAAq/B,MAEA,OADAr/B,GAAAs/B,OAAAt/B,EAAAq/B,OACApuB,IAMAglC,QACAlW,KAAA,SAAA//B,GACAA,EAAAi/B,KAAA,MAAAj/B,EAAAi/B,KAAA,IAA+C,IAC/Cj/B,EAAAu/B,YAAA,MAAAv/B,EAAAi/B,KAA+C,IAAM,KAErDgB,WAAA,SAAAjgC,GACA,MAAAA,GAAAq/B,SAAAr/B,EAAAi/B,OAIAiX,YACAnW,KAAA,SAAA//B,GACAA,EAAAgJ,MAAA,GAEAi3B,WAAA,SAAAjgC,GACA,SAAAA,EAAAq/B,OAAA,CACA,GAAA/oB,GAAAtW,EAAAo/B,SAAAn5B,MAAA,YACA,cAAAqQ,EAAA,CACA,GAAAtW,EAAAoP,SAAA,IAAApP,EAAA4/B,MACA,QAEA5/B,GAAA4/B,YACa,WAAAtpB,EAAA,CACb,IAAAtW,EAAAoP,SAAA,IAAApP,EAAA4/B,MACA,QAEA5/B,GAAA4/B,QAEA,YAAAtpB,GAAA,IAAAtW,EAAA4/B,MAAA,SAEA,WA0YAp8B,GAAA,qBAEAkT,GAAA1Q,WACAg/B,SAAA,WACA,MAAAxO,IAAAnyB,OAEA4gC,SAAA,SAAA5gC,GACAmyB,GAAAnyB,SAEAihC,WAAA,WACA,MAAA9gC,MAAAwR,eAEAyvB,WAAA,SAAA3uB,GACAtS,KAAAwR,cAAAc,GAEA44B,WAAA,WACA,MAAAlZ,IAAAkZ,YAEArB,YAAA,SAAA8H,GACA3f,GAAAkZ,WAAAyG,GAEA5Q,qBAAA,WACA,MAAA/gC,MAAAoU,UAEA4sB,qBAAA,SAAA5sB,GACApU,KAAAoU,YAqFA,IAAAwqB,KAAyBgT,MAAA,KAAAC,MAAA,KAAAC,MAAA,MAsCzB3S,IAAqB4S,MAAA,IAAAC,OAAA,KAAAJ,MAAA,KAAAC,MAAA,KAAAC,MAAA,MAoFrB/H,GAAA,sBAuKAkI,GAAA,WACAjyC,KAAAkyC,mBAEAD,IAAAzwC,WACA8hC,eAAA,SAAA9oC,EAAAmf,EAAAw4B,GACA,GAAAxyB,GAAA3f,IACAxF,GAAA+N,UAAA,WACA/N,EAAA4pC,MAAAC,SAAA,EACA1kB,EAAAyyB,gBAAA53C,EAAAmf,EAAAw4B,MAGAC,gBAAA,SAAA53C,EAAAmf,EAAAw4B,GACA,GAAA/jB,GAAA5zB,EAAAgB,MAAA4yB,IACAikB,EAAArgB,GAAAU,mBAAA2M,YAAA,KACAiT,EAAAD,EAAA/wB,UACA8M,GAAAuD,YACAwH,GAAA3+B,EAEA,IAAA+3C,GAAA,GAAAj4C,GAAAwkC,aAAAnlB,EAEA04B,GAAA/S,QAAA3lB,EACA,IAAA64B,GAAAL,KACAK,GAAA74B,OACA,KACA3Z,KAAAyyC,YAAAj4C,EAAA+3C,EAAAC,GACS,MAAAr0C,GAET,KADAshC,IAAAjlC,EAAA2D,GACAA,EAEA,GAAA8E,GACAyvC,CACA,IAAAF,EAAAE,aAOA,GADAzvC,EAAAjD,KAAA2yC,cAAAH,EAAAE,aACA,CAMA,GALAA,EAAAzvC,EAAAvH,KACAuH,EAAAyqB,2BACA2kB,EAAA/S,QAAAgT,GAEAtyC,KAAA4yC,kBAAAL,EAAAC,EAAAvvC,GACA,WAAAA,EAAAzG,KAAA,CAEA,OAAA1B,GAAA,EAA6BA,EAAAmI,EAAAqoB,OAAAvwB,OAA2BD,IACxDR,EAAAqzB,IAAA6V,UAAAhpC,EAAAyI,EAAAqoB,OAAAxwB,GAAA,UAEA,QACa,aAAAmI,EAAAzG,KAGb,WADAwD,MAAAsjC,eAAA9oC,EAAAyI,EAAA4vC,mBAnBAlyB,KAAA6xB,EAAAt1C,OACAw1C,EAAA,OAuBA,KAAAA,EAEA,WADAjT,IAAAjlC,EAAA,2BAAAmf,EAAA,IAGA,KACA+tB,GAAAgL,GAAAl4C,EAAAg4C,GAIAvvC,KAAAwqB,gBAAA+kB,EAAA3uC,UACA2uC,EAAA3uC,WAES,MAAA1F,GAET,KADAshC,IAAAjlC,EAAA2D,GACAA,IAGAs0C,YAAA,SAAAj4C,EAAA+3C,EAAA7hC,GACA6hC,EAAAO,SAAA,KAEAP,EAAAQ,IAAA,MACAriC,EAAAxT,KAAA1C,EAAAiG,YACAiQ,EAAAkxB,QAAApnC,EAAAgE,aAEAkS,EAAAxT,KAAA8C,KAAAgzC,eAAAx4C,EAAA+3C,OACA5xB,KAAAjQ,EAAAxT,MAAAq1C,EAAAQ,IAAA,OACAriC,EAAAkxB,QAAA5hC,KAAAgzC,eAAAx4C,EAAA+3C,IAKA,IAAAld,GAAAkd,EAAA9wC,MAAA,SAOA,OALAiP,GAAAgiC,YADArd,EACAA,EAAA,GAEAkd,EAAA9wC,MAAA,SAGAiP,GAEAsiC,eAAA,SAAAx4C,EAAA+3C,GACA,GAAAU,GAAAV,EAAA9wC,MAAA,SACA,IAAAwxC,EAGA,MAAA3vB,UAAA2vB,EAAA,QAEA,QAAAV,EAAAxzC,QACA,QACA,MAAAiB,MAAAkzC,qBAAAX,EAAA/3C,EAAAkQ,YAAAxN,KACA,SACA,MAAA8C,MAAAkzC,qBAAAX,EAAA/3C,EAAAgE,WACA,SACA,GAAAm+B,GAAA4V,EAAAxzC,OACAsnC,EAAA7E,GAAAhnC,IAAAgB,MAAA4yB,IAAAuO,EACA,KAAA0J,EAAA,SAAA5vB,OAAA,eACA,OAAAzW,MAAAkzC,qBAAAX,EAAAlM,EAAAnpC,KACA,SACA,QAGA,MAFAq1C,GAAA3R,OAAA,GAEA5gC,KAAAkzC,qBAAAX,EAAA/3C,EAAAkQ,YAAAxN,KACA,SAEA,WADAq1C,GAAA3R,OAAA,KAIAsS,qBAAA,SAAAX,EAAAr1C,GACA,GAAAi2C,GAAAZ,EAAA9wC,MAAA,gBACA,IAAA0xC,EAAA,CACA,GAAAjmC,GAAAoW,SAAA6vB,EAAA,MACA,MAAAA,EAAA,GACAj2C,GAAAgQ,EAEAhQ,GAAAgQ,EAGA,MAAAhQ,IAEA01C,kBAAA,SAAAL,EAAAC,EAAAvvC,GACA,IAAAsvC,EAAAxT,MAAA,CAGAyT,EAAAvU,UAAAsU,EAAA9wC,MAAA,QAEA,IAAA2xC,GAAAnwC,EAAAowC,cAAA,MACAve,EAAA9wB,EAAAwuC,EAAAvU,WAAAjP,MAAAokB,EACAte,GAAA/5B,QAAA+5B,EAAA,KACA0d,EAAA1d,UAGA6d,cAAA,SAAAD,GAKA,OAAA53C,GAAA43C,EAAA33C,OAAwCD,EAAA,EAAOA,IAAA,CAC/C,GAAAglC,GAAA4S,EAAArU,UAAA,EAAAvjC,EACA,IAAAkF,KAAA2nC,YAAA7H,GAAA,CACA,GAAA78B,GAAAjD,KAAA2nC,YAAA7H,EACA,QAAA78B,EAAAvH,KAAAkB,QAAA81C,GACA,MAAAzvC,IAIA,aAEAivC,iBAAA,WACAlyC,KAAA2nC,cACA,QAAA7sC,GAAA,EAAuBA,EAAAyyB,EAAAxyB,OAAgCD,IAAA,CACvD,GAAAmI,GAAAsqB,EAAAzyB,GACA4J,EAAAzB,EAAAuqB,WAAAvqB,EAAAvH,IACAsE,MAAA2nC,YAAAjjC,GAAAzB,IAGA5D,IAAA,SAAA+nC,EAAAC,EAAAC,GACA,QAAAF,GAAA,KAAAA,EAAAzqC,OAAA,IACA,GAAA2qC,EAAoB,KAAA7wB,OAAA,qCACpB,IAAAi8B,GAAAtL,EAAA/I,UAAA,EACA,MAAAgJ,GAAA,KAAAA,EAAA1qC,OAAA,GAEAqD,KAAA2nC,YAAA+K,IACAh3C,KAAAg3C,EACAl2C,KAAA,SACAq2C,QAAAxL,EAAAhJ,UAAA,GACAiV,MAAA,GAIAtzC,KAAA2nC,YAAA+K,IACAh3C,KAAAg3C,EACAl2C,KAAA,UACA8uB,OAAA+b,EACAiM,MAAA,OAIA,SAAAjM,GAAA,KAAAA,EAAA1qC,OAAA,IAEA,GAAA42C,IACAloB,KAAA+b,EACA5qC,KAAA,UACAytC,QAAuBtwB,MAAA0tB,EAAAhJ,UAAA,IAEvBiJ,KAAsBiM,EAAA11C,QAAAypC,GACtBlc,EAAAzd,QAAA4lC,OACW,CAEX,GAAAA,IACAloB,KAAA+b,EACA5qC,KAAA,WACA8uB,OAAA+b,EAEAC,KAAsBiM,EAAA11C,QAAAypC,GACtBlc,EAAAzd,QAAA4lC,KAIAhM,MAAA,SAAAH,EAAAE,GACA,QAAAF,GAAA,KAAAA,EAAAzqC,OAAA,IAEA,GAAA2qC,EAAoB,KAAA7wB,OAAA,qCACpB,IAAAi8B,GAAAtL,EAAA/I,UAAA,EACA,IAAAr+B,KAAA2nC,YAAA+K,IAAA1yC,KAAA2nC,YAAA+K,GAAAY,KAEA,kBADAtzC,MAAA2nC,YAAA+K,OAMA,QADArnB,GAAA+b,EACAtsC,EAAA,EAAyBA,EAAAswB,EAAArwB,OAA0BD,IACnD,GAAAuwB,GAAAD,EAAAtwB,GAAAuwB,MACAD,EAAAtwB,GAAA+C,UAAAypC,EAEA,WADAlc,GAAA1pB,OAAA5G,EAAA,EAKA,MAAA2b,OAAA,qBAIA,IAAAixB,KACA8L,YAAA,SAAAh5C,EAAAg4C,GACA,IAAAA,EAAA1d,MAAA0d,EAAA1d,KAAA/5B,OAAA,EAEA,WADA0kC,IAAAjlC,IAAAC,UAAA,SAGAD,GAAAqzB,UAAA,QAAA2kB,EAAA1d,KAAA,KAEAz1B,IAAA,SAAA7E,EAAAg4C,EAAAlL,GACA,GAAAmM,GAAAjB,EAAA1d,IACA,KAAA2e,KAAA14C,OAAA,EAIA,YAHAP,GACAilC,GAAAjlC,EAAA,oBAAAg4C,EAAA74B,OAIA0pB,IAAAhkC,IAAAo0C,EAAA,GAAAA,EAAA,GAAAnM,IAEAoM,KAAA,SAAAl5C,EAAAg4C,GAAkCxyC,KAAAX,IAAA7E,EAAAg4C,EAAA,WAClCmB,KAAA,SAAAn5C,EAAAg4C,GAAkCxyC,KAAAX,IAAA7E,EAAAg4C,EAAA,WAClCoB,KAAA,SAAAp5C,EAAAg4C,GAAkCxyC,KAAAX,IAAA7E,EAAAg4C,EAAA,WAClCjL,MAAA,SAAA/sC,EAAAg4C,EAAAlL,GACA,GAAAmM,GAAAjB,EAAA1d,IACA,KAAA2e,KAAA14C,OAAA,EAIA,YAHAP,GACAilC,GAAAjlC,EAAA,oBAAAg4C,EAAA74B,OAIA0pB,IAAAkE,MAAAkM,EAAA,GAAAnM,IAEAf,KAAA,SAAA/rC,EAAAg4C,GACA5N,GAAAtB,eAAA9oC,IAAAgB,MAAA4yB,KACA5xB,KAAA,SACAgvB,OAAA,6BACAC,YAAyB7gB,SAAA,EAAAmhB,gBAAA,EACzBL,UAAA,GACAqX,eAAAyP,EAAAt1C,KAAA,KAEA6tB,IAAA,SAAAvwB,EAAAg4C,GACA,GAAAqB,GAAArB,EAAA1d,KAGAgf,EAAAtB,EAAAsB,UACA,KAAAD,KAAA94C,OAAA,EAIA,YAHAP,GACAilC,GAAAjlC,EAAA,oBAAAg4C,EAAA74B,OAIA,IAAAo6B,GAAAF,EAAA,GAAA7kB,MAAA,KACA+D,EAAAghB,EAAA,GACAnwC,EAAAmwC,EAAA,GACAC,GAAA,CAEA,SAAAjhB,EAAAp2B,OAAAo2B,EAAAh4B,OAAA,IAEA,GAAA6I,EAAsB,KAAA6S,OAAA,wBAAA+7B,EAAAvU,UACtBlL,KAAAsL,UAAA,EAAAtL,EAAAh4B,OAAA,GACAi5C,GAAA,MAEArzB,KAAA/c,GAAA,MAAAmvB,EAAAsL,UAAA,OAGAtL,IAAAsL,UAAA,GACAz6B,GAAA,EAGA,IAAAqwC,GAAAl0C,GAAAgzB,IAAA,WAAAhzB,GAAAgzB,GAAAv2B,IAMA,IALAy3C,OAAAtzB,IAAA/c,IAEAA,GAAA,IAGAqwC,OAAAtzB,KAAA/c,GAAAowC,EAAA,CACA,GAAAE,GAAAz5C,EAAAs4B,EAAAv4B,EAAAs5C,EACAI,aAAAz9B,OACAgpB,GAAAjlC,EAAA05C,EAAA52B,UACW,IAAA42B,IAAA,IAAAA,EACXzU,GAAAjlC,EAAA,KAAA05C,EAAA,SAAAnhB,GAEA0M,GAAAjlC,EAAA,KAAAu4B,EAAA,IAAAmhB,OAES,CACT,GAAAC,GAAAtmB,EAAAkF,EAAAnvB,EAAApJ,EAAAs5C,EACAK,aAAA19B,QACAgpB,GAAAjlC,EAAA25C,EAAA72B,WAIA82B,SAAA,SAAA55C,EAAAg4C,GAEAA,EAAAsB,QAAyBtjB,MAAA,SACzBxwB,KAAA+qB,IAAAvwB,EAAAg4C,IAEA6B,UAAA,SAAA75C,EAAAg4C,GAEAA,EAAAsB,QAAyBtjB,MAAA,UACzBxwB,KAAA+qB,IAAAvwB,EAAAg4C,IAEA7e,UAAA,SAAAn5B,EAAAg4C,GACA,GAAA8B,GAAA9B,EAAA1d,KACAnB,EAAA3B,GAAAU,mBAAAiB,UACA4gB,EAAA,uCACA,IAAAD,EAOS,CACT,GAAAnhB,EACAmhB,KAAA78B,KAAA,GACA,QAAA3c,GAAA,EAAyBA,EAAAw5C,EAAAv5C,OAAoBD,IAE7C,GADAq4B,EAAAmhB,EAAA33C,OAAA7B,GACAk3B,GAAAU,mBAAA8V,gBAAArV,GAAA,CAGA,GAAAO,GAAAC,EAAAR,IAAA,GAAAG,EACAihB,IAAA,IAAAphB,EAAA,OAAAO,EAAApS,WAAA,YAfA,QAAA6R,KAAAQ,GAAA,CACA,GAAA52B,GAAA42B,EAAAR,GAAA7R,UACAvkB,GAAAhC,SACAw5C,GAAA,IAAAphB,EAAA,OAAAp2B,EAAA,QAeA0iC,GAAAjlC,EAAA+5C,IAEAtqC,KAAA,SAAAzP,EAAAg4C,GAuDA,QAAAgC,GAAAtqC,EAAAC,GACA,GAAAsqC,EAAA,CAAwB,GAAAzlC,EAASA,GAAA9E,EAASA,EAAAC,EAAOA,EAAA6E,EACjD6C,IAA2B3H,IAAA3N,cAAqB4N,IAAA5N,cAChD,IAAAm4C,GAAAzD,GAAAhhB,EAAA5iB,KAAAnD,GACAyqC,EAAA1D,GAAAhhB,EAAA5iB,KAAAlD,EACA,OAAAuqC,IACAA,EAAApxB,UAAAoxB,EAAA,GAAAA,EAAA,IAAAn4C,cAAAq4C,GACAD,EAAArxB,UAAAqxB,EAAA,GAAAA,EAAA,IAAAp4C,cAAAq4C,GACAF,EAAAC,GAHsBzqC,EAAAC,GAAA,IAKtB,QAAA0qC,GAAA3qC,EAAAC,GACA,GAAAsqC,EAAA,CAAwB,GAAAzlC,EAASA,GAAA9E,EAASA,EAAAC,EAAOA,EAAA6E,EAEjD,MADA6C,KAA2B3H,EAAA,GAAAA,EAAA,GAAA3N,cAA2B4N,EAAA,GAAAA,EAAA,GAAA5N,eACtD2N,EAAA,GAAAC,EAAA,QAnEA,GAAAsqC,GAAA5iC,EAAAijC,EAAA7D,EAAA8D,EAuBAC,EAtBA,WACA,GAAAxC,EAAAvU,UAAA,CACA,GAAAnJ,GAAA,GAAAx6B,GAAAwkC,aAAA0T,EAAAvU,UAEA,IADAnJ,EAAAie,IAAA,OAAgC0B,GAAA,GAChC3f,EAAAiK,MAA6B,MAC7B,KAAAjK,EAAAmgB,WAAmC,yBACnC,IAAAC,GAAApgB,EAAArzB,MAAA,8BACA,KAAAyzC,IAAApgB,EAAAiK,MAAuC,yBACvC,IAAAmW,EAAA,IACArjC,GAAA,GAAAqjC,EAAA,GAAAt4C,QAAA,KACAk4C,GAAA,GAAAI,EAAA,GAAAt4C,QAAA,IACA,IAAAu4C,IAAA,GAAAD,EAAA,GAAAt4C,QAAA,UAAAs4C,EAAA,GAAAt4C,QAAA,QACAw4C,GAAA,GAAAF,EAAA,GAAAt4C,QAAA,QACAy4C,GAAA,GAAAH,EAAA,GAAAt4C,QAAA,OACA,IAAAu4C,EAAAC,EAAAC,EAAA,EAA8C,yBAC9CpE,GAAAkE,GAAA,WAAAC,GAAA,OAAAC,GAAA,QAEAH,EAAA,KACAH,EAAA,GAAAvoC,QAAA0oC,EAAA,GAAA3xB,OAAA,EAAA2xB,EAAA,GAAAn6C,OAAA,GAAA8W,EAAA,YAKA,IAAAmjC,EAEA,WADAvV,IAAAjlC,EAAAw6C,EAAA,KAAAxC,EAAAvU,UAGA,IAAA0D,GAAA6Q,EAAAt1C,MAAA1C,EAAAiG,YACAmhC,EAAA4Q,EAAA5Q,SAAA4Q,EAAAt1C,MAAA1C,EAAAgE,UACA,IAAAmjC,GAAAC,EAAA,CACA,GAAAtI,GAAAr8B,EAAA0kC,EAAA,GACApI,EAAAt8B,EAAA2kC,EAAAhN,EAAAp6B,EAAAonC,IACA7kC,EAAAvC,EAAAwP,SAAAsvB,EAAAC,GAAAvK,MAAA,MACAiB,EAAA8kB,IACA,WAAA9D,EAAA,cACA,OAAAA,EAAA,0BACA,SAAAA,EAAA,iBACA2D,EAAA,WAAA3D,EAAA,UAAAA,EAAA,YAAAA,EAAA,OACAqE,KAAAC,IACA,IAAAtE,GAAA8D,EACA,OAAAj6C,GAAA,EAAyBA,EAAAiC,EAAAhC,OAAiBD,IAAA,CAC1C,GAAA06C,GAAAT,EAAAh4C,EAAAjC,GAAA2G,MAAAszC,GAAA,IACAS,IAAA,IAAAA,EAAA,GACAF,EAAAlwC,KAAAowC,IACaT,GAAA9kB,EAAA5iB,KAAAtQ,EAAAjC,IACbw6C,EAAAlwC,KAAArI,EAAAjC,IAEAy6C,EAAAnwC,KAAArI,EAAAjC,QAIAy6C,GAAAx4C,CAkBA,IADAu4C,EAAArrC,KAAA8qC,EAAAF,EAAAL,GACAO,EACA,OAAAj6C,GAAA,EAAyBA,EAAAw6C,EAAAv6C,OAAoBD,IAC7Cw6C,EAAAx6C,GAAAw6C,EAAAx6C,GAAA6e,UAESs3B,IAAoBsE,EAAAtrC,KAAAuqC,EAE7B,IADAz3C,EAAA03C,EAAAa,EAAAluB,OAAAmuB,KAAAnuB,OAAAkuB,GACAR,EAAA,CACA,GACAt2C,GADAi3C,EAAA14C,CAEAA,KACA,QAAAjC,GAAA,EAAyBA,EAAA26C,EAAA16C,OAAoBD,IAC7C26C,EAAA36C,IAAA0D,GACAzB,EAAAqI,KAAAqwC,EAAA36C,IAEA0D,EAAAi3C,EAAA36C,GAGAN,EAAA4C,aAAAL,EAAA0a,KAAA,MAAA6hB,EAAAC,KAEA5nB,OAAA,SAAAnX,EAAAg4C,GAIA,GAAAvU,GAAAuU,EAAAvU,SACA,KAAAA,EAEA,WADAwB,IAAAjlC,EAAA,yCAIA,IAIAib,GAJAksB,MAAAhhB,KAAA6xB,EAAAt1C,KAAAs1C,EAAAt1C,KAAA1C,EAAAiG,YACAmhC,EAAA4Q,EAAA5Q,SAAA4Q,EAAAt1C,MAAA1C,EAAAgE,WAEA4/B,EAAAJ,GAAAC,GACAsB,EAAAtB,CAKA,IAJAG,EAAArjC,SACAwkC,EAAAnB,EAAA,GACA3oB,EAAA2oB,EAAA/hC,MAAA,EAAA+hC,EAAArjC,QAAA0c,KAAA,MAEA8nB,EAGA,IACAc,GAAA7lC,EAAA+kC,GAAA,GACA,GACW,MAAAphC,GAEX,WADAshC,IAAAjlC,EAAA,kBAAA+kC,GAQA,OAFA1/B,GAAA0S,GAAA/X,GAAAgmC,WACAkV,KAAAnlC,EAAA,GACAzV,EAAA6mC,EAA+B7mC,GAAA8mC,EAAc9mC,IAAA,CAC7C+E,EAAApD,KAAAjC,EAAAsD,QAAAhD,MAEA46C,EAAAtwC,KAAAtK,EAAA,GACAyV,GAAA/V,EAAAsD,QAAAhD,GAAA,QAIA,IAAA2a,EAEA,WADAgqB,IAAAjlC,EAAA+V,EAGA,IAAA/L,GAAA,EACAmxC,EAAA,WACA,GAAAnxC,EAAAkxC,EAAA36C,OAAA,CACA,GAAAkI,GAAAyyC,EAAAlxC,GAAAiR,CACA4tB,IAAAC,eAAA9oC,EAAAyI,GACAY,SAAA8xC,IAGAnxC,IAEAmxC,MAEAC,WAAA,SAAAp7C,EAAAg4C,GACA,IAAAh4C,EAAAoH,gBACA,SAAA6U,OAAA,sGAGA,IAEA8oB,GAAAsW,EAAAC,EAAAC,EAFA9X,EAAAuU,EAAAvU,UACAG,EAAAH,EAAAD,GAAAC,MACA+X,EAAA,GACAzvC,GAAA,EACAoL,GAAA,CACA,IAAAysB,EAAArjC,OACAwkC,EAAAnB,EAAA,GACA4X,EAAA5X,EAAA,GACAmB,GAAA,MAAAA,IAAAxkC,OAAA,KACAwkC,IAAAljC,MAAA,EAAAkjC,EAAAxkC,OAAA,SACAi7C,MAAA,eAEAr1B,KAAAq1B,IAEAA,EADAv7C,EAAA,QACAokC,GAAAmX,GAEArX,GAAAqX,GAEAhkB,GAAAG,0BAAA6jB,GAEAH,EAAAzX,EAAA,GAAAA,EAAA,GAAApP,MAAA,YAKA,IAAAiP,KAAAljC,OAGA,WAFA0kC,IAAAjlC,EAAA,0DAsBA,IAfAq7C,IACAC,EAAAD,EAAA,GACAE,EAAAzyB,SAAAuyB,EAAA,IACAC,KACA,GAAAA,EAAAl5C,QAAA,OACA2J,GAAA,EACAuvC,EAAApkC,QAAA,UAEA,GAAAokC,EAAAl5C,QAAA,OACA+U,GAAA,EACAmkC,EAAApkC,QAAA,SAEA6tB,IAAA,IAAAuW,IAGAvW,EAGA,IACAc,GAAA7lC,EAAA+kC,GAAA,GACA,GACW,MAAAphC,GAEX,WADAshC,IAAAjlC,EAAA,kBAAA+kC,GAKA,OAAA5e,MADAq1B,KAAAhkB,GAAAG,2BAGA,WADAsN,IAAAjlC,EAAA,4CAGA,IAAAgB,GAAA+W,GAAA/X,GACAqF,EAAArE,EAAAglC,WACAmB,MAAAhhB,KAAA6xB,EAAAt1C,KAAAs1C,EAAAt1C,KAAA1C,EAAAkQ,YAAAxN,KACA0kC,EAAA4Q,EAAA5Q,SAAAD,CACAA,IAAAnnC,EAAAiG,aAAAmhC,GAAApnC,EAAAgE,aACAojC,EAAA5b,KAEA+vB,IACApU,EAAAC,EACAA,EAAAD,EAAAoU,EAAA,EAEA,IAAAE,GAAAxhB,EAAAj6B,EAAAyC,EAAA0kC,EAAA,IACAhgC,EAAAnH,EAAAoH,gBAAA/B,EAAAo2C,EACAhgC,IAAAzb,EAAA+L,EAAAoL,EAAAgwB,EAAAC,EAAAjgC,EAAA9B,EAAAm2C,EAAAxD,EAAA3uC,WAEA6W,KAAApgB,EAAAmF,SAAAib,KACAD,KAAAngB,EAAAmF,SAAAgb,KACAqG,MAAA,SAAAtmB,GACAF,EAAAmF,SAAAy2C,KAEA57C,EAAAmF,SAAAy2C,KAAA17C,GACSA,EAAA07C,MAET17C,EAAA07C,QAGAC,WAAA,SAAA37C,GACA0mC,GAAA1mC,IAEAg0C,KAAA,SAAAh0C,GACA,GAAAsQ,GAAAgrB,EAAAt7B,EAAAkQ,aACAxN,EAAA4N,EAAA5N,KACA09B,EAAApgC,EAAAsD,QAAAZ,EACA80B,IAAAU,mBAAAiR,SACA,WAAA/I,GAAA,OAEAwb,SAAA,SAAA57C,EAAAg4C,GACA,IAAAA,EAAAvU,YAAAj6B,EAAAwuC,EAAAvU,WAEA,WADAwB,IAAAjlC,EAAA,oBAMA,KAFA,GAAAgB,GAAAhB,EAAAgB,MAAA4yB,IACArc,EAAA,GAAAzX,GAAAwkC,aAAA96B,EAAAwuC,EAAAvU,aACAlsB,EAAAgtB,OAAA,CACAhtB,EAAAkjC,UAIA,IAAAc,GAAAhkC,EAAA9W,GAEA,KAAA8W,EAAAtQ,MAAA,eAEA,WADAg+B,IAAAjlC,EAAA,qBAAAg4C,EAAAvU,UAAAI,UAAA0X,GAIA,IAAAM,GAAAtkC,EAAAhT,MAEA,IAAAgT,EAAAtQ,MAAA,SAIA,IAAAsQ,EAAAtQ,MAAA,eAEA,WADAg+B,IAAAjlC,EAAA,qBAAAg4C,EAAAvU,UAAAI,UAAA0X,GAIA,IAAAO,GAAAD,EACAE,EAAAxkC,EAAAhT,MAGA,MAAA+wB,EAAAwmB,IAAAxmB,EAAAymB,IACAjnB,EAAAgnB,IAAAhnB,EAAAinB,IAiBA,WADA9W,IAAAjlC,EAAA,qBAAA87C,EAAA,IAfA,IAAA34C,GAAA24C,EAAAp/B,WAAA,GACAs/B,EAAAD,EAAAr/B,WAAA,EACA,IAAAvZ,GAAA64C,EAEA,WADA/W,IAAAjlC,EAAA,qBAAAg4C,EAAAvU,UAAAI,UAAA0X,GAOA,QAAAjoC,GAAA,EAA6BA,GAAA0oC,EAAA74C,EAAqBmQ,IAAA,CAClD,GAAAqM,GAAArU,OAAA6e,aAAAhnB,EAAAmQ,SACAtS,GAAA+R,MAAA4M,eAQA3e,GAAA+R,MAAA8oC,MAMAhT,GAAA,GAAA4O,GAmeA,OAxXA33C,GAAA2Q,OAAAmjB,KACAI,OAAAC,EACAgoB,OAAApoB,EACA7L,KAAAmM,GAwEA3vB,EAAA,yCAEA1E,EAAA2Q,OAAA,eAGAE,aAAA,WACAqjB,OAAAC,EACAgoB,OAAApoB,EACA7L,KAAAmM,GAGAr0B,EAAA2Q,OAAA,gBACA06B,UAAA,aACAx6B,aAAA,cACAqjB,OAAAC,EACAgoB,OAAApoB,EACA7L,KAAAmM,GA4RAoD,IACA8U,Sf07HM6P,KACA,SAAUx8C,EAAQwI,EAAqBtI,GAE7C,YgB19RA,IAAAuI,GAAA,WAA0B,GAAAC,GAAA5C,KAAa6C,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CACjE,OAAAE,GAAA,aACAK,OACAyB,MAAA,KACAsB,QAAAvD,EAAAuD,SAEArF,IACA61C,iBAAA,SAAAC,GACAh0C,EAAAuD,QAAAywC,MAGG7zC,EAAA,QACHI,YAAA,SACGP,EAAAsB,GAAAtB,EAAAgC,GAAAhC,EAAA7F,SAAA6F,EAAAsB,GAAA,KAAAnB,EAAA,QACHI,YAAA,gBACAgB,KAAA,WACGpB,EAAA,aACHjC,IACA+1C,MAAAj0C,EAAA6D,UAEG7D,EAAAsB,GAAAtB,EAAAgC,GAAAhC,EAAAqD,kBAAArD,EAAAsB,GAAA,KAAAnB,EAAA,aACHK,OACA5G,KAAA,WAEAsE,IACA+1C,MAAAj0C,EAAA2D,WAEG3D,EAAAsB,GAAAtB,EAAAgC,GAAAhC,EAAAoD,oBAAA,MAEHf,KACAC,GAAiBvC,SAAAsC,kBACjBvC,GAAA,KhB+9RMo0C,KACA,SAAU58C,EAAQC,EAASC,GiB5/RjC,GAAAmW,GAAAnW,EAAA,OACA,iBAAAmW,SAAArW,EAAAY,EAAAyV,EAAA,MACAA,EAAAwmC,SAAA78C,EAAAC,QAAAoW,EAAAwmC,OAEA38C,GAAA,mBAAAmW,GAAA,IjBqgSMymC,KACA,SAAU98C,EAAQC,EAASC,IkB1gSjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,UAKC,SAAAE,GACD,YA2BA,SAAA28C,GAAAl3C,GACAC,KAAAD,UACAC,KAAAQ,KAAAR,KAAAlB,GAAA,EAGA,QAAAo4C,GAAAhC,GAKA,OAJA,IAAAA,UACA,MAAAA,EAAAiC,SAAAjC,EAAAiC,OAAA,yBACA,MAAAjC,EAAAkC,gBAAAlC,EAAAkC,cAAA,8BACA,MAAAlC,EAAAmC,kBAAAnC,EAAAmC,gBAAA,gCACAnC,EAGA,QAAAoC,GAAA98C,EAAA0C,GAEA,OADAqQ,GAAA/S,EAAAqT,UAAA5Q,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MACApC,EAAA,EAAmBA,EAAAyS,EAAAxS,SAAkBD,EACrC,GAAAyS,EAAAzS,GAAAy8C,UAAAhqC,EAAAzS,GAAA4S,OAAAlN,KAAAtD,QAAA,MAAAqQ,GAAAzS,GAGA,QAAA08C,GAAAC,GACA,mBAAAA,GAAA,CACA,GAAAv5C,GAAAgX,SAAAwiC,cAAA,MAEA,OADAx5C,GAAAkC,UAAAq3C,EAAA,kCACAv5C,EAEA,MAAAu5C,GAAAE,WAAA,GAIA,QAAAC,GAAAp9C,EAAAgG,EAAA1B,GACA,GAAAo2C,GAAA16C,EAAAgB,MAAA4f,WAAArb,QAAA+K,EAAAtK,EACAq3C,EAAAr9C,EAAAs9C,WAAA5C,EAAA,eACAzN,EAAAjtC,EAAAs9C,WAAA5C,EAAA,cACA16C,GAAAu9C,SAAAv3C,EAAA1B,EAAA,SAAA5B,GACA,GAAAid,GAAA,IACA,IAAAm9B,EAAA98C,EAAAsQ,GACAqP,EAAAq9B,EAAAtC,EAAAmC,qBACO,CACP,GAAAp8C,GAAAgC,EAAA6N,EAAA,GACA9C,EAAAy/B,KAAAjtC,EAAAS,EACA+M,MAAAlJ,GAAA5B,KAAA8K,EAAAxH,KAAAtD,MAAA26C,IACA19B,EAAAq9B,EAAAtC,EAAAkC,gBAEA58C,EAAAw9C,gBAAA96C,EAAAg4C,EAAAiC,OAAAh9B,KACArP,IAIA,QAAAmtC,GAAAz9C,GACA,GAAA09C,GAAA19C,EAAA29C,cAAA38C,EAAAhB,EAAAgB,MAAA4f,UACA5f,KACAhB,EAAA+N,UAAA,WACAqvC,EAAAp9C,EAAA09C,EAAA13C,KAAA03C,EAAAp5C,MAEAtD,EAAAgF,KAAA03C,EAAA13C,KAAyBhF,EAAAsD,GAAAo5C,EAAAp5C,IAGzB,QAAAs5C,GAAA59C,EAAA0C,EAAAi6C,GACA,GAAA37C,GAAAhB,EAAAgB,MAAA4f,UACA,IAAA5f,EAAA,CACA,GAAA05C,GAAA15C,EAAAuE,OACA,IAAAo3C,GAAAjC,EAAAiC,OAAA,CACA,GAAAkB,GAAAf,EAAA98C,EAAA0C,EACAm7C,KAAA91C,QACA/H,EAAA89C,SAAAr7C,EAAAC,EAAA,GAAAg4C,EAAAqD,eAGA,QAAAr3C,GAAA1G,GACA,GAAAgB,GAAAhB,EAAAgB,MAAA4f,UACA,IAAA5f,EAAA,CACA,GAAA05C,GAAA15C,EAAAuE,OACAvE,GAAAgF,KAAAhF,EAAAsD,GAAA,EACAsD,aAAA5G,EAAAg9C,cACAh9C,EAAAg9C,aAAAn2C,WAAA,WAAgD41C,EAAAz9C,IAAwB06C,EAAAuD,sBAAA,MAGxE,QAAAC,GAAAl+C,GACA,GAAAgB,GAAAhB,EAAAgB,MAAA4f,UACA,IAAA5f,EAAA,CACA,GAAA05C,GAAA15C,EAAAuE,OACAqC,cAAA5G,EAAAg9C,cACAh9C,EAAAg9C,aAAAn2C,WAAA,WACA,GAAA61C,GAAA19C,EAAA29C,aACA38C,GAAAgF,MAAAhF,EAAAsD,IAAAo5C,EAAA13C,KAAAhF,EAAAsD,GAAA,IAAAtD,EAAAgF,KAAA03C,EAAAp5C,GAAA,GACAm5C,EAAAz9C,GAEAA,EAAA+N,UAAA,WACA2vC,EAAA13C,KAAAhF,EAAAgF,OACAo3C,EAAAp9C,EAAA09C,EAAA13C,KAAAhF,EAAAgF,MACAhF,EAAAgF,KAAA03C,EAAA13C,MAEA03C,EAAAp5C,GAAAtD,EAAAsD,KACA84C,EAAAp9C,EAAAgB,EAAAsD,GAAAo5C,EAAAp5C,IACAtD,EAAAsD,GAAAo5C,EAAAp5C,OAIKo2C,EAAAyD,wBAAA,MAGL,QAAAC,GAAAp+C,EAAAgG,GACA,GAAAhF,GAAAhB,EAAAgB,MAAA4f,UACA,IAAA5f,EAAA,CACA,GAAA0B,GAAAsD,EAAAtD,IACAA,IAAA1B,EAAAgF,MAAAtD,EAAA1B,EAAAsD,IACA84C,EAAAp9C,EAAA0C,IAAA,IAlIA5C,EAAA0E,aAAA,yBAAAxE,EAAAyE,EAAAC,GACAA,MAAA5E,EAAA6E,OACA3E,EAAAq+C,YAAAr+C,EAAAgB,MAAA4f,WAAArb,QAAAo3C,QACA38C,EAAAgB,MAAA4f,WAAA,KACA5gB,EAAAgI,IAAA,cAAA41C,GACA59C,EAAAgI,IAAA,SAAAtB,GACA1G,EAAAgI,IAAA,iBAAAk2C,GACAl+C,EAAAgI,IAAA,OAAAo2C,GACAp+C,EAAAgI,IAAA,SAAAo2C,GACAp+C,EAAAgI,IAAA,UAAAtB,IAEAjC,IACAzE,EAAAgB,MAAA4f,WAAA,GAAA67B,GAAAC,EAAAj4C,IACAg5C,EAAAz9C,GACAA,EAAAsG,GAAA,cAAAs3C,GACA59C,EAAAsG,GAAA,SAAAI,GACA1G,EAAAsG,GAAA,iBAAA43C,GACAl+C,EAAAsG,GAAA,OAAA83C,GACAp+C,EAAAsG,GAAA,SAAA83C,GACAp+C,EAAAsG,GAAA,UAAAI,KAIA,IAAAjE,GAAA3C,EAAA2C,OlBioSM67C,KACA,SAAU5+C,EAAQC,EAASC,GmBnqSjC,GAAAmW,GAAAnW,EAAA,OACA,iBAAAmW,SAAArW,EAAAY,EAAAyV,EAAA,MACAA,EAAAwmC,SAAA78C,EAAAC,QAAAoW,EAAAwmC,OAEA38C,GAAA,mBAAAmW,GAAA,InB4qSMwoC,KACA,SAAU7+C,EAAQC,EAASC,IoBjrSjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GAGD,QAAA0+C,GAAAliC,EAAAxD,GACA,OAAAxY,GAAA,EAAAqD,EAAA2Y,EAAA/b,OAAmCD,EAAAqD,IAAOrD,EAAAwY,EAAAwD,EAAAhc,IAG1C,QAAAm+C,GAAAniC,EAAAvS,GACA,IAAAwT,MAAAvW,UAAA5E,QAAA,CAEA,IADA,GAAA9B,GAAAgc,EAAA/b,OACAD,KACA,GAAAgc,EAAAhc,KAAAyJ,EACA,QAGA,UAEA,UAAAuS,EAAAla,QAAA2H,GAGA,QAAA20C,GAAAC,EAAAC,EAAAC,EAAAt5C,GAEA,GAAA+K,GAAAquC,EAAAzuC,YAAAoH,EAAAunC,EAAAF,EAAAruC,EACA,8BAAArO,KAAAqV,EAAAtV,MAAA,CACAsV,EAAAtW,MAAAlB,EAAAgB,UAAA69C,EAAA59C,UAAAuW,EAAAtW,aAGA,YAAAiB,KAAAqV,EAAApV,QAGKoV,EAAA3V,IAAA2O,EAAA1O,KACL0V,EAAA3V,IAAA2O,EAAA1O,GACA0V,EAAApV,OAAAoV,EAAApV,OAAAL,MAAA,EAAAyO,EAAA1O,GAAA0V,EAAAnU,QAJAmU,GAAenU,MAAAmN,EAAA1O,GAAAD,IAAA2O,EAAA1O,GAAAM,OAAA,GAAAlB,MAAAsW,EAAAtW,MACfgB,KAAA,KAAAsV,EAAApV,OAAA,gBAQA,KAFA,GAAA48C,GAAAxnC,EAEA,YAAAwnC,EAAA98C,MAAA,CAEA,GADA88C,EAAAD,EAAAF,EAAAl8C,EAAA6N,EAAA5N,KAAAo8C,EAAA37C,QACA,KAAA27C,EAAA58C,OAAA,MAEA,IADA48C,EAAAD,EAAAF,EAAAl8C,EAAA6N,EAAA5N,KAAAo8C,EAAA37C,SACAE,EAAA,GAAAA,KACAA,GAAAuH,KAAAk0C,GAEA,OAAYjyB,KAAAkyB,EAAAznC,EAAAjU,EAAAu7C,EAAAr5C,GACZS,KAAAvD,EAAA6N,EAAA5N,KAAA4U,EAAAnU,OACAmB,GAAA7B,EAAA6N,EAAA5N,KAAA4U,EAAA3V,OAGA,QAAAq9C,GAAAL,EAAAp5C,GACA,MAAAm5C,GAAAC,EAAAM,EACA,SAAAt7C,EAAA2M,GAAyC,MAAA3M,GAAA/C,WAAA0P,IACzC/K,GAIA,QAAA25C,GAAAP,EAAAruC,GAIA,GAAAgH,GAAAqnC,EAAA/9C,WAAA0P,EAWA,OAVAA,GAAA1O,IAAA0V,EAAAnU,MAAA,QAAAmU,EAAApV,OAAAC,OAAA,IACAmV,EAAA3V,IAAA2V,EAAAnU,MACAmU,EAAApV,OAAA,IACAoV,EAAAtV,KAAA,YAEA,cAAAC,KAAAqV,EAAApV,UACAoV,EAAAtV,KAAA,WACAsV,EAAAnU,QACAmU,EAAApV,OAAAoV,EAAApV,OAAAgV,QAAA,UAEAI,EAGA,QAAA6nC,GAAAR,EAAAp5C,GACA,MAAAm5C,GAAAC,EAAAS,EAAAF,EAAA35C,GAcA,QAAA85C,GAAA1sC,EAAAtJ,GACA,GAAAmN,OAAA8oC,qBAAA9oC,OAAA+oC,eAGA,OAAAC,GAAA7sC,EAAuB6sC,EAAGA,EAAAhpC,OAAA+oC,eAAAC,GAC1BhpC,OAAA8oC,oBAAAE,GAAAhB,QAAAn1C,OAHA,QAAAnI,KAAAyR,GAAAtJ,EAAAnI,GAOA,QAAA69C,GAAAznC,EAAAjU,EAAAu7C,EAAAr5C,GAEA,QAAAk6C,GAAAprC,GACA,GAAAA,EAAA4T,YAAA9kB,EAAA,IAAAs7C,EAAAxsC,EAAAoC,IAAApC,EAAArH,KAAAyJ,GAEA,QAAAqrC,GAAA/sC,GACA,gBAAAA,GAAA6rC,EAAAmB,EAAAF,GACA9sC,YAAA4K,OAAAihC,EAAAoB,EAAAH,GACA9sC,YAAAktC,WAAArB,EAAAsB,EAAAL,GACAJ,EAAA1sC,EAAA8sC,GARA,GAAAxtC,MAAA9O,EAAAmU,EAAApV,OAAAiV,EAAA5R,KAAAw6C,aAAArS,MAWA,IAAArqC,KAAA9C,OAAA,CAGA,GAAAw8B,GAAApqB,EAAAtP,EAAA+P,KAiBA,KAhBAT,EAAA3Q,MAAA,IAAA2Q,EAAA3Q,KAAAI,QAAA,aACAmD,KAAAy6C,oBACAjjB,EAAAx3B,EAAAy6C,kBAAArtC,EAAAzQ,SACAqD,IAAA,IAAAA,EAAA06C,iBACAljB,KAAA5lB,EAAAxE,EAAAzQ,UACO,UAAAyQ,EAAA3Q,KACP+6B,EAAA,GACO,QAAApqB,EAAA3Q,KACP+6B,EAAA,EACO,YAAApqB,EAAA3Q,OACP,MAAAmV,EAAA+oC,QAAA,KAAAvtC,EAAAzQ,QAAA,UAAAyQ,EAAAzQ,QACA,kBAAAiV,GAAA+oC,OAEA,MAAA/oC,EAAAiC,GAAA,KAAAzG,EAAAzQ,QAAA,kBAAAiV,GAAAiC,IACA2jB,EAAA5lB,EAAAiC,KAFA2jB,EAAA5lB,EAAA+oC,UAIA,MAAAnjB,GAAA15B,EAAA9C,QACAw8B,IAAA15B,EAAA+P,MAAAlR,OACA,OAAA66B,GAAA2iB,EAAA3iB,OACK,CAGL,OAAAojB,GAAA7oC,EAAAtW,MAAAo/C,UAAyCD,EAAGA,IAAA57C,KAAAk7C,EAAAU,EAAAj/C,KAC5C,QAAAi/C,GAAA7oC,EAAAtW,MAAAq/C,WAA0CF,EAAGA,IAAA57C,KAAAk7C,EAAAU,EAAAj/C,KAC7CqE,KAAA,IAAAA,EAAA06C,gBACAP,EAAAvoC,GACAqnC,EAAAI,EAAAa,GAEA,MAAAxtC,GA7IA,GAAAxP,GAAA3C,EAAA2C,GAqDA3C,GAAAwgD,eAAA,oBAAAtB,GAuBAl/C,EAAAwgD,eAAA,sBAAAnB,EAEA,IAAAQ,GAAA,iJACAnrB,MAAA,KACAorB,EAAA,4IACAprB,MAAA,KACAsrB,EAAA,4BAAAtrB,MAAA,KACAyqB,EAAA,yKACAzqB,MAAA,KACA4qB,EAAA,gMACA5qB,MAAA,QpBovSM+rB,KACA,SAAU7gD,EAAQC,EAASC,IqBj0SjC,SAAAC,GAEAA,EAAAD,EAAA,QAAAA,EAAA,UAKC,SAAAE,GACD,YAYA,SAAA28C,GAAAl3C,GACAC,KAAAD,UACA,QAAArE,KAAAs/C,GACAh7C,KAAAD,QAAArE,IAAAqE,KAAAg1B,eAAAr5B,GAAAqE,EAAAi7C,GAAAt/C,EACAsE,MAAAsS,QAAAtS,KAAAi7C,QAAA,KACAj7C,KAAAk7C,gBAAA,KACAl7C,KAAAm7C,QAAA,EAuBA,QAAAC,GAAA5gD,GACA,GAAAgB,GAAAhB,EAAAgB,MAAA6/C,kBACA7/C,EAAA2/C,QAAA3gD,EAAA8gD,aAAAC,EAAA/gD,EAAAgB,GAGA,QAAAggD,GAAAhhD,GACA,GAAAgB,GAAAhB,EAAAgB,MAAA6/C,gBACA7/C,GAAA2/C,SACA3/C,EAAA2/C,QAAA,EACAI,EAAA/gD,EAAAgB,IAIA,QAAA+/C,GAAA/gD,EAAAgB,GACA4G,aAAA5G,EAAAy/C,SACAz/C,EAAAy/C,QAAA54C,WAAA,WAA2Co5C,EAAAjhD,IAAsBgB,EAAAuE,QAAA27C,OAGjE,QAAAxnC,GAAA1Z,EAAAqF,EAAA87C,EAAA5mC,GACA,GAAAvZ,GAAAhB,EAAAgB,MAAA6/C,gBAEA,IADA7gD,EAAA0Z,WAAA1Y,EAAA8W,QAAAspC,EAAA/7C,EAAA87C,EAAA5mC,IACAvZ,EAAAuE,QAAAO,mBAAA9F,EAAA2Z,uBAAA,CACA,GAAA0nC,GAAAF,EAAA,GAAAnvC,QAAA,MAAA3M,EAAA,OAAAA,CACArE,GAAA0/C,gBAAA1gD,EAAA2Z,uBAAA0nC,GAAA,GACSz7C,UAAA,8CAIT,QAAA6T,GAAAzZ,GACA,GAAAgB,GAAAhB,EAAAgB,MAAA6/C,gBACA7/C,GAAA8W,UACA9X,EAAAyZ,cAAAzY,EAAA8W,SACA9W,EAAA8W,QAAA,KACA9W,EAAA0/C,kBACA1/C,EAAA0/C,gBAAA34C,QACA/G,EAAA0/C,gBAAA,OAKA,QAAAO,GAAAjhD,GACAA,EAAA+N,UAAA,WACA,GAAA/M,GAAAhB,EAAAgB,MAAA6/C,gBAEA,IADApnC,EAAAzZ,IACAA,EAAAmR,qBAAAnQ,EAAAuE,QAAAyb,UAAA,CAGA,IAFA,GAAAw1B,IAAA,IAAAx1C,EAAAuE,QAAAyb,UAAA,QAAAhgB,EAAAuE,QAAAyb,UACA1Q,EAAAtQ,EAAAkQ,YAAAxN,EAAA1C,EAAAsD,QAAAgN,EAAA5N,MAAAS,EAAAmN,EAAA1O,GAAAD,EAAAwB,EACAA,GAAAqzC,EAAAv0C,KAAAS,EAAAP,OAAAgB,EAAA,OAAAA,CACA,MAAAxB,EAAAe,EAAAnC,QAAAi2C,EAAAv0C,KAAAS,EAAAP,OAAAR,QAGA,aAFAwB,EAAAxB,GACA+X,EAAA1Z,EAAA0C,EAAAb,MAAAsB,EAAAxB,GAAA60C,EAAAx1C,EAAAuE,QAAAgV,QAGA,GAAAvU,GAAAhG,EAAAkQ,UAAA,QAAA5L,EAAAtE,EAAAkQ,UAAA,KACA,IAAAlK,EAAAtD,MAAA4B,EAAA5B,QACA1B,EAAAuE,QAAA+7C,WAAAC,EAAAvhD,EAAAgG,EAAA1B,IAAA,CACA,GAAA06B,GAAAh/B,EAAAwP,SAAAxJ,EAAA1B,EACAtD,GAAAuE,QAAAiE,OAAAw1B,IAAA9nB,QAAA,kBACA8nB,EAAAz+B,QAAAS,EAAAuE,QAAAi8C,UACA9nC,EAAA1Z,EAAAg/B,GAAA,EAAAh+B,EAAAuE,QAAAgV,UAIA,QAAAgnC,GAAAvhD,EAAAgG,EAAA1B,GAEA,UADAtE,EAAAwP,SAAAxJ,EAAA1B,GACA2C,MAAA,UACA,GAAAjB,EAAApE,GAAA,GACA,GAAAnB,IAAuBiC,KAAAsD,EAAAtD,KAAAd,GAAAoE,EAAApE,GAAA,GACvB6/C,EAAAzhD,EAAAwP,SAAA/O,EAAAuF,EACA,WAAAy7C,EAAAx6C,MAAA,eAEA,GAAA3C,EAAA1C,GAAA5B,EAAAsD,QAAA0C,EAAAtD,MAAAnC,OAAA,CACA,GAAAE,IAAuBiC,KAAA4B,EAAA5B,KAAAd,GAAA0C,EAAA1C,GAAA,GACvB6/C,EAAAzhD,EAAAwP,SAAAlL,EAAA7D,EACA,WAAAghD,EAAAx6C,MAAA,eAEA,SACK,SAGL,QAAAy6C,GAAAnqC,EAAAi/B,GACA,QAAAj/B,EAAApU,OAAAqzC,EAAAv0C,KAAAsV,EAAArV,OAAAC,OAAAoV,EAAApU,MAAA,KACAoU,EAAA9W,KAAA8W,EAAArV,OAAA3B,QAAAi2C,EAAAv0C,KAAAsV,EAAArV,OAAAC,OAAAoV,EAAA9W,OAGA,QAAA2gD,GAAA/7C,EAAA87C,EAAA5mC,GACA,OAAYjD,MAAA,SAAAC,GACZ,GAAAA,EAAAtQ,MAAA5B,MACA87C,GAAAO,EAAAnqC,EAAA4pC,IACA,MAAA5mC,EACAhD,GAAAhT,OACAgT,EAAAoqC,OAAAt8C,EAAAlD,OAAA,KAAAoV,EAAAE,cAlIA,GAAA+oC,IACAjmC,MAAA,iBACAinC,SAAA,EACAN,MAAA,IACAI,WAAA,EACAx7C,mBAAA,EACAkb,WAAA,EACAxX,MAAA,EAYA1J,GAAA0E,aAAA,wCAAAxE,EAAAyE,EAAAC,GAQA,GAPAA,MAAA5E,EAAA6E,OACA8U,EAAAzZ,GACA4H,aAAA5H,EAAAgB,MAAA6/C,iBAAAJ,SACAzgD,EAAAgB,MAAA6/C,iBAAA,KACA7gD,EAAAgI,IAAA,iBAAA44C,GACA5gD,EAAAgI,IAAA,QAAAg5C,IAEAv8C,EAAA,CACA,GAAAzD,GAAAhB,EAAAgB,MAAA6/C,iBAAA,GAAApE,GAAAh4C,EACAzE,GAAA8gD,YACA9/C,EAAA2/C,QAAA,EACAM,EAAAjhD,IAEAA,EAAAsG,GAAA,QAAA06C,GAEAhhD,EAAAsG,GAAA,iBAAAs6C,SrB+7SMgB,KACA,SAAUliD,EAAQC,EAASC,IsB//SjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YASA,SAAA+hD,GAAA7hD,EAAAuF,GAUA,QAAAu8C,GAAAZ,GACAt5C,aAAAvB,EAAA07C,UACA17C,EAAA07C,SAAAl6C,WAAA,WAA6CxB,EAAA27C,UAAiBd,GAX9D17C,KAAAxF,KACAwF,KAAAD,UACAC,KAAAy8C,aAAA18C,EAAA28C,oBAAAliD,EAAAC,UAAA,sBACAuF,KAAA28C,eACA38C,KAAAu8C,SAAAv8C,KAAA48C,SAAA,KACA58C,KAAA68C,IAAAriD,EAAA+zB,oBAAAuuB,YAAA5nC,SAAAwiC,cAAA,QACA13C,KAAA68C,IAAA9nC,MAAAgoC,QAAA,yEACA/8C,KAAAg9C,cAOA,IAAAn8C,GAAAb,IACAxF,GAAAsG,GAAA,UAAAd,KAAAi9C,cAAA,WACA76C,aAAAvB,EAAA+7C,UACA/7C,EAAA+7C,SAAAv6C,WAAA,WACAxB,EAAAm8C,gBAAAV,EAAA,KACO,OAEP9hD,EAAAsG,GAAA,cAAAd,KAAAi9C,eACAziD,EAAAsG,GAAA,gBAAAd,KAAAi9C,gBACA,IAAAl9C,EAAAG,kBACA1F,EAAAsG,GAAA,SAAAd,KAAAe,cAAA,WACAu7C,EAAA,OAjCAhiD,EAAAiH,gBAAA,6BAAAxB,GAEA,MADA,gBAAAA,QAA+CK,UAAAL,IAC/C,GAAAs8C,GAAAr8C,KAAAD,KAGAzF,EAAA0E,aAAA,wBAgCAq9C,EAAA76C,UAAAw7C,aAAA,WACA,GAAAxiD,GAAAwF,KAAAxF,GACA0iD,GAAA1iD,EAAA+zB,oBAAAxiB,aAAAvR,EAAAyN,QAAAk1C,UAAA,EAAAn9C,KAAAy8C,cACAjiD,EAAA4iD,qBAAAC,YACA,IAAAH,GAAAl9C,KAAAk9C,OAEA,MADAl9C,MAAAk9C,UACA,GAIAb,EAAA76C,UAAAb,OAAA,SAAAg8C,GACA38C,KAAA28C,cACA38C,KAAAw8C,UAGAH,EAAA76C,UAAAg7C,OAAA,SAAAc,GASA,QAAAC,GAAAtiD,EAAA6Q,GAKA,MAJA0xC,IAAAviD,EAAAiC,OACAsgD,EAAAviD,EAAAiC,KACAugD,EAAAjjD,EAAAkjD,cAAAF,IAEAC,EAAAE,SAAAF,EAAAE,QAAA5iD,QACA6iD,GAAAH,EAAA14C,OAAA84C,EACArjD,EAAAyxC,WAAAhxC,EAAA,SAAA6Q,EAAA,gBACAtR,EAAAsjD,aAAAL,EAAA,UACA3xC,EAAA,EAAA2xC,EAAA14C,SAjBA,IAAAu4C,GAAAt9C,KAAAg9C,cACA,IAAAxiD,GAAAwF,KAAAxF,GAAA0iD,EAAAl9C,KAAAk9C,OAEAa,EAAA7oC,SAAA8oC,yBAAAC,EAAAj+C,KAAA28C,YAEAiB,EAAApjD,EAAAC,UAAA,gBACAojD,EAAAD,GAAA,IAAApjD,EAAAyR,oBACAuxC,EAAA,KAAAC,EAAA,KAaAj/C,EAAAhE,EAAAgE,UACA,IAAAhE,EAAAyN,QAAAi2C,SAAA,OAAAC,GAAArjD,EAAA,EAAqDA,EAAAmjD,EAAAljD,OAAiBD,IAAA,CACtE,GAAAsjD,GAAAH,EAAAnjD,EACA,MAAAsjD,EAAAt/C,GAAA5B,KAAAsB,GAAA,CAGA,IAFA,GAAAsN,GAAAqyC,GAAAZ,EAAAa,EAAA59C,MAAA,GAAA08C,EACA7tC,EAAAkuC,EAAAa,EAAAt/C,IAAA,GAAAo+C,EACApiD,EAAAmjD,EAAAljD,OAAA,KACAkjD,EAAAnjD,EAAA,GAAAgE,GAAA5B,KAAAsB,OACA2/C,EAAAZ,EAAAU,EAAAnjD,EAAA,GAAA0F,MAAA,GAAA08C,GACA7tC,EAAA,KACA+uC,EAAAH,IAAAnjD,GACAuU,EAAAkuC,EAAAa,EAAAt/C,IAAA,GAAAo+C,CAEA,IAAA7tC,GAAAvD,EAAA,CACA,GAAA/G,GAAAzG,KAAAgD,IAAA+N,EAAAvD,EAAA,GAEA5N,EAAA6/C,EAAAjB,YAAA5nC,SAAAwiC,cAAA,OACAx5C,GAAA6W,MAAAgoC,QAAA,0CAA0Dz+C,KAAAgD,IAAA9G,EAAAyN,QAAAi2C,SAAA,kBAC1DpyC,EAAA9L,KAAAy8C,cAAA,eAA0C13C,EAAA,KAC1C7G,EAAAkC,UAAAJ,KAAAD,QAAAK,UACAg+C,EAAAz5C,IACAzG,EAAAmgD,aAAA,gBAAAD,EAAAz5C,MAGA3E,KAAA68C,IAAAyB,YAAA,GACAt+C,KAAA68C,IAAAC,YAAAiB,IAGA1B,EAAA76C,UAAAe,MAAA,WACAvC,KAAAxF,GAAAgI,IAAA,UAAAxC,KAAAi9C,eACAj9C,KAAAxF,GAAAgI,IAAA,cAAAxC,KAAAi9C,eACAj9C,KAAAxF,GAAAgI,IAAA,gBAAAxC,KAAAi9C,eACAj9C,KAAAe,eAAAf,KAAAxF,GAAAgI,IAAA,SAAAxC,KAAAe,eACAf,KAAA68C,IAAA0B,WAAAC,YAAAx+C,KAAA68C,StB2gTM4B,KACA,SAAUvkD,EAAQC,EAASC,GuBnoTjCD,EAAAD,EAAAC,QAAAC,EAAA,YAKAD,EAAAiL,MAAAlL,EAAAY,EAAA,4ZAAmb,IAAQuK,QAAA,EAAAC,SAAA,iFAAAC,SAAAC,SAAA,kRAAAC,KAAA,aAAAC,gBAAA,+hBAAg9BC,WAAA,OvB4oTr4C+4C,KACA,SAAUxkD,EAAQC,EAASC,IwB7oTjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,QAAAqkD,GAAAnkD,EAAAsjC,EAAAzuB,GACA,GACA+D,GADAwrC,EAAApkD,EAAA+zB,mBAaA,OAXAnb,GAAAwrC,EAAA9B,YAAA5nC,SAAAwiC,cAAA,QAEAtkC,EAAAhT,UADAiP,EACA,6CAEA,0CAEA,gBAAAyuB,GACA1qB,EAAAyrC,UAAA/gB,EAEA1qB,EAAA0pC,YAAAhf,GAEA1qB,EAGA,QAAA0rC,GAAAtkD,EAAAukD,GACAvkD,EAAAgB,MAAAwjD,0BACAxkD,EAAAgB,MAAAwjD,2BACAxkD,EAAAgB,MAAAwjD,yBAAAD,EAGAzkD,EAAAiH,gBAAA,sBAAAu8B,EAAAj6B,EAAA9D,GAOA,QAAAkiC,GAAA8c,GACA,mBAAAA,GACAE,EAAAr7C,MAAAm7C,MACO,CACP,GAAAG,EAAA,MACAA,IAAA,EACA9rC,EAAAmrC,WAAAC,YAAAprC,GACA+rC,EAAAz7C,QAEA3D,EAAAmT,SAAAnT,EAAAmT,QAAAE,IAfArT,UAEA++C,EAAA9+C,KAAA,KAEA,IAeAo/C,GAfAhsC,EAAAurC,EAAA3+C,KAAA89B,EAAA/9B,EAAAsP,QACA6vC,GAAA,EAAAC,EAAAn/C,KAcAi/C,EAAA7rC,EAAAisC,qBAAA,WAqCA,OApCAJ,IACAA,EAAAv7C,QAEA3D,EAAA6D,QACAq7C,EAAAr7C,MAAA7D,EAAA6D,OACA,IAAA7D,EAAAiT,mBACAisC,EAAAK,UAIAv/C,EAAAw/C,SACAjlD,EAAAwG,GAAAm+C,EAAA,iBAAA9gD,GAAiD4B,EAAAw/C,QAAAphD,EAAA8gD,EAAAr7C,MAAAq+B,KACjDliC,EAAAg+B,SACAzjC,EAAAwG,GAAAm+C,EAAA,iBAAA9gD,GAAiD4B,EAAAg+B,QAAA5/B,EAAA8gD,EAAAr7C,MAAAq+B,KAEjD3nC,EAAAwG,GAAAm+C,EAAA,mBAAA9gD,GACA4B,KAAA+S,WAAA/S,EAAA+S,UAAA3U,EAAA8gD,EAAAr7C,MAAAq+B,MACA,IAAA9jC,EAAAqhD,UAAA,IAAAz/C,EAAAkT,cAAA,IAAA9U,EAAAqhD,WACAP,EAAAQ,OACAnlD,EAAAwa,OAAA3W,GACA8jC,KAEA,IAAA9jC,EAAAqhD,SAAA37C,EAAAo7C,EAAAr7C,MAAAzF,OAGA,IAAA4B,EAAA2/C,aAAAplD,EAAAwG,GAAAm+C,EAAA,OAAAhd,KACKmd,EAAAhsC,EAAAisC,qBAAA,gBACL/kD,EAAAwG,GAAAs+C,EAAA,mBACAnd,IACAkd,EAAAz7C,WAGA,IAAA3D,EAAA2/C,aAAAplD,EAAAwG,GAAAs+C,EAAA,OAAAnd,GAEAmd,EAAA17C,SAEAu+B,IAGA3nC,EAAAiH,gBAAA,uBAAAu8B,EAAA6hB,EAAA5/C,GAKA,QAAAkiC,KACAid,IACAA,GAAA,EACA9rC,EAAAmrC,WAAAC,YAAAprC,GACA+rC,EAAAz7C,SARAo7C,EAAA9+C,KAAA,KACA,IAAAoT,GAAAurC,EAAA3+C,KAAA89B,EAAA/9B,KAAAsP,QACAuwC,EAAAxsC,EAAAisC,qBAAA,UACAH,GAAA,EAAAC,EAAAn/C,KAAA6/C,EAAA,CAOAD,GAAA,GAAAl8C,OACA,QAAA5I,GAAA,EAAmBA,EAAA8kD,EAAA7kD,SAAoBD,EAAA,CACvC,GAAAqP,GAAAy1C,EAAA9kD,IACA,SAAA+I,GACAvJ,EAAAwG,GAAAqJ,EAAA,iBAAAhM,GACA7D,EAAAwlD,iBAAA3hD,GACA8jC,IACAp+B,KAAAs7C,MAEOQ,EAAA7kD,IACPR,EAAAwG,GAAAqJ,EAAA,oBACA01C,EACAx9C,WAAA,WAA+Bw9C,GAAA,GAAA5d,KAA8B,OAE7D3nC,EAAAwG,GAAAqJ,EAAA,qBAA4C01C,OAY5CvlD,EAAAiH,gBAAA,4BAAAu8B,EAAA/9B,GAMA,QAAAkiC,KACAid,IACAA,GAAA,EACA98C,aAAA29C,GACA3sC,EAAAmrC,WAAAC,YAAAprC,IATA0rC,EAAA9+C,KAAAiiC,EACA,IACA8d,GADA3sC,EAAAurC,EAAA3+C,KAAA89B,EAAA/9B,KAAAsP,QACA6vC,GAAA,EACAvf,EAAA5/B,OAAA,KAAAA,EAAA4/B,SAAA5/B,EAAA4/B,SAAA,GAiBA,OARArlC,GAAAwG,GAAAsS,EAAA,iBAAAjV,GACA7D,EAAAwlD,iBAAA3hD,GACA8jC,MAGAtC,IACAogB,EAAA19C,WAAA4/B,EAAAtC,IAEAsC,OxB2pTM+d,KACA,SAAU9lD,EAAQC,EAASC,GyBtzTjCD,EAAAD,EAAAC,QAAAC,EAAA,YAKAD,EAAAiL,MAAAlL,EAAAY,EAAA,mUAA0V,IAAQuK,QAAA,EAAAC,SAAA,kEAAAC,SAAAC,SAAA,0HAAAC,KAAA,aAAAC,gBAAA,gYAA4oBC,WAAA,OzB+zTx+Bs6C,KACA,SAAU/lD,EAAQC,EAASC,G0Bl0TjC,GAAAmW,GAAAnW,EAAA,OACA,iBAAAmW,SAAArW,EAAAY,EAAAyV,EAAA,MACAA,EAAAwmC,SAAA78C,EAAAC,QAAAoW,EAAAwmC,OAEA38C,GAAA,mBAAAmW,GAAA,I1B20TM2vC,KACA,SAAUhmD,EAAQC,EAASC,I2Bh1TjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAEA,SAAA6lD,GAAA3lD,EAAAS,EAAA8E,EAAAqgD,GAUA,QAAAp2C,GAAAq2C,GACA,GAAAr4C,GAAAs4C,EAAA9lD,EAAAS,EACA,KAAA+M,KAAAlJ,GAAA5B,KAAA8K,EAAAxH,KAAAtD,KAAA26C,EAAA,WAEA,QADAtqC,GAAA/S,EAAA+lD,YAAAv4C,EAAAxH,MACA1F,EAAA,EAAqBA,EAAAyS,EAAAxS,SAAkBD,EACvC,GAAAyS,EAAAzS,GAAAy8C,UAAA,SAAA6I,EAAA,CACA,IAAAC,EAAA,WACAr4C,GAAAw4C,SAAA,EACAjzC,EAAAzS,GAAAyH,QAGA,MAAAyF,GApBA,GAAAjI,KAAAyiB,KAAA,CACA,GAAA89B,GAAAvgD,CACAA,GAAA,SAEA,IAAAugD,GAAA7lD,EAAAD,EAAAuF,EAAA,cAEA,iBAAA9E,OAAAX,EAAA2C,IAAAhC,EAAA,GACA,IAAA48C,GAAAp9C,EAAAD,EAAAuF,EAAA,eAgBAiI,EAAAgC,GAAA,EACA,IAAAvP,EAAAD,EAAAuF,EAAA,gBAAAiI,GAAA/M,EAAAiC,KAAA1C,EAAAiG,aACAxF,EAAAX,EAAA2C,IAAAhC,EAAAiC,KAAA,KACA8K,EAAAgC,GAAA,EAEA,IAAAhC,MAAAw4C,SAAA,WAAAJ,EAAA,CAEA,GAAAK,GAAAC,EAAAlmD,EAAAuF,EACAzF,GAAAwG,GAAA2/C,EAAA,qBAAAtiD,GACAwiD,EAAAp+C,QACAjI,EAAAwlD,iBAAA3hD,IAEA,IAAAwiD,GAAAnmD,EAAAyT,SAAAjG,EAAAxH,KAAAwH,EAAAlJ,IACA8hD,aAAAH,EACAI,aAAApmD,EAAAD,EAAAuF,EAAA,gBACAw3C,UAAA,GAEAoJ,GAAA7/C,GAAA,iBAAAN,EAAA1B,GACAxE,EAAAwzB,OAAAtzB,EAAA,SAAAA,EAAAgG,EAAA1B,KAEAxE,EAAAwzB,OAAAtzB,EAAA,OAAAA,EAAAwN,EAAAxH,KAAAwH,EAAAlJ,KAGA,QAAA4hD,GAAAlmD,EAAAuF,GACA,GAAA+gD,GAAArmD,EAAAD,EAAAuF,EAAA,SACA,oBAAA+gD,GAAA,CACA,GAAA/jD,GAAAmY,SAAA6rC,eAAAD,EACAA,GAAA5rC,SAAAwiC,cAAA,QACAoJ,EAAAhE,YAAA//C,GACA+jD,EAAA1gD,UAAA,4BACK0gD,KACLA,IAAAnJ,WAAA,GAEA,OAAAmJ,GAqEA,QAAArmD,GAAAD,EAAAuF,EAAArE,GACA,GAAAqE,OAAA4gB,KAAA5gB,EAAArE,GACA,MAAAqE,GAAArE,EACA,IAAAslD,GAAAxmD,EAAAuF,QAAAkhD,WACA,OAAAD,QAAArgC,KAAAqgC,EAAAtlD,GACAslD,EAAAtlD,GACAwlD,EAAAxlD,GAvEApB,EAAA6mD,gBAAA,SAAA5I,EAAAuI,GACA,gBAAAtmD,EAAAS,GAA8BklD,EAAA3lD,EAAAS,GAAkBs9C,cAAAuI,aAIhDxmD,EAAAiH,gBAAA,oBAAAtG,EAAA8E,EAAAqgD,GACAD,EAAAngD,KAAA/E,EAAA8E,EAAAqgD,KAGA9lD,EAAAiH,gBAAA,oBAAAtG,GAEA,OADAsS,GAAAvN,KAAAugD,YAAAtlD,GACAH,EAAA,EAAmBA,EAAAyS,EAAAxS,SAAkBD,EACrC,GAAAyS,EAAAzS,GAAAy8C,SAAA,WAGAj9C,EAAAmF,SAAA2hD,WAAA,SAAA5mD,GACAA,EAAA89C,SAAA99C,EAAAkQ,cAEApQ,EAAAmF,SAAA4hD,KAAA,SAAA7mD,GACAA,EAAA89C,SAAA99C,EAAAkQ,YAAA,cAEApQ,EAAAmF,SAAA6hD,OAAA,SAAA9mD,GACAA,EAAA89C,SAAA99C,EAAAkQ,YAAA,gBAEApQ,EAAAmF,SAAA8hD,QAAA,SAAA/mD,GACAA,EAAA+N,UAAA,WACA,OAAAzN,GAAAN,EAAAiG,YAAAtC,EAAA3D,EAAAgE,WAAqD1D,GAAAqD,EAAQrD,IAC7DN,EAAA89C,SAAAh+C,EAAA2C,IAAAnC,EAAA,mBAGAR,EAAAmF,SAAA+hD,UAAA,SAAAhnD,GACAA,EAAA+N,UAAA,WACA,OAAAzN,GAAAN,EAAAiG,YAAAtC,EAAA3D,EAAAgE,WAAqD1D,GAAAqD,EAAQrD,IAC7DN,EAAA89C,SAAAh+C,EAAA2C,IAAAnC,EAAA,qBAIAR,EAAAwgD,eAAA,4BACA,GAAA2G,GAAA1pC,MAAAvW,UAAAnF,MAAAmmB,KAAAiF,UAAA,EACA,iBAAAjtB,EAAAmD,GACA,OAAA7C,GAAA,EAAqBA,EAAA2mD,EAAA1mD,SAAkBD,EAAA,CACvC,GAAA2R,GAAAg1C,EAAA3mD,GAAAN,EAAAmD,EACA,IAAA8O,EAAA,MAAAA,OAKAnS,EAAAwgD,eAAA,uBAAAtgD,EAAAmD,GAEA,OADA+jD,GAAAlnD,EAAAmnD,WAAAhkD,EAAA,QACA7C,EAAA,EAAmBA,EAAA4mD,EAAA3mD,OAAoBD,IAAA,CACvC,GAAAgQ,GAAA42C,EAAA5mD,GAAAN,EAAAmD,EACA,IAAAmN,EAAA,MAAAA,KAIA,IAAAo2C,IACA3I,YAAAj+C,EAAA+mD,KAAAO,KACAd,OAAA,IACAe,YAAA,EACAC,QAAA,EACAjB,cAAA,EAGAvmD,GAAA0E,aAAA,oBAWA1E,EAAAiH,gBAAA,sBAAAxB,EAAArE,GACA,MAAAjB,GAAAuF,KAAAD,EAAArE,Q3B41TMqmD,KACA,SAAU7nD,EAAQC,EAASC,I4B/+TjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAGA,SAAA0nD,GAAA93C,EAAAC,GAAsB,MAAAD,GAAAhN,KAAAiN,EAAAjN,MAAAgN,EAAA9N,GAAA+N,EAAA/N,GAMtB,QAAA6lD,GAAAznD,EAAA0C,EAAAd,EAAA4L,GACAhI,KAAA9C,OAAqB8C,KAAA5D,KACrB4D,KAAAxF,KAAiBwF,KAAAjD,KAAAvC,EAAAsD,QAAAZ,GACjB8C,KAAAzB,IAAAyJ,EAAA1J,KAAAgD,IAAA0G,EAAAxH,KAAAhG,EAAAiG,aAAAjG,EAAAiG,YACAT,KAAAsB,IAAA0G,EAAA1J,KAAAC,IAAAyJ,EAAAlJ,GAAA,EAAAtE,EAAAgE,YAAAhE,EAAAgE,WAGA,QAAA0jD,GAAAC,EAAA/lD,GACA,GAAAI,GAAA2lD,EAAA3nD,GAAA0yC,eAAAjwC,EAAAklD,EAAAjlD,KAAAd,GACA,OAAAI,IAAA,UAAAC,KAAAD,GAGA,QAAA4lD,GAAAD,GACA,KAAAA,EAAAjlD,MAAAilD,EAAA7gD,KAGA,MAFA6gD,GAAA/lD,GAAA,EACA+lD,EAAAplD,KAAAolD,EAAA3nD,GAAAsD,UAAAqkD,EAAAjlD,OACA,EAEA,QAAAmlD,GAAAF,GACA,KAAAA,EAAAjlD,MAAAilD,EAAA5jD,KAGA,MAFA4jD,GAAAplD,KAAAolD,EAAA3nD,GAAAsD,UAAAqkD,EAAAjlD,MACAilD,EAAA/lD,GAAA+lD,EAAAplD,KAAAhC,QACA,EAGA,QAAAunD,GAAAH,GACA,OAAW,CACX,GAAAI,GAAAJ,EAAAplD,KAAAH,QAAA,IAAAulD,EAAA/lD,GACA,QAAAmmD,EAAA,CAAqB,GAAAH,EAAAD,GAAA,QAA8B,QACnD,IAAAD,EAAAC,EAAAI,EAAA,IACA,GAAAC,GAAAL,EAAAplD,KAAA0lB,YAAA,IAAA8/B,GACAE,EAAAD,GAAA,SAAA/lD,KAAA0lD,EAAAplD,KAAAV,MAAAmmD,EAAA,EAAAD,GAEA,OADAJ,GAAA/lD,GAAAmmD,EAAA,EACAE,EAAA,sBAJiCN,EAAA/lD,GAAAmmD,EAAA,IAOjC,QAAAG,GAAAP,GACA,OAAW,CACX,GAAAQ,GAAAR,EAAA/lD,GAAA+lD,EAAAplD,KAAA0lB,YAAA,IAAA0/B,EAAA/lD,GAAA,KACA,QAAAumD,EAAA,CAAqB,GAAAN,EAAAF,GAAA,QAA8B,QACnD,GAAAD,EAAAC,EAAAQ,EAAA,IACAC,EAAA5wC,UAAA2wC,EACAR,EAAA/lD,GAAAumD,CACA,IAAAlhD,GAAAmhD,EAAAv1C,KAAA80C,EAAAplD,KACA,IAAA0E,KAAA+C,OAAAm+C,EAAA,MAAAlhD,OAJiC0gD,GAAA/lD,GAAAumD,GAQjC,QAAAE,GAAAV,GACA,OAAW,CACXS,EAAA5wC,UAAAmwC,EAAA/lD,EACA,IAAAqQ,GAAAm2C,EAAAv1C,KAAA80C,EAAAplD,KACA,KAAA0P,EAAA,CAAmB,GAAA21C,EAAAD,GAAA,QAA8B,QACjD,IAAAD,EAAAC,EAAA11C,EAAAjI,MAAA,GAEA,MADA29C,GAAA/lD,GAAAqQ,EAAAjI,MAAAiI,EAAA,GAAA1R,OACA0R,CAF0C01C,GAAA/lD,GAAAqQ,EAAAjI,MAAA,IAK1C,QAAAs+C,GAAAX,GACA,OAAW,CACX,GAAAI,GAAAJ,EAAA/lD,GAAA+lD,EAAAplD,KAAA0lB,YAAA,IAAA0/B,EAAA/lD,GAAA,KACA,QAAAmmD,EAAA,CAAqB,GAAAF,EAAAF,GAAA,QAA8B,QACnD,IAAAD,EAAAC,EAAAI,EAAA,IACA,GAAAC,GAAAL,EAAAplD,KAAA0lB,YAAA,IAAA8/B,GACAE,EAAAD,GAAA,SAAA/lD,KAAA0lD,EAAAplD,KAAAV,MAAAmmD,EAAA,EAAAD,GAEA,OADAJ,GAAA/lD,GAAAmmD,EAAA,EACAE,EAAA,sBAJiCN,EAAA/lD,GAAAmmD,IAQjC,QAAAQ,GAAAZ,EAAAzjD,GAEA,IADA,GAAAskD,QACW,CACX,GAAA7mD,GAAA4C,EAAA8jD,EAAAV,GAAApgD,EAAAogD,EAAAjlD,KAAA+lD,EAAAd,EAAA/lD,IAAA2C,IAAA,GAAAhE,OAAA,EACA,KAAAgE,KAAA5C,EAAAmmD,EAAAH,IAAA,MACA,iBAAAhmD,EACA,GAAA4C,EAAA,IACA,OAAAjE,GAAAkoD,EAAAjoD,OAAA,EAAsCD,GAAA,IAAQA,EAAA,GAAAkoD,EAAAloD,IAAAiE,EAAA,IAC9CikD,EAAAjoD,OAAAD,CACA,OAEA,GAAAA,EAAA,KAAA4D,MAAAK,EAAA,WACAL,IAAAK,EAAA,GACAyB,KAAAvD,EAAA8E,EAAAkhD,GACAnkD,GAAA7B,EAAAklD,EAAAjlD,KAAAilD,EAAA/lD,SAGA4mD,GAAA59C,KAAArG,EAAA,KAIA,QAAAmkD,GAAAf,EAAAzjD,GAEA,IADA,GAAAskD,QACW,CACX,GAAAnkD,GAAAikD,EAAAX,EACA,KAAAtjD,EAAA,MACA,iBAAAA,EAAA,CACA,GAAAmD,GAAAmgD,EAAAjlD,KAAA25B,EAAAsrB,EAAA/lD,GACAuB,EAAA+kD,EAAAP,EACA,KAAAxkD,EAAA,MACA,IAAAA,EAAA,GACAqlD,EAAA59C,KAAAzH,EAAA,QACO,CACP,OAAA7C,GAAAkoD,EAAAjoD,OAAA,EAAsCD,GAAA,IAAQA,EAAA,GAAAkoD,EAAAloD,IAAA6C,EAAA,IAC9CqlD,EAAAjoD,OAAAD,CACA,OAEA,GAAAA,EAAA,KAAA4D,MAAAf,EAAA,WACAe,IAAAf,EAAA,GACA6C,KAAAvD,EAAAklD,EAAAjlD,KAAAilD,EAAA/lD,IACA0C,GAAA7B,EAAA+E,EAAA60B,SAdgC6rB,GAAAP,IAvGhC,GAAAllD,GAAA3C,EAAA2C,IAGAkmD,EAAA,+KAEAP,EAAA,GAAAp2C,QAAA,UAAA22C,EAAA,mOAsHA7oD,GAAAwgD,eAAA,sBAAAtgD,EAAAmD,GAEA,IADA,GAAAwkD,GAAA,GAAAF,GAAAznD,EAAAmD,EAAAT,KAAA,KACW,CACX,GAAAf,GAAAinD,EAAAP,EAAAV,EACA,KAAAiB,GAAAjB,EAAAjlD,MAAAS,EAAAT,QAAAf,EAAAmmD,EAAAH,IAAA,MACA,KAAAiB,EAAA,iBAAAjnD,EAAA,CACA,GAAA85C,GAAAh5C,EAAAklD,EAAAjlD,KAAAilD,EAAA/lD,IACAqyC,EAAAsU,EAAAZ,EAAAiB,EAAA,GACA,OAAA3U,KAA0BjuC,KAAAy1C,EAAAn3C,GAAA2vC,EAAAjuC,UAI1BlG,EAAA+oD,gBAAA,SAAA7oD,EAAAS,EAAA+M,GACA,GAAAm6C,GAAA,GAAAF,GAAAznD,EAAAS,EAAAiC,KAAAjC,EAAAmB,GAAA4L,EACA,QAAAm6C,EAAAplD,KAAAH,QAAA,UAAAulD,EAAAplD,KAAAH,QAAA,MACA,GAAAT,GAAAmmD,EAAAH,GAAArjD,EAAA3C,GAAAc,EAAAklD,EAAAjlD,KAAAilD,EAAA/lD,IACAuB,EAAAxB,GAAAumD,EAAAP,EACA,IAAAhmD,GAAAwB,KAAAqkD,EAAAG,EAAAlnD,GAAA,IACA,GAAAktC,IAAgB3nC,KAAAvD,EAAAklD,EAAAjlD,KAAAilD,EAAA/lD,IAAA0C,KAAAJ,IAAAf,EAAA,GAChB,oBAAAxB,GAAoCmnD,KAAAnb,EAAAlG,MAAA,KAAAt5B,GAAA,QAEpChL,EAAA,IACc2lD,KAAAJ,EAAAf,EAAAxkD,EAAA,IAAAskC,MAAAkG,EAAAx/B,GAAA,UAEdw5C,EAAA,GAAAF,GAAAznD,EAAAsE,EAAA5B,KAAA4B,EAAA1C,GAAA4L,IACcs7C,KAAAnb,EAAAlG,MAAA8gB,EAAAZ,EAAAxkD,EAAA,IAAAgL,GAAA,YAIdrO,EAAAipD,iBAAA,SAAA/oD,EAAAS,EAAA+M,EAAAtJ,GAEA,IADA,GAAAyjD,GAAA,GAAAF,GAAAznD,EAAAS,EAAAiC,KAAAjC,EAAAmB,GAAA4L,KACW,CACX,GAAAs7C,GAAAJ,EAAAf,EAAAzjD,EACA,KAAA4kD,EAAA,KACA,IAAA14C,GAAA,GAAAq3C,GAAAznD,EAAAS,EAAAiC,KAAAjC,EAAAmB,GAAA4L,GACAi6B,EAAA8gB,EAAAn4C,EAAA04C,EAAA5kD,IACA,IAAAujC,EAAA,OAAyBqhB,OAAArhB,WAKzB3nC,EAAA+D,kBAAA,SAAA7D,EAAAS,EAAAS,EAAAS,GAEA,MAAA4mD,GADA,GAAAd,GAAAznD,EAAAS,EAAAiC,KAAAjC,EAAAmB,GAAAD,GAAqDqE,KAAA,EAAA1B,GAAA3C,GAAiB,MACtET,O5B2/TM8nD,KACA,SAAUtpD,EAAQC,EAASC,I6B5qUjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAEA,SAAAmpD,GAAAjpD,EAAAkpD,GACA,GAAA3mD,GAAAvC,EAAAsD,QAAA4lD,GACAC,EAAA5mD,EAAAyV,OAAA,KACA,WAAAmxC,GAAA,cAAAlnD,KAAAjC,EAAA0yC,eAAA5yC,EAAA2C,IAAAymD,EAAAC,EAAA,MACA,EACArpD,EAAAkU,YAAAzR,EAAA,KAAAvC,EAAAC,UAAA,YAGAH,EAAAwgD,eAAA,yBAAAtgD,EAAAmD,GACA,GAAAimD,GAAAH,EAAAjpD,EAAAmD,EAAAT,KACA,MAAA0mD,EAAA,IAKA,OAJAC,GAAA,KAIA/oD,EAAA6C,EAAAT,KAAA,EAAAf,EAAA3B,EAAAgE,WAAmD1D,GAAAqB,IAAUrB,EAAA,CAC7D,GAAAgC,GAAA2mD,EAAAjpD,EAAAM,EACA,QAAAgC,OACK,MAAAA,EAAA8mD,GAOL,KALAC,GAAA/oD,GAQA,MAAA+oD,IACArjD,KAAAlG,EAAA2C,IAAAU,EAAAT,KAAA1C,EAAAsD,QAAAH,EAAAT,MAAAnC,QACA+D,GAAAxE,EAAA2C,IAAA4mD,EAAArpD,EAAAsD,QAAA+lD,GAAA9oD,aAFA,S7B4rUM+oD,KACA,SAAU5pD,EAAQC,EAASC,I8B7tUjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAkBA,SAAAyzB,GAAAvzB,GACAA,EAAAgB,MAAAuoD,iBACAvpD,EAAA+N,UAAA,WAA+B5H,EAAAnG,KAG/B,QAAA0G,GAAA1G,GACAA,EAAAgB,MAAAuoD,iBAAAvpD,EAAAgB,MAAAuoD,gBAAAhpD,QACAP,EAAA+N,UAAA,WAA+BhG,EAAA/H,KAO/B,QAAAwpD,GAAAxpD,EAAAgG,EAAA1B,EAAAmlD,GACA,MAAAjC,EAAAxhD,EAAA1B,GAGA,OAFA+d,GAAAriB,EAAAgB,MAAAuoD,gBACAG,EAAA1pD,EAAAgB,MAAA2oD,qBACAjnD,EAAAsD,EAAAtD,OAA+B,CAC/B,GAAAS,GAAAT,GAAAsD,EAAAtD,KAAAsD,EAAAvD,EAAAC,EAAA,GACA8E,EAAA9E,EAAAknD,EAAAC,EAAAriD,GAAAlD,EAAA5B,KACAf,EAAAkoD,EAAAvlD,EAAA7B,EAAA+E,EAAA,GACAmY,EAAA3f,EAAAyT,SAAAtQ,EAAAxB,GAA0CiE,UAAA8jD,GAG1C,IAFA,MAAAD,EAAApnC,EAAAzX,KAAA+U,GACA0C,EAAAnb,OAAAuiD,IAAA,EAAA9pC,GACAkqC,EAAA,KACAnnD,GAAA8E,GAIA,QAAAO,GAAA/H,GAEA,OADAqiB,GAAAriB,EAAAgB,MAAAuoD,gBACAjpD,EAAA,EAAmBA,EAAA+hB,EAAA9hB,SAAkBD,EAAA+hB,EAAA/hB,GAAAyH,OACrCsa,GAAA9hB,OAAA,EAGA,QAAA+tC,GAAAtuC,GACA+H,EAAA/H,EAEA,QADAG,GAAAH,EAAAI,iBACAE,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IACtCkpD,EAAAxpD,EAAAG,EAAAG,GAAA0F,OAAA7F,EAAAG,GAAAgE,MAGA,QAAA6B,GAAAnG,GACA,IAAAA,EAAAmR,oBAAA,MAAApJ,GAAA/H,EACA,IAAAA,EAAAI,iBAAAG,OAAA,QAAA+tC,GAAAtuC,EAEA,IAAAgG,GAAAhG,EAAAkQ,UAAA,SAAA5L,EAAAtE,EAAAkQ,UAAA,OAEAmS,EAAAriB,EAAAgB,MAAAuoD,eACA,KAAAlnC,EAAA9hB,OAAA,MAAAipD,GAAAxpD,EAAAgG,EAAA1B,EAEA,IAAAwlD,GAAAznC,EAAA,GAAAnP,OAAA62C,EAAA1nC,IAAA9hB,OAAA,GAAA2S,MACA,KAAA42C,IAAAC,GAAAzlD,EAAA5B,KAAAsD,EAAAtD,KAAAknD,GACApC,EAAAxhD,EAAA+jD,EAAAzlD,KAAA,GAAAkjD,EAAAljD,EAAAwlD,EAAA9jD,OAAA,EACA,MAAAsoC,GAAAtuC,EAEA,MAAAwnD,EAAAxhD,EAAA8jD,EAAA9jD,MAAA,GACAqc,EAAA3U,QAAA3F,QACA+hD,EAAAznC,EAAA,GAAAnP,MAWA,KATAs0C,EAAAxhD,EAAA8jD,EAAA9jD,MAAA,IACA8jD,EAAAxlD,GAAA5B,KAAAsD,EAAAtD,KAAAknD,GACAvnC,EAAA3U,QAAA3F,QACAyhD,EAAAxpD,EAAAgG,EAAA8jD,EAAAxlD,GAAA,IAEAklD,EAAAxpD,EAAAgG,EAAA8jD,EAAA9jD,KAAA,IAIAwhD,EAAAljD,EAAAylD,EAAAzlD,IAAA,GACA+d,EAAAjP,MAAArL,QACAgiD,EAAA1nC,IAAA9hB,OAAA,GAAA2S,MAEAs0C,GAAAljD,EAAAylD,EAAAzlD,IAAA,IACAA,EAAA5B,KAAAqnD,EAAA/jD,KAAAtD,KAAAknD,GACAvnC,EAAAjP,MAAArL,QACAyhD,EAAAxpD,EAAA+pD,EAAA/jD,KAAA1B,IAEAklD,EAAAxpD,EAAA+pD,EAAAzlD,OA/FAxE,EAAA0E,aAAA,gCAAAxE,EAAAyE,EAAAC,GACA,GAAAL,GAAAK,MAAA5E,EAAA6E,IACAF,KAAAJ,GACArE,EAAAgB,MAAAuoD,mBACAvpD,EAAAgB,MAAA2oD,qBAAA,gBAAAllD,KAAA,0BACA6pC,EAAAtuC,GACAA,EAAAsG,GAAA,iBAAAitB,GACAvzB,EAAAsG,GAAA,SAAAI,KACKjC,GAAAJ,IACLrE,EAAAgI,IAAA,iBAAAurB,GACAvzB,EAAAgI,IAAA,SAAAtB,GACAqB,EAAA/H,GACAA,EAAAgB,MAAAuoD,gBAAAvpD,EAAAgB,MAAA2oD,qBAAA,OAcA,IAAAC,GAAA,EACAnnD,EAAA3C,EAAA2C,IACA+kD,EAAA1nD,EAAAkQ,U9BozUMg6C,KACA,SAAUtqD,EAAQwI,EAAqBtI,GAE7C,Y+Bt2UA,SAAA0W,GAAAC,GACA3W,EAAA,Q/Bs2UqB,GAAIqqD,GAAmHrqD,EAAoB,Q+Bv2UhKsqD,EAAAtqD,EAAA,QAGAgX,EAAAhX,EAAA,QAMAiX,EAAAP,EAKAQ,EAAAF,EACAqzC,EAAA,EACAC,EAAA,EACArzC,EANA,kBAEA,KASA3O,GAAA,EAAA4O,EAAA,S/B82UMqzC,KACA,SAAUzqD,EAAQwI,EAAqBtI,GAE7C,YgCv4UA,SAAA0W,GAAAC,GACA3W,EAAA,QhCu4UqB,GAAIwqD,GAAkHxqD,EAAoB,QgCx4U/JyqD,EAAAzqD,EAAA,QAGAgX,EAAAhX,EAAA,QAMAiX,EAAAP,EAKAQ,EAAAF,EACAwzC,EAAA,EACAC,EAAA,EACAxzC,EANA,kBAEA,KASA3O,GAAA,EAAA4O,EAAA,ShC+4UMwzC,KACA,SAAU5qD,EAAQC,EAASC,GiCn6UjC,GAAAmW,GAAAnW,EAAA,OACA,iBAAAmW,SAAArW,EAAAY,EAAAyV,EAAA,MACAA,EAAAwmC,SAAA78C,EAAAC,QAAAoW,EAAAwmC,OAEA38C,GAAA,mBAAAmW,GAAA,IjC46UMw0C,KACA,SAAU7qD,EAAQC,EAASC,IkCj7UjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAMA,SAAAq/B,GAAA9qB,GACA,GAAApC,GAAAoC,EAAA2D,OAAAwyC,EACA,WAAAv4C,EAAA,EAAAA,EA4BA,QAAAw4C,GAAAzqD,EAAAS,EAAAiC,GACA,mBAAAT,KAAAjC,EAAA0yC,eAAAjwC,EAAAhC,EAAAiC,KAAA,mBAAAT,KAAAS,GAGA,QAAA3B,GAAAf,EAAAS,GACA,GAAAQ,GAAAjB,EAAAe,SACA,YAAAE,EAAAypD,kBAAAzpD,EAAAH,UAAAd,EAAA2qD,UAAAlqD,GAAAQ,EAxCA,GAAA2pD,MACAJ,EAAA,cACA/nD,EAAA3C,EAAA2C,GAOA3C,GAAAmF,SAAAuN,cAAA,SAAAxS,GACAA,EAAAwS,iBAGA1S,EAAAiH,gBAAA,yBAAAxB,GACAA,MAAAqlD,EAGA,QAFA5qD,GAAAwF,KACAqlD,EAAAr/B,IAAArrB,EAAAqF,KAAApF,iBAAAa,EAAA,KACAX,EAAAH,EAAAI,OAAA,EAAmCD,GAAA,EAAQA,IAAA,CAC3C,GAAA0F,GAAA7F,EAAAG,GAAA0F,OAAA1B,EAAAnE,EAAAG,GAAAgE,IACA0B,GAAAtD,MAAAmoD,IACAvmD,EAAA5B,MAAAmoD,IAAAvmD,EAAA7B,EAAAooD,EAAA,IACAA,EAAA7kD,EAAAtD,KACA,MAAAzB,EACAjB,EAAA8qD,UAAA9kD,EAAA1B,EAAAiB,GAAAtE,EAAA,MACcjB,EAAA+qD,YAAA/kD,EAAA1B,EAAAiB,GAAmCtE,EAAA,QAC1C,MAAAA,EACPjB,EAAA8qD,UAAA9kD,EAAA1B,EAAAiB,GAEAvF,EAAA+qD,YAAA/kD,EAAA1B,EAAAiB,OAeAzF,EAAAiH,gBAAA,uBAAAf,EAAA1B,EAAAiB,GACAA,MAAAqlD,EACA,IAAAvkD,GAAAb,KAAAvE,EAAAF,EAAAsF,EAAAL,GACAC,EAAAI,EAAA/C,QAAA0C,EAAAtD,KACA,UAAAuD,IAAAwkD,EAAApkD,EAAAL,EAAAC,GAAA,CAEA,GAAA+kD,GAAAzlD,EAAAwlD,aAAA9pD,EAAA8pD,WACA,KAAAC,EAKA,aAJAzlD,EAAA0lD,mBAAAhqD,EAAAgqD,qBACA1lD,EAAA2lD,WAAA,EACA7kD,EAAA8kD,aAAAnlD,EAAA1B,EAAAiB,IAKA,IAAA5D,GAAAmC,KAAAC,IAAA,GAAAO,EAAA1C,IAAA0C,EAAA5B,MAAAsD,EAAAtD,KAAA4B,EAAA5B,KAAA,EAAA4B,EAAA5B,KAAA2D,EAAArC,WAAA,GACAonD,EAAA,MAAA7lD,EAAA8lD,QAAA,IAAA9lD,EAAA8lD,QACAC,EAAA/lD,EAAAgmD,mBAAAvlD,EAAAtD,MAAA4B,EAAA5B,IAEA2D,GAAA0H,UAAA,WACA,GAAAxI,EAAAjD,OAAA,CAEA,OADAkpD,GAAA,KACAlrD,EAAA0F,EAAAtD,KAA+BpC,EAAAqB,IAASrB,EAAA,CACxC,GAAAoC,GAAA2D,EAAA/C,QAAAhD,GACAmrD,EAAA/oD,EAAAb,MAAA,EAAAs9B,EAAAz8B,KACA,MAAA8oD,KAAAjrD,OAAAkrD,EAAAlrD,UACAirD,EAAAC,GAGA,OAAAnrD,GAAA0F,EAAAtD,KAA+BpC,EAAAqB,IAASrB,EAAA,CACxC,GAAAoC,GAAA2D,EAAA/C,QAAAhD,GAAAorD,EAAAF,EAAAjrD,QACA+qD,GAAAd,EAAAvoD,KAAAS,MACAA,EAAAb,MAAA,EAAA6pD,IAAAF,IAAAE,EAAAvsB,EAAAz8B,IACA2D,EAAAzD,aAAA4oD,EAAAR,EAAAI,EAAA3oD,EAAAnC,EAAA,GAAAmC,EAAAnC,EAAAorD,UAGA,QAAAprD,GAAA0F,EAAAtD,KAA+BpC,EAAAqB,IAASrB,GACxCgrD,GAAAd,EAAAvoD,KAAAoE,EAAA/C,QAAAhD,MACA+F,EAAAzD,aAAAooD,EAAAI,EAAA3oD,EAAAnC,EAAA,SAMAR,EAAAiH,gBAAA,wBAAAf,EAAA1B,EAAAiB,GACAA,MAAAqlD,EACA,IAAAvkD,GAAAb,KAAAvE,EAAAF,EAAAsF,EAAAL,GACA2lD,EAAApmD,EAAA0lD,mBAAAhqD,EAAAgqD,kBACAW,EAAArmD,EAAAsmD,iBAAA5qD,EAAA4qD,eACA,KAAAF,IAAAC,EAGA,aAFArmD,EAAAwlD,aAAA9pD,EAAA8pD,cAAA,GAAAxlD,EAAA2lD,WACA7kD,EAAA0kD,YAAA/kD,EAAA1B,EAAAiB,GAGA,mBAAAtD,KAAAoE,EAAAqsC,eAAAjwC,EAAAuD,EAAAtD,KAAA,MAEA,GAAAf,GAAAmC,KAAAC,IAAAO,EAAA5B,KAAA2D,EAAArC,WACArC,IAAAqE,EAAAtD,MAAA,GAAA4B,EAAA1C,IAAA4oD,EAAAvoD,KAAAoE,EAAA/C,QAAA3B,QAEA,IAAAypD,GAAA,MAAA7lD,EAAA8lD,QAAA,IAAA9lD,EAAA8lD,OACArlD,GAAAtD,KAAAf,GAEA0E,EAAA0H,UAAA,WACA,MAAAxI,EAAA2lD,UAAA,CACA,GAAAY,GAAAtB,EAAAvoD,KAAAoE,EAAA/C,QAAA3B,GACA0E,GAAAzD,aAAAwoD,EAAAQ,EAAAnpD,EAAAd,IACA0E,EAAAzD,aAAA+oD,EAAAP,EAAA3oD,EAAAuD,EAAAtD,KAAA,GACA,IAAAqpD,GAAAxmD,EAAAymD,kBAAA/qD,EAAA+qD,gBACA,UAAAD,EAAA,OAAAzrD,GAAA0F,EAAAtD,KAAA,EAAqDpC,GAAAqB,IAAUrB,GAC/DA,GAAAqB,GAAAmqD,IACAzlD,EAAAzD,aAAAmpD,EAAAX,EAAA3oD,EAAAnC,EAAA,QAEA+F,GAAAzD,aAAAgpD,EAAAtnD,GACA+B,EAAAzD,aAAA+oD,EAAA3lD,QAKAlG,EAAAiH,gBAAA,qBAAAf,EAAA1B,EAAAiB,GACAA,MAAAqlD,EACA,IAKAqB,GALA5lD,EAAAb,KAAAvE,EAAAF,EAAAsF,EAAAL,GACArE,EAAAmC,KAAAC,IAAA,GAAAO,EAAA1C,IAAA0C,EAAA5B,MAAAsD,EAAAtD,KAAA4B,EAAA5B,KAAA4B,EAAA5B,KAAA,EAAA2D,EAAArC,YAAAb,EAAAW,KAAAC,IAAAiC,EAAAtD,KAAAf,GAGAuqD,EAAA3mD,EAAAwlD,aAAA9pD,EAAA8pD,YAAAx7C,KACA67C,EAAA,MAAA7lD,EAAA8lD,QAAA,IAAA9lD,EAAA8lD,OACAN,GACA,GAAAmB,EAAA,CACA,OAAA5rD,GAAA6C,EAAyB7C,GAAAqB,IAAUrB,EAAA,CACnC,GAAAoC,GAAA2D,EAAA/C,QAAAhD,GACA2R,EAAAvP,EAAAN,QAAA8pD,EAEA,IADAj6C,GAAA,cAAAhQ,KAAAoE,EAAAqsC,eAAAjwC,EAAAnC,EAAA2R,EAAA,OAAAA,GAAA,IACA,GAAAA,GAAAu4C,EAAAvoD,KAAAS,GAAA,KAAAqoD,EACA,IAAA94C,GAAA,GAAAu4C,EAAAvoD,KAAAS,EAAAb,MAAA,EAAAoQ,IAAA,KAAA84C,EACAx7C,GAAA3E,KAAAlI,GAYA,GAVA2D,EAAA0H,UAAA,WACA,OAAAzN,GAAA6C,EAA2B7C,GAAAqB,IAAUrB,EAAA,CACrC,GAAAoC,GAAA6M,EAAAjP,EAAA6C,GACA1C,EAAAiC,EAAAN,QAAA8pD,GAAAjY,EAAAxzC,EAAAyrD,EAAA3rD,MACAE,GAAA,IACAiC,EAAAb,MAAAoyC,IAAAmX,EAAA7qD,SAAA6qD,IAAAnX,GAAAmX,EAAA7qD,QACA0rD,GAAA,EACA5lD,EAAAzD,aAAA,GAAAH,EAAAnC,EAAAG,GAAAgC,EAAAnC,EAAA2zC,QAGAgY,EAAA,SAIA,GAAAN,GAAApmD,EAAA0lD,mBAAAhqD,EAAAgqD,kBACAW,EAAArmD,EAAAsmD,iBAAA5qD,EAAA4qD,eACA,KAAAF,IAAAC,EAAA,QACA,IAAAG,GAAAxmD,EAAAymD,kBAAA/qD,EAAA+qD,iBACAzkD,EAAAlB,EAAA/C,QAAAH,GAAA2lD,EAAAvhD,EAAAnF,QAAAupD,EACA,QAAA7C,EAAA,QACA,IAAAthD,GAAA7F,GAAAwB,EAAAoE,EAAAlB,EAAA/C,QAAA3B,GACA8lC,EAAAjgC,EAAApF,QAAAwpD,EAAAjqD,GAAAwB,EAAA2lD,EAAA6C,EAAAprD,OAAA,IACA,GAAAknC,GAAAtkC,GAAAxB,IACA6F,EAAAnB,EAAA/C,UAAA3B,GACA8lC,EAAAjgC,EAAApF,QAAAwpD,GAEA,IAAAO,GAAA1pD,EAAAU,EAAA2lD,EAAA,GAAAsD,EAAA3pD,EAAAd,EAAA8lC,EAAA,EACA,QAAAA,IACA,UAAAxlC,KAAAoE,EAAAqsC,eAAAyZ,MACA,UAAAlqD,KAAAoE,EAAAqsC,eAAA0Z,KACA/lD,EAAAmJ,SAAA28C,EAAAC,EAAA,MAAAhqD,QAAAwpD,IAAA,EACA,QAIA,IAAAS,GAAA9kD,EAAA0gB,YAAA0jC,EAAA3lD,EAAApE,IACA0qD,GAAA,GAAAD,GAAA,EAAA9kD,EAAA1F,MAAA,EAAAmE,EAAApE,IAAAQ,QAAAwpD,EAAAS,EAAAV,EAAAprD,OACA,QAAA8rD,IAAA,GAAAC,KAAAV,EAAArrD,QAAAyF,EAAApE,GAAA,QAEA0qD,GAAA9kD,EAAApF,QAAAwpD,EAAAtnD,EAAA1C,GACA,IAAA2qD,GAAA/kD,EAAA3F,MAAAyC,EAAA1C,IAAAqmB,YAAA0jC,EAAAW,EAAAhoD,EAAA1C,GAEA,OADAyqD,IAAA,GAAAC,IAAA,GAAAC,GAAA,EAAAjoD,EAAA1C,GAAA2qD,IACA,GAAAD,IAAA,GAAAD,MAAA/nD,EAAA1C,MAEAyE,EAAA0H,UAAA,WACA1H,EAAAzD,aAAA,GAAAH,EAAAd,EAAA8lC,GAAA2jB,GAAA5jD,EAAA3F,MAAA4lC,EAAA2jB,EAAA7qD,OAAAknC,IAAA2jB,IAAA7qD,OAAA,IACAkC,EAAAd,EAAA8lC,EAAAmkB,EAAArrD,QACA,IAAAisD,GAAA1D,EAAA6C,EAAAprD,MAGA,IAFA6qD,GAAA7jD,EAAA1F,MAAA2qD,IAAApB,EAAA7qD,SAAA6qD,IAAAoB,GAAApB,EAAA7qD,QACA8F,EAAAzD,aAAA,GAAAH,EAAAU,EAAA2lD,GAAArmD,EAAAU,EAAAqpD,IACAT,EAAA,OAAAzrD,GAAA6C,EAAA,EAAuC7C,GAAAqB,IAAUrB,EAAA,CACjD,GAAAoC,GAAA2D,EAAA/C,QAAAhD,GAAA2R,EAAAvP,EAAAN,QAAA2pD,EACA,QAAA95C,IAAAu4C,EAAAvoD,KAAAS,EAAAb,MAAA,EAAAoQ,IAAA,CACA,GAAAw6C,GAAAx6C,EAAA85C,EAAAxrD,MACA6qD,IAAA1oD,EAAAb,MAAA4qD,IAAArB,EAAA7qD,SAAA6qD,IAAAqB,GAAArB,EAAA7qD,QACA8F,EAAAzD,aAAA,GAAAH,EAAAnC,EAAA2R,GAAAxP,EAAAnC,EAAAmsD,SAGA,QlC67UMC,KACA,SAAUhtD,EAAQC,EAASC,ImC7oVjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAoBA,SAAA6sD,GAAA3sD,GACA,OAAAM,GAAA,EAAmBA,EAAAN,EAAAgB,MAAA4rD,YAAArsD,OAAiCD,IACpDN,EAAA6sD,gBAAA7sD,EAAAgB,MAAA4rD,YAAAtsD,GAAA,OAAAwsD,GACA9sD,EAAA6sD,gBAAA7sD,EAAAgB,MAAA4rD,YAAAtsD,GAAA,aAAAysD,GACA/sD,EAAA6sD,gBAAA7sD,EAAAgB,MAAA4rD,YAAAtsD,GAAA,SAAA0sD,GAIA,QAAAC,GAAAv9C,EAAAC,GACA,GAAAD,EAAAnP,QAAAoP,EAAApP,OAAA,QACA,QAAAD,GAAA,EAAmBA,EAAAoP,EAAAnP,OAAcD,IACjC,GAAAoP,EAAApP,IAAAqP,EAAArP,GAAA,QACA,UAGA,QAAA4sD,GAAAltD,EAAAG,GAEA,OADAwgD,MACArgD,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAkN,GAAArN,EAAAG,GACAy1B,EAAA/1B,EAAAC,UAAA,kBACA,oBAAA81B,MAAAo3B,SAAA3/C,EAAA3K,OAAAH,MAAA8K,EAAA9M,KAAAgC,KAAA8K,EAAAhN,QAAA,CAEA,GAAAkC,GAAA1C,EAAAotD,yBAAA5/C,EAAA9M,KAAAgC,KACAi+C,KAAApgD,OAAA,IAAAmC,GAAAi+C,EAAA/1C,KAAAlI,IAEAuqD,EAAAjtD,EAAAgB,MAAA4rD,YAAAjM,IACA3gD,EAAA+N,UAAA,WACA4+C,EAAA3sD,EACA,QAAAM,GAAA,EAAqBA,EAAAqgD,EAAApgD,OAAmBD,IACxCN,EAAAqtD,aAAA1M,EAAArgD,GAAA,OAAAwsD,GACA9sD,EAAAqtD,aAAA1M,EAAArgD,GAAA,aAAAysD,GACA/sD,EAAAqtD,aAAA1M,EAAArgD,GAAA,SAAA0sD,EAEAhtD,GAAAgB,MAAA4rD,YAAAjM,IAIA,QAAA2M,GAAAttD,EAAA8C,GACAoqD,EAAAltD,EAAA8C,EAAA3C,QAzDA,GAAA2sD,GAAA,wBACAC,EAAA,mCACAC,EAAA,8BAEAltD,GAAA0E,aAAA,8BAAAxE,EAAAyE,EAAAC,GACA,GAAAL,GAAAK,GAAA5E,EAAA6E,MAAAD,CACAD,IAAAJ,IACAA,IACArE,EAAAgI,IAAA,wBAAAslD,GACAX,EAAA3sD,SACAA,GAAAgB,MAAA4rD,aAEAnoD,IACAzE,EAAAgB,MAAA4rD,eACAM,EAAAltD,IAAAI,kBACAJ,EAAAsG,GAAA,wBAAAgnD,UnCmsVMC,KACA,SAAU7tD,EAAQC,EAASC,IoC5tVjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GAoBD,QAAAG,GAAAutD,EAAAtsD,GACA,eAAAA,GAAA,gBAAAssD,KACA,gBAAAA,IAAA,MAAAA,EAAAtsD,GAAAssD,EAAAtsD,GACAs/C,EAAAt/C,GAYA,QAAAusD,GAAAztD,GACA,GAAAoY,GAAApY,EAAAgB,MAAA0sD,aACA,QAAAt1C,KAAAu1C,SAAAv1C,EACApY,EAAA2qD,UAAA3qD,EAAAkQ,aACAw9C,eAAAt1C,EAGA,QAAAw1C,GAAA5tD,GACA,GAAAwtD,GAAAC,EAAAztD,EACA,KAAAwtD,GAAAxtD,EAAAC,UAAA,sBAAAH,GAAAI,IAIA,QAFA2tD,GAAA5tD,EAAAutD,EAAA,SACArtD,EAAAH,EAAAI,iBACAE,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,IAAAH,EAAAG,GAAAE,QAAA,MAAAV,GAAAI,IACA,IAAA4tD,GAAAC,EAAA/tD,EAAAG,EAAAG,GAAAI,KACA,KAAAotD,GAAAD,EAAAzrD,QAAA0rD,GAAA,WAAAhuD,GAAAI,KAEA,OAAAI,GAAAH,EAAAI,OAAA,EAAmCD,GAAA,EAAQA,IAAA,CAC3C,GAAAgQ,GAAAnQ,EAAAG,GAAAI,IACAV,GAAA4C,aAAA,GAAAH,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,GAAAa,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,eAIA,QAAAosD,GAAAhuD,GACA,GAAAwtD,GAAAC,EAAAztD,GACAiuD,EAAAT,GAAAvtD,EAAAutD,EAAA,UACA,KAAAS,GAAAjuD,EAAAC,UAAA,sBAAAH,GAAAI,IAGA,QADAC,GAAAH,EAAAI,iBACAE,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,IAAAH,EAAAG,GAAAE,QAAA,MAAAV,GAAAI,IACA,IAAA4tD,GAAAC,EAAA/tD,EAAAG,EAAAG,GAAAI,KACA,KAAAotD,GAAAG,EAAA7rD,QAAA0rD,GAAA,WAAAhuD,GAAAI,KAEAF,EAAA+N,UAAA,WACA/N,EAAA2U,iBAAA,aACA3U,EAAAoO,YAAA,cACAjO,EAAAH,EAAAI,gBACA,QAAAE,GAAA,EAAqBA,EAAAH,EAAAI,OAAmBD,IAAA,CACxC,GAAAoC,GAAAvC,EAAAG,GAAAI,KAAAgC,IACA1C,GAAAgD,WAAAN,EAAA,SACA1C,EAAAgD,WAAAN,EAAA,cAKA,QAAAwrD,GAAAprD,GACA,GAAAqrD,GAAAruD,EAAAkQ,OAAAlN,EAAAD,OAAAC,EAAApC,MAAA,CACA,QAAYmC,OAAA,GAAAJ,GAAAK,EAAAD,OAAAH,KAAAI,EAAAD,OAAAjB,IAAAusD,GAAA,MACZztD,KAAA,GAAA+B,GAAAK,EAAApC,KAAAgC,KAAAI,EAAApC,KAAAkB,IAAAusD,EAAA,QAGA,QAAAC,GAAApuD,EAAA4B,GACA,GAAA4rD,GAAAC,EAAAztD,EACA,KAAAwtD,GAAAxtD,EAAAC,UAAA,sBAAAH,GAAAI,IAEA,IAAA2tD,GAAA5tD,EAAAutD,EAAA,SACA/sD,EAAAotD,EAAAzrD,QAAAR,EACA,QAAAnB,EAAA,MAAAX,GAAAI,IAQA,QADA8B,GANAqsD,EAAApuD,EAAAutD,EAAA,WAEAc,EAAAT,EAAA1rD,OAAA1B,EAAA,IAAAmB,EACAzB,EAAAH,EAAAI,iBACA2O,EAAAtO,EAAA,KAGAH,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAAiuD,GAAA/gD,EAAArN,EAAAG,GAAAgQ,EAAA9C,EAAA9M,KACA6D,EAAAvE,EAAAwP,SAAAc,EAAA7N,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,GACA,IAAAmN,IAAAvB,EAAAhN,QACA+tD,EAAA,eACO,KAAAD,GAAAv/C,GAAAxK,GAAA3C,EAOA,GAAA0sD,GAAAh+C,EAAA1O,GAAA,GAAAysD,EAAAjsD,QAAAR,IAAA,GACP5B,EAAAwP,SAAA/M,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,GAAA0O,IAAA1O,MACA0O,EAAA1O,IAAA,GAAA5B,EAAAwP,SAAA/M,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,GAAAa,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,KAAAA,GACA2sD,EAAA,cACO,IAAAD,EAAA,CACP,GAAAxuD,EAAAsN,WAAA7I,KAAAiqD,EAAAxuD,EAAAsQ,EAAA1O,GACA,MAAA9B,GAAAI,IADAquD,GAAA,WAEO,KAAAx/C,GAAA/O,EAAAsD,QAAAgN,EAAA5N,MAAAnC,QAAA+P,EAAA1O,KACP6sD,EAAAlqD,EAAAspD,KACA,KAAA5rD,KAAAsC,GAGA,MAAAzE,GAAAI,IAFAquD,GAAA,WAfAA,GADAD,GAAAI,EAAA1uD,EAAAsQ,GACA,OACA+9C,EAAAjsD,QAAAR,IAAA,GAAA5B,EAAAwP,SAAAc,EAAA7N,EAAA6N,EAAA5N,KAAA4N,EAAA1O,GAAA,KAAAA,MACA,YAEA,MAeA,IAAAI,GACA,GAAAA,GAAAusD,EAAA,MAAAzuD,GAAAI,SADA8B,GAAAusD,EAIA,GAAA/vB,GAAA/9B,EAAA,EAAAotD,EAAA1rD,OAAA1B,EAAA,GAAAmB,EACA68B,EAAAh+B,EAAA,EAAAmB,EAAAisD,EAAA1rD,OAAA1B,EAAA,EACAT,GAAA+N,UAAA,WACA,WAAA/L,EACAhC,EAAAoO,YAAA,mBACO,iBAAApM,EACP,OAAA1B,GAAA,EAAuBA,EAAA,EAAOA,IAC9BN,EAAAoO,YAAA,mBACO,gBAAApM,EAAA,CAEP,OADA2sD,GAAA3uD,EAAA6zC,gBACAvzC,EAAA,EAAuBA,EAAAquD,EAAApuD,OAAiBD,IACxCquD,EAAAruD,GAAAk+B,EAAAmwB,EAAAruD,GAAAm+B,CACAz+B,GAAAuD,kBAAAorD,EAAA,UACAA,EAAA3uD,EAAAI,iBAAAyB,OACA,QAAAvB,GAAA,EAAuBA,EAAAquD,EAAApuD,OAAiBD,IACxCquD,EAAAruD,GAAA4tD,EAAAS,EAAAruD,GACAN,GAAA+C,cAAA4rD,OACO,QAAA3sD,GACPhC,EAAA2U,iBAAA6pB,EAAAC,EAAA,MACAz+B,EAAA4uD,gBAAApwB,EAAAC,GACAz+B,EAAAoO,YAAA,eACO,WAAApM,IACPhC,EAAA2U,iBAAA6pB,QAAA,UACAx+B,EAAAoO,YAAA,kBAKA,QAAAqgD,GAAA7sD,EAAAisD,GACA,GAAAptD,GAAAotD,EAAA5lC,YAAArmB,EACA,OAAAnB,IAAA,GAAAA,EAAA,KAGA,QAAAstD,GAAA/tD,EAAAS,GACA,GAAA4T,GAAArU,EAAAwP,SAAA/M,EAAAhC,EAAAiC,KAAAjC,EAAAmB,GAAA,GACAa,EAAAhC,EAAAiC,KAAAjC,EAAAmB,GAAA,GACA,WAAAyS,EAAA9T,OAAA8T,EAAA,KAMA,QAAAm6C,GAAAxuD,EAAAS,EAAAmB,GACA,GAAAc,GAAA1C,EAAAsD,QAAA7C,EAAAiC,MACA4U,EAAAtX,EAAAY,WAAAH,EACA,mBAAAwB,KAAAqV,EAAAtV,OAAA0sD,EAAA1uD,EAAAS,GAAA,QACA,IAAA8W,GAAA,GAAAzX,GAAAwkC,aAAA5hC,EAAAb,MAAA,EAAApB,EAAAmB,MAAAc,EAAAb,MAAApB,EAAAmB,IAAA,EAEA,KADA2V,EAAA9W,IAAA8W,EAAApU,MAAAmU,EAAAnU,QACW,CACX,GAAA0rD,GAAA7uD,EAAAe,UAAAuW,MAAAC,EAAAD,EAAAtW,MACA,IAAAuW,EAAA9W,OAAAmB,GAAA,uBAAAK,KAAA4sD,EACAt3C,GAAApU,MAAAoU,EAAA9W,KAIA,QAAAiuD,GAAA1uD,EAAAS,GACA,GAAA6W,GAAAtX,EAAAY,WAAA6B,EAAAhC,EAAAiC,KAAAjC,EAAAmB,GAAA,GACA,kBAAAK,KAAAqV,EAAAtV,OAAAsV,EAAAnU,OAAA1C,EAAAmB,GA5LA,GAAA4+C,IACAqN,MAAA,eACAQ,QAAA,GACAJ,QAAA,QAGAxrD,EAAA3C,EAAA2C,GAEA3C,GAAA0E,aAAA,gCAAAxE,EAAAyE,EAAAC,GACAA,MAAA5E,EAAA6E,OACA3E,EAAA4E,aAAA6L,GACAzQ,EAAAgB,MAAA0sD,cAAA,MAEAjpD,IACAzE,EAAAgB,MAAA0sD,cAAAjpD,EACAzE,EAAAgF,UAAAyL,KAYA,QAFAq+C,GAAAtO,EAAAqN,MAAA,IACAp9C,GAAgB06B,UAAAyiB,EAAA1iB,MAAA8iB,GAChB1tD,EAAA,EAAiBA,EAAAwuD,EAAAvuD,OAAiBD,IAClCmQ,EAAA,IAAAq+C,EAAA3sD,OAAA7B,GAAA,KAEA,SAAAsB,GACA,gBAAA5B,GAAyB,MAAAouD,GAAApuD,EAAA4B,KAHzBktD,EAAA3sD,OAAA7B,OpCw4VMyuD,OACA,SAAUrvD,EAAQC,EAASC,IqC76VjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAGA,SAAAkvD,GAAAC,GACA,GAAAC,GAAAD,EAAAC,KACA,cAAAA,KAAAD,EAAA53C,WAAA,SACA43C,EAAA93C,OAAA,SACA83C,EAAA/2C,UAAA,QAGA,QAAAi3C,GAAAF,GACA,MAAAA,GAAA93C,OAAA83C,EAAA,GAAAj9C,QAAAi9C,EAAA73C,OAAA43C,EAAAC,GAAA,KAGA,QAAAG,GAAAH,GACA,gCAAAhtD,KAAAgtD,EAAA73C,QAGA,QAAAi4C,GAAAriD,EAAAiiD,EAAA9rD,GACA8rD,EAAAE,EAAAF,EACA,QAAAvsD,GAAAS,EAAAT,KAAAd,EAAAuB,EAAAvB,GAAAsM,EAAAlB,EAAAhJ,WAAqEtB,GAAAwL,EAAcxL,IAAAd,EAAA,GACnFqtD,EAAAz3C,UAAA5V,CACA,IAAAM,GAAA8K,EAAA1J,QAAAZ,GAAAuE,EAAAgoD,EAAAp8C,KAAA3Q,EACA,IAAA+E,EACA,OAAgBjB,KAAAvD,EAAAC,EAAAuE,EAAA+C,OAChB1F,GAAA7B,EAAAC,EAAAuE,EAAA+C,MAAA/C,EAAA,GAAA1G,QACA0G,UAIA,QAAAqoD,GAAAtiD,EAAAiiD,EAAA9rD,GACA,IAAAisD,EAAAH,GAAA,MAAAI,GAAAriD,EAAAiiD,EAAA9rD,EAEA8rD,GAAAE,EAAAF,EAEA,QADA/sD,GAAAqtD,EAAA,EACA7sD,EAAAS,EAAAT,KAAAwL,EAAAlB,EAAAhJ,WAAsDtB,GAAAwL,GAAc,CAMpE,OAAA5N,GAAA,EAAqBA,EAAAivD,EAAWjvD,IAAA,CAChC,GAAA0iD,GAAAh2C,EAAA1J,QAAAZ,IACAR,GAAA,MAAAA,EAAA8gD,EAAA9gD,EAAA,KAAA8gD,EAEAuM,GAAA,EACAN,EAAAz3C,UAAArU,EAAAvB,EACA,IAAAqF,GAAAgoD,EAAAp8C,KAAA3Q,EACA,IAAA+E,EAAA,CACA,GAAAuoD,GAAAttD,EAAAL,MAAA,EAAAoF,EAAA+C,OAAAwqB,MAAA,MAAAi7B,EAAAxoD,EAAA,GAAAutB,MAAA,MACAjtB,EAAApE,EAAAT,KAAA8sD,EAAAjvD,OAAA,EAAAkoD,EAAA+G,IAAAjvD,OAAA,GAAAA,MACA,QAAgByF,KAAAvD,EAAA8E,EAAAkhD,GAChBnkD,GAAA7B,EAAA8E,EAAAkoD,EAAAlvD,OAAA,EACA,GAAAkvD,EAAAlvD,OAAAkoD,EAAAgH,EAAA,GAAAlvD,OAAAkvD,IAAAlvD,OAAA,GAAAA,QACA0G,WAKA,QAAAyoD,GAAAxtD,EAAA+sD,GAEA,IADA,GAAAhoD,GAAA0oD,EAAA,IACW,CACXV,EAAAz3C,UAAAm4C,CACA,IAAAC,GAAAX,EAAAp8C,KAAA3Q,EACA,KAAA0tD,EAAA,MAAA3oD,EAGA,IAFAA,EAAA2oD,GACAD,EAAA1oD,EAAA+C,OAAA/C,EAAA,GAAA1G,QAAA,KACA2B,EAAA3B,OAAA,MAAA0G,IAIA,QAAA4oD,GAAA7iD,EAAAiiD,EAAA9rD,GACA8rD,EAAAE,EAAAF,EACA,QAAAvsD,GAAAS,EAAAT,KAAAd,EAAAuB,EAAAvB,GAAA2vC,EAAAvkC,EAAA/G,YAAuEvD,GAAA6uC,EAAe7uC,IAAAd,GAAA,GACtF,GAAAM,GAAA8K,EAAA1J,QAAAZ,EACAd,IAAA,IAAAM,IAAAL,MAAA,EAAAD,GACA,IAAAqF,GAAAyoD,EAAAxtD,EAAA+sD,EACA,IAAAhoD,EACA,OAAgBjB,KAAAvD,EAAAC,EAAAuE,EAAA+C,OAChB1F,GAAA7B,EAAAC,EAAAuE,EAAA+C,MAAA/C,EAAA,GAAA1G,QACA0G,UAIA,QAAA6oD,GAAA9iD,EAAAiiD,EAAA9rD,GACA8rD,EAAAE,EAAAF,EAEA,QADA/sD,GAAAqtD,EAAA,EACA7sD,EAAAS,EAAAT,KAAA6uC,EAAAvkC,EAAA/G,YAAwDvD,GAAA6uC,GAAe,CACvE,OAAAjxC,GAAA,EAAqBA,EAAAivD,EAAWjvD,IAAA,CAChC,GAAA0iD,GAAAh2C,EAAA1J,QAAAZ,IACAR,GAAA,MAAAA,EAAA8gD,EAAAnhD,MAAA,EAAAsB,EAAAvB,IAAAohD,EAAA,KAAA9gD,EAEAqtD,GAAA,CAEA,IAAAtoD,GAAAyoD,EAAAxtD,EAAA+sD,EACA,IAAAhoD,EAAA,CACA,GAAAuoD,GAAAttD,EAAAL,MAAA,EAAAoF,EAAA+C,OAAAwqB,MAAA,MAAAi7B,EAAAxoD,EAAA,GAAAutB,MAAA,MACAjtB,EAAA7E,EAAA8sD,EAAAjvD,OAAAkoD,EAAA+G,IAAAjvD,OAAA,GAAAA,MACA,QAAgByF,KAAAvD,EAAA8E,EAAAkhD,GAChBnkD,GAAA7B,EAAA8E,EAAAkoD,EAAAlvD,OAAA,EACA,GAAAkvD,EAAAlvD,OAAAkoD,EAAAgH,EAAA,GAAAlvD,OAAAkvD,IAAAlvD,OAAA,GAAAA,QACA0G,WAgBA,QAAA8oD,GAAA9d,EAAA4L,EAAAp9C,EAAAuvD,GACA,GAAA/d,EAAA1xC,QAAAs9C,EAAAt9C,OAAA,MAAAE,EACA,QAAAsD,GAAA,EAAA+C,EAAArG,EAAAqD,KAAAgD,IAAA,EAAAmrC,EAAA1xC,OAAAs9C,EAAAt9C,UAA4E,CAC5E,GAAAwD,GAAA+C,EAAA,MAAA/C,EACA,IAAAksD,GAAAlsD,EAAA+C,GAAA,EACAkH,EAAAgiD,EAAA/d,EAAApwC,MAAA,EAAAouD,IAAA1vD,MACA,IAAAyN,GAAAvN,EAAA,MAAAwvD,EACAjiD,GAAAvN,EAAAqG,EAAAmpD,EACAlsD,EAAAksD,EAAA,GAIA,QAAAC,GAAAljD,EAAA3H,EAAAlC,EAAAmC,GAGA,IAAAD,EAAA9E,OAAA,WACA,IAAAsmD,GAAAvhD,EAAAqgD,EAAAwK,EACA5gD,EAAAs3C,EAAAxhD,GAAAmvB,MAAA,WAEAxc,GAAA,OAAAtV,GAAAS,EAAAT,KAAAd,EAAAuB,EAAAvB,GAAAsM,EAAAlB,EAAAhJ,WAAA,EAAAuL,EAAAhP,OAAgGmC,GAAAwL,EAAcxL,IAAAd,EAAA,GAC9G,GAAAqwC,GAAAjlC,EAAA1J,QAAAZ,GAAAb,MAAAD,GAAAM,EAAA2kD,EAAA5U,EACA,OAAA1iC,EAAAhP,OAAA,CACA,GAAA0R,GAAA/P,EAAAE,QAAAmN,EAAA,GACA,QAAA0C,EAAA,QAAA+F,EACA,IAAA7U,GAAA4sD,EAAA9d,EAAA/vC,EAAA+P,EAAA40C,GAAAjlD,CACA,QAAgBoE,KAAAvD,EAAAC,EAAAqtD,EAAA9d,EAAA/vC,EAAA+P,EAAA40C,GAAAjlD,GAChB0C,GAAA7B,EAAAC,EAAAqtD,EAAA9d,EAAA/vC,EAAA+P,EAAA1C,EAAA,GAAAhP,OAAAsmD,GAAAjlD,IAEA,GAAAwuD,GAAAluD,EAAA3B,OAAAgP,EAAA,GAAAhP,MACA,IAAA2B,EAAAL,MAAAuuD,IAAA7gD,EAAA,IACA,OAAAjP,GAAA,EAAuBA,EAAAiP,EAAAhP,OAAA,EAAsBD,IAC7C,GAAAumD,EAAA75C,EAAA1J,QAAAZ,EAAApC,KAAAiP,EAAAjP,GAAA,QAAA0X,EACA,IAAArW,GAAAqL,EAAA1J,QAAAZ,EAAA6M,EAAAhP,OAAA,GAAAqrD,EAAA/E,EAAAllD,GAAAqC,EAAAuL,IAAAhP,OAAA,EACA,IAAAoB,EAAAE,MAAA,EAAAmC,EAAAzD,SAAAyD,EACA,OAAgBgC,KAAAvD,EAAAC,EAAAqtD,EAAA9d,EAAA/vC,EAAAkuD,EAAAvJ,GAAAjlD,GAChB0C,GAAA7B,EAAAC,EAAA6M,EAAAhP,OAAA,EAAAwvD,EAAApuD,EAAAiqD,EAAA5nD,EAAAzD,OAAAsmD,OAKA,QAAAwJ,GAAArjD,EAAA3H,EAAAlC,EAAAmC,GACA,IAAAD,EAAA9E,OAAA,WACA,IAAAsmD,GAAAvhD,EAAAqgD,EAAAwK,EACA5gD,EAAAs3C,EAAAxhD,GAAAmvB,MAAA,WAEAxc,GAAA,OAAAtV,GAAAS,EAAAT,KAAAd,EAAAuB,EAAAvB,GAAA2vC,EAAAvkC,EAAA/G,YAAA,EAAAsJ,EAAAhP,OAAkGmC,GAAA6uC,EAAe7uC,IAAAd,GAAA,GACjH,GAAAqwC,GAAAjlC,EAAA1J,QAAAZ,EACAd,IAAA,IAAAqwC,IAAApwC,MAAA,EAAAD,GACA,IAAAM,GAAA2kD,EAAA5U,EACA,OAAA1iC,EAAAhP,OAAA,CACA,GAAA0R,GAAA/P,EAAA+lB,YAAA1Y,EAAA,GACA,QAAA0C,EAAA,QAAA+F,EACA,QAAgBhS,KAAAvD,EAAAC,EAAAqtD,EAAA9d,EAAA/vC,EAAA+P,EAAA40C,IAChBviD,GAAA7B,EAAAC,EAAAqtD,EAAA9d,EAAA/vC,EAAA+P,EAAA1C,EAAA,GAAAhP,OAAAsmD,KAEA,GAAA7iD,GAAAuL,IAAAhP,OAAA,EACA,IAAA2B,EAAAL,MAAA,EAAAmC,EAAAzD,SAAAyD,EAAA,CACA,OAAA1D,GAAA,EAAA6C,EAAAT,EAAA6M,EAAAhP,OAAA,EAAwDD,EAAAiP,EAAAhP,OAAA,EAAsBD,IAC9E,GAAAumD,EAAA75C,EAAA1J,QAAAH,EAAA7C,KAAAiP,EAAAjP,GAAA,QAAA0X,EACA,IAAA1G,GAAAtE,EAAA1J,QAAAZ,EAAA,EAAA6M,EAAAhP,QAAA+vD,EAAAzJ,EAAAv1C,EACA,IAAAg/C,EAAAzuD,MAAAyuD,EAAA/vD,OAAAgP,EAAA,GAAAhP,SAAAgP,EAAA,GACA,OAAgBvJ,KAAAvD,EAAAC,EAAA,EAAA6M,EAAAhP,OAAAwvD,EAAAz+C,EAAAg/C,EAAAh/C,EAAA/Q,OAAAgP,EAAA,GAAAhP,OAAAsmD,IAChBviD,GAAA7B,EAAAC,EAAAqtD,EAAA9d,EAAA/vC,EAAA8B,EAAAzD,OAAAsmD,OAKA,QAAA0J,GAAAvjD,EAAA3H,EAAA5E,EAAA8E,GACAC,KAAAgrD,cAAA,EACAhrD,KAAAwH,MACAvM,IAAAuM,EAAAE,QAAAzM,GAAAgC,EAAA,KACA+C,KAAA/E,KAAgBuF,KAAAvF,EAAA6D,GAAA7D,EAEhB,IAAA6E,EACA,iBAAAC,GACAD,EAAAC,EAAAD,UAEAA,EAAAC,EACAA,EAAA,MAGA,gBAAAF,IACA,MAAAC,OAAA,GACAE,KAAAU,QAAA,SAAA+zC,EAAAx5C,GACA,OAAAw5C,EAAAoW,EAAAH,GAAAljD,EAAA3H,EAAA5E,EAAA6E,MAGAD,EAAA8pD,EAAA9pD,GACAE,IAAA,IAAAA,EAAA2S,UAKA1S,KAAAU,QAAA,SAAA+zC,EAAAx5C,GACA,OAAAw5C,EAAA4V,EAAAR,GAAAriD,EAAA3H,EAAA5E,IALA+E,KAAAU,QAAA,SAAA+zC,EAAAx5C,GACA,OAAAw5C,EAAA6V,EAAAR,GAAAtiD,EAAA3H,EAAA5E,KA9MA,GAyGAklD,GAAAwK,EAzGA1tD,EAAA3C,EAAA2C,GA0GA6I,QAAAtE,UAAAypD,WACA9K,EAAA,SAAAtxC,GAA4B,MAAAA,GAAAo8C,UAAA,OAAA1uD,eAC5BouD,EAAA,SAAA97C,GAA4B,MAAAA,GAAAo8C,UAAA,UAE5B9K,EAAA,SAAAtxC,GAA4B,MAAAA,GAAAtS,eAC5BouD,EAAA,SAAA97C,GAA4B,MAAAA,KAwG5Bk8C,EAAAvpD,WACAM,SAAA,WAA0B,MAAA9B,MAAA0N,MAAA,IAC1B3C,aAAA,WAA8B,MAAA/K,MAAA0N,MAAA,IAE9BA,KAAA,SAAA+mC,GAKA,IAJA,GAAA/jC,GAAA1Q,KAAAU,QAAA+zC,EAAAz0C,KAAAwH,IAAAE,QAAA+sC,EAAAz0C,KAAA/E,IAAAuF,KAAAR,KAAA/E,IAAA6D,KAIA4R,GAAA,GAAApW,EAAAkQ,OAAAkG,EAAAlQ,KAAAkQ,EAAA5R,KACA21C,EACA/jC,EAAAlQ,KAAApE,GAAAsU,EAAAlQ,KAAAvD,EAAAyT,EAAAlQ,KAAAtD,KAAAwT,EAAAlQ,KAAApE,GAAA,GACAsU,IAAAlQ,KAAAtD,MAAA8C,KAAAwH,IAAA/G,YAAA,KACAT,KAAAU,QAAA+zC,EAAAz0C,KAAAwH,IAAAE,QAAAzK,EAAAyT,EAAAlQ,KAAAtD,KAAA,KAEAwT,EAAA5R,GAAA1C,GAAA4D,KAAAwH,IAAA1J,QAAA4S,EAAA5R,GAAA5B,MAAAnC,OAAA2V,EAAA5R,GAAA7B,EAAAyT,EAAA5R,GAAA5B,KAAAwT,EAAA5R,GAAA1C,GAAA,GACAsU,IAAA5R,GAAA5B,MAAA8C,KAAAwH,IAAAhJ,WAAA,KACAwB,KAAAU,QAAA+zC,EAAAx3C,EAAAyT,EAAA5R,GAAA5B,KAAA,KAIA,IAAAwT,EAGA,MAFA1Q,MAAA/E,IAAAyV,EACA1Q,KAAAgrD,cAAA,EACAhrD,KAAA/E,IAAAwG,QAAA,CAEA,IAAAtF,GAAAc,EAAAw3C,EAAAz0C,KAAAwH,IAAA/G,YAAAT,KAAAwH,IAAAhJ,WAAA,IAEA,OADAwB,MAAA/E,KAAoBuF,KAAArE,EAAA2C,GAAA3C,GACpB6D,KAAAgrD,cAAA,GAIAxqD,KAAA,WAAsB,GAAAR,KAAAgrD,aAAA,MAAAhrD,MAAA/E,IAAAuF,MACtB1B,GAAA,WAAoB,GAAAkB,KAAAgrD,aAAA,MAAAhrD,MAAA/E,IAAA6D,IAEpB4S,QAAA,SAAAqwB,EAAAkC,GACA,GAAAjkC,KAAAgrD,aAAA,CACA,GAAAjhD,GAAAzP,EAAA4wD,WAAAnpB,EACA/hC,MAAAwH,IAAApK,aAAA2M,EAAA/J,KAAA/E,IAAAuF,KAAAR,KAAA/E,IAAA6D,GAAAmlC,GACAjkC,KAAA/E,IAAA6D,GAAA7B,EAAA+C,KAAA/E,IAAAuF,KAAAtD,KAAA6M,EAAAhP,OAAA,EACAgP,IAAAhP,OAAA,GAAAA,QAAA,GAAAgP,EAAAhP,OAAAiF,KAAA/E,IAAAuF,KAAApE,GAAA,OAIA9B,EAAAiH,gBAAA,2BAAA1B,EAAA5E,EAAA6E,GACA,UAAAirD,GAAA/qD,KAAAwH,IAAA3H,EAAA5E,EAAA6E,KAEAxF,EAAA6wD,mBAAA,2BAAAtrD,EAAA5E,EAAA6E,GACA,UAAAirD,GAAA/qD,KAAAH,EAAA5E,EAAA6E,KAGAxF,EAAAiH,gBAAA,yBAAA1B,EAAAC,GAGA,IAFA,GAAAnF,MACAmQ,EAAA9K,KAAA4B,gBAAA/B,EAAAG,KAAA0K,UAAA,QAAA5K,GACAgL,EAAAhJ,cACAxH,EAAAkQ,OAAAM,EAAAhM,KAAAkB,KAAA0K,UAAA,WACA/P,EAAAyK,MAAmB/H,OAAAyN,EAAAtK,OAAAtF,KAAA4P,EAAAhM,MAEnBnE,GAAAI,QACAiF,KAAAzC,cAAA5C,EAAA,QrCy7VMywD,KACA,SAAUlxD,EAAQwI,EAAqBtI,GAE7C,YsC1tWA,IAAAuI,GAAA,WAA0B,GAAAC,GAAA5C,KAAa6C,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CACjE,OAAAE,GAAA,OACAI,YAAA,iBACGJ,EAAA,OACHI,YAAA,UACGJ,EAAA,OACHI,YAAA,kBACGJ,EAAA,KACHI,YAAA,qBACArC,IACA+1C,MAAA,SAAAD,GACAA,EAAAyU,kBACAzoD,EAAA4Z,KAAAo6B,OAGGh0C,EAAAsB,GAAA,KAAAnB,EAAA,MACHqB,aACA1I,KAAA,OACA2I,QAAA,SACAT,OAAAhB,EAAA2W,OACAtV,WAAA,YAEAd,YAAA,gBACGP,EAAAsB,GAAA,UAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,MACHqB,aACA1I,KAAA,OACA2I,QAAA,SACAT,MAAAhB,EAAA,OACAqB,WAAA,WAEAd,YAAA,gBACGP,EAAAsB,GAAA,WAAAtB,EAAAgC,GAAAhC,EAAA6a,QAAA9Y,IAAA,OAAA/B,EAAAsB,GAAA,KAAAnB,EAAA,UACHI,YAAA,WACAC,OACA5G,KAAA,UAEA8uD,UACAzU,MAAA,SAAAD,GACAA,EAAAyU,kBACAzoD,EAAA4Z,KAAAo6B,OAGGh0C,EAAAsB,GAAA,YAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,OACHI,YAAA,eACGJ,EAAA,WACHwoD,IAAA,OACAnoD,OACAO,MAAAf,EAAA6W,KACA+xC,cAAA,UAEGzoD,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,YACHI,YAAA,cACAC,OACAG,WAAA,QACAgd,KAAA,SAEA5c,OACAC,MAAAhB,EAAA6W,KAAA,MACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAA5U,MAAAf,GAEAG,WAAA,iBAEG,GAAArB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,YACHI,YAAA,cACAC,OACAG,WAAA,QACAgd,KAAA,SAEA5c,OACAC,MAAAhB,EAAA6W,KAAA,IACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAA/a,IAAAoF,GAEAG,WAAA,eAEG,GAAArB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,kBACHY,OACAC,MAAAhB,EAAA6W,KAAA,MACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAAzS,MAAAlD,GAEAG,WAAA,gBAEGlB,EAAA,YACHK,OACAqoD,MAAA,KAEG7oD,EAAAsB,GAAA,OAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,YACHK,OACAqoD,MAAA,KAEG7oD,EAAAsB,GAAA,OAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,YACHK,OACAqoD,MAAA,KAEG7oD,EAAAsB,GAAA,OAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,YACHK,OACAqoD,MAAA,KAEG7oD,EAAAsB,GAAA,OAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,YACHK,OACAqoD,MAAA,KAEG7oD,EAAAsB,GAAA,eAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,gBACHK,OACAsoD,aAAA,OACA7xC,SAAAjX,EAAAiX,UAEAlW,OACAC,MAAAhB,EAAA6W,KAAA,YACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAAxS,YAAAnD,GAEAG,WAAA,uBAEG,GAAArB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,YAEG1oD,EAAA,OACHI,YAAA,iBACGJ,EAAA,cACHI,YAAA,qBACAC,OACArD,QAAA6C,EAAAoY,gBAEArX,OACAC,MAAAhB,EAAA6W,KAAA,QACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAAC,QAAA5V,GAEAG,WAAA,mBAEG,KAAArB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,YACHK,OACAG,WAAA,QACA/G,KAAA,WACAmvD,KAAA,EACAtoD,YAAA,iCAEAM,OACAC,MAAAhB,EAAA6W,KAAA,MACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAAE,MAAA7V,GAEAG,WAAA,iBAEG,GAAArB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,YACHK,OACAG,WAAA,QACA/G,KAAA,WACAmvD,KAAA,EACAtoD,YAAA,kCAEAM,OACAC,MAAAhB,EAAA6W,KAAA,OACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAAjC,OAAA1T,GAEAG,WAAA,kBAEG,GAAArB,EAAAsB,GAAA,KAAAnB,EAAA,gBACHK,OACAqoD,MAAA,UAEG1oD,EAAA,qBACHY,OACAC,MAAAhB,EAAA6W,KAAA,kBACA5V,SAAA,SAAAC,GACAlB,EAAA6W,KAAAG,kBAAA9V,GAEAG,WAAA,2BAEGrB,EAAA0B,GAAA1B,EAAA,mBAAA2B,EAAAC,GACH,MAAAzB,GAAA,eACA2B,IAAAF,EACApB,OACAqoD,MAAAlnD,SAGG,GAAA3B,EAAAsB,GAAA,KAAAnB,EAAA,OACHI,YAAA,mBACGJ,EAAA,OACHI,YAAA,qBACGJ,EAAA,eACHI,YAAA,oBACAC,OACAwoD,QAAA,QACAC,aAAA,SAEA/qD,IACAmC,QAAAL,EAAAgb,qBACAkuC,iBAAAlpD,EAAAmb,kBAEGhb,EAAA,aACHK,OACA5G,KAAA,UACA+jB,KAAA,WAEG3d,EAAAsB,GAAAtB,EAAAgC,GAAAhC,EAAAiZ,iBAAA9Y,EAAA,KACHI,YAAA,0CACGP,EAAAsB,GAAA,KAAAnB,EAAA,oBACHoB,KAAA,YACGvB,EAAA0B,GAAA1B,EAAA,mBAAA2B,EAAAC,GACH,MAAAzB,GAAA,oBACA2B,IAAAF,EACApB,OACAH,QAAAuB,KAEK5B,EAAAsB,GAAAtB,EAAAgC,GAAAL,GAAA,4BACF,GAAA3B,EAAAsB,GAAA,KAAAnB,EAAA,eACHI,YAAA,oBACAC,OACAyoD,aAAA,QACAD,QAAA,SAEA9qD,IACAmC,QAAAL,EAAAwc,sBAEGrc,EAAA,aACHK,OACA5G,KAAA,UACA+jB,KAAA,WAEG3d,EAAAsB,GAAA,qBAAAtB,EAAAgC,GAAAhC,EAAA+Y,cAAA5Y,EAAA,KACHI,YAAA,0CACGP,EAAAsB,GAAA,KAAAnB,EAAA,oBACHoB,KAAA,YACGvB,EAAA0B,GAAA1B,EAAA,sBAAA2B,EAAAC,GACH,MAAAzB,GAAA,oBACA2B,IAAAF,EACApB,OACAH,QAAAsB,KAEK3B,EAAAsB,GAAAtB,EAAAgC,GAAAL,GAAA,4BACF,OAAA3B,EAAAsB,GAAA,KAAAnB,EAAA,OACHI,YAAA,WACGJ,EAAA,cACHwoD,IAAA,WACAnoD,OACArD,QAAA6C,EAAA6Y,gBAEA9X,OACAC,MAAAhB,EAAA,KACAiB,SAAA,SAAAC,GACAlB,EAAAoV,KAAAlU,GAEAG,WAAA,WAEG,GAAArB,EAAAsB,GAAA,KAAAnB,EAAA,aACHI,YAAA,YACAC,OACA5G,KAAA,WAEAuvD,UACAzN,YAAA17C,EAAAgC,GAAAhC,EAAAuc,gBAEAre,IACA+1C,MAAAj0C,EAAA8Z,aAEG,gBAEHzX,KACAC,GAAiBvC,SAAAsC,kBACjBvC,GAAA,KtC+tWMspD,KACA,SAAU9xD,EAAQC,EAASC,GuCjgXjCD,EAAAD,EAAAC,QAAAC,EAAA,YAKAD,EAAAiL,MAAAlL,EAAAY,EAAA,sjEAA6kE,IAAQuK,QAAA,EAAAC,SAAA,gFAAAC,SAAAC,SAAA,4tBAAAC,KAAA,0BAAAC,gBAAA,g4EAAywGC,WAAA,OvC0gXx1KsmD,KACA,SAAU/xD,EAAQC,EAASC,IwC7gXjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAEAA,GAAAwgD,eAAA,2BAAAtgD,EAAAmD,GAGA,QAAAuuD,GAAAxI,GACA,GAAAyI,GAAA3xD,EAAA0yC,eAAA5yC,EAAA2C,IAAAymD,EAAA,GACA,OAAAyI,IAAA,aAAA1vD,KAAA0vD,GAGA,QAAAC,GAAA1I,EAAAxmD,EAAAklD,GACA,GAAA3gD,GAAAvE,KAAAuE,MAAA,MACA,OAAAA,IAAAyqD,EAAAxI,GAAAjiD,EAAA,GAAA1G,QACA0G,EAAA2gD,KAAA3gD,MAAA,eACAA,GAAAyqD,EAAAxI,EAAA,QAAAtB,EAAA,OACAiK,GAZA,GAAAA,GAAA,IAeA5rD,EAAAjG,EAAAsD,QAAAH,EAAAT,MAAAklD,EAAA5nD,EAAAsD,QAAAH,EAAAT,KAAA,GACA8J,EAAAolD,EAAAzuD,EAAAT,KAAAuD,EAAA2hD,EACA,IAAAp7C,IAAAqlD,EAAA,CAIA,IAFA,GAAAC,GAAA9xD,EAAAgE,WACArC,EAAAwB,EAAAT,KAAAqvD,EAAA/xD,EAAAsD,QAAA3B,EAAA,GACAA,EAAAmwD,KACAF,EAAAjwD,EAAA,EAAAimD,EAAAmK,IAAAvlD,MACA7K,EACAimD,EAAAmK,EACAA,EAAA/xD,EAAAsD,QAAA3B,EAAA,EAGA,QACAqE,KAAAlG,EAAA2C,IAAAU,EAAAT,KAAAuD,EAAA1F,QACA+D,GAAAxE,EAAA2C,IAAAd,EAAA3B,EAAAsD,QAAA3B,GAAApB,exC2hXMyxD,KACA,SAAUtyD,EAAQC,EAASC,GyCxkXjCD,EAAAD,EAAAC,QAAAC,EAAA,YAKAD,EAAAiL,MAAAlL,EAAAY,EAAA,4XAAuZ,IAAQuK,QAAA,EAAAC,SAAA,mFAAAC,SAAAC,SAAA,mKAAAC,KAAA,iBAAAC,gBAAA,6cAAyxBC,WAAA,OzCilXlrC8mD,KACA,SAAUvyD,EAAQC,EAASC,I0CplXjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAEAA,GAAAwgD,eAAA,wBAAAtgD,EAAAmD,GAIA,QAAA+uD,GAAAC,GACA,OAAAhkD,GAAAhL,EAAAvB,GAAAwwD,EAAA,IAAsC,CACtC,GAAAngD,GAAA9D,GAAA,KAAAiyB,EAAAnY,YAAAkqC,EAAAhkD,EAAA,EACA,QAAA8D,EAAA,CAMA,MAAAmgD,GAAAngD,EAAA9O,EAAAvB,GAAA,KAEA,IADAywD,EAAAryD,EAAA0yC,eAAA5yC,EAAA2C,IAAAC,EAAAuP,EAAA,KACA,oBAAAhQ,KAAAowD,GAAA,MAAApgD,GAAA,CACA9D,GAAA8D,EAAA,MATA,CACA,MAAAmgD,EAAA,KACAA,GAAA,EACAjkD,EAAAiyB,EAAA7/B,SATA,GACA8xD,GADA3vD,EAAAS,EAAAT,KAAA09B,EAAApgC,EAAAsD,QAAAZ,GAmBA4vD,EAAA,IAAqBC,EAAA,IAAgB9J,EAAAyJ,EAAA,IAMrC,IALA,MAAAzJ,IACA6J,EAAA,IAAAC,EAAA,IACA9J,EAAAyJ,EAAA,MAGA,MAAAzJ,EAAA,CACA,GAAA9mD,GAAA06B,EAAAkf,EAAA,EAAAv3C,EAAAhE,EAAAgE,UACAwuD,GAAA,OAAAlyD,GAAAoC,EAA2BpC,GAAA0D,IAAe1D,EAE1C,IADA,GAAAiC,GAAAvC,EAAAsD,QAAAhD,GAAAG,EAAAH,GAAAoC,EAAA+lD,EAAA,IACW,CACX,GAAAgK,GAAAlwD,EAAAH,QAAAkwD,EAAA7xD,GAAAwD,EAAA1B,EAAAH,QAAAmwD,EAAA9xD,EAIA,IAHAgyD,EAAA,IAAAA,EAAAlwD,EAAAhC,QACA0D,EAAA,IAAAA,EAAA1B,EAAAhC,SACAE,EAAAqD,KAAAC,IAAA0uD,EAAAxuD,KACA1B,EAAAhC,OAAA,KACA,IAAAP,EAAA0yC,eAAA5yC,EAAA2C,IAAAnC,EAAAG,EAAA,KAAA4xD,EACA,GAAA5xD,GAAAgyD,IAAAlX,MACA,OAAAA,EAAA,CAA4B55C,EAAArB,EAAS+7B,EAAA57B,CAAa,MAAA+xD,KAElD/xD,EAGA,SAAAkB,IAAAe,GAAAf,GAAA06B,GAAAosB,GACA,OAAUziD,KAAAlG,EAAA2C,IAAAC,EAAA+lD,GACVnkD,GAAAxE,EAAA2C,IAAAd,EAAA06B,OAGAv8B,EAAAwgD,eAAA,yBAAAtgD,EAAAmD,GACA,QAAAuvD,GAAAhwD,GACA,GAAAA,EAAA1C,EAAAiG,aAAAvD,EAAA1C,EAAAgE,WAAA,WACA,IAAAb,GAAAnD,EAAAY,WAAAd,EAAA2C,IAAAC,EAAA,GAEA,IADA,KAAAT,KAAAkB,EAAAjB,UAAAiB,EAAAnD,EAAAY,WAAAd,EAAA2C,IAAAC,EAAAS,EAAAxB,IAAA,KACA,WAAAwB,EAAAnB,MAAA,UAAAmB,EAAAjB,OAAA,WAEA,QAAA5B,GAAAoC,EAAAiB,EAAAG,KAAAC,IAAA/D,EAAAgE,WAAAtB,EAAA,IAA8DpC,GAAAqD,IAAQrD,EAAA,CACtE,GAAAiC,GAAAvC,EAAAsD,QAAAhD,GAAAqyD,EAAApwD,EAAAH,QAAA,IACA,QAAAuwD,EAAA,OAA8BlK,QAAAtlD,EAAAxB,QAAA7B,EAAA2C,IAAAnC,EAAAqyD,KAI9B,GAAAtuD,GAAAkD,EAAApE,EAAAT,KAAAkwD,EAAAF,EAAAnrD,EACA,KAAAqrD,GAAAF,EAAAnrD,EAAA,KAAAlD,EAAAquD,EAAAnrD,EAAA,KAAAlD,EAAA1C,IAAAe,MAAA6E,EAAA,EACA,WACA,QAAA5F,GAAAixD,EAAAjxD,MAA0B,CAC1B,GAAA4C,GAAAmuD,EAAA/wD,EAAAe,KAAA,EACA,UAAA6B,EAAA,KACA5C,GAAA4C,EAAA5C,IAEA,OAAUqE,KAAAhG,EAAAkN,QAAApN,EAAA2C,IAAA8E,EAAAqrD,EAAAnK,QAAA,IAAAnkD,GAAA3C,KAGV7B,EAAAwgD,eAAA,0BAAAtgD,EAAAmD,GACA,QAAA0vD,GAAAnwD,GACA,GAAAA,EAAA1C,EAAAiG,aAAAvD,EAAA1C,EAAAgE,WAAA,WACA,IAAAb,GAAAnD,EAAAY,WAAAd,EAAA2C,IAAAC,EAAA,GAEA,OADA,KAAAT,KAAAkB,EAAAjB,UAAAiB,EAAAnD,EAAAY,WAAAd,EAAA2C,IAAAC,EAAAS,EAAAxB,IAAA,KACA,QAAAwB,EAAAnB,MAAA,YAAAmB,EAAAjB,OAAAL,MAAA,KAAAsB,QAAA,SAGA,GAAAoE,GAAApE,EAAAT,KAAAkwD,EAAAC,EAAAtrD,EACA,UAAAqrD,GAAA,MAAAC,EAAAtrD,EAAA,cACA,QAAA5F,GAAA4F,IAA4B,CAE5B,SADAsrD,EAAAlxD,EAAA,GACA,QACAA,EAEA,OAAUqE,KAAAlG,EAAA2C,IAAA8E,EAAAqrD,EAAA,GACVtuD,GAAAtE,EAAAkN,QAAApN,EAAA2C,IAAAd,U1CimXMmxD,KACA,SAAUpzD,EAAQC,EAASC,G2CpsXjC,GAAAmW,GAAAnW,EAAA,OACA,iBAAAmW,SAAArW,EAAAY,EAAAyV,EAAA,MACAA,EAAAwmC,SAAA78C,EAAAC,QAAAoW,EAAAwmC,OAEA38C,GAAA,mBAAAmW,GAAA,I3C6sXMg9C,KACA,SAAUrzD,EAAQC,EAASC,I4CltXjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAqCA,SAAAkzD,GAAAhzD,EAAAuF,GACAC,KAAAxF,KACAwF,KAAAD,UACAC,KAAA8gD,OAAA,KACA9gD,KAAAytD,SAAA,EACAztD,KAAA0tD,KAAA,EACA1tD,KAAAi2C,SAAAj2C,KAAAxF,GAAAkQ,UAAA,SACA1K,KAAA2tD,SAAA3tD,KAAAxF,GAAAsD,QAAAkC,KAAAi2C,SAAA/4C,MAAAnC,OAAAiF,KAAAxF,GAAAka,eAAA3Z,MAEA,IAAA8F,GAAAb,IACAxF,GAAAsG,GAAA,iBAAAd,KAAA4tD,aAAA,WAA4D/sD,EAAAu6C,mBA+E5D,QAAAyS,GAAA3uD,EAAA4uD,GAEA,MADAxzD,GAAAkQ,OAAAsjD,EAAAttD,KAAAtB,EAAAsB,MACA,GAAAtB,EAAAJ,GAAA1C,GAAA8C,EAAAsB,KAAApE,IAAA0xD,EAAAhvD,GAAA1C,GAAA0xD,EAAAttD,KAAApE,GAGA,QAAA86C,GAAA18C,EAAAS,EAAA8E,GACA,GAAAo5C,GAAA3+C,EAAAuF,QAAAguD,YACAjpC,IACA,QAAA3kB,KAAA+gD,GAAAp8B,EAAA3kB,GAAA+gD,EAAA/gD,EACA,IAAAg5C,EAAA,OAAAh5C,KAAAg5C,OACAx4B,KAAAw4B,EAAAh5C,KAAA2kB,EAAA3kB,GAAAg5C,EAAAh5C,GACA,IAAAJ,EAAA,OAAAI,KAAAJ,OACA4gB,KAAA5gB,EAAAI,KAAA2kB,EAAA3kB,GAAAJ,EAAAI,GAEA,OADA2kB,GAAAkpC,KAAAC,UAAAnpC,EAAAkpC,KAAAlpC,EAAAkpC,KAAAC,QAAAzzD,EAAAS,IACA6pB,EAGA,QAAAopC,GAAAC,GACA,sBAAAA,KACAA,EAAApxD,KAGA,QAAA+pC,GAAAqnB,EAAAC,GAcA,QAAAC,GAAA3pD,EAAAzF,GACA,GAAAqvD,EAEAA,GADA,gBAAArvD,GACA,SAAAzE,GAA8B,MAAAyE,GAAAzE,EAAA4zD,IAE9BG,EAAAx5B,eAAA91B,GACAsvD,EAAAtvD,GAEAA,EACAuvD,EAAA9pD,GAAA4pD,EAtBA,GAAAC,IACAE,GAAA,WAAsBL,EAAAM,WAAA,IACtBC,KAAA,WAAwBP,EAAAM,UAAA,IACxBE,OAAA,WAA0BR,EAAAM,UAAA,EAAAN,EAAAS,YAAA,IAC1BC,SAAA,WAA4BV,EAAAM,UAAAN,EAAAS,WAAA,OAC5BE,KAAA,WAAwBX,EAAAY,SAAA,IACxBC,IAAA,WAAuBb,EAAAY,SAAAZ,EAAArzD,OAAA,IACvB2qC,MAAA0oB,EAAAc,KACAC,IAAAf,EAAAc,KACAE,IAAAhB,EAAAnsB,OAEAotB,EAAAlB,EAAApuD,QAAAuvD,WACAd,EAAAa,KAA4Bd,CAY5B,IAAAc,EACA,OAAA3qD,KAAA2qD,KAAAt6B,eAAArwB,IACA2pD,EAAA3pD,EAAA2qD,EAAA3qD,GACA,IAAA8Q,GAAA24C,EAAApuD,QAAAwvD,SACA,IAAA/5C,EACA,OAAA9Q,KAAA8Q,KAAAuf,eAAArwB,IACA2pD,EAAA3pD,EAAA8Q,EAAA9Q,GACA,OAAA8pD,GAGA,QAAAgB,GAAAC,EAAAC,GACA,KAAAA,MAAAD,GAAA,CACA,UAAAC,EAAAC,SAAA9nD,eAAA6nD,EAAAnR,YAAAkR,EAAA,MAAAC,EACAA,KAAAnR,YAIA,QAAAqR,GAAAzB,EAAAjoD,GACAlG,KAAAmuD,aACAnuD,KAAAkG,OACAlG,KAAA6vD,QAAA,CACA,IAAA/O,GAAA9gD,KAAAxF,EAAA2zD,EAAA3zD,GAEAs1D,EAAA9vD,KAAA8vD,MAAA56C,SAAAwiC,cAAA,KACAoY,GAAA1vD,UAAA,mBACAJ,KAAA+vD,aAAA7pD,EAAA6pD,cAAA,CAGA,QADAC,GAAA9pD,EAAAmhB,KACAvsB,EAAA,EAAmBA,EAAAk1D,EAAAj1D,SAAwBD,EAAA,CAC3C,GAAAoD,GAAA4xD,EAAAhT,YAAA5nC,SAAAwiC,cAAA,OAAA5sC,EAAAklD,EAAAl1D,GACAsF,EAAA6vD,GAAAn1D,GAAAkF,KAAA+vD,aAAA,OAAAG,EACA,OAAAplD,EAAA1K,cAAA0K,EAAA1K,UAAA,IAAAA,GACAlC,EAAAkC,YACA0K,EAAAnI,OAAAmI,EAAAnI,OAAAzE,EAAAgI,EAAA4E,GACA5M,EAAA4+C,YAAA5nC,SAAA6rC,eAAAj2C,EAAAqlD,aAAAjC,EAAApjD,KACA5M,EAAAkyD,OAAAt1D,EAGA,GAAAG,GAAAT,EAAA4U,aAAA++C,EAAApuD,QAAAswD,cAAAnqD,EAAA1F,KAAA,MACAw4B,EAAA/9B,EAAA+9B,KAAAltB,EAAA7Q,EAAAoU,OAAAihD,GAAA,CACAR,GAAA/6C,MAAAikB,OAAA,KACA82B,EAAA/6C,MAAAjJ,MAAA,IAEA,IAAAykD,GAAAroB,OAAAsoB,YAAAlyD,KAAAgD,IAAA4T,SAAAu7C,KAAAC,YAAAx7C,SAAAy7C,gBAAAD,aACAE,EAAA1oB,OAAA2oB,aAAAvyD,KAAAgD,IAAA4T,SAAAu7C,KAAAK,aAAA57C,SAAAy7C,gBAAAG,eACA3C,EAAApuD,QAAAgxD,WAAA77C,SAAAu7C,MAAA3T,YAAAgT,EACA,IAAAkB,GAAAlB,EAAAz6C,wBAAA47C,EAAAD,EAAA3hD,OAAAuhD,EACAM,EAAApB,EAAAzS,aAAAyS,EAAA/jD,aAAA,EACAolD,EAAA32D,EAAAkR,eAEA,IAAAulD,EAAA,GACA,GAAAlsD,GAAAisD,EAAA3hD,OAAA2hD,EAAAllD,GACA,IADA7Q,EAAA6Q,KAAA7Q,EAAAoU,OAAA2hD,EAAAllD,KACA/G,EAAA,EACA+qD,EAAA/6C,MAAAjJ,OAAA7Q,EAAA6Q,IAAA/G,GAAA,KACAurD,GAAA,MACO,IAAAvrD,EAAA6rD,EAAA,CACPd,EAAA/6C,MAAAhQ,OAAA6rD,EAAA,OACAd,EAAA/6C,MAAAjJ,OAAA7Q,EAAAoU,OAAA2hD,EAAAllD,KAAA,IACA,IAAAnK,GAAAnH,EAAAkQ,WACAxE,GAAA1F,KAAApE,IAAAuF,EAAAvF,KACAnB,EAAAT,EAAA4U,aAAAzN,GACAmuD,EAAA/6C,MAAAikB,QAAA/9B,EAAA+9B,MAAA,KACAg4B,EAAAlB,EAAAz6C,0BAIA,GAAA+7C,GAAAJ,EAAA/3B,MAAAs3B,CAQA,IAPAa,EAAA,IACAJ,EAAA/3B,MAAA+3B,EAAAh4B,KAAAu3B,IACAT,EAAA/6C,MAAAjQ,MAAAyrD,EAAA,OACAa,GAAAJ,EAAA/3B,MAAA+3B,EAAAh4B,KAAAu3B,GAEAT,EAAA/6C,MAAAikB,QAAA/9B,EAAA+9B,KAAAo4B,GAAA,MAEAF,EAAA,OAAAG,GAAAvB,EAAAwB,WAAkDD,EAAMA,IAAAE,YACxDF,EAAAt8C,MAAAy8C,aAAAh3D,EAAAyN,QAAAwpD,eAAA,IAYA,IAVAj3D,EAAAgF,UAAAQ,KAAAiL,OAAA67B,EAAAqnB,GACAO,UAAA,SAAA7nD,EAAA6qD,GAAyC5Q,EAAA6Q,aAAA7Q,EAAAiP,aAAAlpD,EAAA6qD,IACzC1C,SAAA,SAAAnoD,GAA6Bi6C,EAAA6Q,aAAA9qD,IAC7BgoD,SAAA,WAA4B,MAAA/N,GAAA8Q,gBAC5B72D,OAAAi1D,EAAAj1D,OACAknC,MAAA,WAAyBksB,EAAAlsB,SACzBitB,KAAA,WAAwBpO,EAAAoO,QACxBhpD,UAGAioD,EAAApuD,QAAA8xD,eAAA,CACA,GAAAC,EACAt3D,GAAAsG,GAAA,OAAAd,KAAA+xD,OAAA,WAA8CD,EAAAzvD,WAAA,WAAwC8rD,EAAAlsB,SAAsB,OAC5GznC,EAAAsG,GAAA,QAAAd,KAAAw7C,QAAA,WAAgDp5C,aAAA0vD,KA+BhD,MA5BAt3D,GAAAsG,GAAA,SAAAd,KAAAgyD,SAAA,WACA,GAAAC,GAAAz3D,EAAAkR,gBAAAytC,EAAA3+C,EAAA+zB,oBAAAlZ,wBACA68C,EAAApmD,EAAAqlD,EAAArlD,IAAAmmD,EAAAnmD,IACAqmD,EAAAD,GAAAhqB,OAAAkqB,cAAAl9C,SAAAy7C,iBAAAz7C,SAAAu7C,MAAA4B,UAEA,IADA/B,IAAA6B,GAAArC,EAAAgB,cACAqB,GAAAhZ,EAAArtC,KAAAqmD,GAAAhZ,EAAA9pC,OAAA,MAAA8+C,GAAAlsB,OACA6tB,GAAA/6C,MAAAjJ,IAAAomD,EAAA,KACApC,EAAA/6C,MAAAikB,OAAAm4B,EAAAn4B,KAAAi5B,EAAAj5B,KAAA,OAGA1+B,EAAAwG,GAAAgvD,EAAA,oBAAA3xD,GACA,GAAAm0D,GAAA9C,EAAAM,EAAA3xD,EAAA0M,QAAA1M,EAAAo0D,WACAD,IAAA,MAAAA,EAAAlC,SAAkCtP,EAAA6Q,aAAAW,EAAAlC,QAA8BtP,EAAAoO,UAGhE50D,EAAAwG,GAAAgvD,EAAA,iBAAA3xD,GACA,GAAAm0D,GAAA9C,EAAAM,EAAA3xD,EAAA0M,QAAA1M,EAAAo0D,WACAD,IAAA,MAAAA,EAAAlC,SACAtP,EAAA6Q,aAAAW,EAAAlC,QACAjC,EAAApuD,QAAAyyD,uBAAA1R,EAAAoO,UAIA50D,EAAAwG,GAAAgvD,EAAA,uBACAztD,WAAA,WAA4B7H,EAAAkJ,SAAY,MAGxCpJ,EAAAwzB,OAAA5nB,EAAA,SAAA8pD,EAAA,GAAAF,EAAAwB,aACA,EAmDA,QAAAmB,GAAAj4D,EAAAknD,GACA,IAAAlnD,EAAAmR,oBAAA,MAAA+1C,EAEA,QADAhxC,MACA5V,EAAA,EAAmBA,EAAA4mD,EAAA3mD,OAAoBD,IACvC4mD,EAAA5mD,GAAA43D,mBAAAhiD,EAAAtL,KAAAs8C,EAAA5mD,GACA,OAAA4V,GAGA,QAAAiiD,GAAA3E,EAAAxzD,EAAAuF,EAAA8D,GACA,GAAAmqD,EAAA4E,MACA5E,EAAAxzD,EAAAqJ,EAAA9D,OACK,CACL,GAAA2Q,GAAAs9C,EAAAxzD,EAAAuF,EACA2Q,MAAAF,KAAAE,EAAAF,KAAA3M,GACAA,EAAA6M,IAIA,QAAAmiD,GAAAr4D,EAAAS,GACA,GAAAghC,GAAAylB,EAAAlnD,EAAAmnD,WAAA1mD,EAAA,OACA,IAAAymD,EAAA3mD,OAAA,CACA,GAAA+3D,GAAA,SAAAt4D,EAAAqJ,EAAA9D,GAEA,QAAAgzD,GAAAj4D,GACA,GAAAA,GAAAk4D,EAAAj4D,OAAA,MAAA8I,GAAA,KACA8uD,GAAAK,EAAAl4D,GAAAN,EAAAuF,EAAA,SAAA2Q,GACAA,KAAA2W,KAAAtsB,OAAA,EAAA8I,EAAA6M,GACAqiD,EAAAj4D,EAAA,KALA,GAAAk4D,GAAAP,EAAAj4D,EAAAknD,EAQAqR,GAAA,GAIA,OAFAD,GAAAF,OAAA,EACAE,EAAAJ,mBAAA,EACAI,EACK,OAAA72B,EAAAzhC,EAAAy4D,UAAAz4D,EAAAkQ,YAAA,cACL,SAAAlQ,GAA2B,MAAAF,GAAA0zD,KAAAkF,SAAA14D,GAAsCyhC,WAC5D3hC,EAAA0zD,KAAAmF,QACL,SAAA34D,EAAAuF,GAAoC,MAAAzF,GAAA0zD,KAAAmF,QAAA34D,EAAAuF,IAEpC,aA/XA,GAAAkwD,GAAA,kBACAC,EAAA,wBAIA51D,GAAA84D,SAAA,SAAA54D,EAAA64D,EAAAtzD,GACA,IAAAszD,EAAA,MAAA74D,GAAA44D,SAAArzD,EACAA,MAAA6yD,QAAAS,EAAAT,OAAA,EACA,IAAAU,IAAmBtF,KAAAqF,EACnB,IAAAtzD,EAAA,OAAAI,KAAAJ,GAAAuzD,EAAAnzD,GAAAJ,EAAAI,EACA,OAAA3F,GAAA44D,SAAAE,IAGAh5D,EAAAiH,gBAAA,oBAAAxB,GACAA,EAAAm3C,EAAAl3C,UAAA0K,UAAA,SAAA3K,EACA,IAAAk3B,GAAAj3B,KAAApF,gBACA,MAAAq8B,EAAAl8B,OAAA,IAIA,GAAAiF,KAAA2L,oBAAA,CACA,IAAA5L,EAAAiuD,KAAA0E,kBAAA,MAEA,QAAA53D,GAAA,EAAqBA,EAAAm8B,EAAAl8B,OAAuBD,IAC5C,GAAAm8B,EAAAn8B,GAAAI,KAAAgC,MAAA+5B,EAAAn8B,GAAAuC,OAAAH,KAAA,OAGA8C,KAAAxE,MAAA+3D,kBAAAvzD,KAAAxE,MAAA+3D,iBAAAtxB,OACA,IAAAksB,GAAAnuD,KAAAxE,MAAA+3D,iBAAA,GAAA/F,GAAAxtD,KAAAD,EACAouD,GAAApuD,QAAAiuD,OAEA1zD,EAAAwzB,OAAA9tB,KAAA,kBAAAA,MACAmuD,EAAAxtD,QAAA,MAgBA,IAAA6yD,GAAAtrB,OAAAsrB,uBAAA,SAAAt/B,GACA,MAAA7xB,YAAA6xB,EAAA,SAEAu/B,EAAAvrB,OAAAurB,sBAAArxD,YAEAorD,GAAAhsD,WACAygC,MAAA,WACAjiC,KAAAm7C,WACAn7C,KAAAxF,GAAAgB,MAAA+3D,iBAAA,KACAvzD,KAAA0tD,KAAA,KACA1tD,KAAAxF,GAAAgI,IAAA,iBAAAxC,KAAA4tD,cAEA5tD,KAAA8gD,QAAA9gD,KAAAkG,MAAA5L,EAAAwzB,OAAA9tB,KAAAkG,KAAA,SACAlG,KAAA8gD,QAAA9gD,KAAA8gD,OAAA7e,QACA3nC,EAAAwzB,OAAA9tB,KAAAxF,GAAA,gBAAAwF,KAAAxF,MAGA2gD,OAAA,WACA,MAAAn7C,MAAAxF,GAAAgB,MAAA+3D,kBAAAvzD,MAGAkvD,KAAA,SAAAhpD,EAAApL,GACA,GAAAqzD,GAAAjoD,EAAAmhB,KAAAvsB,EACAqzD,GAAAH,KAAAG,EAAAH,KAAAhuD,KAAAxF,GAAA0L,EAAAioD,GACAnuD,KAAAxF,GAAA4C,aAAA8wD,EAAAC,KAAA3tD,MAAA0F,EAAA1F,KACA2tD,EAAArvD,IAAAoH,EAAApH,GAAA,YACAxE,EAAAwzB,OAAA5nB,EAAA,OAAAioD,GACAnuD,KAAAiiC,SAGAmZ,eAAA,WACAp7C,KAAAytD,WACAgG,EAAAzzD,KAAAytD,UACAztD,KAAAytD,SAAA,EAGA,IAAAxyD,GAAA+E,KAAAxF,GAAAkQ,YAAAxN,EAAA8C,KAAAxF,GAAAsD,QAAA7C,EAAAiC,KACA,IAAAjC,EAAAiC,MAAA8C,KAAAi2C,SAAA/4C,QAAAnC,OAAAE,EAAAmB,IAAA4D,KAAA2tD,SAAA3tD,KAAAi2C,SAAA75C,IACAnB,EAAAmB,GAAA4D,KAAAi2C,SAAA75C,IAAA4D,KAAAxF,GAAAmR,qBACA1Q,EAAAmB,IAAA4D,KAAAD,QAAA2zD,gBAAAj3D,KAAAS,EAAAP,OAAA1B,EAAAmB,GAAA,IACA4D,KAAAiiC,YACO,CACP,GAAAphC,GAAAb,IACAA,MAAAytD,SAAA+F,EAAA,WAA0D3yD,EAAAF,WAC1DX,KAAA8gD,QAAA9gD,KAAA8gD,OAAA6S,YAIAhzD,OAAA,SAAAorC,GACA,SAAA/rC,KAAA0tD,KAAA,CACA,GAAA7sD,GAAAb,KAAA4zD,IAAA5zD,KAAA0tD,IACAiF,GAAA3yD,KAAAD,QAAAiuD,KAAAhuD,KAAAxF,GAAAwF,KAAAD,QAAA,SAAAmG,GACArF,EAAA6sD,MAAAkG,GAAA/yD,EAAAgzD,aAAA3tD,EAAA6lC,OAIA8nB,aAAA,SAAA3tD,EAAA6lC,GACA/rC,KAAAkG,MAAA5L,EAAAwzB,OAAA9tB,KAAAkG,KAAA,SAEA,IAAA2pD,GAAA7vD,KAAA8gD,QAAA9gD,KAAA8gD,OAAA+O,QAAA9jB,GAAA/rC,KAAAD,QAAA+zD,cACA9zD,MAAA8gD,QAAA9gD,KAAA8gD,OAAA7e,QAEA/7B,GAAAlG,KAAAkG,MAAA2nD,EAAA7tD,KAAAkG,UACAlG,KAAAkG,OAEAA,KAAAmhB,KAAAtsB,SACA80D,GAAA,GAAA3pD,EAAAmhB,KAAAtsB,OACAiF,KAAAkvD,KAAAhpD,EAAA,IAEAlG,KAAA8gD,OAAA,GAAA8O,GAAA5vD,KAAAkG,GACA5L,EAAAwzB,OAAA5nB,EAAA,cAiLA0pD,EAAApuD,WACAygC,MAAA,WACA,GAAAjiC,KAAAmuD,WAAArN,QAAA9gD,KAAA,CACAA,KAAAmuD,WAAArN,OAAA,KACA9gD,KAAA8vD,MAAAvR,WAAAC,YAAAx+C,KAAA8vD,OACA9vD,KAAAmuD,WAAA3zD,GAAA4E,aAAAY,KAAAiL,OAEA,IAAAzQ,GAAAwF,KAAAmuD,WAAA3zD,EACAwF,MAAAmuD,WAAApuD,QAAA8xD,iBACAr3D,EAAAgI,IAAA,OAAAxC,KAAA+xD,QACAv3D,EAAAgI,IAAA,QAAAxC,KAAAw7C,UAEAhhD,EAAAgI,IAAA,SAAAxC,KAAAgyD,YAGA2B,QAAA,WACA3zD,KAAAmuD,WAAA3zD,GAAA4E,aAAAY,KAAAiL,OACA,IAAA61C,GAAA9gD,IACAA,MAAAiL,QAAqBy6B,MAAA,WAAmBob,EAAA+O,QAAA,IACxC7vD,KAAAmuD,WAAA3zD,GAAAgF,UAAAQ,KAAAiL,SAGAikD,KAAA,WACAlvD,KAAAmuD,WAAAe,KAAAlvD,KAAAkG,KAAAlG,KAAA+vD,eAGA4B,aAAA,SAAA72D,EAAA42D,GAKA,GAJA52D,GAAAkF,KAAAkG,KAAAmhB,KAAAtsB,OACAD,EAAA42D,EAAA1xD,KAAAkG,KAAAmhB,KAAAtsB,OAAA,IACAD,EAAA,IACAA,EAAA42D,EAAA,EAAA1xD,KAAAkG,KAAAmhB,KAAAtsB,OAAA,GACAiF,KAAA+vD,cAAAj1D,EAAA,CACA,GAAAu2D,GAAArxD,KAAA8vD,MAAAiE,WAAA/zD,KAAA+vD,aACAsB,GAAAjxD,UAAAixD,EAAAjxD,UAAAsR,QAAA,IAAAw+C,EAAA,IACAmB,EAAArxD,KAAA8vD,MAAAiE,WAAA/zD,KAAA+vD,aAAAj1D,GACAu2D,EAAAjxD,WAAA,IAAA8vD,EACAmB,EAAA2C,UAAAh0D,KAAA8vD,MAAAuC,UACAryD,KAAA8vD,MAAAuC,UAAAhB,EAAA2C,UAAA,EACA3C,EAAA2C,UAAA3C,EAAAP,aAAA9wD,KAAA8vD,MAAAuC,UAAAryD,KAAA8vD,MAAA/jD,eACA/L,KAAA8vD,MAAAuC,UAAAhB,EAAA2C,UAAA3C,EAAAP,aAAA9wD,KAAA8vD,MAAA/jD,aAAA,GACAzR,EAAAwzB,OAAA9tB,KAAAkG,KAAA,SAAAlG,KAAAkG,KAAAmhB,KAAArnB,KAAA+vD,cAAAsB,KAGAO,aAAA,WACA,MAAAtzD,MAAAsrB,MAAA5pB,KAAA8vD,MAAA/jD,aAAA/L,KAAA8vD,MAAAwB,WAAAR,eAAA,IAgDAx2D,EAAAwgD,eAAA,eACAmT,QAAA4E,IAGAv4D,EAAAwgD,eAAA,2BAAAtgD,EAAAuF,GACA,GAAA+K,GAAAtQ,EAAAkQ,YAAAoH,EAAAtX,EAAAY,WAAA0P,GACAhM,EAAAxE,EAAA2C,IAAA6N,EAAA5N,KAAA4U,EAAA3V,IACA,IAAA2V,EAAApV,QAAA,KAAAD,KAAAqV,EAAApV,OAAAoV,EAAApV,OAAA3B,OAAA,IACA,GAAAk5D,GAAAniD,EAAApV,OAAA8D,EAAAlG,EAAA2C,IAAA6N,EAAA5N,KAAA4U,EAAAnU,WAEA,IAAAs2D,GAAA,GAAAzzD,EAAA1B,CAGA,QADA2N,MACA3R,EAAA,EAAmBA,EAAAiF,EAAAk8B,MAAAlhC,OAA0BD,IAAA,CAC7C,GAAAgO,GAAA/I,EAAAk8B,MAAAnhC,EACAgO,GAAAzM,MAAA,EAAA43D,EAAAl5D,SAAAk5D,GACAxnD,EAAArH,KAAA0D,GAGA,GAAA2D,EAAA1R,OAAA,OAA8BssB,KAAA5a,EAAAjM,OAAA1B,QAG9BxE,EAAAmF,SAAAy0D,aAAA55D,EAAA84D,QAEA,IAAAlS,IACA8M,KAAA1zD,EAAA0zD,KAAApM,KACAkS,gBAAA,EACAzD,eAAA,EACAqD,gBAAA,mBACA7B,gBAAA,EACAW,uBAAA,EACAzB,UAAA,KACAzB,WAAA,KACAC,UAAA,KAGAj1D,GAAA0E,aAAA,uB5C6tXMm1D,KACA,SAAUj6D,EAAQwI,EAAqBtI,GAE7C,YACqB,IAAIsV,GAA8DtV,EAAoB,QAClFuV,EAAsEvV,EAAoByM,EAAE6I,GAC5F0kD,EAA+Ch6D,EAAoB,QACnEyV,EAAsCzV,EAAoB,QAC1D0V,EAA8C1V,EAAoByM,EAAEgJ,GACpEwkD,EAAqFj6D,EAAoB,QACzGk6D,EAAyDl6D,EAAoB,QAC7Em6D,EAAuEn6D,EAAoB,QAC3Fo6D,EAAqCp6D,EAAoB,QACzDq6D,EAAkDr6D,EAAoB,QACtEs6D,EAAqDt6D,EAAoB,O6C5lYlGsI,GAAA,G7CkqYEwD,KAAM,WACJ,OACEyuD,gBACAC,S6ChqYN,E7CiqYMC,qBACAC,Y6ChqYN,G7CiqYMC,Y6ChqYN,G7CiqYMC,YACAC,W6ChqYN,E7CiqYMC,OACEvwD,K6ChqYRwwD,UAAA,EAAA73C,QAAA,SAAAsuC,QACA,SAAArtD,IAAA,EAAA+C,IAAA,EAAAgc,QAAA,UAAAsuC,QAEA,S7C8pYQ/mD,Q6C7pYRswD,UAAA,EAAA73C,QAAA,SAAAsuC,QACA,SAAArtD,IAAA,EAAA+e,QAAA,OAAAsuC,QAEA,S7C2pYQ3kD,c6C1pYRkuD,UAAA,EAAA73C,QAAA,SAAAsuC,QACA,SAAArtD,IAAA,EAAA+e,QAAA,OAAAsuC,QAGA,U7CwpYMwJ,YAAY,EACZ77C,QAAQ,EACR87C,Y6CvpYN,G7CwpYMC,a6CvpYN,G7CwpYMC,gB6CvpYN,G7CwpYM75C,a6CvpYN04C,EAAA,E7CwpYMz4C,YAAay4C,EAAmE,E6CtpYtF,K7CypYEoB,QAAS,WACPx1D,KAAKy1D,iBAAiBz1D,K6CvpY1B40D,WAEAxuD,QAAAuJ,K7CypYI+lD,iBAAkB,WAChB11D,KAAKuZ,Q6CxpYX,E7CypYMvZ,KAAKo1D,Y6CxpYX,G7C0pYIO,oBAAqB,SAA6B12D,GAChDe,KAAK40D,S6CxpYX31D,E7CypYMe,KAAKy1D,iBAAiBz1D,K6CxpY5B40D,W7C0pYIa,iBAAkB,SAA0BG,G6CxpYhD,GAAA1lD,GAAAlQ,K7C2pYUqQ,EAAM+jD,EAA8D,EAAI,kB6C1pYlFwB,C7C2pYM9lD,GAA4C5F,EAAEmU,IAAIhO,GAAKG,KAAK,SAAUC,GAChEA,EAASvK,KAAKkX,MAAQg3C,EAA6D,IACrFlkD,EAAMykD,aAAelkD,EAASvK,K6C1pYxCwK,S7C4pYS,SAAUD,OAEfolD,UAAW,SAAmBC,EAAKvnD,GACjC,MAAOunD,G6C1pYbC,S7C4pYIC,UAAW,SAAmBpyD,EAAOkyD,GACnC,MAAOA,GAAIp3D,M6C1pYjBkF,G7C4pYIqyD,WAAY,SAAoBzxD,EAAOsxD,GAErC3lD,QAAQC,I6C1pYd0lD,G7C2pYM91D,KAAKk2D,eAAe,GAAIzB,GAAiE,E6C1pY/FqB,I7C2pYM91D,KAAKuZ,Q6C1pYX,E7C2pYMvZ,KAAKo1D,Y6C1pYX,E7C2pYMp1D,KAAKm2D,MAAMC,Y6C1pYjBl4C,oB7C4pYIm4C,aAAc,SAAsB7xD,EAAOsxD,GAEzC91D,KAAKs1D,aAAeQ,E6C1pY1BnxD,G7C2pYM3E,KAAKu1D,gBAAkBO,E6C1pY7BjxD,M7C2pYM7E,KAAKq1D,YAAc,YAAsDr1D,K6C1pY/Eu1D,gBAAA,M7C2pYMv1D,KAAKm2D,MAAM5vD,Q6C1pYjBF,Q7C4pYIiwD,YAAa,W6C1pYjB,GAAAp5C,GAAAld,K7C8pYUqQ,EAAM+jD,EAA8D,EAAI,aAAep0D,K6C5pYjGs1D,Y7C6pYMxlD,GAA4C5F,EAAEikC,OAAO99B,GAAKG,KAAK,SAAUC,GACnEA,EAASvK,KAAKkX,MAAQg3C,EAA6D,GACrFl3C,EAAOu4C,iBAAiBv4C,E6C5pYlC03C,U7C6pYU13C,EAAOq5C,UACLj5C,QAAS,UAA0CJ,E6C5pY/Dq4C,gB7C6pYY/4D,K6C3pYZ,a7C6pYmBiU,EAASvK,KAAKkX,MAAQg3C,EAA6D,GAC5Fl3C,EAAOG,QAAQE,OACb1Y,M6C5pYZ,O7C6pYYyY,QAAS,GAAK7M,EAASvK,K6C3pYnCqX,S7C8pYS,SAAU9M,GACXyM,EAAOq5C,SAASh5C,MAAM,SAAyCL,E6C5pYvEq4C,oB7C+pYIiB,OAAQ,WACN,GAAI31D,G6C5pYVb,K7C6pYUjF,EAAS8F,EAAKg0D,kB6C5pYxB95D,O7C6pYU8T,E6C5pYV,E7C6pYMhO,GAAKm0D,SAAWn0D,EAAKm0D,SAAS5tC,OAAOvmB,E6C5pY3Cg0D,kB7C6pYM,KAAK,GAAI/5D,GAAI,EAAGA,EAAIC,EAAQD,IAC1B+T,GAAOhO,EAAKg0D,kBAAkB/5D,GAAGY,K6C5pYzC,G7C8pYMmF,GAAK01D,SAASh5C,MAAM,M6C5pY1B1O,G7C6pYMhO,EAAKg0D,sBAEP4B,QAAS,SAAiBX,EAAKvnD,EAAQmoD,GACrC,MAAkB,KAAdA,E6C3pYV,U7C8pYaA,EAAUhlD,QAAQ,I6C5pY/B,Q7C8pYIilD,sBAAuB,SAA+B13D,GACpDe,KAAK60D,kB6C5pYX51D,G7C8pYI23D,SAAU,WAER52D,KAAKo1D,Y6C5pYX,E7C6pYMp1D,KAAKy1D,iBAAiBz1D,K6C5pY5B40D,W7C8pYIiC,gBAAiB,WAEf72D,KAAK40D,S6C5pYX,E7C6pYM50D,KAAKy1D,iBAAiBz1D,K6C5pY5B40D,Y7C8pYKx6D,EAAoBU,EAAE05D,EAAuD,I6CzpYlF,oB7C0pYEn1C,UACEnZ,KAAM,WACJ,GAAIrF,G6CzpYVb,I7C0pYM,OAAOa,GAAKi2D,aAAaC,OAAO,SAAUC,GAExC,IAAK,GADDC,I6CzpYZ,E7C0pYiBn8D,EAAI,EAAGA,EAAI+F,EAAKm0D,SAASj6D,OAAQD,IACxC,GAAIk8D,EAAEt7D,OAASmF,EAAKm0D,SAASl6D,GAAGY,K6CzpY1C,C7C0pYYu7D,G6CzpYZ,CACA,O7C4pYQ,IAAKA,GACCD,EAAEjB,QAAQn5D,QAAQiE,EAAKi0D,c6CzpYrC,IAAAkC,EAAAt7D,KAAAkB,QAAAiE,EAAAk0D,cACA,GAAAiC,EAAAjB,QAAAn5D,QAAAiE,EAAAk0D,cACA,G7CwpYY,M6CtpYZiC,O7C4pYEE,Y6CrpYFC,WAAA9C,EAAA,EACA+C,OAAA9C,EAAA,EACA+C,YAAA9C,EAAA,EAEA+C,QAAA5C,EAAA,K7C2pYM6C,KACA,SAAUr9D,EAAQC,EAASC,G8C33YjCF,EAAAC,SAAkB4L,QAAA3L,EAAA,QAAAo9D,YAAA,I9Ci4YZC,KACA,SAAUv9D,EAAQwI,EAAqBtI,GAE7C,Y+Cp4YA,IAAAuI,GAAA,WAA0B,GAAAC,GAAA5C,KAAa6C,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CACjE,OAAAE,GAAA,OACAI,YAAA,mBACGJ,EAAA,WACHwoD,IAAA,UACAnoD,OACArG,KAAA6F,EAAAyyD,aAEAv0D,IACAyF,QAAA3D,EAAA0zD,eAEG1zD,EAAAsB,GAAA,KAAAnB,EAAA,cACHK,OACA1H,KAAA,uBAEGqH,EAAA,OACHqB,aACA1I,KAAA,OACA2I,QAAA,SACAT,OAAAhB,EAAAwyD,WACAnxD,WAAA,kBAEGlB,EAAA,OACHI,YAAA,eACGJ,EAAA,mBAAAA,EAAA,aACHK,OACA5G,KAAA,WAEAsE,IACA+1C,MAAA,SAAAD,GACAA,EAAAyU,kBACAzoD,EAAA8yD,iBAAA9e,OAGGh0C,EAAAsB,GAAA,UAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,aACHK,OACA5G,KAAA,WAEAsE,IACA+1C,MAAA,SAAAD,GACAA,EAAAyU,kBACAzoD,EAAAi0D,gBAAAjgB,OAGGh0C,EAAAsB,GAAA,cAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,OACHI,YAAA,mBACGJ,EAAA,kBAAAH,EAAAsB,GAAA,KAAAnB,EAAA,YACHwoD,IAAA,gBACAmM,aACA5yD,MAAA,OAEA1B,OACA8C,KAAAtD,EAAA+xD,aACAgD,OAAA,IAEA72D,IACA82D,mBAAAh1D,EAAA+zD,yBAEG5zD,EAAA,mBACHK,OACA5G,KAAA,YACAsI,MAAA,QAEGlC,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAjD,KAAA,KACAsrD,MAAA,KACA3mD,MAAA,SAEGlC,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAjD,KAAA,QACAsrD,MAAA,KACAoM,SAAA,GACA/yD,MAAA,SAEGlC,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAjD,KAAA,MACAsrD,MAAA,KACAoM,SAAA,GACA/yD,MAAA,MACA+wD,UAAAjzD,EAAA6zD,WAEG7zD,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAjD,KAAA,QACAsrD,MAAA,KACAoM,SAAA,GACA/yD,MAAA,SAEGlC,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAjD,KAAA,YACAsrD,MAAA,MACAoM,SAAA,GACA/yD,MAAA,SAEGlC,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAjD,KAAA,WACAsrD,MAAA,MACAoM,SAAA,GACA/yD,MAAA,SAEGlC,EAAAsB,GAAA,KAAAnB,EAAA,mBACHK,OACAqoD,MAAA,KACA3mD,MAAA,MACAgzD,MAAA,SAEAC,YAAAn1D,EAAAo1D,KACAtzD,IAAA,UACAwvB,GAAA,SAAA1D,GACA,OAAAztB,EAAA,aACAK,OACAmd,KAAA,SAEAzf,IACA+1C,MAAA,SAAAD,GACAA,EAAAyU,kBACAzoD,EAAAqzD,WAAAzlC,EAAAynC,OAAAznC,EAAAslC,SAGSlzD,EAAAsB,GAAA,sBAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,aACTK,OACAmd,KAAA,QACA/jB,KAAA,UAEAsE,IACA+1C,MAAA,SAAAD,GACAA,EAAAyU,kBACAzoD,EAAAyzD,aAAA7lC,EAAAynC,OAAAznC,EAAAslC,SAGSlzD,EAAAsB,GAAA,8BAGN,GAAAtB,EAAAsB,GAAA,KAAAnB,EAAA,OACHI,YAAA,eACGJ,EAAA,iBACHK,OACA80D,OAAA,oBACAC,eAAAv1D,EAAAgyD,SACAwD,MAAA,KAEAt3D,IACAu3D,iBAAAz1D,EAAA+yD,wBAEG,SAAA/yD,EAAAsB,GAAA,KAAAnB,EAAA,cACHK,OACA1H,KAAA,uBAEGqH,EAAA,gBACHqB,aACA1I,KAAA,OACA2I,QAAA,SACAT,MAAAhB,EAAA,WACAqB,WAAA,eAEAsnD,IAAA,cACAnoD,OACAmW,OAAA3W,EAAA2W,QAEAzY,IACAw3D,WAAA11D,EAAAg0D,aAEG,QAEH3xD,KACAC,GAAiBvC,SAAAsC,kBACjBvC,GAAA,K/Cy4YM61D,KACA,SAAUr+D,EAAQC,EAASC,GgDrjZjC,GAAAo+D,GAAAp+D,EAAA,QACAq+D,EAAAD,EAAAj6C,OAAAi6C,EAAAj6C,MAAuCm6C,UAAAn6C,KAAAm6C,WACvCx+D,GAAAC,QAAA,SAAAw+D,GACA,MAAAF,GAAAC,UAAA9zC,MAAA6zC,EAAAhxC,ahD6jZMmxC,KACA,SAAU1+D,EAAQC,EAASC,GiDjkZjCD,EAAAD,EAAAC,QAAAC,EAAA,YAKAD,EAAAiL,MAAAlL,EAAAY,EAAA,2XAAkZ,IAAQuK,QAAA,EAAAC,SAAA,4EAAAC,SAAAC,SAAA,wIAAAC,KAAA,sBAAAC,gBAAA,6bAA0uBC,WAAA,OjD0kZ9nCkzD,KACA,SAAU3+D,EAAQC,GkDhlZxB,GAAAmnB,MAAiBA,QAEjBpnB,GAAAC,QAAA4d,MAAAsJ,SAAA,SAAAvK,GACA,wBAAAwK,EAAAkB,KAAA1L,KlDwlZMgiD,KACA,SAAU5+D,EAAQC,EAASC,ImDzlZjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAEAA,GAAAy+D,qBAAA,0BAAAt9D,GACA,MAAAA,GAAAgqD,mBAAAhqD,EAAA4qD,iBACC,SAAA7rD,EAAAmD,GACD,GAAAlC,GAAAjB,EAAA2qD,UAAAxnD,GAAAmvD,EAAArxD,EAAAgqD,kBAAAsH,EAAAtxD,EAAA4qD,eACA,IAAAyG,GAAAC,EAAA,CAIA,OADA9J,GAFA/lD,EAAAS,EAAAT,KAAA09B,EAAApgC,EAAAsD,QAAAZ,GAGAyL,EAAAhL,EAAAvB,GAAAwwD,EAAA,IAAoC,CACpC,GAAAngD,GAAA9D,GAAA,KAAAiyB,EAAAnY,YAAAqqC,EAAAnkD,EAAA,EACA,QAAA8D,EAAA,CAMA,MAAAmgD,GAAAngD,EAAA9O,EAAAvB,GAAA,MACA,cAAAK,KAAAjC,EAAA0yC,eAAA5yC,EAAA2C,IAAAC,EAAAuP,EAAA,OACA,GAAAA,GAAAmuB,EAAAv+B,MAAAoQ,EAAAsgD,EAAAhyD,OAAA0R,IAAAsgD,IACA,UAAAtwD,KAAAjC,EAAA0yC,eAAA5yC,EAAA2C,IAAAC,EAAAuP,MAAA,CACAw2C,EAAAx2C,EAAAqgD,EAAA/xD,MACA,OAEA4N,EAAA8D,EAAA,MAbA,CACA,MAAAmgD,EAAA,MACAA,GAAA,EACAjkD,EAAAiyB,EAAA7/B,QAaA,GAAAoB,GAAA06B,EAAAuE,EAAA,EAAA58B,EAAAhE,EAAAgE,UACAwuD,GAAA,OAAAlyD,GAAAoC,EAA2BpC,GAAA0D,IAAe1D,EAE1C,IADA,GAAAiC,GAAAvC,EAAAsD,QAAAhD,GAAAG,EAAAH,GAAAoC,EAAA+lD,EAAA,IACW,CACX,GAAAgK,GAAAlwD,EAAAH,QAAAkwD,EAAA7xD,GAAAwD,EAAA1B,EAAAH,QAAAmwD,EAAA9xD,EAIA,IAHAgyD,EAAA,IAAAA,EAAAlwD,EAAAhC,QACA0D,EAAA,IAAAA,EAAA1B,EAAAhC,SACAE,EAAAqD,KAAAC,IAAA0uD,EAAAxuD,KACA1B,EAAAhC,OAAA,KACA,IAAAE,GAAAgyD,IAAA7xB,MACA,OAAAA,EAAA,CAA0Bj/B,EAAArB,EAAS+7B,EAAA57B,CAAa,MAAA+xD,KAChD/xD,EAGA,SAAAkB,IAAAe,GAAAf,GAAA06B,GAAAosB,GACA,OAAUziD,KAAAlG,EAAA2C,IAAAC,EAAA+lD,GACVnkD,GAAAxE,EAAA2C,IAAAd,EAAA06B,UnDsmZMmiC,OACA,SAAU9+D,EAAQC,EAASC,IoD3pZjC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GACD,YAGA,SAAA2+D,GAAA/uD,EAAAC,GAAwB,MAAAD,GAAAhN,MAAAiN,EAAAjN,MAAAgN,EAAA9N,IAAA+N,EAAA/N,GAKxB,QAAA88D,GAAArqD,GACAsqD,EAAA/zD,KAAAyJ,GACAsqD,EAAAp+D,OAAA,IAAAo+D,EAAAjxD,QAEA,QAAAkxD,GAAAvqD,GACA,IAAAsqD,EAAAp+D,OAAA,MAAAm+D,GAAArqD,EACAsqD,KAAAp+D,OAAA,IAAA8T,EAEA,QAAAwqD,GAAAxyD,GAA2B,MAAAsyD,KAAAp+D,QAAA8L,EAAAvI,KAAAC,IAAAsI,EAAA,WAC3B,QAAAyyD,KAAmE,MAAzCH,GAAAp+D,OAAA,GAAAo+D,EAAAvrD,MAAyCyrD,IAInE,QAAAE,GAAA/+D,EAAAgG,EAAA1B,EAAA06D,EAAAz8D,GACA,MAAAA,MAAAvC,EAAAwP,SAAAxJ,EAAA1B,IAEA06D,GAAAC,KAAAj/D,OAAAy+D,EAAAz4D,EAAAi5D,EAAAx+D,MAAAT,EAAAk/D,QAAAD,EAAAE,KACAP,EAAAr8D,GAEAm8D,EAAAn8D,GACAvC,EAAA4C,aAAA,GAAAoD,EAAA1B,EAAA,WAEA26D,EAAAD,GAA6Bh/D,KAAAS,IAAAuF,EAAAm5D,IAAAn/D,EAAAo/D,oBAC7B,KAKA,QAAAC,GAAAr/D,EAAAS,EAAAwM,GACA,MAAAjN,GAAAkU,SAAAzT,EAAAwM,EAAA,WAGA,QAAAqyD,GAAAt/D,EAAAS,EAAAwM,GACA,MAAAjN,GAAAkU,SAAAzT,EAAAwM,EAAA,WAGA,QAAAsyD,GAAAv/D,EAAAS,EAAAwM,GACA,MAAAjN,GAAA0O,SAAAjO,EAAAwM,EAAA,OAAAjN,EAAAgN,IAAAlK,IAAA08D,YAGA,QAAAC,GAAAz/D,EAAAS,EAAAwM,GACA,MAAAjN,GAAA0O,SAAAjO,EAAAwM,EAAA,OAAAjN,EAAAgN,IAAAlK,IAAA08D,YAGA,QAAAE,GAAA1/D,EAAAS,EAAAwM,GAIA,IAHA,GAAA0yD,GAAAl/D,EAAAiC,OAAA1C,EAAAsD,QAAAq8D,GACAC,EAAA,KAAA39D,KAAAgL,EAAA,EAAAvK,EAAAb,MAAA,EAAApB,EAAAmB,IAAAc,EAAAb,MAAApB,EAAAmB,KACAi+D,EAAA7/D,EAAAiG,YAAA65D,EAAA9/D,EAAAgE,aACW,CAEX,IADA27D,GAAA1yD,GACA4yD,GAAAF,EAAAG,EACA,MAAA9/D,GAAAkN,QAAAzK,EAAAk9D,EAAA1yD,IAAA,UACAvK,GAAA1C,EAAAsD,QAAAq8D,EAEA,IADA,KAAA19D,KAAAS,GACAk9D,GAAA,MACA,IAAAA,EAAA,MAAAn9D,GAAAk9D,EAAA,IAIA,QAAAI,GAAA//D,EAAAS,EAAAwM,GAGA,IAFA,GAAAvK,GAAAjC,EAAAiC,KAAAd,EAAAnB,EAAAmB,GACAW,EAAAvC,EAAAsD,QAAA7C,EAAAiC,MAAAs9D,GAAA,IACW,CACX,GAAAz7D,GAAAhC,EAAAJ,OAAAP,GAAAqL,EAAA,QACA,IAAA1I,EAAA,CAQA,GAAAy7D,GAAA,QAAA/9D,KAAAsC,GAAA,MAAA9B,GAAAC,EAAAd,GAAAqL,EAAA,OACA+yD,OAAA,KAAA/9D,KAAAsC,IACA3C,GAAAqL,MAVA,CACA,GAAAvK,IAAAuK,EAAA,EAAAjN,EAAAiG,YAAAjG,EAAAgE,YAAA,MAAAvB,GAAAC,EAAAd,EAEA,IADAW,EAAAvC,EAAAsD,QAAAZ,EAAAuK,IACA,KAAAhL,KAAAM,GAAA,MAAAE,GAAAC,EAAAd,EACAc,IAAAuK,EACArL,EAAAqL,EAAA,EAAA1K,EAAAhC,OAAA,IASA,QAAA0/D,GAAAjgE,EAAAS,EAAAwM,GACA,GAAAm3C,EACA,IAAApkD,EAAA2yC,sBAAAyR,EAAApkD,EAAA2yC,oBAAAlyC,GAAuEy/D,QAAA,MACvE9b,EAAAn9C,QAAAm9C,EAAAh0C,QAAA,OAAAnD,EACA,MAAAA,GAAA,EAAAxK,EAAA2hD,EAAA9/C,GAAA5B,KAAA0hD,EAAA9/C,GAAA1C,GAAA,GAAAwiD,EAAA9/C,EAEA,QAAAitC,IAAA,GAA2BA,GAAA,GAC3B,GAAAj6B,GAAAtX,EAAAY,WAAAH,GACAkxB,EAAAlvB,EAAAhC,EAAAiC,KAAAuK,EAAA,EAAAqK,EAAAnU,MAAAmU,EAAA3V,IACA,MAAA4vC,GAAAtkC,EAAA,GAAAqK,EAAA3V,KAAAlB,EAAAmB,KAAA,KAAAK,KAAAqV,EAAApV,QAKA,MAAAyvB,EAJA,IAAAnvB,GAAAxC,EAAAkU,SAAAyd,EAAA1kB,EAAA,OACA,IAAAwxD,EAAA9sC,EAAAnvB,GAAA,MAAA/B,EACAA,GAAA+B,GASA,QAAA29D,GAAAngE,EAAAogE,GACA,GAAAC,GAAArgE,EAAAgB,MAAAs/D,WACA,OAAAD,IACAE,EAAAvgE,GACA,KAAAqgE,GAAA,EAAA33C,OAAA23C,IAFAD,EAAA,OAKA,QAAAI,GAAAvlD,GACA,GAAAnC,GAAA,gBAAAmC,GAAA,SAAAjb,GAAmDA,EAAAoO,YAAA6M,IAAuBA,CAC1E,iBAAAjb,GACA,GAAAslC,GAAA66B,EAAAngE,EACA8Y,GAAA9Y,EACA,QAAAM,GAAA,EAAqBA,EAAAglC,IAAYhlC,EAAAwY,EAAA9Y,IAIjC,QAAAygE,GAAAzgE,EAAAS,EAAAigE,EAAAzzD,GACA,GAAAq4B,GAAA66B,EAAAngE,EACAslC,GAAA,IAAqBr4B,KAAYq4B,KACjC,QAAAhlC,GAAA,EAAmBA,EAAAglC,IAAYhlC,EAAA,CAC/B,GAAAkC,GAAAk+D,EAAA1gE,EAAAS,EAAAwM,EACA,IAAAwxD,EAAAj8D,EAAA/B,GAAA,KACAA,GAAA+B,EAEA,MAAA/B,GAGA,QAAAsrC,GAAA20B,EAAAzzD,GACA,GAAA6L,GAAA,SAAA9Y,GACAA,EAAA2gE,gBAAAF,EAAAzgE,IAAAkQ,YAAAwwD,EAAAzzD,IAGA,OADA6L,GAAAkY,QAAA,EACAlY,EAGA,QAAA8nD,GAAA5gE,EAAA0gE,EAAAzzD,GAGA,IAFA,GAAA9F,GAAAs1B,EAAAz8B,EAAAI,iBACAE,EAAAm8B,EAAAl8B,OACAD,KACA6G,EAAAs1B,EAAAn8B,GAAAI,KACAq+D,EAAA/+D,EAAAmH,EAAAs5D,EAAAzgE,EAAAmH,EAAAu5D,EAAAzzD,IAAA,GAIA,QAAA4zD,GAAA7gE,GACA,GAAAA,EAAAmR,oBAAA,CAGA,IAFA,GAAA6tB,GAAAvC,EAAAz8B,EAAAI,iBACAE,EAAAm8B,EAAAl8B,OACAD,KACA0+B,EAAAvC,EAAAn8B,GACAy+D,EAAA/+D,EAAAg/B,EAAAn8B,OAAAm8B,EAAAt+B,KAEA,WAIA,QAAAogE,GAAA9gE,EAAA+gE,GACA,GAAA/gE,EAAAgB,MAAAs/D,YAEA,YADA,KAAAS,IAAA/gE,EAAAgB,MAAAs/D,aAAAS,GAIA/gE,GAAAgB,MAAAs/D,YAAAS,EACA/gE,EAAAsG,GAAA,aAAA06D,GACAhhE,EAAAsG,GAAA,YAAA26D,GAKA,QAAAD,GAAAhhE,EAAAslB,GACAtlB,EAAAgB,MAAAkgE,gBAAAC,EAAA5mC,eAAAjV,IACAi7C,EAAAvgE,GAGA,QAAAugE,GAAAvgE,GACAA,EAAAgB,MAAAs/D,YAAA,KACAtgE,EAAAgI,IAAA,aAAAg5D,GACAhhE,EAAAgI,IAAA,YAAAi5D,GAGA,QAAAA,GAAAjhE,EAAAqa,GACA,GAAA+mD,GAAAjB,EAAAngE,EACA,IAAAohE,EAAA,aAAA/mD,EAAAovB,OAAA,CAEA,OADA43B,GAAAhnD,EAAA9X,KAAA0a,KAAA,MAAAqkD,EAAA,GACAhhE,EAAA,EAAqBA,EAAA8gE,IAAS9gE,EAAAghE,GAAAD,CAC9BrhE,GAAA2U,iBAAA2sD,IAIA,QAAAC,GAAAvhE,GACAA,EAAAgB,MAAAkgE,gBAAA,EACAlhE,EAAAgF,UAAAw8D,GACAxhE,EAAAsG,GAAA,aAAAm7D,GACAzhE,EAAAsG,GAAA,YAAAm7D,GAGA,QAAAA,GAAAzhE,EAAAslB,IACA,gBAAAA,KAAA,OAAArjB,KAAAqjB,IAAA,UAAAA,KACAtlB,EAAA4E,aAAA48D,GACAxhE,EAAAgB,MAAAkgE,gBAAA,EACAlhE,EAAAgI,IAAA,aAAAy5D,GACAzhE,EAAAgI,IAAA,YAAAy5D,IAKA,QAAAvrB,GAAAl2C,GACAA,EAAA0U,UAAA1U,EAAAkQ,aACAlQ,EAAA0hE,cAAA1hE,EAAA2hE,gBACA3hE,EAAAsG,GAAA,oBAAgCtG,EAAA0hE,cAAA,KAGhC,QAAAE,GAAA5hE,GACAA,EAAA0hE,cAAA,GACA1hE,EAAA0U,UAAA1U,EAAAkQ,aAGA,QAAA2xD,GAAA7hE,EAAA4iB,EAAA9J,GACA9Y,EAAAuY,WACAvY,EAAAuY,WAAAqK,EAAA,6CAAA9J,GAAgFjE,QAAA,IAEhFiE,EAAAC,OAAA6J,EAAA,KAGA,QAAAk/C,GAAA9hE,EAAA+hE,GACA,GAAA5+D,GAAAnD,EAAAkQ,YAAAvO,EAAA3B,EAAAkU,SAAA/Q,EAAA,SACAnD,GAAA4C,aAAAm/D,EAAA/hE,EAAAwP,SAAArM,EAAAxB,IAAAwB,EAAAxB,GACA3B,EAAA0U,UAAA/S,GAGA,QAAAqgE,GAAAhiE,GAGA,IAFA,GAAAS,GAAAT,EAAAkQ,YAAAxN,EAAAjC,EAAAiC,KAAAd,EAAAnB,EAAAmB,GACA4mD,KACA9lD,GAAA1C,EAAAiG,aAAA,CAEA,OADA1D,GAAAvC,EAAAsD,QAAAZ,GACApC,EAAA,MAAAsB,EAAAW,EAAAhC,OAAAqB,EAAiDtB,EAAA,GAAO,CACxD,GAAAsB,GAAAW,EAAAJ,SAAA7B,EACA,SAAAsB,EACA4mD,EAAA59C,KAAA,SACA,SAAAhJ,EACA4mD,EAAA59C,KAAA,SACA,SAAAhJ,EACA4mD,EAAA59C,KAAA,SACA,eAAuB3I,KAAAL,MAAA4mD,EAAAjoD,QAAAioD,EAAAp1C,OAAAxR,GACvB,MAAA5B,GAAA2gE,gBAAAl+D,EAAAC,EAAApC,MAEAoC,EAAad,EAAA,MAIb,QAAAogB,GAAAhiB,GACAA,EAAAoO,YAAA,eACAwzD,EAAA5hE,GA0IA,QAAAiiE,GAAAzF,GACAgF,EAAAhF,GAAA,SAAAx8D,GAAiC8gE,EAAA9gE,EAAAw8D,IACjC/rD,EAAA,QAAA+rD,GAAA,SAAAx8D,GAAwC8gE,EAAA9gE,EAAAw8D,IACxC2E,EAAA,QAAA3E,IAAA,EA9YA,GAAA/5D,GAAA3C,EAAA2C,IAKAk8D,KAYAM,EAAA,KA2JAkC,GAA8Be,SAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,UAAA,EAwF9BviE,GAAAwiE,OAAsBvD,OAAA8B,aAAAL,WA4ItB,QAxIA/vD,GAAA3Q,EAAA2Q,OAAA6xD,MAAAxiE,EAAAkV,iBACAutD,SAAA,SAAAviE,GAA4B++D,EAAA/+D,IAAAkQ,UAAA,SAAAlQ,EAAAkQ,UAAA,SAC5BsyD,SAAAhC,EAAA,SAAAxgE,GACA,GAAAmD,GAAAnD,EAAAkQ,YAAAvO,EAAA3B,EAAAkN,QAAAzK,EAAAU,EAAAT,OACAH,EAAAvC,EAAAwP,SAAArM,EAAAxB,EACA,MAAAM,KAAAM,KACAA,GAAA,KACAZ,EAAAc,EAAAU,EAAAT,KAAA,MAEAq8D,EAAA/+D,EAAAmD,EAAAxB,GAAA,EAAAY,KAEAkgE,QAAA,SAAAziE,GACA0+D,EAAA1+D,EAAAka,gBACA0nD,EAAA5hE,IAEA0iE,SAAA,SAAA1iE,GACA,GAAAmD,GAAAnD,EAAAkQ,WACAlQ,GAAA4C,aAAAi8D,EAAAsB,EAAAngE,IAAAmD,IAAA,SACAnD,EAAAwQ,aAAArN,EAAAnD,EAAAkQ,cAEAyyD,QAAA,SAAA3iE,GAA2BA,EAAA2U,iBAAAmqD,IAAA,mBAE3B8D,aAAA1sB,EAAA2sB,eAAA3sB,EAEA4sB,SAAA/2B,EAAAszB,EAAA,GAAA0D,SAAAh3B,EAAAszB,GAAA,GACA2D,MAAAj3B,EAAAszB,EAAA,GAAA4D,KAAAl3B,EAAAszB,GAAA,GACA6D,SAAA,SAAAljE,GAA4B4gE,EAAA5gE,EAAAq/D,EAAA,IAC5Bj0B,OAAA,SAAAprC,GAA4B6gE,EAAA7gE,IAAA4gE,EAAA5gE,EAAAq/D,EAAA,IAC5B8D,SAAA,SAAAnjE,GAA4B4gE,EAAA5gE,EAAAq/D,GAAA,IAC5Bl0B,UAAA,SAAAnrC,GAA+B6gE,EAAA7gE,IAAA4gE,EAAA5gE,EAAAq/D,GAAA,IAE/B+D,QAAAr3B,EAAAuzB,EAAA,GAAA+D,QAAAt3B,EAAAuzB,GAAA,GACAgE,QAAA,SAAAtjE,GAA2B4gE,EAAA5gE,EAAAs/D,EAAA,IAC3BiE,gBAAA,SAAAvjE,GAAmC4gE,EAAA5gE,EAAAs/D,GAAA,IAEnCkE,SAAAz3B,EAAAwzB,EAAA,GAAAkE,SAAA13B,EAAAwzB,GAAA,GACApL,KAAApoB,EAAAwzB,EAAA,GAAAtL,GAAAloB,EAAAwzB,GAAA,GACAmE,SAAA,cAAAC,SAAA,YACAlP,IAAA,YAAAF,KAAA,cAEAqP,QAAA73B,EAAA0zB,GAAA,GAAAoE,SAAA93B,EAAA0zB,EAAA,GACArL,OAAAroB,EAAA0zB,GAAA,GAAAnL,SAAAvoB,EAAA0zB,EAAA,GAEAqE,UAAA/3B,EAAA2zB,GAAA,GAAAqE,YAAAh4B,EAAA2zB,EAAA,GAEAsE,QAAAj4B,EAAAg0B,GAAA,GAAAkE,QAAAl4B,EAAAg0B,EAAA,GACAmE,QAAA,SAAAlkE,GAA2B4gE,EAAA5gE,EAAA+/D,EAAA,IAE3BoE,aAAA,SAAAnkE,GAAgC4gE,EAAA5gE,EAAAigE,EAAA,IAChCmE,qBAAA,SAAApkE,GAAwC4gE,EAAA5gE,EAAAigE,GAAA,IACxCoE,aAAAt4B,EAAAk0B,EAAA,GAAAqE,aAAAv4B,EAAAk0B,GAAA,GAEAsE,mBAAA,SAAAvkE,GACA,GAAAmH,GAAAnH,EAAAkQ,WACAlQ,GAAAwQ,aAAAiwD,EAAAzgE,EAAAmH,EAAA84D,EAAA,GAAA94D,IAEAq9D,aAAA,SAAAxkE,GACA,GAAAykE,GAAAxE,EAAAjgE,IAAAkQ,aAAA,GAAAw0D,EAAAzE,EAAAjgE,EAAAykE,EAAA,GACAE,EAAA1E,EAAAjgE,EAAA0kE,EAAA,GAAAE,EAAA3E,EAAAjgE,EAAA2kE,GAAA,EACA3kE,GAAA4C,aAAA5C,EAAAwP,SAAAo1D,EAAAD,GAAA3kE,EAAAwP,SAAAk1D,EAAAE,GACA5kE,EAAAwP,SAAAi1D,EAAAC,GAAAD,EAAAE,IAEAE,aAAArE,EAAAwB,GAEA8C,YAAA,SAAA9kE,GAEA,IADA,GAAAS,GAAAT,EAAAkQ,YAAAlK,EAAAvF,EAAAmB,GAAA0C,EAAA7D,EAAAmB,GAAAW,EAAAvC,EAAAsD,QAAA7C,EAAAiC,MACAsD,GAAA,KAAA/D,KAAAM,EAAAJ,OAAA6D,EAAA,OAAAA,CACA,MAAA1B,EAAA/B,EAAAhC,QAAA,KAAA0B,KAAAM,EAAAJ,OAAAmC,QACAtE,GAAA4C,aAAA,IAAAH,EAAAhC,EAAAiC,KAAAsD,GAAAvD,EAAAhC,EAAAiC,KAAA4B,KAEAygE,SAAAvE,EAAA,SAAAxgE,GAAqCA,EAAA2U,iBAAA,gBACrCqwD,SAAAxE,EAAA,SAAAxgE,GACAA,EAAAoO,YAAA,oBAGA62D,QAAAzE,EAAA,SAAAxgE,GACA8hE,EAAA9hE,EAAA,SAAAklE,GACA,GAAAC,GAAAD,EAAAltD,OAAA,KACA,WAAAmtD,EAAAD,EACAA,EAAArjE,MAAA,EAAAsjE,GAAAD,EAAA/iE,OAAAgjE,GAAA93D,cAAA63D,EAAArjE,MAAAsjE,EAAA,GAAApjE,kBAGAqjE,QAAA5E,EAAA,SAAAxgE,GACA8hE,EAAA9hE,EAAA,SAAAklE,GAAqC,MAAAA,GAAA73D,kBAErCg4D,QAAA7E,EAAA,SAAAxgE,GACA8hE,EAAA9hE,EAAA,SAAAklE,GAAqC,MAAAA,GAAAnjE,kBAGrCujE,QAAU,gBAEVC,SAAA/E,EAAA,QAAAgF,eAAAhF,EAAA,QACAiF,SAAAjF,EAAA,QAAAkF,QAAAlF,EAAA,QACAmF,cAAA,aAAAC,cAAA,WACAC,SAAA,qBAAAC,SAAA,qBAAAC,SAAA/jD,EAAAgkD,cAAA,UACAC,QAAA,eACA/6B,MAAA,mBACAg7B,SAAA1F,EAAA,SAAAxgE,GAAqCA,EAAA2U,iBAAA,cACrCggD,IAAA,aAEAwR,UAAA,SAAAnmE,GACA,GAAAslC,GAAA66B,EAAAngE,GAAA,EACA,UAAAslC,KAAA,QAAAtlC,GAAA0U,UAAA4wB,EAAA,EAEAu8B,GAAA7hE,EAAA,qBAAAqU,GACA,GAAAuI,EACAvI,KAAAyT,MAAAlL,EAAA8L,OAAArU,KAAAuI,IAAA,EAAAA,MAAA,GACA5c,EAAA0U,UAAAkI,EAAA,MAIAwpD,aAAA,SAAApmE,GACAA,EAAAqmE,gBAAAlG,EAAAngE,GAAA,IAAAA,EAAAC,UAAA,gBAEAqmE,gBAAA,SAAAtmE,GACAA,EAAAwQ,aAAAxQ,EAAAkQ,UAAA,QAAAlQ,EAAAkQ,UAAA,YAEAq2D,gBAAA,OACAC,gBAAA,OACAC,WAAA,UACAC,WAAA,OACAC,WAAAnG,EAAA,QACAoG,WAAA,QACAC,gBAAA,SAAA7mE,GAAmC++D,EAAA/+D,IAAAkQ,YAAA6vD,EAAA//D,IAAAkQ,YAAA,QACnC42D,WAAA,YAEAC,aAAAvG,EAAA,aACA6B,SAAAd,IAGAC,GAAmBuE,SAAAxF,GAMnBjgE,EAAA,EAAiBA,EAAA,KAAQA,EAAA2hE,EAAA32D,OAAAhL,GACzB2hE,GAAA,QpDsqZM+E,KACA,SAAUtnE,EAAQC,GqDrkaxBA,EAAAuoB,KAAA,SAAAvB,EAAAjU,EAAAu0D,EAAAC,EAAAC,GACA,GAAAxjE,GAAAikB,EACAw/C,EAAA,EAAAD,EAAAD,EAAA,EACAG,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAE,GAAA,EACAjnE,EAAA2mE,EAAAE,EAAA,IACA3K,EAAAyK,GAAA,IACA/qC,EAAAvV,EAAAjU,EAAApS,EAOA,KALAA,GAAAk8D,EAEA74D,EAAAu4B,GAAA,IAAAqrC,GAAA,EACArrC,KAAAqrC,EACAA,GAAAH,EACQG,EAAA,EAAW5jE,EAAA,IAAAA,EAAAgjB,EAAAjU,EAAApS,MAAAk8D,EAAA+K,GAAA,GAKnB,IAHA3/C,EAAAjkB,GAAA,IAAA4jE,GAAA,EACA5jE,KAAA4jE,EACAA,GAAAL,EACQK,EAAA,EAAW3/C,EAAA,IAAAA,EAAAjB,EAAAjU,EAAApS,MAAAk8D,EAAA+K,GAAA,GAEnB,OAAA5jE,EACAA,EAAA,EAAA2jE,MACG,IAAA3jE,IAAA0jE,EACH,MAAAz/C,GAAA4/C,IAAAh8C,KAAA0Q,GAAA,IAEAtU,IAAA9jB,KAAAwqB,IAAA,EAAA44C,GACAvjE,GAAA2jE,EAEA,OAAAprC,GAAA,KAAAtU,EAAA9jB,KAAAwqB,IAAA,EAAA3qB,EAAAujE,IAGAvnE,EAAA2mB,MAAA,SAAAK,EAAAvd,EAAAsJ,EAAAu0D,EAAAC,EAAAC,GACA,GAAAxjE,GAAAikB,EAAA+D,EACAy7C,EAAA,EAAAD,EAAAD,EAAA,EACAG,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAI,EAAA,KAAAP,EAAApjE,KAAAwqB,IAAA,OAAAxqB,KAAAwqB,IAAA,SACAhuB,EAAA2mE,EAAA,EAAAE,EAAA,EACA3K,EAAAyK,EAAA,KACA/qC,EAAA9yB,EAAA,OAAAA,GAAA,EAAAA,EAAA,KAmCA,KAjCAA,EAAAtF,KAAAmsC,IAAA7mC,GAEA0e,MAAA1e,QAAAoiB,KACA5D,EAAAE,MAAA1e,GAAA,IACAzF,EAAA0jE,IAEA1jE,EAAAG,KAAAsrB,MAAAtrB,KAAA8R,IAAAxM,GAAAtF,KAAA4jE,KACAt+D,GAAAuiB,EAAA7nB,KAAAwqB,IAAA,GAAA3qB,IAAA,IACAA,IACAgoB,GAAA,GAGAviB,GADAzF,EAAA2jE,GAAA,EACAG,EAAA97C,EAEA87C,EAAA3jE,KAAAwqB,IAAA,IAAAg5C,GAEAl+D,EAAAuiB,GAAA,IACAhoB,IACAgoB,GAAA,GAGAhoB,EAAA2jE,GAAAD,GACAz/C,EAAA,EACAjkB,EAAA0jE,GACK1jE,EAAA2jE,GAAA,GACL1/C,GAAAxe,EAAAuiB,EAAA,GAAA7nB,KAAAwqB,IAAA,EAAA44C,GACAvjE,GAAA2jE,IAEA1/C,EAAAxe,EAAAtF,KAAAwqB,IAAA,EAAAg5C,EAAA,GAAAxjE,KAAAwqB,IAAA,EAAA44C,GACAvjE,EAAA,IAIQujE,GAAA,EAAWvgD,EAAAjU,EAAApS,GAAA,IAAAsnB,EAAAtnB,GAAAk8D,EAAA50C,GAAA,IAAAs/C,GAAA,GAInB,IAFAvjE,KAAAujE,EAAAt/C,EACAw/C,GAAAF,EACQE,EAAA,EAAUzgD,EAAAjU,EAAApS,GAAA,IAAAqD,EAAArD,GAAAk8D,EAAA74D,GAAA,IAAAyjE,GAAA,GAElBzgD,EAAAjU,EAAApS,EAAAk8D,IAAA,IAAAtgC,IrD6kaMyrC,OACA,SAAUjoE,EAAQC,EAASC,IsD7pajC,SAAAC,GAEAA,EAAAD,EAAA,UAKC,SAAAE,GAQD,QAAA6yC,GAAA3yC,EAAA4nE,EAAAC,GACA,GAAAnlE,GAAA1C,EAAAkjD,cAAA0kB,EAAAllE,MAAAjC,EAAAmnE,EAAAhmE,GAAA,EACAkmE,EAAAD,KAAAC,WACA,OAAAA,IACAA,EAAA,0BAAA7lE,KAAAjC,EAAA+zB,oBAAAnuB,WAMA,IAAAqB,IAAA6gE,GAAArnE,GAAA,GAAAsnE,EAAArlE,EAAAH,KAAAJ,OAAA1B,KACAsnE,EAAArlE,EAAAH,KAAAJ,SAAA1B,GACA,KAAAwG,EAAA,WACA,IAAAgG,GAAA,KAAAhG,EAAA9E,OAAA,OACA,IAAA0lE,KAAA3H,QAAAjzD,EAAA,IAAAxM,GAAAmnE,EAAAhmE,IAAA,WACA,IAAA2Y,GAAAva,EAAA0yC,eAAAjwC,EAAAmlE,EAAAllE,KAAAjC,EAAA,IAEAwR,EAAAjD,EAAAhP,EAAAyC,EAAAmlE,EAAAllE,KAAAjC,GAAAwM,EAAA,QAAAA,EAAAsN,GAAA,KAAAstD,EACA,cAAA51D,EAAA,MACYjM,KAAAvD,EAAAmlE,EAAAllE,KAAAjC,GAAA6D,GAAA2N,KAAAxR,IACZwG,MAAAgL,KAAArQ,IAAAqF,EAAA9E,OAAA,GAAAiO,QAAAnD,EAAA,GAUA,QAAA+B,GAAAhP,EAAA4nE,EAAA36D,EAAAsN,EAAAstD,GAQA,OAPAG,GAAAH,KAAAI,mBAAA,IACAC,EAAAL,KAAAK,cAAA,IAEA1f,KACAhS,EAAAqxB,KAAA5kC,aAAA4kC,EAAA5kC,aAAA,YACAmE,EAAAn6B,EAAA,EAAAnJ,KAAAC,IAAA6jE,EAAAllE,KAAAwlE,EAAAloE,EAAAgE,WAAA,GACAF,KAAAgD,IAAA9G,EAAAiG,YAAA,EAAA2hE,EAAAllE,KAAAwlE,GACAhf,EAAA0e,EAAAllE,KAAiCwmD,GAAA9hB,EAAmB8hB,GAAAj8C,EAAA,CACpD,GAAAvK,GAAA1C,EAAAsD,QAAA4lD,EACA,IAAAxmD,EAAA,CACA,GAAAjC,GAAAwM,EAAA,IAAAvK,EAAAnC,OAAA,EAAAoB,EAAAsL,EAAA,EAAAvK,EAAAnC,QAAA,CACA,MAAAmC,EAAAnC,OAAAynE,GAEA,IADA9e,GAAA0e,EAAAllE,OAAAjC,EAAAmnE,EAAAhmE,IAAAqL,EAAA,QACYxM,GAAAkB,EAAYlB,GAAAwM,EAAA,CACxB,GAAArL,GAAAc,EAAAP,OAAA1B,EACA,IAAA+1C,EAAAv0C,KAAAL,SAAAukB,KAAA5L,GAAAva,EAAA0yC,eAAAjwC,EAAAymD,EAAAzoD,EAAA,KAAA8Z,GAAA,CACA,GAAAtT,GAAA8gE,EAAAnmE,EACA,SAAAqF,EAAA9E,OAAA,IAAA8K,EAAA,EAAAu7C,EAAA59C,KAAAhJ,OACA,KAAA4mD,EAAAjoD,OAAA,OAA0CE,IAAAgC,EAAAymD,EAAAzoD,GAAAmB,KAC1C4mD,GAAAp1C,UAIA,MAAA81C,GAAAj8C,MAAA,EAAAjN,EAAAgE,WAAAhE,EAAAiG,cAAA,KAGA,QAAAkiE,GAAAnoE,EAAAooE,EAAAP,GAIA,OAFAQ,GAAAroE,EAAAgB,MAAAmnE,cAAAG,wBAAA,IACAv1D,KAAA5S,EAAAH,EAAAI,iBACAE,EAAA,EAAmBA,EAAAH,EAAAI,OAAmBD,IAAA,CACtC,GAAA2G,GAAA9G,EAAAG,GAAAE,SAAAmyC,EAAA3yC,EAAAG,EAAAG,GAAAI,KAAAmnE,EACA,IAAA5gE,GAAAjH,EAAAsD,QAAA2D,EAAAjB,KAAAtD,MAAAnC,QAAA8nE,EAAA,CACA,GAAA9tD,GAAAtT,QAAA,4DACA8L,GAAAnI,KAAA5K,EAAAyT,SAAAxM,EAAAjB,KAAAvD,EAAAwE,EAAAjB,KAAAtD,KAAAuE,EAAAjB,KAAApE,GAAA,IAAqFgE,UAAA2U,KACrFtT,EAAA3C,IAAAtE,EAAAsD,QAAA2D,EAAA3C,GAAA5B,MAAAnC,QAAA8nE,GACAt1D,EAAAnI,KAAA5K,EAAAyT,SAAAxM,EAAA3C,GAAA7B,EAAAwE,EAAA3C,GAAA5B,KAAAuE,EAAA3C,GAAA1C,GAAA,IAAiFgE,UAAA2U,MAIjF,GAAAxH,EAAAxS,OAAA,CAGAgoE,GAAAvoE,EAAAgB,MAAAwnE,SAAAxoE,EAAAkJ,OAEA,IAAAnB,GAAA,WACA/H,EAAA+N,UAAA,WACA,OAAAzN,GAAA,EAAyBA,EAAAyS,EAAAxS,OAAkBD,IAAAyS,EAAAzS,GAAAyH,UAG3C,KAAAqgE,EACA,MAAArgE,EADAF,YAAAE,EAAA,MAMA,QAAA0gE,GAAAzoE,GACAA,EAAA+N,UAAA,WACA26D,IAAiCA,IAAuBA,EAAA,MACxDA,EAAAP,EAAAnoE,GAAA,EAAAA,EAAAgB,MAAAmnE,iBAjGA,GAAAI,GAAA,UAAAtmE,KAAA0mE,UAAAC,aACA,MAAAluD,SAAAmuD,cAAAnuD,SAAAmuD,aAAA,GAEApmE,EAAA3C,EAAA2C,IAEAslE,GAAkBrnC,IAAA,KAAAF,IAAA,KAAAqC,IAAA,KAAAC,IAAA,KAAAnC,IAA8C,KAAKF,IAAM,MAwF3EioC,EAAA,IAQA5oE,GAAA0E,aAAA,4BAAAxE,EAAAyE,EAAAC,GACAA,MAAA5E,EAAA6E,OACA3E,EAAAgI,IAAA,iBAAAygE,GACAC,IAAiCA,IAAuBA,EAAA,OAExDjkE,IACAzE,EAAAgB,MAAAmnE,cAAA,gBAAA1jE,QACAzE,EAAAsG,GAAA,iBAAAmiE,MAIA3oE,EAAAiH,gBAAA,2BAA0DohE,EAAA3iE,MAAA,KAC1D1F,EAAAiH,gBAAA,+BAAAtG,EAAAonE,EAAAiB,GAUA,OARAA,GAAA,iBAAAjB,MACAiB,GAGAA,EAAA5I,OAAA2H,EACAA,EAAAiB,GAHAjB,KAA2B3H,QAAA,GAAa,MAMxCvtB,EAAAntC,KAAA/E,EAAAonE,KAEA/nE,EAAAiH,gBAAA,0BAAAtG,EAAAwM,EAAAsN,EAAAstD,GACA,MAAA74D,GAAAxJ,KAAA/E,EAAAwM,EAAAsN,EAAAstD,QtDyqaMkB,KACA,SAAUrpE,EAAQC,EAASC,IAEL,SAASuX,GuDrzarC,GAAA6xD,GAAAC,GAUA,SAAA9xD,GACA,YAEA,IAGAwP,GAHAuiD,EAAA/xD,EAAAgL,MAIA,aAAAziB,KAAAC,QACA,IACAgnB,EAAA/mB,EAAA,QAAAolB,OACS,MAAAw1B,IAGT,GAAA2uB,GACA,mEACAC,EAAA,SAAAC,GAEA,OADAvR,MACAx3D,EAAA,EAAA8b,EAAAitD,EAAA9oE,OAAuCD,EAAA8b,EAAO9b,IAAAw3D,EAAAuR,EAAAlnE,OAAA7B,KAC9C,OAAAw3D,IACKqR,GACLh/C,EAAA7e,OAAA6e,aAEAm/C,EAAA,SAAA39C,GACA,GAAAA,EAAAprB,OAAA,GACA,GAAAgpE,GAAA59C,EAAAjP,WAAA,EACA,OAAA6sD,GAAA,IAAA59C,EACA49C,EAAA,KAAAp/C,EAAA,IAAAo/C,IAAA,GACAp/C,EAAA,OAAAo/C,GACAp/C,EAAA,IAAAo/C,IAAA,OACAp/C,EAAA,IAAAo/C,IAAA,MACAp/C,EAAA,OAAAo/C,GAEA,GAAAA,GAAA,MACA,MAAA59C,EAAAjP,WAAA,WACAiP,EAAAjP,WAAA,SACA,OAAAyN,GAAA,IAAAo/C,IAAA,MACAp/C,EAAA,IAAAo/C,IAAA,OACAp/C,EAAA,IAAAo/C,IAAA,MACAp/C,EAAA,OAAAo/C,IAGAC,EAAA,gDACAC,EAAA,SAAAC,GACA,MAAAA,GAAAxyD,QAAAsyD,EAAAF,IAEAK,EAAA,SAAAC,GACA,GAAAC,IAAA,OAAAD,EAAArpE,OAAA,GACAupE,EAAAF,EAAAltD,WAAA,QACAktD,EAAArpE,OAAA,EAAAqpE,EAAAltD,WAAA,UACAktD,EAAArpE,OAAA,EAAAqpE,EAAAltD,WAAA,KAOA,QALAysD,EAAAhnE,OAAA2nE,IAAA,IACAX,EAAAhnE,OAAA2nE,IAAA,OACAD,GAAA,MAAAV,EAAAhnE,OAAA2nE,IAAA,MACAD,GAAA,MAAAV,EAAAhnE,OAAA,GAAA2nE,IAEA7sD,KAAA,KAEA8sD,EAAA5yD,EAAA4yD,KAAA,SAAAp6D,GACA,MAAAwH,GAAA4yD,KAAAp6D,IACK,SAAAA,GACL,MAAAA,GAAAuH,QAAA,eAAqCyyD,IAErCK,EAAArjD,EACAA,EAAA3gB,MAAA2gB,EAAA3gB,OAAAsX,WAAAtX,KAAA,SAAA0jE,GACA,OAAAA,EAAAO,cAAAtjD,EAAAsjD,YAAAP,EAAA/iD,EAAA3gB,KAAA0jE,IACA5iD,SAAA,WAEA,SAAA4iD,GACA,OAAAA,EAAAO,cAAAtjD,EAAAsjD,YAAAP,EAAA,GAAA/iD,GAAA+iD,IACA5iD,SAAA,WAEA,SAAA4iD,GAAwB,MAAAK,GAAAN,EAAAC,KAExB/mD,EAAA,SAAA+mD,EAAAQ,GACA,MAAAA,GAEAF,EAAA1+D,OAAAo+D,IAAAxyD,QAAA,kBAAAizD,GACA,WAAAA,EAAA,UACajzD,QAAA,SAHb8yD,EAAA1+D,OAAAo+D,KAKAU,EAAA,SAAAV,GAAiC,MAAA/mD,GAAA+mD,GAAA,IAEjCW,EAAA,GAAAr4D,SACA,aACA,gBACA,iBACAiL,KAAA,UACAqtD,EAAA,SAAAC,GACA,OAAAA,EAAAhqE,QACA,OACA,GAAAiqE,IAAA,EAAAD,EAAA7tD,WAAA,SACA,GAAA6tD,EAAA7tD,WAAA,SACA,GAAA6tD,EAAA7tD,WAAA,OACA,GAAA6tD,EAAA7tD,WAAA,GACAhK,EAAA83D,EAAA,KACA,OAAArgD,GAAA,OAAAzX,IAAA,KACAyX,EAAA,YAAAzX,GACA,QACA,MAAAyX,IACA,GAAAogD,EAAA7tD,WAAA,SACA,GAAA6tD,EAAA7tD,WAAA,OACA,GAAA6tD,EAAA7tD,WAAA,GAEA,SACA,MAAAyN,IACA,GAAAogD,EAAA7tD,WAAA,OACA,GAAA6tD,EAAA7tD,WAAA,MAIA+tD,EAAA,SAAA96D,GACA,MAAAA,GAAAuH,QAAAmzD,EAAAC,IAEAI,EAAA,SAAAH,GACA,GAAAv8D,GAAAu8D,EAAAhqE,OACAspE,EAAA77D,EAAA,EACA3B,GAAA2B,EAAA,EAAAo7D,EAAAmB,EAAApoE,OAAA,YACA6L,EAAA,EAAAo7D,EAAAmB,EAAApoE,OAAA,YACA6L,EAAA,EAAAo7D,EAAAmB,EAAApoE,OAAA,WACA6L,EAAA,EAAAo7D,EAAAmB,EAAApoE,OAAA,OACAghC,GACAhZ,EAAA9d,IAAA,IACA8d,EAAA9d,IAAA,OACA8d,EAAA,IAAA9d,GAGA,OADA82B,GAAA5iC,SAAA,SAAAspE,GACA1mC,EAAAlmB,KAAA,KAEA0tD,EAAAxzD,EAAAwzD,KAAA,SAAAj7D,GACA,MAAAyH,GAAAwzD,KAAAj7D,IACK,SAAAA,GACL,MAAAA,GAAAwH,QAAA,eAAqCwzD,IAErCE,EAAAjkD,EACAA,EAAA3gB,MAAA2gB,EAAA3gB,OAAAsX,WAAAtX,KAAA,SAAA0J,GACA,OAAAA,EAAAu6D,cAAAtjD,EAAAsjD,YACAv6D,EAAAiX,EAAA3gB,KAAA0J,EAAA,WAAAoX,YAEA,SAAApX,GACA,OAAAA,EAAAu6D,cAAAtjD,EAAAsjD,YACAv6D,EAAA,GAAAiX,GAAAjX,EAAA,WAAAoX,YAEA,SAAApX,GAAuB,MAAA+6D,GAAAE,EAAAj7D,KACvBm7D,EAAA,SAAAn7D,GACA,MAAAk7D,GACAt/D,OAAAoE,GAAAwH,QAAA,iBAAAizD,GAAqD,WAAAA,EAAA,UACrDjzD,QAAA,0BAGA4zD,EAAA,WACA,GAAA3oD,GAAAhL,EAAAgL,MAEA,OADAhL,GAAAgL,OAAA+mD,EACA/mD,EAiBA,IAdAhL,EAAAgL,QACA4oD,QAzJA,QA0JAJ,OACAZ,OACAiB,WAAAH,EACAI,SAAAtoD,EACA8mD,OACA9mD,SACAynD,YACAK,OACAI,SACAC,cAGA,kBAAAt0D,QAAAC,eAAA,CACA,GAAAy0D,GAAA,SAAA/qB,GACA,OAAoB/2C,MAAA+2C,EAAAgrB,YAAA,EAAAC,UAAA,EAAA9+C,cAAA,GAEpBnV,GAAAgL,OAAAkpD,aAAA,WACA70D,OAAAC,eACAnL,OAAAtE,UAAA,aAAAkkE,EAAA,WACA,MAAAL,GAAArlE,SAEAgR,OAAAC,eACAnL,OAAAtE,UAAA,WAAAkkE,EAAA,SAAAhB,GACA,MAAAvnD,GAAAnd,KAAA0kE,MAEA1zD,OAAAC,eACAnL,OAAAtE,UAAA,cAAAkkE,EAAA,WACA,MAAAvoD,GAAAnd,MAAA,OAOA2R,EAAA,SACAgL,OAAAhL,EAAAgL,YAIA,KAAAziB,KAAAC,QACAD,EAAAC,QAAAwiB,OAAAhL,EAAAgL,QAIA6mD,SAAqD7iD,MAArD8iD,EAAA,WAA8B,MAAA9xD,GAAAgL,QAAuBiI,MAAAzqB,EAAAqpE,MAAAtpE,EAAAC,QAAAspE,KAGpD,mBAAA5iE,WACD,mBAAAqnC,mBACA,KAAAv2B,IACA3R,QvDyza6BwiB,KAAKroB,EAASC,EAAoB,UAIzD0rE,KACA,SAAU5rE,EAAQC,EAASC,GwDrhbjC,GAAAmW,GAAAnW,EAAA,OACA,iBAAAmW,SAAArW,EAAAY,EAAAyV,EAAA,MACAA,EAAAwmC,SAAA78C,EAAAC,QAAAoW,EAAAwmC,OAEA38C,GAAA,mBAAAmW,GAAA","file":"static/js/3.4e99bf76ac1cfcf85d6c.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ \"+/ra\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"TQy8\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"/A6h\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"QSKu\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../scroll/annotatescrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function(query, caseFold, options) {\n    if (typeof options == \"string\") options = {className: options};\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {listenForChanges: false};\n    for (var prop in options) annotateOptions[prop] = options[prop];\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {from: cm.firstLine(), to: cm.lastLine() + 1};\n    this.matches = [];\n    this.update = null;\n\n    this.findMatches();\n    this.annotation.update(this.matches);\n\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function(_cm, change) { self.onChange(change); });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function() {\n    if (!this.gap) return;\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), this.caseFold);\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n    while (cursor.findNext()) {\n      var match = {from: cursor.from(), to: cursor.to()};\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function(change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {from: change.from.line, to: endLine + 1};\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function() { self.updateAfterChange(); }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function() {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function() {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});\n\n\n/***/ }),\n\n/***/ \"0tR3\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dropdown', {\n    on: {\n      \"command\": _vm.handleCommandDropdown\n    }\n  }, [_c('el-input', {\n    staticClass: \"search-input\",\n    attrs: {\n      \"placeholder\": \"请输入要搜索的题目\",\n      \"icon\": \"search\",\n      \"spellcheck\": \"false\",\n      \"on-icon-click\": _vm._onSearch\n    },\n    on: {\n      \"change\": _vm._onSearch,\n      \"focus\": _vm._onSearch\n    },\n    model: {\n      value: (_vm.mysearch),\n      callback: function($$v) {\n        _vm.mysearch = (typeof $$v === 'string' ? $$v.trim() : $$v)\n      },\n      expression: \"mysearch\"\n    }\n  }), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, [_c('el-dropdown-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.dropdownLoading),\n      expression: \"dropdownLoading\"\n    }]\n  }, [_vm._v(\"拼命加载中...\")]), _vm._v(\" \"), _vm._l((_vm.searchResult), function(item, index) {\n    return _c('el-dropdown-item', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (index <= 10 && !_vm.dropdownLoading),\n        expression: \"index <= 10 && !dropdownLoading\"\n      }],\n      key: index,\n      attrs: {\n        \"command\": item.id\n      }\n    }, [_c('span', {\n      staticClass: \"problem-item-title\"\n    }, [_vm._v(_vm._s(item.title))]), _vm._v(\" \"), _c('img', {\n      staticClass: \"problem-item-img\",\n      attrs: {\n        \"width\": \"16\",\n        \"height\": \"16 \",\n        \"src\": \"static/problem.png\"\n      }\n    })])\n  })], 2)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"2EAN\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".el-dialog .el-dialog__body[data-v-48f25eaf]{padding:10px 20px}.el-dialog .el-dialog__body .text[data-v-48f25eaf]{font-size:18px;font-weight:400}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/base/confirm/confirm.vue\"],\"names\":[],\"mappings\":\"AACA,6CACE,iBAAmB,CACpB,AACD,mDACE,eAAgB,AAChB,eAAiB,CAClB\",\"file\":\"confirm.vue\",\"sourcesContent\":[\"\\n.el-dialog .el-dialog__body[data-v-48f25eaf] {\\n  padding: 10px 20px;\\n}\\n.el-dialog .el-dialog__body .text[data-v-48f25eaf] {\\n  font-size: 18px;\\n  font-weight: 400;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"3CS+\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    text: {\n      type: String,\n      default: ''\n    },\n    confirmBtnText: {\n      type: String,\n      default: '确 定'\n    },\n    cancelBtnText: {\n      type: String,\n      default: '取 消'\n    }\n  },\n  data: function data() {\n    return {\n      visible: false\n    };\n  },\n\n  methods: {\n    show: function show() {\n      this.visible = true;\n    },\n    hide: function hide() {\n      this.visible = false;\n    },\n    confirm: function confirm() {\n      this.hide();\n      this.$emit('confirm');\n    },\n    cancel: function cancel() {\n      this.hide();\n      this.$emit('cancel');\n    }\n  }\n});\n\n/***/ }),\n\n/***/ \"5Ey+\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__ = __webpack_require__(\"Zrlr\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);\n\n\n/**\n * Created by qinzhen on 2017/9/17.\n */\nvar Problem = function Problem(_ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      tag = _ref.tag,\n      level = _ref.level,\n      description = _ref.description,\n      accepted = _ref.accepted,\n      submitted = _ref.submitted,\n      like_nums = _ref.like_nums,\n      hate_nums = _ref.hate_nums;\n\n  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this, Problem);\n\n  this.id = id;\n  this.title = title;\n  this.tag = tag;\n  this.level = level;\n  this.description = description;\n  this.accepted = accepted;\n  this.submitted = submitted;\n  this.like_nums = like_nums;\n  this.hate_nums = hate_nums;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Problem);\n\n/***/ }),\n\n/***/ \"7Xsf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// A rough approximation of Sublime Text's keybindings\n// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"vq+x\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var map = CodeMirror.keyMap.sublime = {fallthrough: \"default\"};\n  var cmds = CodeMirror.commands;\n  var Pos = CodeMirror.Pos;\n  var mac = CodeMirror.keyMap[\"default\"] == CodeMirror.keyMap.macDefault;\n  var ctrl = mac ? \"Cmd-\" : \"Ctrl-\";\n\n  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.\n  function findPosSubword(doc, start, dir) {\n    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n    var line = doc.getLine(start.line);\n    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n    var state = \"start\", type;\n    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n      var cat = next != \"_\" && CodeMirror.isWordChar(next) ? \"w\" : \"o\";\n      if (cat == \"w\" && next.toUpperCase() == next) cat = \"W\";\n      if (state == \"start\") {\n        if (cat != \"o\") { state = \"in\"; type = cat; }\n      } else if (state == \"in\") {\n        if (type != cat) {\n          if (type == \"w\" && cat == \"W\" && dir < 0) pos--;\n          if (type == \"W\" && cat == \"w\" && dir > 0) { type = \"w\"; continue; }\n          break;\n        }\n      }\n    }\n    return Pos(start.line, pos);\n  }\n\n  function moveSubword(cm, dir) {\n    cm.extendSelectionsBy(function(range) {\n      if (cm.display.shift || cm.doc.extend || range.empty())\n        return findPosSubword(cm.doc, range.head, dir);\n      else\n        return dir < 0 ? range.from() : range.to();\n    });\n  }\n\n  var goSubwordCombo = mac ? \"Ctrl-\" : \"Alt-\";\n\n  cmds[map[goSubwordCombo + \"Left\"] = \"goSubwordLeft\"] = function(cm) { moveSubword(cm, -1); };\n  cmds[map[goSubwordCombo + \"Right\"] = \"goSubwordRight\"] = function(cm) { moveSubword(cm, 1); };\n\n  if (mac) map[\"Cmd-Left\"] = \"goLineStartSmart\";\n\n  var scrollLineCombo = mac ? \"Ctrl-Alt-\" : \"Ctrl-\";\n\n  cmds[map[scrollLineCombo + \"Up\"] = \"scrollLineUp\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, \"local\");\n      if (cm.getCursor().line >= visibleBottomLine)\n        cm.execCommand(\"goLineUp\");\n    }\n    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n  };\n  cmds[map[scrollLineCombo + \"Down\"] = \"scrollLineDown\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleTopLine = cm.lineAtHeight(info.top, \"local\")+1;\n      if (cm.getCursor().line <= visibleTopLine)\n        cm.execCommand(\"goLineDown\");\n    }\n    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"L\"] = \"splitSelectionByLine\"] = function(cm) {\n    var ranges = cm.listSelections(), lineRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      for (var line = from.line; line <= to.line; ++line)\n        if (!(to.line > from.line && line == to.line && to.ch == 0))\n          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n                           head: line == to.line ? to : Pos(line)});\n    }\n    cm.setSelections(lineRanges, 0);\n  };\n\n  map[\"Shift-Tab\"] = \"indentLess\";\n\n  cmds[map[\"Esc\"] = \"singleSelectionTop\"] = function(cm) {\n    var range = cm.listSelections()[0];\n    cm.setSelection(range.anchor, range.head, {scroll: false});\n  };\n\n  cmds[map[ctrl + \"L\"] = \"selectLine\"] = function(cm) {\n    var ranges = cm.listSelections(), extended = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      extended.push({anchor: Pos(range.from().line, 0),\n                     head: Pos(range.to().line + 1, 0)});\n    }\n    cm.setSelections(extended);\n  };\n\n  map[\"Shift-Ctrl-K\"] = \"deleteLine\";\n\n  function insertLine(cm, above) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    cm.operation(function() {\n      var len = cm.listSelections().length, newSelection = [], last = -1;\n      for (var i = 0; i < len; i++) {\n        var head = cm.listSelections()[i].head;\n        if (head.line <= last) continue;\n        var at = Pos(head.line + (above ? 0 : 1), 0);\n        cm.replaceRange(\"\\n\", at, null, \"+insertLine\");\n        cm.indentLine(at.line, null, true);\n        newSelection.push({head: at, anchor: at});\n        last = head.line + 1;\n      }\n      cm.setSelections(newSelection);\n    });\n    cm.execCommand(\"indentAuto\");\n  }\n\n  cmds[map[ctrl + \"Enter\"] = \"insertLineAfter\"] = function(cm) { return insertLine(cm, false); };\n\n  cmds[map[\"Shift-\" + ctrl + \"Enter\"] = \"insertLineBefore\"] = function(cm) { return insertLine(cm, true); };\n\n  function wordAt(cm, pos) {\n    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n  }\n\n  cmds[map[ctrl + \"D\"] = \"selectNextOccurrence\"] = function(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      cm.setSelection(word.from, word.to);\n      fullWord = true;\n    } else {\n      var text = cm.getRange(from, to);\n      var query = fullWord ? new RegExp(\"\\\\b\" + text + \"\\\\b\") : text;\n      var cur = cm.getSearchCursor(query, to);\n      var found = cur.findNext();\n      if (!found) {\n        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n        found = cur.findNext();\n      }\n      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n        return CodeMirror.Pass\n      cm.addSelection(cur.from(), cur.to());\n    }\n    if (fullWord)\n      cm.state.sublimeFindFullWord = cm.doc.sel;\n  };\n\n  function addCursorToSelection(cm, dir) {\n    var ranges = cm.listSelections(), newRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var newAnchor = cm.findPosV(range.anchor, dir, \"line\");\n      var newHead = cm.findPosV(range.head, dir, \"line\");\n      var newRange = {anchor: newAnchor, head: newHead};\n      newRanges.push(range);\n      newRanges.push(newRange);\n    }\n    cm.setSelections(newRanges);\n  }\n\n  var addCursorToLineCombo = mac ? \"Shift-Cmd\" : 'Alt-Ctrl';\n  cmds[map[addCursorToLineCombo + \"Up\"] = \"addCursorToPrevLine\"] = function(cm) { addCursorToSelection(cm, -1); };\n  cmds[map[addCursorToLineCombo + \"Down\"] = \"addCursorToNextLine\"] = function(cm) { addCursorToSelection(cm, 1); };\n\n  function isSelectedRange(ranges, from, to) {\n    for (var i = 0; i < ranges.length; i++)\n      if (ranges[i].from() == from && ranges[i].to() == to) return true\n    return false\n  }\n\n  var mirror = \"(){}[]\";\n  function selectBetweenBrackets(cm) {\n    var ranges = cm.listSelections(), newRanges = []\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n      if (!opening) return false;\n      for (;;) {\n        var closing = cm.scanForBracket(pos, 1);\n        if (!closing) return false;\n        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n          newRanges.push({anchor: Pos(opening.pos.line, opening.pos.ch + 1),\n                          head: closing.pos});\n          break;\n        }\n        pos = Pos(closing.pos.line, closing.pos.ch + 1);\n      }\n    }\n    cm.setSelections(newRanges);\n    return true;\n  }\n\n  cmds[map[\"Shift-\" + ctrl + \"Space\"] = \"selectScope\"] = function(cm) {\n    selectBetweenBrackets(cm) || cm.execCommand(\"selectAll\");\n  };\n  cmds[map[\"Shift-\" + ctrl + \"M\"] = \"selectBetweenBrackets\"] = function(cm) {\n    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n  };\n\n  cmds[map[ctrl + \"M\"] = \"goToBracket\"] = function(cm) {\n    cm.extendSelectionsBy(function(range) {\n      var next = cm.scanForBracket(range.head, 1);\n      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n      var prev = cm.scanForBracket(range.head, -1);\n      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n    });\n  };\n\n  var swapLineCombo = mac ? \"Cmd-Ctrl-\" : \"Shift-Ctrl-\";\n\n  cmds[map[swapLineCombo + \"Up\"] = \"swapLineUp\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n                    head: Pos(range.head.line - 1, range.head.ch)});\n      if (range.to().ch == 0 && !range.empty()) --to;\n      if (from > at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = 0; i < linesToMove.length; i += 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        if (to > cm.lastLine())\n          cm.replaceRange(\"\\n\" + line, Pos(cm.lastLine()), null, \"+swapLine\");\n        else\n          cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.setSelections(newSels);\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[swapLineCombo + \"Down\"] = \"swapLineDown\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n      if (range.to().ch == 0 && !range.empty()) from--;\n      if (from < at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        if (from == cm.lastLine())\n          cm.replaceRange(\"\", Pos(from - 1), Pos(from), \"+swapLine\");\n        else\n          cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[ctrl + \"/\"] = \"toggleCommentIndented\"] = function(cm) {\n    cm.toggleComment({ indent: true });\n  }\n\n  cmds[map[ctrl + \"J\"] = \"joinLines\"] = function(cm) {\n    var ranges = cm.listSelections(), joined = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from();\n      var start = from.line, end = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n        end = ranges[++i].to().line;\n      joined.push({start: start, end: end, anchor: !range.empty() && from});\n    }\n    cm.operation(function() {\n      var offset = 0, ranges = [];\n      for (var i = 0; i < joined.length; i++) {\n        var obj = joined[i];\n        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n        for (var line = obj.start; line <= obj.end; line++) {\n          var actual = line - offset;\n          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n          if (actual < cm.lastLine()) {\n            cm.replaceRange(\" \", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n            ++offset;\n          }\n        }\n        ranges.push({anchor: anchor || head, head: head});\n      }\n      cm.setSelections(ranges, 0);\n    });\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"D\"] = \"duplicateLine\"] = function(cm) {\n    cm.operation(function() {\n      var rangeCount = cm.listSelections().length;\n      for (var i = 0; i < rangeCount; i++) {\n        var range = cm.listSelections()[i];\n        if (range.empty())\n          cm.replaceRange(cm.getLine(range.head.line) + \"\\n\", Pos(range.head.line, 0));\n        else\n          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  if (!mac) map[ctrl + \"T\"] = \"transposeChars\";\n\n  function sortLines(cm, caseSensitive) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), toSort = [], selected;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      if (range.empty()) continue;\n      var from = range.from().line, to = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n        to = ranges[++i].to().line;\n      if (!ranges[i].to().ch) to--;\n      toSort.push(from, to);\n    }\n    if (toSort.length) selected = true;\n    else toSort.push(cm.firstLine(), cm.lastLine());\n\n    cm.operation(function() {\n      var ranges = [];\n      for (var i = 0; i < toSort.length; i += 2) {\n        var from = toSort[i], to = toSort[i + 1];\n        var start = Pos(from, 0), end = Pos(to);\n        var lines = cm.getRange(start, end, false);\n        if (caseSensitive)\n          lines.sort();\n        else\n          lines.sort(function(a, b) {\n            var au = a.toUpperCase(), bu = b.toUpperCase();\n            if (au != bu) { a = au; b = bu; }\n            return a < b ? -1 : a == b ? 0 : 1;\n          });\n        cm.replaceRange(lines, start, end);\n        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});\n      }\n      if (selected) cm.setSelections(ranges, 0);\n    });\n  }\n\n  cmds[map[\"F9\"] = \"sortLines\"] = function(cm) { sortLines(cm, true); };\n  cmds[map[ctrl + \"F9\"] = \"sortLinesInsensitive\"] = function(cm) { sortLines(cm, false); };\n\n  cmds[map[\"F2\"] = \"nextBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      var current = marks.shift();\n      var found = current.find();\n      if (found) {\n        marks.push(current);\n        return cm.setSelection(found.from, found.to);\n      }\n    }\n  };\n\n  cmds[map[\"Shift-F2\"] = \"prevBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      marks.unshift(marks.pop());\n      var found = marks[marks.length - 1].find();\n      if (!found)\n        marks.pop();\n      else\n        return cm.setSelection(found.from, found.to);\n    }\n  };\n\n  cmds[map[ctrl + \"F2\"] = \"toggleBookmark\"] = function(cm) {\n    var ranges = cm.listSelections();\n    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      var found = cm.findMarks(from, to);\n      for (var j = 0; j < found.length; j++) {\n        if (found[j].sublimeBookmark) {\n          found[j].clear();\n          for (var k = 0; k < marks.length; k++)\n            if (marks[k] == found[j])\n              marks.splice(k--, 1);\n          break;\n        }\n      }\n      if (j == found.length)\n        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n    }\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"F2\"] = \"clearBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    marks.length = 0;\n  };\n\n  cmds[map[\"Alt-F2\"] = \"selectBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks, ranges = [];\n    if (marks) for (var i = 0; i < marks.length; i++) {\n      var found = marks[i].find();\n      if (!found)\n        marks.splice(i--, 0);\n      else\n        ranges.push({anchor: found.from, head: found.to});\n    }\n    if (ranges.length)\n      cm.setSelections(ranges, 0);\n  };\n\n  map[\"Alt-Q\"] = \"wrapLines\";\n\n  var cK = ctrl + \"K \";\n\n  function modifyWordOrSelection(cm, mod) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), indices = [], replacements = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) { indices.push(i); replacements.push(\"\"); }\n        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n      }\n      cm.replaceSelections(replacements, \"around\", \"case\");\n      for (var i = indices.length - 1, at; i >= 0; i--) {\n        var range = ranges[indices[i]];\n        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n        var word = wordAt(cm, range.head);\n        at = word.from;\n        cm.replaceRange(mod(word.word), word.from, word.to);\n      }\n    });\n  }\n\n  map[cK + ctrl + \"Backspace\"] = \"delLineLeft\";\n\n  cmds[map[\"Backspace\"] = \"smartBackspace\"] = function(cm) {\n    if (cm.somethingSelected()) return CodeMirror.Pass;\n\n    cm.operation(function() {\n      var cursors = cm.listSelections();\n      var indentUnit = cm.getOption(\"indentUnit\");\n\n      for (var i = cursors.length - 1; i >= 0; i--) {\n        var cursor = cursors[i].head;\n        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption(\"tabSize\"));\n\n        // Delete by one character by default\n        var deletePos = cm.findPosH(cursor, -1, \"char\", false);\n\n        if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n          var prevIndent = new Pos(cursor.line,\n            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n\n          // Smart delete only if we found a valid prevIndent location\n          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;\n        }\n\n        cm.replaceRange(\"\", deletePos, cursor, \"+delete\");\n      }\n    });\n  };\n\n  cmds[map[cK + ctrl + \"K\"] = \"delLineRight\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(\"\", ranges[i].anchor, Pos(ranges[i].to().line), \"+delete\");\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[cK + ctrl + \"U\"] = \"upcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n  };\n  cmds[map[cK + ctrl + \"L\"] = \"downcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n  };\n\n  cmds[map[cK + ctrl + \"Space\"] = \"setSublimeMark\"] = function(cm) {\n    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n  };\n  cmds[map[cK + ctrl + \"A\"] = \"selectToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) cm.setSelection(cm.getCursor(), found);\n  };\n  cmds[map[cK + ctrl + \"W\"] = \"deleteToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      var from = cm.getCursor(), to = found;\n      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n      cm.state.sublimeKilled = cm.getRange(from, to);\n      cm.replaceRange(\"\", from, to);\n    }\n  };\n  cmds[map[cK + ctrl + \"X\"] = \"swapWithSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n      cm.setCursor(found);\n    }\n  };\n  cmds[map[cK + ctrl + \"Y\"] = \"sublimeYank\"] = function(cm) {\n    if (cm.state.sublimeKilled != null)\n      cm.replaceSelection(cm.state.sublimeKilled, null, \"paste\");\n  };\n\n  map[cK + ctrl + \"G\"] = \"clearBookmarks\";\n  cmds[map[cK + ctrl + \"C\"] = \"showInCenter\"] = function(cm) {\n    var pos = cm.cursorCoords(null, \"local\");\n    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n  };\n\n  var selectLinesCombo = mac ? \"Ctrl-Shift-\" : \"Ctrl-Alt-\";\n  cmds[map[selectLinesCombo + \"Up\"] = \"selectLinesUpward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line > cm.firstLine())\n          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n      }\n    });\n  };\n  cmds[map[selectLinesCombo + \"Down\"] = \"selectLinesDownward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line < cm.lastLine())\n          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n      }\n    });\n  };\n\n  function getTarget(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      from = word.from;\n      to = word.to;\n    }\n    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n  }\n\n  function findAndGoTo(cm, forward) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var query = target.query;\n    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n\n    if (forward ? cur.findNext() : cur.findPrevious()) {\n      cm.setSelection(cur.from(), cur.to());\n    } else {\n      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n                                              : cm.clipPos(Pos(cm.lastLine())));\n      if (forward ? cur.findNext() : cur.findPrevious())\n        cm.setSelection(cur.from(), cur.to());\n      else if (target.word)\n        cm.setSelection(target.from, target.to);\n    }\n  };\n  cmds[map[ctrl + \"F3\"] = \"findUnder\"] = function(cm) { findAndGoTo(cm, true); };\n  cmds[map[\"Shift-\" + ctrl + \"F3\"] = \"findUnderPrevious\"] = function(cm) { findAndGoTo(cm,false); };\n  cmds[map[\"Alt-F3\"] = \"findAllUnder\"] = function(cm) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var cur = cm.getSearchCursor(target.query);\n    var matches = [];\n    var primaryIndex = -1;\n    while (cur.findNext()) {\n      matches.push({anchor: cur.from(), head: cur.to()});\n      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n        primaryIndex++;\n    }\n    cm.setSelections(matches, primaryIndex);\n  };\n\n  map[\"Shift-\" + ctrl + \"[\"] = \"fold\";\n  map[\"Shift-\" + ctrl + \"]\"] = \"unfold\";\n  map[cK + ctrl + \"0\"] = map[cK + ctrl + \"J\"] = \"unfoldAll\";\n\n  map[ctrl + \"I\"] = \"findIncremental\";\n  map[\"Shift-\" + ctrl + \"I\"] = \"findIncrementalReverse\";\n  map[ctrl + \"H\"] = \"replace\";\n  map[\"F3\"] = \"findNext\";\n  map[\"Shift-F3\"] = \"findPrev\";\n\n  CodeMirror.normalizeKeyMap(map);\n});\n\n\n/***/ }),\n\n/***/ \"A1IV\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_js_problem__ = __webpack_require__(\"5Ey+\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vuex__ = __webpack_require__(\"NYxO\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      mysearch: '',\n      dropdownLoading: false,\n      searchResult: []\n    };\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({\n    _onSearch: function _onSearch() {\n      var _this = this;\n\n      if (this.mysearch === '') {\n        this.searchResult = [];\n        return;\n      }\n      this.dropdownLoading = true;\n      console.log('SearchClick');\n      var url = __WEBPACK_IMPORTED_MODULE_3_common_js_data__[\"a\" /* baseUrl */] + '/search';\n      // 清空之前的结果\n      this.searchResult = [];\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.post(url, {\n        'target': 'Problem',\n        'content': this.mysearch,\n        'type': 'title'\n      }).then(function (response) {\n        if (response.data.result.length === 0) {\n          _this.searchResult = [{ title: '\\u65E0\\u6CD5\\u67E5\\u8BE2\\u5230\\u542B\\u6709\\u5173\\u952E\\u5B57:' + _this.mysearch + '\\u7684\\u9898\\u76EE' }];\n        } else {\n          _this.searchResult = response.data.result;\n        }\n        _this.dropdownLoading = false;\n      }, function (response) {\n        console.log(response);\n        _this._onSearch();\n      });\n    },\n    handleCommandDropdown: function handleCommandDropdown(command) {\n      this.setProblem(new __WEBPACK_IMPORTED_MODULE_1_common_js_problem__[\"a\" /* default */]({\n        id: command\n      }));\n      this.$router.push('/home/problem');\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_vuex__[\"a\" /* mapMutations */])({\n    setProblem: 'SET_PROBLEM'\n  }))\n});\n\n/***/ }),\n\n/***/ \"BUZr\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problems_vue__ = __webpack_require__(\"kYSO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ffcf786_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problems_vue__ = __webpack_require__(\"oxMS\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"S1i8\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ffcf786\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problems_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1ffcf786_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problems_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"CK2l\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"RkhK\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  var queryDialog =\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  var replaceQueryDialog =\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n\n\n/***/ }),\n\n/***/ \"EKta\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n\n/***/ \"ELu2\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(\"mvHQ\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_codemirror_mode_javascript_javascript__ = __webpack_require__(\"5IAE\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_codemirror_mode_javascript_javascript___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_codemirror_mode_javascript_javascript__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_codemirror_mode_go_go__ = __webpack_require__(\"CQVp\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_codemirror_mode_go_go___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_codemirror_mode_go_go__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_codemirror_mode_python_python__ = __webpack_require__(\"tWbI\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_codemirror_mode_python_python___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_codemirror_mode_python_python__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_codemirror_mode_ruby_ruby__ = __webpack_require__(\"uOPQ\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_codemirror_mode_ruby_ruby___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_codemirror_mode_ruby_ruby__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_codemirror_mode_clike_clike__ = __webpack_require__(\"6S2o\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_codemirror_mode_clike_clike___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_codemirror_mode_clike_clike__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_codemirror_theme_ambiance_css__ = __webpack_require__(\"vX90\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_codemirror_theme_ambiance_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_codemirror_theme_ambiance_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_codemirror_theme_base16_dark_css__ = __webpack_require__(\"jGSh\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_codemirror_theme_base16_dark_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_codemirror_theme_base16_dark_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_codemirror_theme_cobalt_css__ = __webpack_require__(\"t9xi\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_codemirror_theme_cobalt_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_codemirror_theme_cobalt_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_light_css__ = __webpack_require__(\"Y0SK\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_light_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_codemirror_theme_paraiso_light_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_codemirror_theme_paraiso_dark_css__ = __webpack_require__(\"BR0Y\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_codemirror_theme_paraiso_dark_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_codemirror_theme_paraiso_dark_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_codemirror_theme_rubyblue_css__ = __webpack_require__(\"0tbE\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_codemirror_theme_rubyblue_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_codemirror_theme_rubyblue_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_codemirror_theme_solarized_css__ = __webpack_require__(\"Xdwu\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_codemirror_theme_solarized_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_codemirror_theme_solarized_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_codemirror_theme_mbo_css__ = __webpack_require__(\"1XTk\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_codemirror_theme_mbo_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_codemirror_theme_mbo_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_vuex__ = __webpack_require__(\"NYxO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_axios__);\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// require active-line.js\n__webpack_require__(\"aGTD\");\n\n// closebrackets\n__webpack_require__(\"aX1R\");\n\n// styleSelectedText\n__webpack_require__(\"U80t\");\n__webpack_require__(\"c+I8\");\n\n// hint\n__webpack_require__(\"jQeI\");\n__webpack_require__(\"Mixr\");\n__webpack_require__(\"aGTD\");\n\n// highlightSelectionMatches\n__webpack_require__(\"QSKu\");\n__webpack_require__(\"/A6h\");\n__webpack_require__(\"c+I8\");\n__webpack_require__(\"OkRY\");\n\n// keyMap\n__webpack_require__(\"6S2o\");\n__webpack_require__(\"vq+x\");\n__webpack_require__(\"Z6qg\");\n__webpack_require__(\"RkhK\");\n__webpack_require__(\"LxZp\");\n__webpack_require__(\"c+I8\");\n__webpack_require__(\"CK2l\");\n__webpack_require__(\"7Xsf\");\n__webpack_require__(\"tjx/\");\n__webpack_require__(\"Hyg2\");\n\n// foldGutter\n__webpack_require__(\"Yokd\");\n__webpack_require__(\"fo6W\");\n__webpack_require__(\"soCA\");\n__webpack_require__(\"THjC\");\n__webpack_require__(\"Kk9m\");\n__webpack_require__(\"U3HU\");\n__webpack_require__(\"dxBS\");\n__webpack_require__(\"TQy8\");\n\n// autoCloseTags\n__webpack_require__(\"+/ra\");\n\n// 语法高亮，自行替换为你需要的语言\n\n\n\n\n\n\n// Theme\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      form: {\n        title: '',\n        description: '',\n        level: 1,\n        tag: '',\n        program: '',\n        input: '',\n        output: '',\n        checkLanguageList: ['C']\n      },\n      toolbars: {\n        bold: true, // 粗体\n        italic: true, // 斜体\n        header: true, // 标题\n        underline: true, // 下划线\n        strikethrough: true, // 中划线\n        mark: true, // 标记\n        quote: true, // 引用\n        ol: true, // 有序列表\n        ul: true, // 无序列表\n        link: true, // 链接\n        code: true, // code\n        table: true, // 表格\n        undo: true, // 上一步\n        redo: true, // 下一步\n        trash: true, // 清空\n        alignleft: true, // 左对齐\n        aligncenter: true, // 居中\n        alignright: true, // 右对齐\n        preview: true // 预览\n      },\n      editorOptions1: {\n        tabSize: 4,\n        mode: 'text/x-csrc',\n        theme: 'default',\n        lineNumbers: true,\n        line: true,\n        keyMap: 'sublime',\n        foldGutter: true,\n        gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n        // 选中文本自动高亮，及高亮方式\n        styleSelectedText: true,\n        highlightSelectionMatches: { showToken: /\\w/, annotateScrollbar: true\n          // 如果有hint方面的配置，也应该出现在这里\n        } },\n      editorOptions2: {\n        tabSize: 4,\n        mode: 'text/x-csrc',\n        theme: 'default',\n        lineNumbers: true,\n        line: true,\n        keyMap: 'sublime',\n        foldGutter: true,\n        gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n        // 选中文本自动高亮，及高亮方式\n        styleSelectedText: true,\n        highlightSelectionMatches: { showToken: /\\w/, annotateScrollbar: true\n          // 如果有hint方面的配置，也应该出现在这里\n        } },\n      editorThemes: __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"d\" /* editorThemes */],\n      selectTheme: __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"d\" /* editorThemes */][0],\n      Languages: __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"e\" /* languages */],\n      selectLanguage: __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"e\" /* languages */][0],\n      editorModes: __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"f\" /* editorModes */],\n      code: '',\n      templetC: { value: 'c', text: 'C', defaultCode: '' },\n      templetCpp: { value: 'cpp', text: 'C++', defaultCode: '' },\n      templetCsharp: { value: 'csharp', text: 'C#', defaultCode: '' },\n      templetJava: { value: 'java', text: 'Java', defaultCode: '' },\n      templetPython: { value: 'python3', text: 'Python3', defaultCode: '' },\n      templetJs: { value: 'javascript', text: 'JavaScript', defaultCode: '' },\n      templetRuby: { value: 'ruby', text: 'Ruby', defaultCode: '' },\n      templetGolang: { value: 'golang', text: 'Go', defaultCode: '' }\n    };\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({\n    quit: function quit() {\n      this._clearAllData();\n      this.$emit('editFinish');\n    },\n    clickBtn: function clickBtn() {\n      var _this = this;\n\n      var Base64 = __webpack_require__(\"xrTZ\").Base64;\n      //把最后一次模板templet加上\n      this._addTemplet();\n      var array = this._pushALLTemplets();\n      console.log(array);\n      var resultTemplets = [];\n\n      var _loop = function _loop(i) {\n        resultTemplets.push(array.find(function (item) {\n          return item.text === _this.form.checkLanguageList[i];\n        }));\n      };\n\n      for (var i = 0; i < this.form.checkLanguageList.length; i++) {\n        _loop(i);\n      }\n      //console.log(resultTemplets)\n      console.log(this.isEdit);\n\n      if (this.isEdit) {\n        //修改题目\n        console.log('修改题目');\n        this.reviseProblem(Base64, resultTemplets);\n      } else {\n        //创建题目\n        this.setupProblem(Base64, resultTemplets);\n      }\n    },\n    setupProblem: function setupProblem(Base64, resultTemplets) {\n      var _this2 = this;\n\n      var url = __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"a\" /* baseUrl */] + '/problems';\n      __WEBPACK_IMPORTED_MODULE_17_axios___default.a.post(url, {\n        title: this.form.title,\n        description: this.form.description,\n        level: this.form.level + '',\n        tag: this.form.tag,\n        program: Base64.encode(this.form.program),\n        code: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(resultTemplets),\n        input: Base64.encode(this.form.input),\n        output: Base64.encode(this.form.output)\n      }).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this2.$notify({\n            title: '成功',\n            message: '\\u6210\\u529F\\u521B\\u5EFA\\u9898\\u76EE:' + response.data.result[0].title,\n            type: 'success'\n          });\n          //成功后清除数据\n          _this2._clearAllData();\n          _this2.$emit('editFinish');\n        } else if (response.data.msg === __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"c\" /* MSG_NO */]) {\n          _this2.$notify({\n            title: '创建失败',\n            message: '' + response.data.error,\n            type: 'error'\n          });\n        }\n      }, function (response) {});\n    },\n    reviseProblem: function reviseProblem(Base64, resultTemplets) {\n      var _this3 = this;\n\n      var url = __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id;\n      __WEBPACK_IMPORTED_MODULE_17_axios___default.a.put(url, {\n        title: this.form.title,\n        description: this.form.description,\n        level: this.form.level + '',\n        tag: this.form.tag,\n        program: Base64.encode(this.form.program),\n        code: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(resultTemplets),\n        input: Base64.encode(this.form.input),\n        output: Base64.encode(this.form.output)\n      }).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this3.$notify({\n            title: '成功',\n            message: '修改题目成功',\n            type: 'success'\n          });\n          //成功后清除数据\n          _this3._clearAllData();\n          _this3.$emit('editFinish');\n        } else if (response.data.msg === __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"c\" /* MSG_NO */]) {\n          _this3.$notify({\n            title: '修改失败',\n            message: '' + response.data.error,\n            type: 'error'\n          });\n        }\n      }, function (response) {});\n    },\n    _clearAllData: function _clearAllData() {\n      //清除所有数据 回到默认状态\n      this.form.title = '';\n      this.form.description = '';\n      this.form.level = 1;\n      this.form.tag = '';\n      this.form.program = '';\n      this.form.input = '';\n      this.form.output = '';\n      this.form.checkLanguageList = ['C'];\n      this.code = '';\n      this.selectTheme = __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"d\" /* editorThemes */][0];\n      this.selectLanguage = __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"e\" /* languages */][0];\n      this.editorOptions2.mode = this.editorModes[0];\n      this.editorOptions2.theme = this.selectTheme;\n      this.templetC = { value: 'c', text: 'C', defaultCode: '' };\n      this.templetCpp = { value: 'cpp', text: 'C++', defaultCode: '' };\n      this.templetCsharp = { value: 'csharp', text: 'C#', defaultCode: '' };\n      this.templetJava = { value: 'java', text: 'Java', defaultCode: '' };\n      this.templetPython = { value: 'python3', text: 'Python3', defaultCode: '' };\n      this.templetJs = { value: 'javascript', text: 'JavaScript', defaultCode: '' };\n      this.templetRuby = { value: 'ruby', text: 'Ruby', defaultCode: '' };\n      this.templetGolang = { value: 'golang', text: 'Go', defaultCode: ''\n        //最后清空vuex中的Templets\n      };this.setTemplets([]);\n    },\n    handleCommandLangage: function handleCommandLangage(index) {\n      var _this4 = this;\n\n      //切换语言\n      console.log('xuan ' + index);\n      this.editorOptions2.mode = this.editorModes[index];\n      this.selectLanguage = this.Languages[index];\n      //如果之前(一次编辑中)写过code   那么code=之前的对应的templet的defaultCode\n      var result = this.templets.find(function (item) {\n        return item && item.text === _this4.selectLanguage;\n      });\n      if (result) {\n        this.code = result.defaultCode;\n      } else {\n        this.code = '';\n      }\n    },\n    dropdownChange: function dropdownChange(isShow) {\n      //当语言下拉菜单状态改变\n      if (isShow) {\n        //当语言下拉菜单展开\n        this._addTemplet();\n        var res = this._pushALLTemplets();\n        //  这里有bug (showPromblemInfo获取了setTemplets 这里又修改了Templets )\n        //   解决：在此之前 每个对应模板加入相应的的数据\n        this.setTemplets(res);\n      }\n    },\n    _pushALLTemplets: function _pushALLTemplets() {\n      //把所有模板集合成一个数组返回\n      var result = [];\n      result.push(this.templetC);\n      result.push(this.templetCpp);\n      result.push(this.templetCsharp);\n      result.push(this.templetJava);\n      result.push(this.templetPython);\n      result.push(this.templetJs);\n      result.push(this.templetRuby);\n      result.push(this.templetGolang);\n      return result;\n    },\n    _addTemplet: function _addTemplet() {\n      //把code加入到当前选中的语言的 对应的语言模板的defaultCode中\n      if (this.selectLanguage === 'C') {\n        this.templetC.defaultCode = this.code;\n      } else if (this.selectLanguage === 'C++') {\n        this.templetCpp.defaultCode = this.code;\n      } else if (this.selectLanguage === 'C#') {\n        this.templetCsharp.defaultCode = this.code;\n      } else if (this.selectLanguage === 'Java') {\n        this.templetJava.defaultCode = this.code;\n      } else if (this.selectLanguage === 'Python3') {\n        this.templetPython.defaultCode = this.code;\n      } else if (this.selectLanguage === 'JavaScript') {\n        this.templetJs.defaultCode = this.code;\n      } else if (this.selectLanguage === 'Ruby') {\n        this.templetRuby.defaultCode = this.code;\n      } else if (this.selectLanguage === 'Go') {\n        this.templetGolang.defaultCode = this.code;\n      }\n    },\n    showPromblemInfo: function showPromblemInfo() {\n      var _this5 = this;\n\n      this._clearAllData();\n      //处于编辑题目模式 先展示出题目信息\n      var url1 = __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id;\n      __WEBPACK_IMPORTED_MODULE_17_axios___default.a.get(url1).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this5.form.title = response.data.result[0].title;\n          _this5.form.description = response.data.result[0].description;\n          _this5.form.level = response.data.result[0].level;\n          _this5.form.tag = response.data.result[0].tag;\n        }\n      }, function (response) {});\n      var url2 = __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.problem.id + '/codes';\n      __WEBPACK_IMPORTED_MODULE_17_axios___default.a.get(url2).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_16_common_js_data__[\"b\" /* MSG_OK */]) {\n          console.log(JSON.parse(response.data.result[0].code));\n          _this5.setTemplets(JSON.parse(response.data.result[0].code));\n          //templetC templetCpp templetCsharp... 加入对应的数据 明天写。\n          _this5.changeTemplets();\n        }\n      }, function (response) {});\n    },\n    changeTemplets: function changeTemplets() {\n      var _this6 = this;\n\n      var tempC = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'C';\n        }\n      });\n      if (tempC) {\n        this.templetC = tempC;\n      }\n\n      var tempCpp = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'C++';\n        }\n      });\n      if (tempCpp) {\n        this.templetCpp = tempCpp;\n      }\n\n      var tempCsharp = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'C#';\n        }\n      });\n      if (tempCsharp) {\n        this.templetCsharp = tempCsharp;\n      }\n\n      var tempJava = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'Java';\n        }\n      });\n      if (tempJava) {\n        this.templetJava = tempJava;\n      }\n      var tempPython = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'Python3';\n        }\n      });\n      if (tempPython) {\n        this.templetPython = tempPython;\n      }\n\n      var tempJs = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'JavaScript';\n        }\n      });\n      if (tempJs) {\n        this.templetJs = tempJs;\n      }\n\n      var tempRuby = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'Ruby';\n        }\n      });\n      if (tempRuby) {\n        this.templetRuby = tempRuby;\n      }\n\n      var tempGo = this.templets.find(function (item) {\n        if (item) {\n          return item.text === 'Go';\n        }\n      });\n      if (tempGo) {\n        this.templetGolang = tempGo;\n      }\n\n      this.code = this.templets.find(function (item) {\n        return item && item.text === _this6.selectLanguage;\n      }).defaultCode || '';\n    },\n    calcBtnText: function calcBtnText() {\n      //计算btn的文字\n      if (this.isEdit) {\n        return '修改题目';\n      } else {\n        return '创建题目';\n      }\n    },\n    handleCommandTheme: function handleCommandTheme(command) {\n      //修改主题\n      this.editorOptions2.theme = command;\n      this.selectTheme = command;\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15_vuex__[\"a\" /* mapMutations */])({\n    setTemplets: 'SET_TEMPLETS'\n  })),\n  computed: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15_vuex__[\"c\" /* mapGetters */])(['problem', 'templets']))\n});\n\n/***/ }),\n\n/***/ \"EuP9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"EKta\")\nvar ieee754 = __webpack_require__(\"ujcs\")\nvar isArray = __webpack_require__(\"sOR5\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"DuR2\")))\n\n/***/ }),\n\n/***/ \"HbqP\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problem_edit_vue__ = __webpack_require__(\"ELu2\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e52881_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problem_edit_vue__ = __webpack_require__(\"c2Vz\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"hdeF\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-49e52881\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_manage_problem_edit_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e52881_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_manage_problem_edit_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"Hyg2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"c+I8\"), __webpack_require__(\"RkhK\"), __webpack_require__(\"vq+x\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        vim.lastHPos = Infinity;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch));\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '['};\n        var selfPaired = {'\\'': true, '\"': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */);\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n');\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i];\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /-?\\d+/g;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        var token;\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0];\n          start = match.index;\n          end = start + token.length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1;\n          var number = parseInt(token) + (increment * actionArgs.repeat);\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          numberStr = number.toString();\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1;\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      };\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm);\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done;\n        var event = history[history.length - 2];\n        return event && event.ranges && event.ranges[0].head;\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySlash(argString) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart);\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            regexPart = regexPart + '/' + flagsPart;\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); };\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = [];\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;\n        var changes = lastChange.changes;\n        var text = [];\n        var i = 0;\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i]);\n          if (changes[i] instanceof InsertModeKey) {\n             i++;\n          } else {\n             i+= selLength;\n          }\n        }\n        lastChange.changes = text;\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      };\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n            } else {\n                lastChange.changes.push(text);\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    };\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim;\n        var lastSel = vim.lastSelection;\n        var offset = getOffset(lastSel.anchor, lastSel.head);\n        selectForInsert(cm, head, offset.line + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n\n\n/***/ }),\n\n/***/ \"IruO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dialog', {\n    attrs: {\n      \"title\": \"提示\",\n      \"visible\": _vm.visible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.visible = $event\n      }\n    }\n  }, [_c('span', {\n    staticClass: \"text\"\n  }, [_vm._v(_vm._s(_vm.text))]), _vm._v(\" \"), _c('span', {\n    staticClass: \"dialog-footer\",\n    slot: \"footer\"\n  }, [_c('el-button', {\n    on: {\n      \"click\": _vm.cancel\n    }\n  }, [_vm._v(_vm._s(_vm.cancelBtnText))]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.confirm\n    }\n  }, [_vm._v(_vm._s(_vm.confirmBtnText))])], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"JM2O\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"2EAN\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"013a4c5f\", content, true);\n\n/***/ }),\n\n/***/ \"Kk9m\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"THjC\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"LxZp\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"RkAk\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"e2c66042\", content, true);\n\n/***/ }),\n\n/***/ \"Mixr\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var Pos = CodeMirror.Pos;\n\n  function forEach(arr, f) {\n    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);\n  }\n\n  function arrayContains(arr, item) {\n    if (!Array.prototype.indexOf) {\n      var i = arr.length;\n      while (i--) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return arr.indexOf(item) != -1;\n  }\n\n  function scriptHint(editor, keywords, getToken, options) {\n    // Find the token at the cursor\n    var cur = editor.getCursor(), token = getToken(editor, cur);\n    if (/\\b(?:string|comment)\\b/.test(token.type)) return;\n    token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;\n\n    // If it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n      token = {start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n               type: token.string == \".\" ? \"property\" : null};\n    } else if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var tprop = token;\n    // If it is a property, find out what it is a property of.\n    while (tprop.type == \"property\") {\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (tprop.string != \".\") return;\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (!context) var context = [];\n      context.push(tprop);\n    }\n    return {list: getCompletions(token, context, keywords, options),\n            from: Pos(cur.line, token.start),\n            to: Pos(cur.line, token.end)};\n  }\n\n  function javascriptHint(editor, options) {\n    return scriptHint(editor, javascriptKeywords,\n                      function (e, cur) {return e.getTokenAt(cur);},\n                      options);\n  };\n  CodeMirror.registerHelper(\"hint\", \"javascript\", javascriptHint);\n\n  function getCoffeeScriptToken(editor, cur) {\n  // This getToken, it is for coffeescript, imitates the behavior of\n  // getTokenAt method in javascript.js, that is, returning \"property\"\n  // type and treat \".\" as indepenent token.\n    var token = editor.getTokenAt(cur);\n    if (cur.ch == token.start + 1 && token.string.charAt(0) == '.') {\n      token.end = token.start;\n      token.string = '.';\n      token.type = \"property\";\n    }\n    else if (/^\\.[\\w$_]*$/.test(token.string)) {\n      token.type = \"property\";\n      token.start++;\n      token.string = token.string.replace(/\\./, '');\n    }\n    return token;\n  }\n\n  function coffeescriptHint(editor, options) {\n    return scriptHint(editor, coffeescriptKeywords, getCoffeeScriptToken, options);\n  }\n  CodeMirror.registerHelper(\"hint\", \"coffeescript\", coffeescriptHint);\n\n  var stringProps = (\"charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight \" +\n                     \"toUpperCase toLowerCase split concat match replace search\").split(\" \");\n  var arrayProps = (\"length concat join splice push pop shift unshift slice reverse sort indexOf \" +\n                    \"lastIndexOf every some filter forEach map reduce reduceRight \").split(\" \");\n  var funcProps = \"prototype apply call bind\".split(\" \");\n  var javascriptKeywords = (\"break case catch continue debugger default delete do else false finally for function \" +\n                  \"if in instanceof new null return switch throw true try typeof var void while with\").split(\" \");\n  var coffeescriptKeywords = (\"and break catch class continue delete do else extends false finally for \" +\n                  \"if in instanceof isnt new no not null of off on or return switch then throw true try typeof until void while with yes\").split(\" \");\n\n  function forAllProps(obj, callback) {\n    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n      for (var name in obj) callback(name)\n    } else {\n      for (var o = obj; o; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(callback)\n    }\n  }\n\n  function getCompletions(token, context, keywords, options) {\n    var found = [], start = token.string, global = options && options.globalScope || window;\n    function maybeAdd(str) {\n      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);\n    }\n    function gatherCompletions(obj) {\n      if (typeof obj == \"string\") forEach(stringProps, maybeAdd);\n      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);\n      else if (obj instanceof Function) forEach(funcProps, maybeAdd);\n      forAllProps(obj, maybeAdd)\n    }\n\n    if (context && context.length) {\n      // If this is a property, see if it belongs to some object we can\n      // find in the current environment.\n      var obj = context.pop(), base;\n      if (obj.type && obj.type.indexOf(\"variable\") === 0) {\n        if (options && options.additionalContext)\n          base = options.additionalContext[obj.string];\n        if (!options || options.useGlobalScope !== false)\n          base = base || global[obj.string];\n      } else if (obj.type == \"string\") {\n        base = \"\";\n      } else if (obj.type == \"atom\") {\n        base = 1;\n      } else if (obj.type == \"function\") {\n        if (global.jQuery != null && (obj.string == '$' || obj.string == 'jQuery') &&\n            (typeof global.jQuery == 'function'))\n          base = global.jQuery();\n        else if (global._ != null && (obj.string == '_') && (typeof global._ == 'function'))\n          base = global._();\n      }\n      while (base != null && context.length)\n        base = base[context.pop().string];\n      if (base != null) gatherCompletions(base);\n    } else {\n      // If not, just look in the global object and any local scope\n      // (reading into JS mode internals to get at the local and global variables)\n      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);\n      for (var v = token.state.globalVars; v; v = v.next) maybeAdd(v.name);\n      if (!options || options.useGlobalScope !== false)\n        gatherCompletions(global);\n      forEach(keywords, maybeAdd);\n    }\n    return found;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"OkRY\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"), __webpack_require__(\"/A6h\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp(\"\\\\b\" + query + \"\\\\b\") : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n\n\n/***/ }),\n\n/***/ \"QSKu\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n\n\n/***/ }),\n\n/***/ \"RkAk\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".CodeMirror-dialog{position:absolute;left:0;right:0;background:inherit;z-index:15;padding:.1em .8em;overflow:hidden;color:inherit}.CodeMirror-dialog-top{border-bottom:1px solid #eee;top:0}.CodeMirror-dialog-bottom{border-top:1px solid #eee;bottom:0}.CodeMirror-dialog input{border:none;outline:none;background:transparent;width:20em;color:inherit;font-family:monospace}.CodeMirror-dialog button{font-size:70%}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/dialog/dialog.css\"],\"names\":[],\"mappings\":\"AAAA,mBACE,kBAAmB,AACnB,OAAQ,AAAC,QAAS,AAClB,mBAAoB,AACpB,WAAY,AACZ,kBAAmB,AACnB,gBAAiB,AACjB,aAAe,CAChB,AAED,uBACE,6BAA8B,AAC9B,KAAO,CACR,AAED,0BACE,0BAA2B,AAC3B,QAAU,CACX,AAED,yBACE,YAAa,AACb,aAAc,AACd,uBAAwB,AACxB,WAAY,AACZ,cAAe,AACf,qBAAuB,CACxB,AAED,0BACE,aAAe,CAChB\",\"file\":\"dialog.css\",\"sourcesContent\":[\".CodeMirror-dialog {\\n  position: absolute;\\n  left: 0; right: 0;\\n  background: inherit;\\n  z-index: 15;\\n  padding: .1em .8em;\\n  overflow: hidden;\\n  color: inherit;\\n}\\n\\n.CodeMirror-dialog-top {\\n  border-bottom: 1px solid #eee;\\n  top: 0;\\n}\\n\\n.CodeMirror-dialog-bottom {\\n  border-top: 1px solid #eee;\\n  bottom: 0;\\n}\\n\\n.CodeMirror-dialog input {\\n  border: none;\\n  outline: none;\\n  background: transparent;\\n  width: 20em;\\n  color: inherit;\\n  font-family: monospace;\\n}\\n\\n.CodeMirror-dialog button {\\n  font-size: 70%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"RkhK\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n\n\n/***/ }),\n\n/***/ \"RrKZ\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".el-dropdown .el-input[data-v-2d96e4b2]{width:500px}.el-dropdown-menu__item[data-v-2d96e4b2]{width:auto}.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2]{display:inline-block}.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2]{float:right;margin-top:10px}.el-dropdown-menu[data-v-2d96e4b2]{width:500px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/search/search.vue\"],\"names\":[],\"mappings\":\"AACA,wCACE,WAAa,CACd,AACD,yCACE,UAAY,CACb,AACD,6DACE,oBAAsB,CACvB,AACD,2DACE,YAAa,AACb,eAAiB,CAClB,AACD,mCACE,WAAa,CACd\",\"file\":\"search.vue\",\"sourcesContent\":[\"\\n.el-dropdown .el-input[data-v-2d96e4b2] {\\n  width: 500px;\\n}\\n.el-dropdown-menu__item[data-v-2d96e4b2] {\\n  width: auto;\\n}\\n.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2] {\\n  display: inline-block;\\n}\\n.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2] {\\n  float: right;\\n  margin-top: 10px;\\n}\\n.el-dropdown-menu[data-v-2d96e4b2] {\\n  width: 500px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"S1i8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"qm6i\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"a0ec5c32\", content, true);\n\n/***/ }),\n\n/***/ \"THjC\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n\n/***/ }),\n\n/***/ \"TQy8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n\n/***/ }),\n\n/***/ \"U3HU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"U80t\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line < CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n\n\n/***/ }),\n\n/***/ \"XEAW\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_confirm_vue__ = __webpack_require__(\"3CS+\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_48f25eaf_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_confirm_vue__ = __webpack_require__(\"IruO\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"JM2O\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-48f25eaf\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_confirm_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_48f25eaf_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_confirm_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"YOyO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_search_vue__ = __webpack_require__(\"A1IV\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d96e4b2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_search_vue__ = __webpack_require__(\"0tR3\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"yGpH\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2d96e4b2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_search_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d96e4b2_hasScoped_true_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_lib_selector_type_template_index_0_search_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"Yokd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"engA\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"da13b76a\", content, true);\n\n/***/ }),\n\n/***/ \"Z6qg\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.indexOf(endString);\n    }\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n\n\n/***/ }),\n\n/***/ \"aGTD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"aX1R\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type) || stringStartsAfter(cm, pos)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch\n  }\n});\n\n\n/***/ }),\n\n/***/ \"c+I8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureGlobal(regexp) {\n    return regexp.global ? regexp : new RegExp(regexp.source, regexpFlags(regexp) + \"g\")\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (end.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureGlobal(query)\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n\n\n/***/ }),\n\n/***/ \"c2Vz\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"problem-edit\"\n  }, [_c('div', {\n    staticClass: \"panel\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_c('i', {\n    staticClass: \"el-icon-arrow-left\",\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }), _vm._v(\" \"), _c('h3', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isEdit),\n      expression: \"!isEdit\"\n    }],\n    staticClass: \"panel-title\"\n  }, [_vm._v(\"创建题目\")]), _vm._v(\" \"), _c('h3', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isEdit),\n      expression: \"isEdit\"\n    }],\n    staticClass: \"panel-title\"\n  }, [_vm._v(\"修改题目(ID:\" + _vm._s(_vm.problem.id) + \")\")]), _vm._v(\" \"), _c('el-tag', {\n    staticClass: \"quit-tag\",\n    attrs: {\n      \"type\": \"danger\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }, [_vm._v(\"退出\")])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"model\": _vm.form,\n      \"label-width\": \"80px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标题\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.title),\n      callback: function($$v) {\n        _vm.form.title = $$v\n      },\n      expression: \"form.title\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标签\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.tag),\n      callback: function($$v) {\n        _vm.form.tag = $$v\n      },\n      expression: \"form.tag\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目难度\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.form.level),\n      callback: function($$v) {\n        _vm.form.level = $$v\n      },\n      expression: \"form.level\"\n    }\n  }, [_c('el-radio', {\n    attrs: {\n      \"label\": 1\n    }\n  }, [_vm._v(\"1\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 2\n    }\n  }, [_vm._v(\"2\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 3\n    }\n  }, [_vm._v(\"3\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 4\n    }\n  }, [_vm._v(\"4\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 5\n    }\n  }, [_vm._v(\"5\")])], 1)], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目描述\"\n    }\n  }, [_c('mavon-editor', {\n    attrs: {\n      \"default_open\": \"edit\",\n      \"toolbars\": _vm.toolbars\n    },\n    model: {\n      value: (_vm.form.description),\n      callback: function($$v) {\n        _vm.form.description = $$v\n      },\n      expression: \"form.description\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"官方程序代码\"\n    }\n  }, [_c('div', {\n    staticClass: \"program-edit\"\n  }, [_c('codemirror', {\n    staticClass: \"program-edit-inner\",\n    attrs: {\n      \"options\": _vm.editorOptions1\n    },\n    model: {\n      value: (_vm.form.program),\n      callback: function($$v) {\n        _vm.form.program = $$v\n      },\n      expression: \"form.program\"\n    }\n  })], 1)]), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输入样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample input testcase\"\n    },\n    model: {\n      value: (_vm.form.input),\n      callback: function($$v) {\n        _vm.form.input = $$v\n      },\n      expression: \"form.input\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输出样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample output testcase\"\n    },\n    model: {\n      value: (_vm.form.output),\n      callback: function($$v) {\n        _vm.form.output = $$v\n      },\n      expression: \"form.output\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"模板选择\"\n    }\n  }, [_c('el-checkbox-group', {\n    model: {\n      value: (_vm.form.checkLanguageList),\n      callback: function($$v) {\n        _vm.form.checkLanguageList = $$v\n      },\n      expression: \"form.checkLanguageList\"\n    }\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-checkbox', {\n      key: index,\n      attrs: {\n        \"label\": item\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor-wrapper\"\n  }, [_c('div', {\n    staticClass: \"dropdown-wrapper\"\n  }, [_c('el-dropdown', {\n    staticClass: \"language-dropdown\",\n    attrs: {\n      \"trigger\": \"click\",\n      \"menu-align\": \"start\"\n    },\n    on: {\n      \"command\": _vm.handleCommandLangage,\n      \"visible-change\": _vm.dropdownChange\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\",\n      \"size\": \"small\"\n    }\n  }, [_vm._v(_vm._s(_vm.selectLanguage)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": index\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n                \")])\n  }))], 1), _vm._v(\" \"), _c('el-dropdown', {\n    staticClass: \"el-dropdown-theme\",\n    attrs: {\n      \"menu-align\": \"start\",\n      \"trigger\": \"click\"\n    },\n    on: {\n      \"command\": _vm.handleCommandTheme\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"success\",\n      \"size\": \"small\"\n    }\n  }, [_vm._v(\"\\n                \" + _vm._s(_vm.selectTheme)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.editorThemes), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": item\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n                \")])\n  }))], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor\"\n  }, [_c('codemirror', {\n    ref: \"myEditor\",\n    attrs: {\n      \"options\": _vm.editorOptions2\n    },\n    model: {\n      value: (_vm.code),\n      callback: function($$v) {\n        _vm.code = $$v\n      },\n      expression: \"code\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"setup-btn\",\n    attrs: {\n      \"type\": \"success\"\n    },\n    domProps: {\n      \"textContent\": _vm._s(_vm.calcBtnText())\n    },\n    on: {\n      \"click\": _vm.clickBtn\n    }\n  })], 1)], 1)], 1)])])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"drNd\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".problem-edit .panel[data-v-49e52881]{border-radius:5px;margin-bottom:20px;background-color:#fff;border:1px solid #ddd;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.problem-edit .panel .panel-heading[data-v-49e52881]{padding:10px 15px;color:#333;background-color:#f5f5f5;border-color:#ddd;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom:1px solid transparent}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]{color:#b0c4de}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-heading .panel-title[data-v-49e52881]{display:inline-block;margin-left:5px;margin-top:0;margin-bottom:0;font-size:18px;color:inherit;font-weight:500;line-height:1.1}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]{float:right}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-body[data-v-49e52881]{padding:15px 45px}.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881]{margin-right:10%}.problem-edit .panel .panel-body .el-form .el-form-item .program-edit[data-v-49e52881]{display:inline-block;width:83%;border:1px solid #ddd}.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881]{width:50%}.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881]{position:relative}.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881]{position:absolute;top:0;left:0;display:inline-block}.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper .language-dropdown[data-v-49e52881]{margin-right:5px}.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881]{margin-left:205px;display:inline-block;width:70%;border:1px solid #ddd}.problem-edit .panel .panel-body .el-form .editor-wrapper .editor .CodeMirror[data-v-49e52881]{height:330px}.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881]{position:relative;left:10px;bottom:10px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problem-edit.vue\"],\"names\":[],\"mappings\":\"AACA,sCACE,kBAAmB,AACnB,mBAAoB,AACpB,sBAAuB,AACvB,sBAAuB,AACvB,6CAA+C,AAC/C,oCAAuC,CACxC,AACD,qDACE,kBAAmB,AACnB,WAAY,AACZ,yBAA0B,AAC1B,kBAAmB,AACnB,2BAA4B,AAC5B,4BAA6B,AAC7B,mCAAqC,CACtC,AACD,yEACE,aAAe,CAChB,AACD,+EACE,cAAgB,CACjB,AACD,kEACE,qBAAsB,AACtB,gBAAiB,AACjB,aAAc,AACd,gBAAiB,AACjB,eAAgB,AAChB,cAAe,AACf,gBAAiB,AACjB,eAAiB,CAClB,AACD,+DACE,WAAa,CACd,AACD,qEACE,cAAgB,CACjB,AACD,kDACE,iBAAmB,CACpB,AACD,yEACE,gBAAkB,CACnB,AACD,uFACE,qBAAsB,AACtB,UAAW,AACX,qBAAuB,CACxB,AACD,sFACE,SAAW,CACZ,AACD,2EACE,iBAAmB,CACpB,AACD,6FACE,kBAAmB,AACnB,MAAO,AACP,OAAQ,AACR,oBAAsB,CACvB,AACD,gHACE,gBAAkB,CACnB,AACD,mFACE,kBAAmB,AACnB,qBAAsB,AACtB,UAAW,AACX,qBAAuB,CACxB,AACD,+FACE,YAAc,CACf,AACD,sFACE,kBAAmB,AACnB,UAAW,AACX,WAAa,CACd\",\"file\":\"manage-problem-edit.vue\",\"sourcesContent\":[\"\\n.problem-edit .panel[data-v-49e52881] {\\n  border-radius: 5px;\\n  margin-bottom: 20px;\\n  background-color: #fff;\\n  border: 1px solid #ddd;\\n  -webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n  box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n}\\n.problem-edit .panel .panel-heading[data-v-49e52881] {\\n  padding: 10px 15px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n  border-color: #ddd;\\n  border-top-left-radius: 5px;\\n  border-top-right-radius: 5px;\\n  border-bottom: 1px solid transparent;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881] {\\n  color: #b0c4de;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-heading .panel-title[data-v-49e52881] {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-size: 18px;\\n  color: inherit;\\n  font-weight: 500;\\n  line-height: 1.1;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881] {\\n  float: right;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-body[data-v-49e52881] {\\n  padding: 15px 45px;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881] {\\n  margin-right: 10%;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item .program-edit[data-v-49e52881] {\\n  display: inline-block;\\n  width: 83%;\\n  border: 1px solid #ddd;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881] {\\n  width: 50%;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881] {\\n  position: relative;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881] {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  display: inline-block;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper .language-dropdown[data-v-49e52881] {\\n  margin-right: 5px;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881] {\\n  margin-left: 205px;\\n  display: inline-block;\\n  width: 70%;\\n  border: 1px solid #ddd;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .editor .CodeMirror[data-v-49e52881] {\\n  height: 330px;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881] {\\n  position: relative;\\n  left: 10px;\\n  bottom: 10px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"dxBS\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"engA\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".CodeMirror-foldmarker{color:blue;text-shadow:#b9f 1px 1px 2px,#b9f -1px -1px 2px,#b9f 1px -1px 2px,#b9f -1px 1px 2px;font-family:arial;line-height:.3;cursor:pointer}.CodeMirror-foldgutter{width:.7em}.CodeMirror-foldgutter-folded,.CodeMirror-foldgutter-open{cursor:pointer}.CodeMirror-foldgutter-open:after{content:\\\"\\\\25BE\\\"}.CodeMirror-foldgutter-folded:after{content:\\\"\\\\25B8\\\"}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/fold/foldgutter.css\"],\"names\":[],\"mappings\":\"AAAA,uBACE,WAAY,AACZ,oFAAwF,AACxF,kBAAmB,AACnB,eAAgB,AAChB,cAAgB,CACjB,AACD,uBACE,UAAY,CACb,AACD,0DAEE,cAAgB,CACjB,AACD,kCACE,eAAiB,CAClB,AACD,oCACE,eAAiB,CAClB\",\"file\":\"foldgutter.css\",\"sourcesContent\":[\".CodeMirror-foldmarker {\\n  color: blue;\\n  text-shadow: #b9f 1px 1px 2px, #b9f -1px -1px 2px, #b9f 1px -1px 2px, #b9f -1px 1px 2px;\\n  font-family: arial;\\n  line-height: .3;\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter {\\n  width: .7em;\\n}\\n.CodeMirror-foldgutter-open,\\n.CodeMirror-foldgutter-folded {\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter-open:after {\\n  content: \\\"\\\\25BE\\\";\\n}\\n.CodeMirror-foldgutter-folded:after {\\n  content: \\\"\\\\25B8\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"fo6W\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"hdeF\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"drNd\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"aa779c20\", content, true);\n\n/***/ }),\n\n/***/ \"jQeI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n\n/***/ }),\n\n/***/ \"kYSO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(\"Dd8w\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_common_js_data__ = __webpack_require__(\"DW9A\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(\"mtWM\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__node_modules_element_ui_packages_form_src_form_item__ = __webpack_require__(\"95Re\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_components_search_search__ = __webpack_require__(\"YOyO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_components_manager_manage_problem_edit__ = __webpack_require__(\"HbqP\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vuex__ = __webpack_require__(\"NYxO\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_common_js_problem__ = __webpack_require__(\"5Ey+\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_base_confirm_confirm__ = __webpack_require__(\"XEAW\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      problemDatas: [],\n      cur_page: 1,\n      multipleSelection: [],\n      select_cate: '',\n      select_word: '',\n      del_list: [],\n      is_search: false,\n      rules: {\n        id: [{ required: true, message: 'id不能为空', trigger: 'blur' }, { min: 3, max: 3, message: 'id为3位字母', trigger: 'blur' }],\n        title: [{ required: true, message: '标题不能为空', trigger: 'blur' }, { min: 5, message: '标题过短', trigger: 'blur' }],\n        description: [{ required: true, message: '描述不能为空', trigger: 'blur' }, { min: 5, message: '描述过短', trigger: 'blur' }]\n      },\n      isShowEdit: false, //是否展示编辑页面\n      isEdit: false, //false新建题目 true编辑题目\n      confirmText: '',\n      curProblemId: '',\n      curProblemTitle: '',\n      editorThemes: __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"d\" /* editorThemes */],\n      selectTheme: __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"d\" /* editorThemes */][0]\n    };\n  },\n  created: function created() {\n    this._getProblemsData(this.cur_page);\n  },\n\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({\n    showSetupProblem: function showSetupProblem() {\n      this.isEdit = false;\n      this.isShowEdit = true;\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.cur_page = val;\n      this._getProblemsData(this.cur_page);\n    },\n    _getProblemsData: function _getProblemsData(curPage) {\n      var _this = this;\n\n      var url = __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"a\" /* baseUrl */] + '/problems?page=' + curPage;\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.get(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this.problemDatas = response.data.result;\n        }\n      }, function (response) {});\n    },\n    formatter: function formatter(row, column) {\n      return row.address;\n    },\n    filterTag: function filterTag(value, row) {\n      return row.tag === value;\n    },\n    handleEdit: function handleEdit(index, row) {\n      //点击编辑按钮\n      console.log(row);\n      this.saveOneProblem(new __WEBPACK_IMPORTED_MODULE_7_common_js_problem__[\"a\" /* default */](row));\n      this.isEdit = true;\n      this.isShowEdit = true;\n      this.$refs.problemEdit.showPromblemInfo();\n    },\n    handleDelete: function handleDelete(index, row) {\n      //点击删除按钮\n      this.curProblemId = row.id;\n      this.curProblemTitle = row.title;\n      this.confirmText = '\\u786E\\u5B9A\\u8981\\u5220\\u9664\\u9898\\u76EE \\u201C' + this.curProblemTitle + '\\u201D\\u5417?';\n      this.$refs.confirm.show();\n    },\n    confirmDele: function confirmDele() {\n      var _this2 = this;\n\n      //确认删除\n      var url = __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"a\" /* baseUrl */] + '/problems/' + this.curProblemId;\n      __WEBPACK_IMPORTED_MODULE_2_axios___default.a.delete(url).then(function (response) {\n        if (response.data.msg === __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"b\" /* MSG_OK */]) {\n          _this2._getProblemsData(_this2.cur_page);\n          _this2.$message({\n            message: '\\u6210\\u529F\\u5220\\u9664\\u9898\\u76EE:' + _this2.curProblemTitle,\n            type: 'success'\n          });\n        } else if (response.data.msg === __WEBPACK_IMPORTED_MODULE_1_common_js_data__[\"c\" /* MSG_NO */]) {\n          _this2.$notify.error({\n            title: '无法删除',\n            message: '' + response.data.error\n          });\n        }\n      }, function (response) {\n        _this2.$message.error('\\u65E0\\u6CD5\\u5220\\u9664\\u9898\\u76EE' + _this2.curProblemTitle);\n      });\n    },\n    delAll: function delAll() {\n      var self = this,\n          length = self.multipleSelection.length;\n      var str = '';\n      self.del_list = self.del_list.concat(self.multipleSelection);\n      for (var i = 0; i < length; i++) {\n        str += self.multipleSelection[i].name + ' ';\n      }\n      self.$message.error('删除了' + str);\n      self.multipleSelection = [];\n    },\n    calcTag: function calcTag(row, column, cellValue) {\n      if (cellValue === '') {\n        return 'Nothing';\n      }\n      return cellValue.replace(',', ' & ');\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    hideEdit: function hideEdit() {\n      // 隐藏编辑页面\n      this.isShowEdit = false;\n      this._getProblemsData(this.cur_page);\n    },\n    refreshProblems: function refreshProblems() {\n      //刷新manage-problems界面\n      this.cur_page = 1;\n      this._getProblemsData(this.cur_page);\n    }\n  }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_vuex__[\"b\" /* mapActions */])(['saveOneProblem'])),\n  computed: {\n    data: function data() {\n      var self = this;\n      return self.contestDatas.filter(function (d) {\n        var is_del = false;\n        for (var i = 0; i < self.del_list.length; i++) {\n          if (d.name === self.del_list[i].name) {\n            is_del = true;\n            break;\n          }\n        }\n        if (!is_del) {\n          if (d.address.indexOf(self.select_cate) > -1 && (d.name.indexOf(self.select_word) > -1 || d.address.indexOf(self.select_word) > -1)) {\n            return d;\n          }\n        }\n      });\n    }\n  },\n  components: {\n    ElFormItem: __WEBPACK_IMPORTED_MODULE_3__node_modules_element_ui_packages_form_src_form_item__[\"a\" /* default */],\n    Search: __WEBPACK_IMPORTED_MODULE_4_components_search_search__[\"a\" /* default */],\n    ProblemEdit: __WEBPACK_IMPORTED_MODULE_5_components_manager_manage_problem_edit__[\"a\" /* default */],\n    Confirm: __WEBPACK_IMPORTED_MODULE_8_base_confirm_confirm__[\"a\" /* default */]\n  }\n});\n\n/***/ }),\n\n/***/ \"mvHQ\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(\"qkKv\"), __esModule: true };\n\n/***/ }),\n\n/***/ \"oxMS\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"manage-problem\"\n  }, [_c('confirm', {\n    ref: \"confirm\",\n    attrs: {\n      \"text\": _vm.confirmText\n    },\n    on: {\n      \"confirm\": _vm.confirmDele\n    }\n  }), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isShowEdit),\n      expression: \"!isShowEdit\"\n    }]\n  }, [_c('div', {\n    staticClass: \"handle-box\"\n  }, [_c('el-button-group', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.showSetupProblem($event)\n      }\n    }\n  }, [_vm._v(\"创建题目\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"success\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.refreshProblems($event)\n      }\n    }\n  }, [_vm._v(\"刷新数据\")])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"search-wrapper\"\n  }, [_c('search')], 1)], 1), _vm._v(\" \"), _c('el-table', {\n    ref: \"multipleTable\",\n    staticStyle: {\n      \"width\": \"80%\"\n    },\n    attrs: {\n      \"data\": _vm.problemDatas,\n      \"border\": \"\"\n    },\n    on: {\n      \"selection-change\": _vm.handleSelectionChange\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"type\": \"selection\",\n      \"width\": \"55\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"id\",\n      \"label\": \"ID\",\n      \"width\": \"150\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"title\",\n      \"label\": \"标题\",\n      \"sortable\": \"\",\n      \"width\": \"350\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"tag\",\n      \"label\": \"标签\",\n      \"sortable\": \"\",\n      \"width\": \"250\",\n      \"formatter\": _vm.calcTag\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"level\",\n      \"label\": \"难度\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"submitted\",\n      \"label\": \"提交数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"accepted\",\n      \"label\": \"通过数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"label\": \"操作\",\n      \"width\": \"150\",\n      \"fixed\": \"right\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleEdit(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"编辑\\n            \")]), _vm._v(\" \"), _c('el-button', {\n          attrs: {\n            \"size\": \"small\",\n            \"type\": \"danger\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleDelete(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"删除\\n            \")])]\n      }\n    }])\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"pagination\"\n  }, [_c('el-pagination', {\n    attrs: {\n      \"layout\": \"prev, pager, next\",\n      \"current-page\": _vm.cur_page,\n      \"total\": 100\n    },\n    on: {\n      \"current-change\": _vm.handleCurrentChange\n    }\n  })], 1)], 1)]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('problem-edit', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isShowEdit),\n      expression: \"isShowEdit\"\n    }],\n    ref: \"problemEdit\",\n    attrs: {\n      \"isEdit\": _vm.isEdit\n    },\n    on: {\n      \"editFinish\": _vm.hideEdit\n    }\n  })], 1)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"qkKv\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core = __webpack_require__(\"FeBl\");\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n\n/***/ }),\n\n/***/ \"qm6i\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786]{width:100%}.manage-problem .handle-box[data-v-1ffcf786]{margin-bottom:15px;width:80%}.manage-problem .handle-box .el-button-group .el-button[data-v-1ffcf786]{width:100px}.manage-problem .handle-box .search-wrapper[data-v-1ffcf786]{float:right}.pagination[data-v-1ffcf786]{margin:20px 20% 0 0;text-align:right}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problems.vue\"],\"names\":[],\"mappings\":\"AACA,mEACE,UAAY,CACb,AACD,6CACE,mBAAoB,AACpB,SAAW,CACZ,AACD,yEACE,WAAa,CACd,AACD,6DACE,WAAa,CACd,AACD,6BACE,oBAAqB,AACrB,gBAAkB,CACnB\",\"file\":\"manage-problems.vue\",\"sourcesContent\":[\"\\n.manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786] {\\n  width: 100%;\\n}\\n.manage-problem .handle-box[data-v-1ffcf786] {\\n  margin-bottom: 15px;\\n  width: 80%;\\n}\\n.manage-problem .handle-box .el-button-group .el-button[data-v-1ffcf786] {\\n  width: 100px;\\n}\\n.manage-problem .handle-box .search-wrapper[data-v-1ffcf786] {\\n  float: right;\\n}\\n.pagination[data-v-1ffcf786] {\\n  margin: 20px 20% 0 0;\\n  text-align: right;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"sOR5\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n\n/***/ \"soCA\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n\n\n/***/ }),\n\n/***/ \"tjx/\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  // Kill 'ring'\n\n  var killRing = [];\n  function addToRing(str) {\n    killRing.push(str);\n    if (killRing.length > 50) killRing.shift();\n  }\n  function growRingTop(str) {\n    if (!killRing.length) return addToRing(str);\n    killRing[killRing.length - 1] += str;\n  }\n  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || \"\"; }\n  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }\n\n  var lastKill = null;\n\n  function kill(cm, from, to, mayGrow, text) {\n    if (text == null) text = cm.getRange(from, to);\n\n    if (mayGrow && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))\n      growRingTop(text);\n    else\n      addToRing(text);\n    cm.replaceRange(\"\", from, to, \"+delete\");\n\n    if (mayGrow) lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};\n    else lastKill = null;\n  }\n\n  // Boundaries of various units\n\n  function byChar(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"char\", true);\n  }\n\n  function byWord(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"word\", true);\n  }\n\n  function byLine(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"line\", cm.doc.sel.goalColumn);\n  }\n\n  function byPage(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"page\", cm.doc.sel.goalColumn);\n  }\n\n  function byParagraph(cm, pos, dir) {\n    var no = pos.line, line = cm.getLine(no);\n    var sawText = /\\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));\n    var fst = cm.firstLine(), lst = cm.lastLine();\n    for (;;) {\n      no += dir;\n      if (no < fst || no > lst)\n        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));\n      line = cm.getLine(no);\n      var hasText = /\\S/.test(line);\n      if (hasText) sawText = true;\n      else if (sawText) return Pos(no, 0);\n    }\n  }\n\n  function bySentence(cm, pos, dir) {\n    var line = pos.line, ch = pos.ch;\n    var text = cm.getLine(pos.line), sawWord = false;\n    for (;;) {\n      var next = text.charAt(ch + (dir < 0 ? -1 : 0));\n      if (!next) { // End/beginning of line reached\n        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);\n        text = cm.getLine(line + dir);\n        if (!/\\S/.test(text)) return Pos(line, ch);\n        line += dir;\n        ch = dir < 0 ? text.length : 0;\n        continue;\n      }\n      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));\n      if (!sawWord) sawWord = /\\w/.test(next);\n      ch += dir;\n    }\n  }\n\n  function byExpr(cm, pos, dir) {\n    var wrap;\n    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))\n        && wrap.match && (wrap.forward ? 1 : -1) == dir)\n      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;\n\n    for (var first = true;; first = false) {\n      var token = cm.getTokenAt(pos);\n      var after = Pos(pos.line, dir < 0 ? token.start : token.end);\n      if (first && dir > 0 && token.end == pos.ch || !/\\w/.test(token.string)) {\n        var newPos = cm.findPosH(after, dir, \"char\");\n        if (posEq(after, newPos)) return pos;\n        else pos = newPos;\n      } else {\n        return after;\n      }\n    }\n  }\n\n  // Prefixes (only crudely supported)\n\n  function getPrefix(cm, precise) {\n    var digits = cm.state.emacsPrefix;\n    if (!digits) return precise ? null : 1;\n    clearPrefix(cm);\n    return digits == \"-\" ? -1 : Number(digits);\n  }\n\n  function repeated(cmd) {\n    var f = typeof cmd == \"string\" ? function(cm) { cm.execCommand(cmd); } : cmd;\n    return function(cm) {\n      var prefix = getPrefix(cm);\n      f(cm);\n      for (var i = 1; i < prefix; ++i) f(cm);\n    };\n  }\n\n  function findEnd(cm, pos, by, dir) {\n    var prefix = getPrefix(cm);\n    if (prefix < 0) { dir = -dir; prefix = -prefix; }\n    for (var i = 0; i < prefix; ++i) {\n      var newPos = by(cm, pos, dir);\n      if (posEq(newPos, pos)) break;\n      pos = newPos;\n    }\n    return pos;\n  }\n\n  function move(by, dir) {\n    var f = function(cm) {\n      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));\n    };\n    f.motion = true;\n    return f;\n  }\n\n  function killTo(cm, by, dir) {\n    var selections = cm.listSelections(), cursor;\n    var i = selections.length;\n    while (i--) {\n      cursor = selections[i].head;\n      kill(cm, cursor, findEnd(cm, cursor, by, dir), true);\n    }\n  }\n\n  function killRegion(cm) {\n    if (cm.somethingSelected()) {\n      var selections = cm.listSelections(), selection;\n      var i = selections.length;\n      while (i--) {\n        selection = selections[i];\n        kill(cm, selection.anchor, selection.head);\n      }\n      return true;\n    }\n  }\n\n  function addPrefix(cm, digit) {\n    if (cm.state.emacsPrefix) {\n      if (digit != \"-\") cm.state.emacsPrefix += digit;\n      return;\n    }\n    // Not active yet\n    cm.state.emacsPrefix = digit;\n    cm.on(\"keyHandled\", maybeClearPrefix);\n    cm.on(\"inputRead\", maybeDuplicateInput);\n  }\n\n  var prefixPreservingKeys = {\"Alt-G\": true, \"Ctrl-X\": true, \"Ctrl-Q\": true, \"Ctrl-U\": true};\n\n  function maybeClearPrefix(cm, arg) {\n    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))\n      clearPrefix(cm);\n  }\n\n  function clearPrefix(cm) {\n    cm.state.emacsPrefix = null;\n    cm.off(\"keyHandled\", maybeClearPrefix);\n    cm.off(\"inputRead\", maybeDuplicateInput);\n  }\n\n  function maybeDuplicateInput(cm, event) {\n    var dup = getPrefix(cm);\n    if (dup > 1 && event.origin == \"+input\") {\n      var one = event.text.join(\"\\n\"), txt = \"\";\n      for (var i = 1; i < dup; ++i) txt += one;\n      cm.replaceSelection(txt);\n    }\n  }\n\n  function addPrefixMap(cm) {\n    cm.state.emacsPrefixMap = true;\n    cm.addKeyMap(prefixMap);\n    cm.on(\"keyHandled\", maybeRemovePrefixMap);\n    cm.on(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  function maybeRemovePrefixMap(cm, arg) {\n    if (typeof arg == \"string\" && (/^\\d$/.test(arg) || arg == \"Ctrl-U\")) return;\n    cm.removeKeyMap(prefixMap);\n    cm.state.emacsPrefixMap = false;\n    cm.off(\"keyHandled\", maybeRemovePrefixMap);\n    cm.off(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  // Utilities\n\n  function setMark(cm) {\n    cm.setCursor(cm.getCursor());\n    cm.setExtending(!cm.getExtending());\n    cm.on(\"change\", function() { cm.setExtending(false); });\n  }\n\n  function clearMark(cm) {\n    cm.setExtending(false);\n    cm.setCursor(cm.getCursor());\n  }\n\n  function getInput(cm, msg, f) {\n    if (cm.openDialog)\n      cm.openDialog(msg + \": <input type=\\\"text\\\" style=\\\"width: 10em\\\"/>\", f, {bottom: true});\n    else\n      f(prompt(msg, \"\"));\n  }\n\n  function operateOnWord(cm, op) {\n    var start = cm.getCursor(), end = cm.findPosH(start, 1, \"word\");\n    cm.replaceRange(op(cm.getRange(start, end)), start, end);\n    cm.setCursor(end);\n  }\n\n  function toEnclosingExpr(cm) {\n    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;\n    var stack = [];\n    while (line >= cm.firstLine()) {\n      var text = cm.getLine(line);\n      for (var i = ch == null ? text.length : ch; i > 0;) {\n        var ch = text.charAt(--i);\n        if (ch == \")\")\n          stack.push(\"(\");\n        else if (ch == \"]\")\n          stack.push(\"[\");\n        else if (ch == \"}\")\n          stack.push(\"{\");\n        else if (/[\\(\\{\\[]/.test(ch) && (!stack.length || stack.pop() != ch))\n          return cm.extendSelection(Pos(line, i));\n      }\n      --line; ch = null;\n    }\n  }\n\n  function quit(cm) {\n    cm.execCommand(\"clearSearch\");\n    clearMark(cm);\n  }\n\n  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};\n\n  // Actual keymap\n\n  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({\n    \"Ctrl-W\": function(cm) {kill(cm, cm.getCursor(\"start\"), cm.getCursor(\"end\"));},\n    \"Ctrl-K\": repeated(function(cm) {\n      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));\n      var text = cm.getRange(start, end);\n      if (!/\\S/.test(text)) {\n        text += \"\\n\";\n        end = Pos(start.line + 1, 0);\n      }\n      kill(cm, start, end, true, text);\n    }),\n    \"Alt-W\": function(cm) {\n      addToRing(cm.getSelection());\n      clearMark(cm);\n    },\n    \"Ctrl-Y\": function(cm) {\n      var start = cm.getCursor();\n      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, \"paste\");\n      cm.setSelection(start, cm.getCursor());\n    },\n    \"Alt-Y\": function(cm) {cm.replaceSelection(popFromRing(), \"around\", \"paste\");},\n\n    \"Ctrl-Space\": setMark, \"Ctrl-Shift-2\": setMark,\n\n    \"Ctrl-F\": move(byChar, 1), \"Ctrl-B\": move(byChar, -1),\n    \"Right\": move(byChar, 1), \"Left\": move(byChar, -1),\n    \"Ctrl-D\": function(cm) { killTo(cm, byChar, 1); },\n    \"Delete\": function(cm) { killRegion(cm) || killTo(cm, byChar, 1); },\n    \"Ctrl-H\": function(cm) { killTo(cm, byChar, -1); },\n    \"Backspace\": function(cm) { killRegion(cm) || killTo(cm, byChar, -1); },\n\n    \"Alt-F\": move(byWord, 1), \"Alt-B\": move(byWord, -1),\n    \"Alt-D\": function(cm) { killTo(cm, byWord, 1); },\n    \"Alt-Backspace\": function(cm) { killTo(cm, byWord, -1); },\n\n    \"Ctrl-N\": move(byLine, 1), \"Ctrl-P\": move(byLine, -1),\n    \"Down\": move(byLine, 1), \"Up\": move(byLine, -1),\n    \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStart\",\n\n    \"Alt-V\": move(byPage, -1), \"Ctrl-V\": move(byPage, 1),\n    \"PageUp\": move(byPage, -1), \"PageDown\": move(byPage, 1),\n\n    \"Ctrl-Up\": move(byParagraph, -1), \"Ctrl-Down\": move(byParagraph, 1),\n\n    \"Alt-A\": move(bySentence, -1), \"Alt-E\": move(bySentence, 1),\n    \"Alt-K\": function(cm) { killTo(cm, bySentence, 1); },\n\n    \"Ctrl-Alt-K\": function(cm) { killTo(cm, byExpr, 1); },\n    \"Ctrl-Alt-Backspace\": function(cm) { killTo(cm, byExpr, -1); },\n    \"Ctrl-Alt-F\": move(byExpr, 1), \"Ctrl-Alt-B\": move(byExpr, -1),\n\n    \"Shift-Ctrl-Alt-2\": function(cm) {\n      var cursor = cm.getCursor();\n      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);\n    },\n    \"Ctrl-Alt-T\": function(cm) {\n      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);\n      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);\n      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +\n                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);\n    },\n    \"Ctrl-Alt-U\": repeated(toEnclosingExpr),\n\n    \"Alt-Space\": function(cm) {\n      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);\n      while (from && /\\s/.test(text.charAt(from - 1))) --from;\n      while (to < text.length && /\\s/.test(text.charAt(to))) ++to;\n      cm.replaceRange(\" \", Pos(pos.line, from), Pos(pos.line, to));\n    },\n    \"Ctrl-O\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"start\"); }),\n    \"Ctrl-T\": repeated(function(cm) {\n      cm.execCommand(\"transposeChars\");\n    }),\n\n    \"Alt-C\": repeated(function(cm) {\n      operateOnWord(cm, function(w) {\n        var letter = w.search(/\\w/);\n        if (letter == -1) return w;\n        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();\n      });\n    }),\n    \"Alt-U\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toUpperCase(); });\n    }),\n    \"Alt-L\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toLowerCase(); });\n    }),\n\n    \"Alt-;\": \"toggleComment\",\n\n    \"Ctrl-/\": repeated(\"undo\"), \"Shift-Ctrl--\": repeated(\"undo\"),\n    \"Ctrl-Z\": repeated(\"undo\"), \"Cmd-Z\": repeated(\"undo\"),\n    \"Shift-Alt-,\": \"goDocStart\", \"Shift-Alt-.\": \"goDocEnd\",\n    \"Ctrl-S\": \"findPersistentNext\", \"Ctrl-R\": \"findPersistentPrev\", \"Ctrl-G\": quit, \"Shift-Alt-5\": \"replace\",\n    \"Alt-/\": \"autocomplete\",\n    \"Enter\": \"newlineAndIndent\",\n    \"Ctrl-J\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"end\"); }),\n    \"Tab\": \"indentAuto\",\n\n    \"Alt-G G\": function(cm) {\n      var prefix = getPrefix(cm, true);\n      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);\n\n      getInput(cm, \"Goto line\", function(str) {\n        var num;\n        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)\n          cm.setCursor(num - 1);\n      });\n    },\n\n    \"Ctrl-X Tab\": function(cm) {\n      cm.indentSelection(getPrefix(cm, true) || cm.getOption(\"indentUnit\"));\n    },\n    \"Ctrl-X Ctrl-X\": function(cm) {\n      cm.setSelection(cm.getCursor(\"head\"), cm.getCursor(\"anchor\"));\n    },\n    \"Ctrl-X Ctrl-S\": \"save\",\n    \"Ctrl-X Ctrl-W\": \"save\",\n    \"Ctrl-X S\": \"saveAll\",\n    \"Ctrl-X F\": \"open\",\n    \"Ctrl-X U\": repeated(\"undo\"),\n    \"Ctrl-X K\": \"close\",\n    \"Ctrl-X Delete\": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), true); },\n    \"Ctrl-X H\": \"selectAll\",\n\n    \"Ctrl-Q Tab\": repeated(\"insertTab\"),\n    \"Ctrl-U\": addPrefixMap\n  });\n\n  var prefixMap = {\"Ctrl-G\": clearPrefix};\n  function regPrefix(d) {\n    prefixMap[d] = function(cm) { addPrefix(cm, d); };\n    keyMap[\"Ctrl-\" + d] = function(cm) { addPrefix(cm, d); };\n    prefixPreservingKeys[\"Ctrl-\" + d] = true;\n  }\n  for (var i = 0; i < 10; ++i) regPrefix(String(i));\n  regPrefix(\"-\");\n});\n\n\n/***/ }),\n\n/***/ \"ujcs\":\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n\n/***/ \"vq+x\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(\"8U58\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||\n        matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n\n/***/ }),\n\n/***/ \"xrTZ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n\n(function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.3.2\";\n    // if node.js, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = __webpack_require__(\"EuP9\").Buffer;\n        } catch (err) {}\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (true) {\t\t\n        // AMD. Register as an anonymous module.\t\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){ return global.Base64 }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // that's it!\n})(   typeof self   !== 'undefined' ? self\n    : typeof window !== 'undefined' ? window\n    : typeof global !== 'undefined' ? global\n    : this\n);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"DuR2\")))\n\n/***/ }),\n\n/***/ \"yGpH\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"RrKZ\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"56e4b5b6\", content, true);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.4e99bf76ac1cfcf85d6c.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var opt = cm.getOption(\"autoCloseTags\"), html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n        cm.indentLine(ranges[i].head.line);\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/closetag.js\n// module id = +/ra\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../scroll/annotatescrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../scroll/annotatescrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"showMatchesOnScrollbar\", function(query, caseFold, options) {\n    if (typeof options == \"string\") options = {className: options};\n    if (!options) options = {};\n    return new SearchAnnotation(this, query, caseFold, options);\n  });\n\n  function SearchAnnotation(cm, query, caseFold, options) {\n    this.cm = cm;\n    this.options = options;\n    var annotateOptions = {listenForChanges: false};\n    for (var prop in options) annotateOptions[prop] = options[prop];\n    if (!annotateOptions.className) annotateOptions.className = \"CodeMirror-search-match\";\n    this.annotation = cm.annotateScrollbar(annotateOptions);\n    this.query = query;\n    this.caseFold = caseFold;\n    this.gap = {from: cm.firstLine(), to: cm.lastLine() + 1};\n    this.matches = [];\n    this.update = null;\n\n    this.findMatches();\n    this.annotation.update(this.matches);\n\n    var self = this;\n    cm.on(\"change\", this.changeHandler = function(_cm, change) { self.onChange(change); });\n  }\n\n  var MAX_MATCHES = 1000;\n\n  SearchAnnotation.prototype.findMatches = function() {\n    if (!this.gap) return;\n    for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      if (match.from.line >= this.gap.to) break;\n      if (match.to.line >= this.gap.from) this.matches.splice(i--, 1);\n    }\n    var cursor = this.cm.getSearchCursor(this.query, CodeMirror.Pos(this.gap.from, 0), this.caseFold);\n    var maxMatches = this.options && this.options.maxMatches || MAX_MATCHES;\n    while (cursor.findNext()) {\n      var match = {from: cursor.from(), to: cursor.to()};\n      if (match.from.line >= this.gap.to) break;\n      this.matches.splice(i++, 0, match);\n      if (this.matches.length > maxMatches) break;\n    }\n    this.gap = null;\n  };\n\n  function offsetLine(line, changeStart, sizeChange) {\n    if (line <= changeStart) return line;\n    return Math.max(changeStart, line + sizeChange);\n  }\n\n  SearchAnnotation.prototype.onChange = function(change) {\n    var startLine = change.from.line;\n    var endLine = CodeMirror.changeEnd(change).line;\n    var sizeChange = endLine - change.to.line;\n    if (this.gap) {\n      this.gap.from = Math.min(offsetLine(this.gap.from, startLine, sizeChange), change.from.line);\n      this.gap.to = Math.max(offsetLine(this.gap.to, startLine, sizeChange), change.from.line);\n    } else {\n      this.gap = {from: change.from.line, to: endLine + 1};\n    }\n\n    if (sizeChange) for (var i = 0; i < this.matches.length; i++) {\n      var match = this.matches[i];\n      var newFrom = offsetLine(match.from.line, startLine, sizeChange);\n      if (newFrom != match.from.line) match.from = CodeMirror.Pos(newFrom, match.from.ch);\n      var newTo = offsetLine(match.to.line, startLine, sizeChange);\n      if (newTo != match.to.line) match.to = CodeMirror.Pos(newTo, match.to.ch);\n    }\n    clearTimeout(this.update);\n    var self = this;\n    this.update = setTimeout(function() { self.updateAfterChange(); }, 250);\n  };\n\n  SearchAnnotation.prototype.updateAfterChange = function() {\n    this.findMatches();\n    this.annotation.update(this.matches);\n  };\n\n  SearchAnnotation.prototype.clear = function() {\n    this.cm.off(\"change\", this.changeHandler);\n    this.annotation.clear();\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/matchesonscrollbar.js\n// module id = /A6h\n// module chunks = 2 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dropdown', {\n    on: {\n      \"command\": _vm.handleCommandDropdown\n    }\n  }, [_c('el-input', {\n    staticClass: \"search-input\",\n    attrs: {\n      \"placeholder\": \"请输入要搜索的题目\",\n      \"icon\": \"search\",\n      \"spellcheck\": \"false\",\n      \"on-icon-click\": _vm._onSearch\n    },\n    on: {\n      \"change\": _vm._onSearch,\n      \"focus\": _vm._onSearch\n    },\n    model: {\n      value: (_vm.mysearch),\n      callback: function($$v) {\n        _vm.mysearch = (typeof $$v === 'string' ? $$v.trim() : $$v)\n      },\n      expression: \"mysearch\"\n    }\n  }), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, [_c('el-dropdown-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.dropdownLoading),\n      expression: \"dropdownLoading\"\n    }]\n  }, [_vm._v(\"拼命加载中...\")]), _vm._v(\" \"), _vm._l((_vm.searchResult), function(item, index) {\n    return _c('el-dropdown-item', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (index <= 10 && !_vm.dropdownLoading),\n        expression: \"index <= 10 && !dropdownLoading\"\n      }],\n      key: index,\n      attrs: {\n        \"command\": item.id\n      }\n    }, [_c('span', {\n      staticClass: \"problem-item-title\"\n    }, [_vm._v(_vm._s(item.title))]), _vm._v(\" \"), _c('img', {\n      staticClass: \"problem-item-img\",\n      attrs: {\n        \"width\": \"16\",\n        \"height\": \"16 \",\n        \"src\": \"static/problem.png\"\n      }\n    })])\n  })], 2)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-2d96e4b2\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/search/search.vue\n// module id = 0tR3\n// module chunks = 0 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".el-dialog .el-dialog__body[data-v-48f25eaf]{padding:10px 20px}.el-dialog .el-dialog__body .text[data-v-48f25eaf]{font-size:18px;font-weight:400}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/base/confirm/confirm.vue\"],\"names\":[],\"mappings\":\"AACA,6CACE,iBAAmB,CACpB,AACD,mDACE,eAAgB,AAChB,eAAiB,CAClB\",\"file\":\"confirm.vue\",\"sourcesContent\":[\"\\n.el-dialog .el-dialog__body[data-v-48f25eaf] {\\n  padding: 10px 20px;\\n}\\n.el-dialog .el-dialog__body .text[data-v-48f25eaf] {\\n  font-size: 18px;\\n  font-weight: 400;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-48f25eaf\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/base/confirm/confirm.vue\n// module id = 2EAN\n// module chunks = 3 6 7","<template>\n  <el-dialog\n    title=\"提示\"\n    :visible.sync=\"visible\">\n    <span class=\"text\">{{text}}</span>\n    <span slot=\"footer\" class=\"dialog-footer\">\n    <el-button @click=\"cancel\">{{cancelBtnText}}</el-button>\n    <el-button type=\"primary\" @click=\"confirm\">{{confirmBtnText}}</el-button>\n  </span>\n  </el-dialog>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  export default{\n    props: {\n      text: {\n        type: String,\n        default: ''\n      },\n      confirmBtnText: {\n        type: String,\n        default: '确 定'\n      },\n      cancelBtnText: {\n        type: String,\n        default: '取 消'\n      }\n    },\n    data(){\n      return {\n        visible: false\n      }\n    },\n    methods: {\n      show(){\n        this.visible = true\n      },\n      hide(){\n        this.visible = false\n      },\n      confirm(){\n        this.hide()\n        this.$emit('confirm')\n      },\n      cancel(){\n        this.hide()\n        this.$emit('cancel')\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\" scoped rel=\"stylesheet/stylus\">\n  .el-dialog\n    .el-dialog__body\n      padding 10px 20px\n      .text\n        font-size 18px\n        font-weight 400\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/base/confirm/confirm.vue?3ae7d549","/**\n * Created by qinzhen on 2017/9/17.\n */\nexport default class Problem {\n  constructor ({id, title, tag, level, description, accepted, submitted, like_nums, hate_nums}) {\n    this.id = id\n    this.title = title\n    this.tag = tag\n    this.level = level\n    this.description = description\n    this.accepted = accepted\n    this.submitted = submitted\n    this.like_nums = like_nums\n    this.hate_nums = hate_nums\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/js/problem.js","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// A rough approximation of Sublime Text's keybindings\n// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/edit/matchbrackets\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var map = CodeMirror.keyMap.sublime = {fallthrough: \"default\"};\n  var cmds = CodeMirror.commands;\n  var Pos = CodeMirror.Pos;\n  var mac = CodeMirror.keyMap[\"default\"] == CodeMirror.keyMap.macDefault;\n  var ctrl = mac ? \"Cmd-\" : \"Ctrl-\";\n\n  // This is not exactly Sublime's algorithm. I couldn't make heads or tails of that.\n  function findPosSubword(doc, start, dir) {\n    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n    var line = doc.getLine(start.line);\n    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n    var state = \"start\", type;\n    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n      var cat = next != \"_\" && CodeMirror.isWordChar(next) ? \"w\" : \"o\";\n      if (cat == \"w\" && next.toUpperCase() == next) cat = \"W\";\n      if (state == \"start\") {\n        if (cat != \"o\") { state = \"in\"; type = cat; }\n      } else if (state == \"in\") {\n        if (type != cat) {\n          if (type == \"w\" && cat == \"W\" && dir < 0) pos--;\n          if (type == \"W\" && cat == \"w\" && dir > 0) { type = \"w\"; continue; }\n          break;\n        }\n      }\n    }\n    return Pos(start.line, pos);\n  }\n\n  function moveSubword(cm, dir) {\n    cm.extendSelectionsBy(function(range) {\n      if (cm.display.shift || cm.doc.extend || range.empty())\n        return findPosSubword(cm.doc, range.head, dir);\n      else\n        return dir < 0 ? range.from() : range.to();\n    });\n  }\n\n  var goSubwordCombo = mac ? \"Ctrl-\" : \"Alt-\";\n\n  cmds[map[goSubwordCombo + \"Left\"] = \"goSubwordLeft\"] = function(cm) { moveSubword(cm, -1); };\n  cmds[map[goSubwordCombo + \"Right\"] = \"goSubwordRight\"] = function(cm) { moveSubword(cm, 1); };\n\n  if (mac) map[\"Cmd-Left\"] = \"goLineStartSmart\";\n\n  var scrollLineCombo = mac ? \"Ctrl-Alt-\" : \"Ctrl-\";\n\n  cmds[map[scrollLineCombo + \"Up\"] = \"scrollLineUp\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, \"local\");\n      if (cm.getCursor().line >= visibleBottomLine)\n        cm.execCommand(\"goLineUp\");\n    }\n    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n  };\n  cmds[map[scrollLineCombo + \"Down\"] = \"scrollLineDown\"] = function(cm) {\n    var info = cm.getScrollInfo();\n    if (!cm.somethingSelected()) {\n      var visibleTopLine = cm.lineAtHeight(info.top, \"local\")+1;\n      if (cm.getCursor().line <= visibleTopLine)\n        cm.execCommand(\"goLineDown\");\n    }\n    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"L\"] = \"splitSelectionByLine\"] = function(cm) {\n    var ranges = cm.listSelections(), lineRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      for (var line = from.line; line <= to.line; ++line)\n        if (!(to.line > from.line && line == to.line && to.ch == 0))\n          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n                           head: line == to.line ? to : Pos(line)});\n    }\n    cm.setSelections(lineRanges, 0);\n  };\n\n  map[\"Shift-Tab\"] = \"indentLess\";\n\n  cmds[map[\"Esc\"] = \"singleSelectionTop\"] = function(cm) {\n    var range = cm.listSelections()[0];\n    cm.setSelection(range.anchor, range.head, {scroll: false});\n  };\n\n  cmds[map[ctrl + \"L\"] = \"selectLine\"] = function(cm) {\n    var ranges = cm.listSelections(), extended = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      extended.push({anchor: Pos(range.from().line, 0),\n                     head: Pos(range.to().line + 1, 0)});\n    }\n    cm.setSelections(extended);\n  };\n\n  map[\"Shift-Ctrl-K\"] = \"deleteLine\";\n\n  function insertLine(cm, above) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    cm.operation(function() {\n      var len = cm.listSelections().length, newSelection = [], last = -1;\n      for (var i = 0; i < len; i++) {\n        var head = cm.listSelections()[i].head;\n        if (head.line <= last) continue;\n        var at = Pos(head.line + (above ? 0 : 1), 0);\n        cm.replaceRange(\"\\n\", at, null, \"+insertLine\");\n        cm.indentLine(at.line, null, true);\n        newSelection.push({head: at, anchor: at});\n        last = head.line + 1;\n      }\n      cm.setSelections(newSelection);\n    });\n    cm.execCommand(\"indentAuto\");\n  }\n\n  cmds[map[ctrl + \"Enter\"] = \"insertLineAfter\"] = function(cm) { return insertLine(cm, false); };\n\n  cmds[map[\"Shift-\" + ctrl + \"Enter\"] = \"insertLineBefore\"] = function(cm) { return insertLine(cm, true); };\n\n  function wordAt(cm, pos) {\n    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n  }\n\n  cmds[map[ctrl + \"D\"] = \"selectNextOccurrence\"] = function(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      cm.setSelection(word.from, word.to);\n      fullWord = true;\n    } else {\n      var text = cm.getRange(from, to);\n      var query = fullWord ? new RegExp(\"\\\\b\" + text + \"\\\\b\") : text;\n      var cur = cm.getSearchCursor(query, to);\n      var found = cur.findNext();\n      if (!found) {\n        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n        found = cur.findNext();\n      }\n      if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n        return CodeMirror.Pass\n      cm.addSelection(cur.from(), cur.to());\n    }\n    if (fullWord)\n      cm.state.sublimeFindFullWord = cm.doc.sel;\n  };\n\n  function addCursorToSelection(cm, dir) {\n    var ranges = cm.listSelections(), newRanges = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var newAnchor = cm.findPosV(range.anchor, dir, \"line\");\n      var newHead = cm.findPosV(range.head, dir, \"line\");\n      var newRange = {anchor: newAnchor, head: newHead};\n      newRanges.push(range);\n      newRanges.push(newRange);\n    }\n    cm.setSelections(newRanges);\n  }\n\n  var addCursorToLineCombo = mac ? \"Shift-Cmd\" : 'Alt-Ctrl';\n  cmds[map[addCursorToLineCombo + \"Up\"] = \"addCursorToPrevLine\"] = function(cm) { addCursorToSelection(cm, -1); };\n  cmds[map[addCursorToLineCombo + \"Down\"] = \"addCursorToNextLine\"] = function(cm) { addCursorToSelection(cm, 1); };\n\n  function isSelectedRange(ranges, from, to) {\n    for (var i = 0; i < ranges.length; i++)\n      if (ranges[i].from() == from && ranges[i].to() == to) return true\n    return false\n  }\n\n  var mirror = \"(){}[]\";\n  function selectBetweenBrackets(cm) {\n    var ranges = cm.listSelections(), newRanges = []\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n      if (!opening) return false;\n      for (;;) {\n        var closing = cm.scanForBracket(pos, 1);\n        if (!closing) return false;\n        if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n          newRanges.push({anchor: Pos(opening.pos.line, opening.pos.ch + 1),\n                          head: closing.pos});\n          break;\n        }\n        pos = Pos(closing.pos.line, closing.pos.ch + 1);\n      }\n    }\n    cm.setSelections(newRanges);\n    return true;\n  }\n\n  cmds[map[\"Shift-\" + ctrl + \"Space\"] = \"selectScope\"] = function(cm) {\n    selectBetweenBrackets(cm) || cm.execCommand(\"selectAll\");\n  };\n  cmds[map[\"Shift-\" + ctrl + \"M\"] = \"selectBetweenBrackets\"] = function(cm) {\n    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n  };\n\n  cmds[map[ctrl + \"M\"] = \"goToBracket\"] = function(cm) {\n    cm.extendSelectionsBy(function(range) {\n      var next = cm.scanForBracket(range.head, 1);\n      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n      var prev = cm.scanForBracket(range.head, -1);\n      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n    });\n  };\n\n  var swapLineCombo = mac ? \"Cmd-Ctrl-\" : \"Shift-Ctrl-\";\n\n  cmds[map[swapLineCombo + \"Up\"] = \"swapLineUp\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n                    head: Pos(range.head.line - 1, range.head.ch)});\n      if (range.to().ch == 0 && !range.empty()) --to;\n      if (from > at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = 0; i < linesToMove.length; i += 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        if (to > cm.lastLine())\n          cm.replaceRange(\"\\n\" + line, Pos(cm.lastLine()), null, \"+swapLine\");\n        else\n          cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.setSelections(newSels);\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[swapLineCombo + \"Down\"] = \"swapLineDown\"] = function(cm) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n      if (range.to().ch == 0 && !range.empty()) from--;\n      if (from < at) linesToMove.push(from, to);\n      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n      at = to;\n    }\n    cm.operation(function() {\n      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n        var from = linesToMove[i], to = linesToMove[i + 1];\n        var line = cm.getLine(from);\n        if (from == cm.lastLine())\n          cm.replaceRange(\"\", Pos(from - 1), Pos(from), \"+swapLine\");\n        else\n          cm.replaceRange(\"\", Pos(from, 0), Pos(from + 1, 0), \"+swapLine\");\n        cm.replaceRange(line + \"\\n\", Pos(to, 0), null, \"+swapLine\");\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[ctrl + \"/\"] = \"toggleCommentIndented\"] = function(cm) {\n    cm.toggleComment({ indent: true });\n  }\n\n  cmds[map[ctrl + \"J\"] = \"joinLines\"] = function(cm) {\n    var ranges = cm.listSelections(), joined = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], from = range.from();\n      var start = from.line, end = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n        end = ranges[++i].to().line;\n      joined.push({start: start, end: end, anchor: !range.empty() && from});\n    }\n    cm.operation(function() {\n      var offset = 0, ranges = [];\n      for (var i = 0; i < joined.length; i++) {\n        var obj = joined[i];\n        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n        for (var line = obj.start; line <= obj.end; line++) {\n          var actual = line - offset;\n          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n          if (actual < cm.lastLine()) {\n            cm.replaceRange(\" \", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n            ++offset;\n          }\n        }\n        ranges.push({anchor: anchor || head, head: head});\n      }\n      cm.setSelections(ranges, 0);\n    });\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"D\"] = \"duplicateLine\"] = function(cm) {\n    cm.operation(function() {\n      var rangeCount = cm.listSelections().length;\n      for (var i = 0; i < rangeCount; i++) {\n        var range = cm.listSelections()[i];\n        if (range.empty())\n          cm.replaceRange(cm.getLine(range.head.line) + \"\\n\", Pos(range.head.line, 0));\n        else\n          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n      }\n      cm.scrollIntoView();\n    });\n  };\n\n  if (!mac) map[ctrl + \"T\"] = \"transposeChars\";\n\n  function sortLines(cm, caseSensitive) {\n    if (cm.isReadOnly()) return CodeMirror.Pass\n    var ranges = cm.listSelections(), toSort = [], selected;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      if (range.empty()) continue;\n      var from = range.from().line, to = range.to().line;\n      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n        to = ranges[++i].to().line;\n      if (!ranges[i].to().ch) to--;\n      toSort.push(from, to);\n    }\n    if (toSort.length) selected = true;\n    else toSort.push(cm.firstLine(), cm.lastLine());\n\n    cm.operation(function() {\n      var ranges = [];\n      for (var i = 0; i < toSort.length; i += 2) {\n        var from = toSort[i], to = toSort[i + 1];\n        var start = Pos(from, 0), end = Pos(to);\n        var lines = cm.getRange(start, end, false);\n        if (caseSensitive)\n          lines.sort();\n        else\n          lines.sort(function(a, b) {\n            var au = a.toUpperCase(), bu = b.toUpperCase();\n            if (au != bu) { a = au; b = bu; }\n            return a < b ? -1 : a == b ? 0 : 1;\n          });\n        cm.replaceRange(lines, start, end);\n        if (selected) ranges.push({anchor: start, head: Pos(to + 1, 0)});\n      }\n      if (selected) cm.setSelections(ranges, 0);\n    });\n  }\n\n  cmds[map[\"F9\"] = \"sortLines\"] = function(cm) { sortLines(cm, true); };\n  cmds[map[ctrl + \"F9\"] = \"sortLinesInsensitive\"] = function(cm) { sortLines(cm, false); };\n\n  cmds[map[\"F2\"] = \"nextBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      var current = marks.shift();\n      var found = current.find();\n      if (found) {\n        marks.push(current);\n        return cm.setSelection(found.from, found.to);\n      }\n    }\n  };\n\n  cmds[map[\"Shift-F2\"] = \"prevBookmark\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) while (marks.length) {\n      marks.unshift(marks.pop());\n      var found = marks[marks.length - 1].find();\n      if (!found)\n        marks.pop();\n      else\n        return cm.setSelection(found.from, found.to);\n    }\n  };\n\n  cmds[map[ctrl + \"F2\"] = \"toggleBookmark\"] = function(cm) {\n    var ranges = cm.listSelections();\n    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n    for (var i = 0; i < ranges.length; i++) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      var found = cm.findMarks(from, to);\n      for (var j = 0; j < found.length; j++) {\n        if (found[j].sublimeBookmark) {\n          found[j].clear();\n          for (var k = 0; k < marks.length; k++)\n            if (marks[k] == found[j])\n              marks.splice(k--, 1);\n          break;\n        }\n      }\n      if (j == found.length)\n        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n    }\n  };\n\n  cmds[map[\"Shift-\" + ctrl + \"F2\"] = \"clearBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks;\n    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    marks.length = 0;\n  };\n\n  cmds[map[\"Alt-F2\"] = \"selectBookmarks\"] = function(cm) {\n    var marks = cm.state.sublimeBookmarks, ranges = [];\n    if (marks) for (var i = 0; i < marks.length; i++) {\n      var found = marks[i].find();\n      if (!found)\n        marks.splice(i--, 0);\n      else\n        ranges.push({anchor: found.from, head: found.to});\n    }\n    if (ranges.length)\n      cm.setSelections(ranges, 0);\n  };\n\n  map[\"Alt-Q\"] = \"wrapLines\";\n\n  var cK = ctrl + \"K \";\n\n  function modifyWordOrSelection(cm, mod) {\n    cm.operation(function() {\n      var ranges = cm.listSelections(), indices = [], replacements = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) { indices.push(i); replacements.push(\"\"); }\n        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n      }\n      cm.replaceSelections(replacements, \"around\", \"case\");\n      for (var i = indices.length - 1, at; i >= 0; i--) {\n        var range = ranges[indices[i]];\n        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n        var word = wordAt(cm, range.head);\n        at = word.from;\n        cm.replaceRange(mod(word.word), word.from, word.to);\n      }\n    });\n  }\n\n  map[cK + ctrl + \"Backspace\"] = \"delLineLeft\";\n\n  cmds[map[\"Backspace\"] = \"smartBackspace\"] = function(cm) {\n    if (cm.somethingSelected()) return CodeMirror.Pass;\n\n    cm.operation(function() {\n      var cursors = cm.listSelections();\n      var indentUnit = cm.getOption(\"indentUnit\");\n\n      for (var i = cursors.length - 1; i >= 0; i--) {\n        var cursor = cursors[i].head;\n        var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n        var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption(\"tabSize\"));\n\n        // Delete by one character by default\n        var deletePos = cm.findPosH(cursor, -1, \"char\", false);\n\n        if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n          var prevIndent = new Pos(cursor.line,\n            CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n\n          // Smart delete only if we found a valid prevIndent location\n          if (prevIndent.ch != cursor.ch) deletePos = prevIndent;\n        }\n\n        cm.replaceRange(\"\", deletePos, cursor, \"+delete\");\n      }\n    });\n  };\n\n  cmds[map[cK + ctrl + \"K\"] = \"delLineRight\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(\"\", ranges[i].anchor, Pos(ranges[i].to().line), \"+delete\");\n      cm.scrollIntoView();\n    });\n  };\n\n  cmds[map[cK + ctrl + \"U\"] = \"upcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n  };\n  cmds[map[cK + ctrl + \"L\"] = \"downcaseAtCursor\"] = function(cm) {\n    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n  };\n\n  cmds[map[cK + ctrl + \"Space\"] = \"setSublimeMark\"] = function(cm) {\n    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n  };\n  cmds[map[cK + ctrl + \"A\"] = \"selectToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) cm.setSelection(cm.getCursor(), found);\n  };\n  cmds[map[cK + ctrl + \"W\"] = \"deleteToSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      var from = cm.getCursor(), to = found;\n      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n      cm.state.sublimeKilled = cm.getRange(from, to);\n      cm.replaceRange(\"\", from, to);\n    }\n  };\n  cmds[map[cK + ctrl + \"X\"] = \"swapWithSublimeMark\"] = function(cm) {\n    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n    if (found) {\n      cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n      cm.setCursor(found);\n    }\n  };\n  cmds[map[cK + ctrl + \"Y\"] = \"sublimeYank\"] = function(cm) {\n    if (cm.state.sublimeKilled != null)\n      cm.replaceSelection(cm.state.sublimeKilled, null, \"paste\");\n  };\n\n  map[cK + ctrl + \"G\"] = \"clearBookmarks\";\n  cmds[map[cK + ctrl + \"C\"] = \"showInCenter\"] = function(cm) {\n    var pos = cm.cursorCoords(null, \"local\");\n    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n  };\n\n  var selectLinesCombo = mac ? \"Ctrl-Shift-\" : \"Ctrl-Alt-\";\n  cmds[map[selectLinesCombo + \"Up\"] = \"selectLinesUpward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line > cm.firstLine())\n          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n      }\n    });\n  };\n  cmds[map[selectLinesCombo + \"Down\"] = \"selectLinesDownward\"] = function(cm) {\n    cm.operation(function() {\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head.line < cm.lastLine())\n          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n      }\n    });\n  };\n\n  function getTarget(cm) {\n    var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n    if (CodeMirror.cmpPos(from, to) == 0) {\n      var word = wordAt(cm, from);\n      if (!word.word) return;\n      from = word.from;\n      to = word.to;\n    }\n    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n  }\n\n  function findAndGoTo(cm, forward) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var query = target.query;\n    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n\n    if (forward ? cur.findNext() : cur.findPrevious()) {\n      cm.setSelection(cur.from(), cur.to());\n    } else {\n      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n                                              : cm.clipPos(Pos(cm.lastLine())));\n      if (forward ? cur.findNext() : cur.findPrevious())\n        cm.setSelection(cur.from(), cur.to());\n      else if (target.word)\n        cm.setSelection(target.from, target.to);\n    }\n  };\n  cmds[map[ctrl + \"F3\"] = \"findUnder\"] = function(cm) { findAndGoTo(cm, true); };\n  cmds[map[\"Shift-\" + ctrl + \"F3\"] = \"findUnderPrevious\"] = function(cm) { findAndGoTo(cm,false); };\n  cmds[map[\"Alt-F3\"] = \"findAllUnder\"] = function(cm) {\n    var target = getTarget(cm);\n    if (!target) return;\n    var cur = cm.getSearchCursor(target.query);\n    var matches = [];\n    var primaryIndex = -1;\n    while (cur.findNext()) {\n      matches.push({anchor: cur.from(), head: cur.to()});\n      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n        primaryIndex++;\n    }\n    cm.setSelections(matches, primaryIndex);\n  };\n\n  map[\"Shift-\" + ctrl + \"[\"] = \"fold\";\n  map[\"Shift-\" + ctrl + \"]\"] = \"unfold\";\n  map[cK + ctrl + \"0\"] = map[cK + ctrl + \"J\"] = \"unfoldAll\";\n\n  map[ctrl + \"I\"] = \"findIncremental\";\n  map[\"Shift-\" + ctrl + \"I\"] = \"findIncrementalReverse\";\n  map[ctrl + \"H\"] = \"replace\";\n  map[\"F3\"] = \"findNext\";\n  map[\"Shift-F3\"] = \"findPrev\";\n\n  CodeMirror.normalizeKeyMap(map);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/sublime.js\n// module id = 7Xsf\n// module chunks = 2 3","<template>\n  <el-dropdown @command=\"handleCommandDropdown\">\n    <el-input\n      class=\"search-input\"\n      placeholder=\"请输入要搜索的题目\"\n      icon=\"search\"\n      v-model.trim=\"mysearch\"\n      spellcheck=\"false\"\n      :on-icon-click=\"_onSearch\"\n      @change=\"_onSearch\"\n      @focus=\"_onSearch\">\n    </el-input>\n    <el-dropdown-menu slot=\"dropdown\">\n      <el-dropdown-item v-show=\"dropdownLoading\">拼命加载中...</el-dropdown-item>\n      <el-dropdown-item v-for=\"(item,index) in searchResult\" v-show=\"index <= 10 && !dropdownLoading\"\n                        :key=\"index\" :command=\"item.id\">\n        <span class=\"problem-item-title\">{{item.title}}</span>\n        <img width=\"16\" height=\"16 \" src=\"static/problem.png\" class=\"problem-item-img\">\n      </el-dropdown-item>\n    </el-dropdown-menu>\n  </el-dropdown>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import Problem from 'common/js/problem'\n  import axios from 'axios'\n  import { baseUrl } from 'common/js/data'\n  import { mapMutations } from 'vuex'\n\n  export default{\n    data() {\n      return {\n        mysearch: '',\n        dropdownLoading: false,\n        searchResult: []\n      }\n    },\n    methods: {\n      _onSearch() {\n        if (this.mysearch === '') {\n          this.searchResult = []\n          return\n        }\n        this.dropdownLoading = true\n        console.log('SearchClick')\n        let url = `${baseUrl}/search`\n        // 清空之前的结果\n        this.searchResult = []\n        axios.post(url, {\n          'target': 'Problem',\n          'content': this.mysearch,\n          'type': 'title'\n        }).then(response => {\n          if (response.data.result.length === 0) {\n            this.searchResult = [{title: `无法查询到含有关键字:${this.mysearch}的题目`}]\n          } else {\n            this.searchResult = response.data.result\n          }\n          this.dropdownLoading = false\n        }, response => {\n          console.log(response)\n          this._onSearch()\n        })\n      },\n      handleCommandDropdown(command) {\n        this.setProblem(new Problem({\n          id: command\n        }))\n        this.$router.push('/home/problem')\n      },\n      ...mapMutations({\n        setProblem: 'SET_PROBLEM'\n      })\n    }\n  }\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .el-dropdown\n    .el-input\n      width 500px\n\n  .el-dropdown-menu__item\n    width auto\n    .problem-item-title\n      display inline-block\n    .problem-item-img\n      float right\n      margin-top 10px\n\n  .el-dropdown-menu\n    width 500px\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/search/search.vue?8e92a760","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ffcf786\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./manage-problems.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./manage-problems.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1ffcf786\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./manage-problems.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ffcf786\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/manager/manage-problems.vue\n// module id = BUZr\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  var queryDialog =\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  var replaceQueryDialog =\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/search.js\n// module id = CK2l\n// module chunks = 2 3","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = EKta\n// module chunks = 3","<template>\n  <div class=\"problem-edit\">\n    <div class=\"panel\">\n      <div class=\"panel-heading\">\n        <i class=\"el-icon-arrow-left\" @click.stop=\"quit\"></i>\n        <h3 class=\"panel-title\" v-show=\"!isEdit\">创建题目</h3>\n        <h3 class=\"panel-title\" v-show=\"isEdit\">修改题目(ID:{{problem.id}})</h3>\n        <el-tag class=\"quit-tag\" type=\"danger\" @click.native.stop=\"quit\">退出</el-tag>\n      </div>\n      <div class=\"panel-body\">\n        <el-form ref=\"form\" :model=\"form\" label-width=\"80px\">\n          <el-form-item label=\"题目标题\">\n            <el-input class=\"short-input\" v-model=\"form.title\" spellcheck=\"false\" size=\"small\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"题目标签\">\n            <el-input class=\"short-input\" v-model=\"form.tag\" spellcheck=\"false\" size=\"small\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"题目难度\">\n            <el-radio-group v-model=\"form.level\">\n              <el-radio :label=\"1\">1</el-radio>\n              <el-radio :label=\"2\">2</el-radio>\n              <el-radio :label=\"3\">3</el-radio>\n              <el-radio :label=\"4\">4</el-radio>\n              <el-radio :label=\"5\">5</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item label=\"题目描述\">\n            <mavon-editor v-model=\"form.description\" default_open=\"edit\" :toolbars=\"toolbars\">\n            </mavon-editor>\n          </el-form-item>\n          <el-form-item label=\"官方程序代码\">\n            <div class=\"program-edit\">\n              <codemirror\n                class=\"program-edit-inner\"\n                v-model=\"form.program\"\n                :options=\"editorOptions1\">\n              </codemirror>\n            </div>\n          </el-form-item>\n          <el-form-item label=\"输入样例\">\n            <el-input v-model=\"form.input\" spellcheck=\"false\"\n                      type=\"textarea\" :rows=\"5\" placeholder=\"Enter a sample input testcase\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"输出样例\">\n            <el-input v-model=\"form.output\" spellcheck=\"false\"\n                      type=\"textarea\" :rows=\"5\" placeholder=\"Enter a sample output testcase\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"模板选择\">\n            <el-checkbox-group v-model=\"form.checkLanguageList\">\n              <el-checkbox v-for=\"(item,index) in Languages\" :key=\"index\" :label=\"item\"></el-checkbox>\n            </el-checkbox-group>\n          </el-form-item>\n          <div class=\"editor-wrapper\">\n            <div class=\"dropdown-wrapper\">\n              <el-dropdown class=\"language-dropdown\" trigger=\"click\" @command=\"handleCommandLangage\"\n                           @visible-change=\"dropdownChange\"\n                           menu-align=\"start\">\n                <el-button type=\"primary\" size=\"small\">{{selectLanguage}}<i\n                  class=\"el-icon-caret-bottom el-icon--right\"></i>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item v-for=\"(item , index) in Languages\" :key=\"index\" :command=\"index\">{{item}}\n                  </el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n\n              <el-dropdown menu-align=\"start\" trigger=\"click\" class=\"el-dropdown-theme\" @command=\"handleCommandTheme\">\n                <el-button type=\"success\" size=\"small\">\n                  {{selectTheme}}<i class=\"el-icon-caret-bottom el-icon--right\"></i>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item v-for=\"(item,index) in editorThemes\" :key=\"index\" :command=\"item\">{{item}}\n                  </el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n            </div>\n            <div class=\"editor\">\n              <codemirror\n                ref=\"myEditor\"\n                v-model=\"code\"\n                :options=\"editorOptions2\">\n              </codemirror>\n            </div>\n            <el-button class=\"setup-btn\" @click=\"clickBtn\"\n                       type=\"success\" v-text=\"calcBtnText()\">\n            </el-button>\n          </div>\n        </el-form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  // require active-line.js\n  require('codemirror/addon/selection/active-line.js')\n\n  // closebrackets\n  require('codemirror/addon/edit/closebrackets.js')\n\n  // styleSelectedText\n  require('codemirror/addon/selection/mark-selection.js')\n  require('codemirror/addon/search/searchcursor.js')\n\n  // hint\n  require('codemirror/addon/hint/show-hint.js')\n  require('codemirror/addon/hint/javascript-hint.js')\n  require('codemirror/addon/selection/active-line.js')\n\n  // highlightSelectionMatches\n  require('codemirror/addon/scroll/annotatescrollbar.js')\n  require('codemirror/addon/search/matchesonscrollbar.js')\n  require('codemirror/addon/search/searchcursor.js')\n  require('codemirror/addon/search/match-highlighter.js')\n\n  // keyMap\n  require('codemirror/mode/clike/clike.js')\n  require('codemirror/addon/edit/matchbrackets.js')\n  require('codemirror/addon/comment/comment.js')\n  require('codemirror/addon/dialog/dialog.js')\n  require('codemirror/addon/dialog/dialog.css')\n  require('codemirror/addon/search/searchcursor.js')\n  require('codemirror/addon/search/search.js')\n  require('codemirror/keymap/sublime.js')\n  require('codemirror/keymap/emacs.js')\n  require('codemirror/keymap/vim.js')\n\n  // foldGutter\n  require('codemirror/addon/fold/foldgutter.css')\n  require('codemirror/addon/fold/brace-fold.js')\n  require('codemirror/addon/fold/comment-fold.js')\n  require('codemirror/addon/fold/foldcode.js')\n  require('codemirror/addon/fold/foldgutter.js')\n  require('codemirror/addon/fold/indent-fold.js')\n  require('codemirror/addon/fold/markdown-fold.js')\n  require('codemirror/addon/fold/xml-fold.js')\n\n  // autoCloseTags\n  require('codemirror/addon/edit/closetag.js')\n\n  // 语法高亮，自行替换为你需要的语言\n  import 'codemirror/mode/javascript/javascript'\n  import 'codemirror/mode/go/go'\n  import 'codemirror/mode/python/python'\n  import 'codemirror/mode/ruby/ruby'\n  import 'codemirror/mode/clike/clike'\n\n  // Theme\n  import 'codemirror/theme/ambiance.css'\n  import 'codemirror/theme/base16-dark.css'\n  import 'codemirror/theme/cobalt.css'\n  import 'codemirror/theme/paraiso-light.css'\n  import 'codemirror/theme/paraiso-dark.css'\n  import 'codemirror/theme/rubyblue.css'\n  import 'codemirror/theme/solarized.css'\n  import 'codemirror/theme/mbo.css'\n\n  import { mapGetters, mapMutations } from 'vuex'\n  import { languages, editorThemes, editorModes, baseUrl, MSG_OK, MSG_NO } from 'common/js/data'\n  import axios from 'axios'\n\n  export default{\n    props: {\n      isEdit: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data(){\n      return {\n        form: {\n          title: '',\n          description: '',\n          level: 1,\n          tag: '',\n          program: '',\n          input: '',\n          output: '',\n          checkLanguageList: ['C']\n        },\n        toolbars: {\n          bold: true, // 粗体\n          italic: true, // 斜体\n          header: true, // 标题\n          underline: true, // 下划线\n          strikethrough: true, // 中划线\n          mark: true, // 标记\n          quote: true, // 引用\n          ol: true, // 有序列表\n          ul: true, // 无序列表\n          link: true, // 链接\n          code: true, // code\n          table: true, // 表格\n          undo: true, // 上一步\n          redo: true, // 下一步\n          trash: true, // 清空\n          alignleft: true, // 左对齐\n          aligncenter: true, // 居中\n          alignright: true, // 右对齐\n          preview: true// 预览\n        },\n        editorOptions1: {\n          tabSize: 4,\n          mode: 'text/x-csrc',\n          theme: 'default',\n          lineNumbers: true,\n          line: true,\n          keyMap: 'sublime',\n          foldGutter: true,\n          gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n          // 选中文本自动高亮，及高亮方式\n          styleSelectedText: true,\n          highlightSelectionMatches: {showToken: /\\w/, annotateScrollbar: true}\n          // 如果有hint方面的配置，也应该出现在这里\n        },\n        editorOptions2: {\n          tabSize: 4,\n          mode: 'text/x-csrc',\n          theme: 'default',\n          lineNumbers: true,\n          line: true,\n          keyMap: 'sublime',\n          foldGutter: true,\n          gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\n          // 选中文本自动高亮，及高亮方式\n          styleSelectedText: true,\n          highlightSelectionMatches: {showToken: /\\w/, annotateScrollbar: true}\n          // 如果有hint方面的配置，也应该出现在这里\n        },\n        editorThemes: editorThemes,\n        selectTheme: editorThemes[0],\n        Languages: languages,\n        selectLanguage: languages[0],\n        editorModes: editorModes,\n        code: '',\n        templetC: {value: 'c', text: 'C', defaultCode: ''},\n        templetCpp: {value: 'cpp', text: 'C++', defaultCode: ''},\n        templetCsharp: {value: 'csharp', text: 'C#', defaultCode: ''},\n        templetJava: {value: 'java', text: 'Java', defaultCode: ''},\n        templetPython: {value: 'python3', text: 'Python3', defaultCode: ''},\n        templetJs: {value: 'javascript', text: 'JavaScript', defaultCode: ''},\n        templetRuby: {value: 'ruby', text: 'Ruby', defaultCode: ''},\n        templetGolang: {value: 'golang', text: 'Go', defaultCode: ''}\n      }\n    },\n    methods: {\n      quit(){\n        this._clearAllData()\n        this.$emit('editFinish')\n      },\n      clickBtn(){\n        let Base64 = require('js-base64').Base64\n        //把最后一次模板templet加上\n        this._addTemplet()\n        let array = this._pushALLTemplets()\n        console.log(array)\n        let resultTemplets = []\n        for (let i = 0; i < this.form.checkLanguageList.length; i++) {\n          resultTemplets.push(array.find((item) => item.text === this.form.checkLanguageList[i]))\n        }\n        //console.log(resultTemplets)\n        console.log(this.isEdit)\n\n        if (this.isEdit) {\n          //修改题目\n          console.log('修改题目')\n          this.reviseProblem(Base64, resultTemplets)\n        } else {\n          //创建题目\n          this.setupProblem(Base64, resultTemplets)\n        }\n      },\n      setupProblem(Base64, resultTemplets){\n        let url = `${baseUrl}/problems`\n        axios.post(url, {\n          title: this.form.title,\n          description: this.form.description,\n          level: this.form.level + '',\n          tag: this.form.tag,\n          program: Base64.encode(this.form.program),\n          code: JSON.stringify(resultTemplets),\n          input: Base64.encode(this.form.input),\n          output: Base64.encode(this.form.output)\n        }).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.$notify({\n              title: '成功',\n              message: `成功创建题目:${response.data.result[0].title}`,\n              type: 'success'\n            })\n            //成功后清除数据\n            this._clearAllData()\n            this.$emit('editFinish')\n          } else if (response.data.msg === MSG_NO) {\n            this.$notify({\n              title: '创建失败',\n              message: `${response.data.error}`,\n              type: 'error'\n            })\n          }\n        }, response => {})\n      },\n      reviseProblem(Base64, resultTemplets){\n        let url = `${baseUrl}/problems/${this.problem.id}`\n        axios.put(url, {\n          title: this.form.title,\n          description: this.form.description,\n          level: this.form.level + '',\n          tag: this.form.tag,\n          program: Base64.encode(this.form.program),\n          code: JSON.stringify(resultTemplets),\n          input: Base64.encode(this.form.input),\n          output: Base64.encode(this.form.output)\n        }).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.$notify({\n              title: '成功',\n              message: '修改题目成功',\n              type: 'success'\n            })\n            //成功后清除数据\n            this._clearAllData()\n            this.$emit('editFinish')\n          } else if (response.data.msg === MSG_NO) {\n            this.$notify({\n              title: '修改失败',\n              message: `${response.data.error}`,\n              type: 'error'\n            })\n          }\n        }, response => {})\n      },\n      _clearAllData(){\n        //清除所有数据 回到默认状态\n        this.form.title = ''\n        this.form.description = ''\n        this.form.level = 1\n        this.form.tag = ''\n        this.form.program = ''\n        this.form.input = ''\n        this.form.output = ''\n        this.form.checkLanguageList = ['C']\n        this.code = ''\n        this.selectTheme = editorThemes[0]\n        this.selectLanguage = languages[0]\n        this.editorOptions2.mode = this.editorModes[0]\n        this.editorOptions2.theme = this.selectTheme\n        this.templetC = {value: 'c', text: 'C', defaultCode: ''}\n        this.templetCpp = {value: 'cpp', text: 'C++', defaultCode: ''}\n        this.templetCsharp = {value: 'csharp', text: 'C#', defaultCode: ''}\n        this.templetJava = {value: 'java', text: 'Java', defaultCode: ''}\n        this.templetPython = {value: 'python3', text: 'Python3', defaultCode: ''}\n        this.templetJs = {value: 'javascript', text: 'JavaScript', defaultCode: ''}\n        this.templetRuby = {value: 'ruby', text: 'Ruby', defaultCode: ''}\n        this.templetGolang = {value: 'golang', text: 'Go', defaultCode: ''}\n        //最后清空vuex中的Templets\n        this.setTemplets([])\n      },\n      handleCommandLangage(index) {\n        //切换语言\n        console.log('xuan ' + index)\n        this.editorOptions2.mode = this.editorModes[index]\n        this.selectLanguage = this.Languages[index]\n        //如果之前(一次编辑中)写过code   那么code=之前的对应的templet的defaultCode\n        let result = this.templets.find((item) => item && item.text === this.selectLanguage)\n        if (result) {\n          this.code = result.defaultCode\n        } else {\n          this.code = ''\n        }\n      },\n      dropdownChange(isShow) {\n        //当语言下拉菜单状态改变\n        if (isShow) {\n          //当语言下拉菜单展开\n          this._addTemplet()\n          let res = this._pushALLTemplets()\n          //  这里有bug (showPromblemInfo获取了setTemplets 这里又修改了Templets )\n          //   解决：在此之前 每个对应模板加入相应的的数据\n          this.setTemplets(res)\n        }\n      },\n      _pushALLTemplets(){\n        //把所有模板集合成一个数组返回\n        let result = []\n        result.push(this.templetC)\n        result.push(this.templetCpp)\n        result.push(this.templetCsharp)\n        result.push(this.templetJava)\n        result.push(this.templetPython)\n        result.push(this.templetJs)\n        result.push(this.templetRuby)\n        result.push(this.templetGolang)\n        return result\n      },\n      _addTemplet(){\n        //把code加入到当前选中的语言的 对应的语言模板的defaultCode中\n        if (this.selectLanguage === 'C') {\n          this.templetC.defaultCode = this.code\n        } else if (this.selectLanguage === 'C++') {\n          this.templetCpp.defaultCode = this.code\n        } else if (this.selectLanguage === 'C#') {\n          this.templetCsharp.defaultCode = this.code\n        } else if (this.selectLanguage === 'Java') {\n          this.templetJava.defaultCode = this.code\n        } else if (this.selectLanguage === 'Python3') {\n          this.templetPython.defaultCode = this.code\n        } else if (this.selectLanguage === 'JavaScript') {\n          this.templetJs.defaultCode = this.code\n        } else if (this.selectLanguage === 'Ruby') {\n          this.templetRuby.defaultCode = this.code\n        } else if (this.selectLanguage === 'Go') {\n          this.templetGolang.defaultCode = this.code\n        }\n      },\n      showPromblemInfo(){\n        this._clearAllData()\n        //处于编辑题目模式 先展示出题目信息\n        let url1 = `${baseUrl}/problems/${this.problem.id}`\n        axios.get(url1).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.form.title = response.data.result[0].title\n            this.form.description = response.data.result[0].description\n            this.form.level = response.data.result[0].level\n            this.form.tag = response.data.result[0].tag\n          }\n        }, response => {})\n        let url2 = `${baseUrl}/problems/${this.problem.id}/codes`\n        axios.get(url2).then(response => {\n          if (response.data.msg === MSG_OK) {\n            console.log(JSON.parse(response.data.result[0].code))\n            this.setTemplets(JSON.parse(response.data.result[0].code))\n            //templetC templetCpp templetCsharp... 加入对应的数据 明天写。\n            this.changeTemplets()\n          }\n        }, response => {})\n      },\n      changeTemplets(){\n        let tempC = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'C'\n          }\n        })\n        if (tempC) {\n          this.templetC = tempC\n        }\n\n        let tempCpp = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'C++'\n          }\n        })\n        if (tempCpp) {\n          this.templetCpp = tempCpp\n        }\n\n        let tempCsharp = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'C#'\n          }\n        })\n        if (tempCsharp) {\n          this.templetCsharp = tempCsharp\n        }\n\n        let tempJava = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'Java'\n          }\n        })\n        if (tempJava) {\n          this.templetJava = tempJava\n        }\n        let tempPython = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'Python3'\n          }\n        })\n        if (tempPython) {\n          this.templetPython = tempPython\n        }\n\n        let tempJs = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'JavaScript'\n          }\n        })\n        if (tempJs) {\n          this.templetJs = tempJs\n        }\n\n        let tempRuby = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'Ruby'\n          }\n        })\n        if (tempRuby) {\n          this.templetRuby = tempRuby\n        }\n\n        let tempGo = this.templets.find((item) => {\n          if (item) {\n            return item.text === 'Go'\n          }\n        })\n        if (tempGo) {\n          this.templetGolang = tempGo\n        }\n\n        this.code = this.templets.find((item) => item && item.text === this.selectLanguage).defaultCode || ''\n      },\n      calcBtnText(){\n        //计算btn的文字\n        if (this.isEdit) {\n          return '修改题目'\n        } else {\n          return '创建题目'\n        }\n      },\n      handleCommandTheme(command){\n        //修改主题\n        this.editorOptions2.theme = command\n        this.selectTheme = command\n      },\n      ...mapMutations({\n        setTemplets: 'SET_TEMPLETS'\n      })\n    },\n    computed: {\n      ...mapGetters([\n        'problem',\n        'templets'\n      ])\n    }\n  }\n</script>\n\n<style lang=\"stylus\" scoped rel=\"stylesheet/stylus\">\n\n  .problem-edit\n    .panel\n      border-radius: 5px;\n      margin-bottom: 20px;\n      background-color: #fff;\n      border: 1px solid #ddd;\n      -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n      box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n      .panel-heading\n        padding: 10px 15px;\n        color: #333;\n        background-color: #f5f5f5;\n        border-color: #ddd;\n        border-top-left-radius: 5px;\n        border-top-right-radius: 5px;\n        border-bottom: 1px solid transparent;\n        .el-icon-arrow-left\n          color: lightsteelblue\n          &:hover\n            cursor pointer\n        .panel-title\n          display inline-block\n          margin-left 5px\n          margin-top 0\n          margin-bottom 0\n          font-size: 18px;\n          color: inherit;\n          font-weight: 500;\n          line-height: 1.1;\n        .quit-tag\n          float right\n          &:hover\n            cursor pointer\n      .panel-body\n        padding: 15px 45px;\n        .el-form\n          .el-form-item\n            margin-right 10%\n            .program-edit\n              display inline-block\n              width 83%\n              border 1px solid #ddd\n            .short-input\n              width 50%\n          .editor-wrapper\n            position relative\n            .dropdown-wrapper\n              position absolute\n              top: 0\n              left 0\n              display inline-block\n              .language-dropdown\n                margin-right 5px\n            .editor\n              margin-left 205px\n              display inline-block\n              width 70%\n              border 1px solid #ddd\n              .CodeMirror\n                height 330px\n            .setup-btn\n              position relative\n              left 10px\n              bottom 10px\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/manager/manage-problem-edit.vue?fd197a76","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = EuP9\n// module chunks = 3","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-49e52881\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./manage-problem-edit.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./manage-problem-edit.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-49e52881\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./manage-problem-edit.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-49e52881\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/manager/manage-problem-edit.vue\n// module id = HbqP\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim)\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        vim.lastHPos = Infinity;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        vim.lastHSPos = cm.charCoords(end,'div').left;\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch));\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '['};\n        var selfPaired = {'\\'': true, '\"': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */);\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n');\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i];\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /-?\\d+/g;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        var token;\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0];\n          start = match.index;\n          end = start + token.length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1;\n          var number = parseInt(token) + (increment * actionArgs.repeat);\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          numberStr = number.toString();\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1;\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      };\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm);\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done;\n        var event = history[history.length - 2];\n        return event && event.ranges && event.ranges[0].head;\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySlash(argString) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart);\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            regexPart = regexPart + '/' + flagsPart;\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); };\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = [];\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;\n        var changes = lastChange.changes;\n        var text = [];\n        var i = 0;\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i]);\n          if (changes[i] instanceof InsertModeKey) {\n             i++;\n          } else {\n             i+= selLength;\n          }\n        }\n        lastChange.changes = text;\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      };\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n            } else {\n                lastChange.changes.push(text);\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    };\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim;\n        var lastSel = vim.lastSelection;\n        var offset = getOffset(lastSel.anchor, lastSel.head);\n        selectForInsert(cm, head, offset.line + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/vim.js\n// module id = Hyg2\n// module chunks = 2 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dialog', {\n    attrs: {\n      \"title\": \"提示\",\n      \"visible\": _vm.visible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.visible = $event\n      }\n    }\n  }, [_c('span', {\n    staticClass: \"text\"\n  }, [_vm._v(_vm._s(_vm.text))]), _vm._v(\" \"), _c('span', {\n    staticClass: \"dialog-footer\",\n    slot: \"footer\"\n  }, [_c('el-button', {\n    on: {\n      \"click\": _vm.cancel\n    }\n  }, [_vm._v(_vm._s(_vm.cancelBtnText))]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.confirm\n    }\n  }, [_vm._v(_vm._s(_vm.confirmBtnText))])], 1)])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-48f25eaf\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/base/confirm/confirm.vue\n// module id = IruO\n// module chunks = 3 6 7","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-48f25eaf\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./confirm.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"013a4c5f\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-48f25eaf\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/base/confirm/confirm.vue\n// module id = JM2O\n// module chunks = 3 6 7","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldgutter.js\n// module id = Kk9m\n// module chunks = 2 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../css-loader/index.js??ref--6-2!./dialog.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../vue-style-loader/lib/addStylesClient.js\")(\"e2c66042\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/dialog/dialog.css\n// module id = LxZp\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var Pos = CodeMirror.Pos;\n\n  function forEach(arr, f) {\n    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);\n  }\n\n  function arrayContains(arr, item) {\n    if (!Array.prototype.indexOf) {\n      var i = arr.length;\n      while (i--) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return arr.indexOf(item) != -1;\n  }\n\n  function scriptHint(editor, keywords, getToken, options) {\n    // Find the token at the cursor\n    var cur = editor.getCursor(), token = getToken(editor, cur);\n    if (/\\b(?:string|comment)\\b/.test(token.type)) return;\n    token.state = CodeMirror.innerMode(editor.getMode(), token.state).state;\n\n    // If it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n      token = {start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n               type: token.string == \".\" ? \"property\" : null};\n    } else if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    var tprop = token;\n    // If it is a property, find out what it is a property of.\n    while (tprop.type == \"property\") {\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (tprop.string != \".\") return;\n      tprop = getToken(editor, Pos(cur.line, tprop.start));\n      if (!context) var context = [];\n      context.push(tprop);\n    }\n    return {list: getCompletions(token, context, keywords, options),\n            from: Pos(cur.line, token.start),\n            to: Pos(cur.line, token.end)};\n  }\n\n  function javascriptHint(editor, options) {\n    return scriptHint(editor, javascriptKeywords,\n                      function (e, cur) {return e.getTokenAt(cur);},\n                      options);\n  };\n  CodeMirror.registerHelper(\"hint\", \"javascript\", javascriptHint);\n\n  function getCoffeeScriptToken(editor, cur) {\n  // This getToken, it is for coffeescript, imitates the behavior of\n  // getTokenAt method in javascript.js, that is, returning \"property\"\n  // type and treat \".\" as indepenent token.\n    var token = editor.getTokenAt(cur);\n    if (cur.ch == token.start + 1 && token.string.charAt(0) == '.') {\n      token.end = token.start;\n      token.string = '.';\n      token.type = \"property\";\n    }\n    else if (/^\\.[\\w$_]*$/.test(token.string)) {\n      token.type = \"property\";\n      token.start++;\n      token.string = token.string.replace(/\\./, '');\n    }\n    return token;\n  }\n\n  function coffeescriptHint(editor, options) {\n    return scriptHint(editor, coffeescriptKeywords, getCoffeeScriptToken, options);\n  }\n  CodeMirror.registerHelper(\"hint\", \"coffeescript\", coffeescriptHint);\n\n  var stringProps = (\"charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight \" +\n                     \"toUpperCase toLowerCase split concat match replace search\").split(\" \");\n  var arrayProps = (\"length concat join splice push pop shift unshift slice reverse sort indexOf \" +\n                    \"lastIndexOf every some filter forEach map reduce reduceRight \").split(\" \");\n  var funcProps = \"prototype apply call bind\".split(\" \");\n  var javascriptKeywords = (\"break case catch continue debugger default delete do else false finally for function \" +\n                  \"if in instanceof new null return switch throw true try typeof var void while with\").split(\" \");\n  var coffeescriptKeywords = (\"and break catch class continue delete do else extends false finally for \" +\n                  \"if in instanceof isnt new no not null of off on or return switch then throw true try typeof until void while with yes\").split(\" \");\n\n  function forAllProps(obj, callback) {\n    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n      for (var name in obj) callback(name)\n    } else {\n      for (var o = obj; o; o = Object.getPrototypeOf(o))\n        Object.getOwnPropertyNames(o).forEach(callback)\n    }\n  }\n\n  function getCompletions(token, context, keywords, options) {\n    var found = [], start = token.string, global = options && options.globalScope || window;\n    function maybeAdd(str) {\n      if (str.lastIndexOf(start, 0) == 0 && !arrayContains(found, str)) found.push(str);\n    }\n    function gatherCompletions(obj) {\n      if (typeof obj == \"string\") forEach(stringProps, maybeAdd);\n      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);\n      else if (obj instanceof Function) forEach(funcProps, maybeAdd);\n      forAllProps(obj, maybeAdd)\n    }\n\n    if (context && context.length) {\n      // If this is a property, see if it belongs to some object we can\n      // find in the current environment.\n      var obj = context.pop(), base;\n      if (obj.type && obj.type.indexOf(\"variable\") === 0) {\n        if (options && options.additionalContext)\n          base = options.additionalContext[obj.string];\n        if (!options || options.useGlobalScope !== false)\n          base = base || global[obj.string];\n      } else if (obj.type == \"string\") {\n        base = \"\";\n      } else if (obj.type == \"atom\") {\n        base = 1;\n      } else if (obj.type == \"function\") {\n        if (global.jQuery != null && (obj.string == '$' || obj.string == 'jQuery') &&\n            (typeof global.jQuery == 'function'))\n          base = global.jQuery();\n        else if (global._ != null && (obj.string == '_') && (typeof global._ == 'function'))\n          base = global._();\n      }\n      while (base != null && context.length)\n        base = base[context.pop().string];\n      if (base != null) gatherCompletions(base);\n    } else {\n      // If not, just look in the global object and any local scope\n      // (reading into JS mode internals to get at the local and global variables)\n      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);\n      for (var v = token.state.globalVars; v; v = v.next) maybeAdd(v.name);\n      if (!options || options.useGlobalScope !== false)\n        gatherCompletions(global);\n      forEach(keywords, maybeAdd);\n    }\n    return found;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/hint/javascript-hint.js\n// module id = Mixr\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./matchesonscrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp(\"\\\\b\" + query + \"\\\\b\") : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/match-highlighter.js\n// module id = OkRY\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/scroll/annotatescrollbar.js\n// module id = QSKu\n// module chunks = 2 3","exports = module.exports = require(\"../../../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".CodeMirror-dialog{position:absolute;left:0;right:0;background:inherit;z-index:15;padding:.1em .8em;overflow:hidden;color:inherit}.CodeMirror-dialog-top{border-bottom:1px solid #eee;top:0}.CodeMirror-dialog-bottom{border-top:1px solid #eee;bottom:0}.CodeMirror-dialog input{border:none;outline:none;background:transparent;width:20em;color:inherit;font-family:monospace}.CodeMirror-dialog button{font-size:70%}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/dialog/dialog.css\"],\"names\":[],\"mappings\":\"AAAA,mBACE,kBAAmB,AACnB,OAAQ,AAAC,QAAS,AAClB,mBAAoB,AACpB,WAAY,AACZ,kBAAmB,AACnB,gBAAiB,AACjB,aAAe,CAChB,AAED,uBACE,6BAA8B,AAC9B,KAAO,CACR,AAED,0BACE,0BAA2B,AAC3B,QAAU,CACX,AAED,yBACE,YAAa,AACb,aAAc,AACd,uBAAwB,AACxB,WAAY,AACZ,cAAe,AACf,qBAAuB,CACxB,AAED,0BACE,aAAe,CAChB\",\"file\":\"dialog.css\",\"sourcesContent\":[\".CodeMirror-dialog {\\n  position: absolute;\\n  left: 0; right: 0;\\n  background: inherit;\\n  z-index: 15;\\n  padding: .1em .8em;\\n  overflow: hidden;\\n  color: inherit;\\n}\\n\\n.CodeMirror-dialog-top {\\n  border-bottom: 1px solid #eee;\\n  top: 0;\\n}\\n\\n.CodeMirror-dialog-bottom {\\n  border-top: 1px solid #eee;\\n  bottom: 0;\\n}\\n\\n.CodeMirror-dialog input {\\n  border: none;\\n  outline: none;\\n  background: transparent;\\n  width: 20em;\\n  color: inherit;\\n  font-family: monospace;\\n}\\n\\n.CodeMirror-dialog button {\\n  font-size: 70%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/codemirror/addon/dialog/dialog.css\n// module id = RkAk\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/dialog/dialog.js\n// module id = RkhK\n// module chunks = 2 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".el-dropdown .el-input[data-v-2d96e4b2]{width:500px}.el-dropdown-menu__item[data-v-2d96e4b2]{width:auto}.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2]{display:inline-block}.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2]{float:right;margin-top:10px}.el-dropdown-menu[data-v-2d96e4b2]{width:500px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/search/search.vue\"],\"names\":[],\"mappings\":\"AACA,wCACE,WAAa,CACd,AACD,yCACE,UAAY,CACb,AACD,6DACE,oBAAsB,CACvB,AACD,2DACE,YAAa,AACb,eAAiB,CAClB,AACD,mCACE,WAAa,CACd\",\"file\":\"search.vue\",\"sourcesContent\":[\"\\n.el-dropdown .el-input[data-v-2d96e4b2] {\\n  width: 500px;\\n}\\n.el-dropdown-menu__item[data-v-2d96e4b2] {\\n  width: auto;\\n}\\n.el-dropdown-menu__item .problem-item-title[data-v-2d96e4b2] {\\n  display: inline-block;\\n}\\n.el-dropdown-menu__item .problem-item-img[data-v-2d96e4b2] {\\n  float: right;\\n  margin-top: 10px;\\n}\\n.el-dropdown-menu[data-v-2d96e4b2] {\\n  width: 500px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-2d96e4b2\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/search/search.vue\n// module id = RrKZ\n// module chunks = 0 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ffcf786\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./manage-problems.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"a0ec5c32\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-1ffcf786\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problems.vue\n// module id = S1i8\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldcode.js\n// module id = THjC\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/xml-fold.js\n// module id = TQy8\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/indent-fold.js\n// module id = U3HU\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line < CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/selection/mark-selection.js\n// module id = U80t\n// module chunks = 2 3","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-48f25eaf\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./confirm.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./confirm.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-48f25eaf\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./confirm.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-48f25eaf\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/base/confirm/confirm.vue\n// module id = XEAW\n// module chunks = 3 6 7","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2d96e4b2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./search.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./search.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2d96e4b2\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./search.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2d96e4b2\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/search/search.vue\n// module id = YOyO\n// module chunks = 0 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../css-loader/index.js??ref--6-2!./foldgutter.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../vue-style-loader/lib/addStylesClient.js\")(\"da13b76a\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/foldgutter.css\n// module id = Yokd\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.indexOf(endString);\n    }\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/comment/comment.js\n// module id = Z6qg\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/selection/active-line.js\n// module id = aGTD\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var bind = defaults.pairs + \"`\";\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  for (var i = 0; i < bind.length; i++)\n    keyMap[\"'\" + bind.charAt(i) + \"'\"] = handler(bind.charAt(i));\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      cm.replaceSelection(\"\\n\\n\", null);\n      cm.execCommand(\"goCharLeft\");\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch &&\n                 (cur.ch <= 2 || cm.getRange(Pos(cur.line, cur.ch - 3), Pos(cur.line, cur.ch - 2)) != ch)) {\n        curType = \"addFour\";\n      } else if (identical) {\n        if (!CodeMirror.isWordChar(next) && enteringString(cm, cur, ch)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (cm.getLine(cur.line).length == cur.ch ||\n                             isClosingBracket(next, pairs) ||\n                             /\\s/.test(next))) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        cm.execCommand(\"goCharRight\");\n      } else if (type == \"skipThree\") {\n        for (var i = 0; i < 3; i++)\n          cm.execCommand(\"goCharRight\");\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        cm.execCommand(\"goCharLeft\");\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        cm.execCommand(\"goCharRight\");\n      }\n    });\n  }\n\n  function isClosingBracket(ch, pairs) {\n    var pos = pairs.lastIndexOf(ch);\n    return pos > -1 && pos % 2 == 1;\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  // Project the token type that will exists after the given char is\n  // typed, and use it to determine whether it would cause the start\n  // of a string token.\n  function enteringString(cm, pos, ch) {\n    var line = cm.getLine(pos.line);\n    var token = cm.getTokenAt(pos);\n    if (/\\bstring2?\\b/.test(token.type) || stringStartsAfter(cm, pos)) return false;\n    var stream = new CodeMirror.StringStream(line.slice(0, pos.ch) + ch + line.slice(pos.ch), 4);\n    stream.pos = stream.start = token.start;\n    for (;;) {\n      var type1 = cm.getMode().token(stream, token.state);\n      if (stream.pos >= pos.ch + 1) return /\\bstring2?\\b/.test(type1);\n      stream.start = stream.pos;\n    }\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/closebrackets.js\n// module id = aX1R\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureGlobal(regexp) {\n    return regexp.global ? regexp : new RegExp(regexp.source, regexpFlags(regexp) + \"g\")\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureGlobal(regexp)\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (end.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureGlobal(query)\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/search/searchcursor.js\n// module id = c+I8\n// module chunks = 2 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"problem-edit\"\n  }, [_c('div', {\n    staticClass: \"panel\"\n  }, [_c('div', {\n    staticClass: \"panel-heading\"\n  }, [_c('i', {\n    staticClass: \"el-icon-arrow-left\",\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }), _vm._v(\" \"), _c('h3', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isEdit),\n      expression: \"!isEdit\"\n    }],\n    staticClass: \"panel-title\"\n  }, [_vm._v(\"创建题目\")]), _vm._v(\" \"), _c('h3', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isEdit),\n      expression: \"isEdit\"\n    }],\n    staticClass: \"panel-title\"\n  }, [_vm._v(\"修改题目(ID:\" + _vm._s(_vm.problem.id) + \")\")]), _vm._v(\" \"), _c('el-tag', {\n    staticClass: \"quit-tag\",\n    attrs: {\n      \"type\": \"danger\"\n    },\n    nativeOn: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.quit($event)\n      }\n    }\n  }, [_vm._v(\"退出\")])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"panel-body\"\n  }, [_c('el-form', {\n    ref: \"form\",\n    attrs: {\n      \"model\": _vm.form,\n      \"label-width\": \"80px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标题\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.title),\n      callback: function($$v) {\n        _vm.form.title = $$v\n      },\n      expression: \"form.title\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目标签\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"short-input\",\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"size\": \"small\"\n    },\n    model: {\n      value: (_vm.form.tag),\n      callback: function($$v) {\n        _vm.form.tag = $$v\n      },\n      expression: \"form.tag\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目难度\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.form.level),\n      callback: function($$v) {\n        _vm.form.level = $$v\n      },\n      expression: \"form.level\"\n    }\n  }, [_c('el-radio', {\n    attrs: {\n      \"label\": 1\n    }\n  }, [_vm._v(\"1\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 2\n    }\n  }, [_vm._v(\"2\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 3\n    }\n  }, [_vm._v(\"3\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 4\n    }\n  }, [_vm._v(\"4\")]), _vm._v(\" \"), _c('el-radio', {\n    attrs: {\n      \"label\": 5\n    }\n  }, [_vm._v(\"5\")])], 1)], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"题目描述\"\n    }\n  }, [_c('mavon-editor', {\n    attrs: {\n      \"default_open\": \"edit\",\n      \"toolbars\": _vm.toolbars\n    },\n    model: {\n      value: (_vm.form.description),\n      callback: function($$v) {\n        _vm.form.description = $$v\n      },\n      expression: \"form.description\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"官方程序代码\"\n    }\n  }, [_c('div', {\n    staticClass: \"program-edit\"\n  }, [_c('codemirror', {\n    staticClass: \"program-edit-inner\",\n    attrs: {\n      \"options\": _vm.editorOptions1\n    },\n    model: {\n      value: (_vm.form.program),\n      callback: function($$v) {\n        _vm.form.program = $$v\n      },\n      expression: \"form.program\"\n    }\n  })], 1)]), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输入样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample input testcase\"\n    },\n    model: {\n      value: (_vm.form.input),\n      callback: function($$v) {\n        _vm.form.input = $$v\n      },\n      expression: \"form.input\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"输出样例\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"spellcheck\": \"false\",\n      \"type\": \"textarea\",\n      \"rows\": 5,\n      \"placeholder\": \"Enter a sample output testcase\"\n    },\n    model: {\n      value: (_vm.form.output),\n      callback: function($$v) {\n        _vm.form.output = $$v\n      },\n      expression: \"form.output\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"模板选择\"\n    }\n  }, [_c('el-checkbox-group', {\n    model: {\n      value: (_vm.form.checkLanguageList),\n      callback: function($$v) {\n        _vm.form.checkLanguageList = $$v\n      },\n      expression: \"form.checkLanguageList\"\n    }\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-checkbox', {\n      key: index,\n      attrs: {\n        \"label\": item\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor-wrapper\"\n  }, [_c('div', {\n    staticClass: \"dropdown-wrapper\"\n  }, [_c('el-dropdown', {\n    staticClass: \"language-dropdown\",\n    attrs: {\n      \"trigger\": \"click\",\n      \"menu-align\": \"start\"\n    },\n    on: {\n      \"command\": _vm.handleCommandLangage,\n      \"visible-change\": _vm.dropdownChange\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\",\n      \"size\": \"small\"\n    }\n  }, [_vm._v(_vm._s(_vm.selectLanguage)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.Languages), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": index\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n                \")])\n  }))], 1), _vm._v(\" \"), _c('el-dropdown', {\n    staticClass: \"el-dropdown-theme\",\n    attrs: {\n      \"menu-align\": \"start\",\n      \"trigger\": \"click\"\n    },\n    on: {\n      \"command\": _vm.handleCommandTheme\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"success\",\n      \"size\": \"small\"\n    }\n  }, [_vm._v(\"\\n                \" + _vm._s(_vm.selectTheme)), _c('i', {\n    staticClass: \"el-icon-caret-bottom el-icon--right\"\n  })]), _vm._v(\" \"), _c('el-dropdown-menu', {\n    slot: \"dropdown\"\n  }, _vm._l((_vm.editorThemes), function(item, index) {\n    return _c('el-dropdown-item', {\n      key: index,\n      attrs: {\n        \"command\": item\n      }\n    }, [_vm._v(_vm._s(item) + \"\\n                \")])\n  }))], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"editor\"\n  }, [_c('codemirror', {\n    ref: \"myEditor\",\n    attrs: {\n      \"options\": _vm.editorOptions2\n    },\n    model: {\n      value: (_vm.code),\n      callback: function($$v) {\n        _vm.code = $$v\n      },\n      expression: \"code\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"setup-btn\",\n    attrs: {\n      \"type\": \"success\"\n    },\n    domProps: {\n      \"textContent\": _vm._s(_vm.calcBtnText())\n    },\n    on: {\n      \"click\": _vm.clickBtn\n    }\n  })], 1)], 1)], 1)])])\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-49e52881\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/manager/manage-problem-edit.vue\n// module id = c2Vz\n// module chunks = 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".problem-edit .panel[data-v-49e52881]{border-radius:5px;margin-bottom:20px;background-color:#fff;border:1px solid #ddd;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.problem-edit .panel .panel-heading[data-v-49e52881]{padding:10px 15px;color:#333;background-color:#f5f5f5;border-color:#ddd;border-top-left-radius:5px;border-top-right-radius:5px;border-bottom:1px solid transparent}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]{color:#b0c4de}.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-heading .panel-title[data-v-49e52881]{display:inline-block;margin-left:5px;margin-top:0;margin-bottom:0;font-size:18px;color:inherit;font-weight:500;line-height:1.1}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]{float:right}.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover{cursor:pointer}.problem-edit .panel .panel-body[data-v-49e52881]{padding:15px 45px}.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881]{margin-right:10%}.problem-edit .panel .panel-body .el-form .el-form-item .program-edit[data-v-49e52881]{display:inline-block;width:83%;border:1px solid #ddd}.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881]{width:50%}.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881]{position:relative}.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881]{position:absolute;top:0;left:0;display:inline-block}.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper .language-dropdown[data-v-49e52881]{margin-right:5px}.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881]{margin-left:205px;display:inline-block;width:70%;border:1px solid #ddd}.problem-edit .panel .panel-body .el-form .editor-wrapper .editor .CodeMirror[data-v-49e52881]{height:330px}.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881]{position:relative;left:10px;bottom:10px}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problem-edit.vue\"],\"names\":[],\"mappings\":\"AACA,sCACE,kBAAmB,AACnB,mBAAoB,AACpB,sBAAuB,AACvB,sBAAuB,AACvB,6CAA+C,AAC/C,oCAAuC,CACxC,AACD,qDACE,kBAAmB,AACnB,WAAY,AACZ,yBAA0B,AAC1B,kBAAmB,AACnB,2BAA4B,AAC5B,4BAA6B,AAC7B,mCAAqC,CACtC,AACD,yEACE,aAAe,CAChB,AACD,+EACE,cAAgB,CACjB,AACD,kEACE,qBAAsB,AACtB,gBAAiB,AACjB,aAAc,AACd,gBAAiB,AACjB,eAAgB,AAChB,cAAe,AACf,gBAAiB,AACjB,eAAiB,CAClB,AACD,+DACE,WAAa,CACd,AACD,qEACE,cAAgB,CACjB,AACD,kDACE,iBAAmB,CACpB,AACD,yEACE,gBAAkB,CACnB,AACD,uFACE,qBAAsB,AACtB,UAAW,AACX,qBAAuB,CACxB,AACD,sFACE,SAAW,CACZ,AACD,2EACE,iBAAmB,CACpB,AACD,6FACE,kBAAmB,AACnB,MAAO,AACP,OAAQ,AACR,oBAAsB,CACvB,AACD,gHACE,gBAAkB,CACnB,AACD,mFACE,kBAAmB,AACnB,qBAAsB,AACtB,UAAW,AACX,qBAAuB,CACxB,AACD,+FACE,YAAc,CACf,AACD,sFACE,kBAAmB,AACnB,UAAW,AACX,WAAa,CACd\",\"file\":\"manage-problem-edit.vue\",\"sourcesContent\":[\"\\n.problem-edit .panel[data-v-49e52881] {\\n  border-radius: 5px;\\n  margin-bottom: 20px;\\n  background-color: #fff;\\n  border: 1px solid #ddd;\\n  -webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n  box-shadow: 0 1px 1px rgba(0,0,0,0.05);\\n}\\n.problem-edit .panel .panel-heading[data-v-49e52881] {\\n  padding: 10px 15px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n  border-color: #ddd;\\n  border-top-left-radius: 5px;\\n  border-top-right-radius: 5px;\\n  border-bottom: 1px solid transparent;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881] {\\n  color: #b0c4de;\\n}\\n.problem-edit .panel .panel-heading .el-icon-arrow-left[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-heading .panel-title[data-v-49e52881] {\\n  display: inline-block;\\n  margin-left: 5px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-size: 18px;\\n  color: inherit;\\n  font-weight: 500;\\n  line-height: 1.1;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881] {\\n  float: right;\\n}\\n.problem-edit .panel .panel-heading .quit-tag[data-v-49e52881]:hover {\\n  cursor: pointer;\\n}\\n.problem-edit .panel .panel-body[data-v-49e52881] {\\n  padding: 15px 45px;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item[data-v-49e52881] {\\n  margin-right: 10%;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item .program-edit[data-v-49e52881] {\\n  display: inline-block;\\n  width: 83%;\\n  border: 1px solid #ddd;\\n}\\n.problem-edit .panel .panel-body .el-form .el-form-item .short-input[data-v-49e52881] {\\n  width: 50%;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper[data-v-49e52881] {\\n  position: relative;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper[data-v-49e52881] {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  display: inline-block;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .dropdown-wrapper .language-dropdown[data-v-49e52881] {\\n  margin-right: 5px;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .editor[data-v-49e52881] {\\n  margin-left: 205px;\\n  display: inline-block;\\n  width: 70%;\\n  border: 1px solid #ddd;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .editor .CodeMirror[data-v-49e52881] {\\n  height: 330px;\\n}\\n.problem-edit .panel .panel-body .el-form .editor-wrapper .setup-btn[data-v-49e52881] {\\n  position: relative;\\n  left: 10px;\\n  bottom: 10px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-49e52881\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problem-edit.vue\n// module id = drNd\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/markdown-fold.js\n// module id = dxBS\n// module chunks = 2 3","exports = module.exports = require(\"../../../css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".CodeMirror-foldmarker{color:blue;text-shadow:#b9f 1px 1px 2px,#b9f -1px -1px 2px,#b9f 1px -1px 2px,#b9f -1px 1px 2px;font-family:arial;line-height:.3;cursor:pointer}.CodeMirror-foldgutter{width:.7em}.CodeMirror-foldgutter-folded,.CodeMirror-foldgutter-open{cursor:pointer}.CodeMirror-foldgutter-open:after{content:\\\"\\\\25BE\\\"}.CodeMirror-foldgutter-folded:after{content:\\\"\\\\25B8\\\"}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/node_modules/codemirror/addon/fold/foldgutter.css\"],\"names\":[],\"mappings\":\"AAAA,uBACE,WAAY,AACZ,oFAAwF,AACxF,kBAAmB,AACnB,eAAgB,AAChB,cAAgB,CACjB,AACD,uBACE,UAAY,CACb,AACD,0DAEE,cAAgB,CACjB,AACD,kCACE,eAAiB,CAClB,AACD,oCACE,eAAiB,CAClB\",\"file\":\"foldgutter.css\",\"sourcesContent\":[\".CodeMirror-foldmarker {\\n  color: blue;\\n  text-shadow: #b9f 1px 1px 2px, #b9f -1px -1px 2px, #b9f 1px -1px 2px, #b9f -1px 1px 2px;\\n  font-family: arial;\\n  line-height: .3;\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter {\\n  width: .7em;\\n}\\n.CodeMirror-foldgutter-open,\\n.CodeMirror-foldgutter-folded {\\n  cursor: pointer;\\n}\\n.CodeMirror-foldgutter-open:after {\\n  content: \\\"\\\\25BE\\\";\\n}\\n.CodeMirror-foldgutter-folded:after {\\n  content: \\\"\\\\25B8\\\";\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/codemirror/addon/fold/foldgutter.css\n// module id = engA\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/brace-fold.js\n// module id = fo6W\n// module chunks = 2 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-49e52881\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./manage-problem-edit.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"aa779c20\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-49e52881\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problem-edit.vue\n// module id = hdeF\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/hint/show-hint.js\n// module id = jQeI\n// module chunks = 2 3","<template>\n  <div class=\"manage-problem\">\n    <confirm :text=\"confirmText\" @confirm=\"confirmDele\" ref=\"confirm\"></confirm>\n    <transition name=\"el-fade-in-linear\">\n      <div v-show=\"!isShowEdit\">\n        <div class=\"handle-box\">\n          <el-button-group>\n            <el-button type=\"primary\" @click.stop=\"showSetupProblem\">创建题目</el-button>\n            <el-button type=\"success\" @click.stop=\"refreshProblems\">刷新数据</el-button>\n          </el-button-group>\n          <div class=\"search-wrapper\">\n            <search></search>\n          </div>\n        </div>\n        <el-table :data=\"problemDatas\" border ref=\"multipleTable\" style=\"width: 80%\"\n                  @selection-change=\"handleSelectionChange\">\n          <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n          <el-table-column prop=\"id\" label=\"ID\" width=\"150\">\n          </el-table-column>\n          <el-table-column prop=\"title\" label=\"标题\" sortable width=\"350\">\n          </el-table-column>\n          <el-table-column prop=\"tag\" label=\"标签\" sortable width=\"250\" :formatter=\"calcTag\">\n          </el-table-column>\n          <el-table-column prop=\"level\" label=\"难度\" sortable width=\"100\">\n          </el-table-column>\n          <el-table-column prop=\"submitted\" label=\"提交数\" sortable width=\"100\">\n          </el-table-column>\n          <el-table-column prop=\"accepted\" label=\"通过数\" sortable width=\"100\">\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"150\" fixed=\"right\">\n            <template scope=\"scope\">\n              <el-button size=\"small\"\n                         @click.stop=\"handleEdit(scope.$index, scope.row)\">编辑\n              </el-button>\n              <el-button size=\"small\" type=\"danger\"\n                         @click.stop=\"handleDelete(scope.$index, scope.row)\">删除\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <div class=\"pagination\">\n          <el-pagination\n            @current-change=\"handleCurrentChange\"\n            layout=\"prev, pager, next\"\n            :current-page=\"cur_page\"\n            :total=\"100\">\n          </el-pagination>\n        </div>\n      </div>\n    </transition>\n    <transition name=\"el-fade-in-linear\">\n      <problem-edit v-show=\"isShowEdit\" :isEdit=\"isEdit\"\n                    @editFinish=\"hideEdit\" ref=\"problemEdit\"></problem-edit>\n    </transition>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { baseUrl, MSG_OK, MSG_NO, editorThemes } from 'common/js/data'\n  import axios from 'axios'\n  import ElFormItem from '../../../node_modules/element-ui/packages/form/src/form-item'\n  import Search from 'components/search/search'\n  import ProblemEdit from 'components/manager/manage-problem-edit'\n  import { mapActions } from 'vuex'\n  import Problem from 'common/js/problem'\n  import Confirm from 'base/confirm/confirm'\n\n  export default{\n    data(){\n      return {\n        problemDatas: [],\n        cur_page: 1,\n        multipleSelection: [],\n        select_cate: '',\n        select_word: '',\n        del_list: [],\n        is_search: false,\n        rules: {\n          id: [\n            {required: true, message: 'id不能为空', trigger: 'blur'},\n            {min: 3, max: 3, message: 'id为3位字母', trigger: 'blur'}\n          ],\n          title: [\n            {required: true, message: '标题不能为空', trigger: 'blur'},\n            {min: 5, message: '标题过短', trigger: 'blur'}\n          ],\n          description: [\n            {required: true, message: '描述不能为空', trigger: 'blur'},\n            {min: 5, message: '描述过短', trigger: 'blur'}\n          ]\n        },\n        isShowEdit: false,  //是否展示编辑页面\n        isEdit: false,  //false新建题目 true编辑题目\n        confirmText: '',\n        curProblemId: '',\n        curProblemTitle: '',\n        editorThemes: editorThemes,\n        selectTheme: editorThemes[0]\n      }\n    },\n    created(){\n      this._getProblemsData(this.cur_page)\n    },\n    methods: {\n      showSetupProblem(){\n        this.isEdit = false\n        this.isShowEdit = true\n      },\n      handleCurrentChange(val){\n        this.cur_page = val\n        this._getProblemsData(this.cur_page)\n      },\n      _getProblemsData(curPage){\n        let url = `${baseUrl}/problems?page=${curPage}`\n        axios.get(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this.problemDatas = response.data.result\n          }\n        }, response => {})\n      },\n      formatter(row, column){\n        return row.address\n      },\n      filterTag(value, row){\n        return row.tag === value\n      },\n      handleEdit(index, row){\n        //点击编辑按钮\n        console.log(row)\n        this.saveOneProblem(new Problem(row))\n        this.isEdit = true\n        this.isShowEdit = true\n        this.$refs.problemEdit.showPromblemInfo()\n      },\n      handleDelete(index, row){\n        //点击删除按钮\n        this.curProblemId = row.id\n        this.curProblemTitle = row.title\n        this.confirmText = `确定要删除题目 “${this.curProblemTitle}”吗?`\n        this.$refs.confirm.show()\n      },\n      confirmDele(){\n        //确认删除\n        let url = `${baseUrl}/problems/${this.curProblemId}`\n        axios.delete(url).then(response => {\n          if (response.data.msg === MSG_OK) {\n            this._getProblemsData(this.cur_page)\n            this.$message({\n              message: `成功删除题目:${this.curProblemTitle}`,\n              type: 'success'\n            })\n          } else if (response.data.msg === MSG_NO) {\n            this.$notify.error({\n              title: '无法删除',\n              message: `${response.data.error}`\n            })\n          }\n        }, response => {\n          this.$message.error(`无法删除题目${this.curProblemTitle}`)\n        })\n      },\n      delAll(){\n        const self = this,\n          length = self.multipleSelection.length\n        let str = ''\n        self.del_list = self.del_list.concat(self.multipleSelection)\n        for (let i = 0; i < length; i++) {\n          str += self.multipleSelection[i].name + ' '\n        }\n        self.$message.error('删除了' + str)\n        self.multipleSelection = []\n      },\n      calcTag(row, column, cellValue) {\n        if (cellValue === '') {\n          return 'Nothing'\n        }\n        return cellValue.replace(',', ' & ')\n      },\n      handleSelectionChange(val){\n        this.multipleSelection = val\n      },\n      hideEdit(){\n        // 隐藏编辑页面\n        this.isShowEdit = false\n        this._getProblemsData(this.cur_page)\n      },\n      refreshProblems(){\n        //刷新manage-problems界面\n        this.cur_page = 1\n        this._getProblemsData(this.cur_page)\n      },\n      ...mapActions([\n        'saveOneProblem'\n      ])\n    },\n    computed: {\n      data(){\n        const self = this\n        return self.contestDatas.filter(function (d) {\n          let is_del = false\n          for (let i = 0; i < self.del_list.length; i++) {\n            if (d.name === self.del_list[i].name) {\n              is_del = true\n              break\n            }\n          }\n          if (!is_del) {\n            if (d.address.indexOf(self.select_cate) > -1 &&\n              (d.name.indexOf(self.select_word) > -1 ||\n              d.address.indexOf(self.select_word) > -1)\n            ) {\n              return d\n            }\n          }\n        })\n      }\n    },\n    components: {\n      ElFormItem,\n      Search,\n      ProblemEdit,\n      Confirm\n    }\n  }\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .manage-problem\n    .el-dialog\n      .block\n        .el-date-editor\n          width 100%\n    .handle-box\n      margin-bottom 15px\n      width 80%\n      .el-button-group\n        .el-button\n          width 100px\n      .search-wrapper\n        float right\n\n  .pagination\n    margin: 20px 20% 0 0;\n    text-align: right;\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/manager/manage-problems.vue?1782c4d0","module.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/json/stringify.js\n// module id = mvHQ\n// module chunks = 0 1 3","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"manage-problem\"\n  }, [_c('confirm', {\n    ref: \"confirm\",\n    attrs: {\n      \"text\": _vm.confirmText\n    },\n    on: {\n      \"confirm\": _vm.confirmDele\n    }\n  }), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.isShowEdit),\n      expression: \"!isShowEdit\"\n    }]\n  }, [_c('div', {\n    staticClass: \"handle-box\"\n  }, [_c('el-button-group', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.showSetupProblem($event)\n      }\n    }\n  }, [_vm._v(\"创建题目\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"success\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.stopPropagation();\n        _vm.refreshProblems($event)\n      }\n    }\n  }, [_vm._v(\"刷新数据\")])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"search-wrapper\"\n  }, [_c('search')], 1)], 1), _vm._v(\" \"), _c('el-table', {\n    ref: \"multipleTable\",\n    staticStyle: {\n      \"width\": \"80%\"\n    },\n    attrs: {\n      \"data\": _vm.problemDatas,\n      \"border\": \"\"\n    },\n    on: {\n      \"selection-change\": _vm.handleSelectionChange\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"type\": \"selection\",\n      \"width\": \"55\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"id\",\n      \"label\": \"ID\",\n      \"width\": \"150\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"title\",\n      \"label\": \"标题\",\n      \"sortable\": \"\",\n      \"width\": \"350\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"tag\",\n      \"label\": \"标签\",\n      \"sortable\": \"\",\n      \"width\": \"250\",\n      \"formatter\": _vm.calcTag\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"level\",\n      \"label\": \"难度\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"submitted\",\n      \"label\": \"提交数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"accepted\",\n      \"label\": \"通过数\",\n      \"sortable\": \"\",\n      \"width\": \"100\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"label\": \"操作\",\n      \"width\": \"150\",\n      \"fixed\": \"right\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleEdit(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"编辑\\n            \")]), _vm._v(\" \"), _c('el-button', {\n          attrs: {\n            \"size\": \"small\",\n            \"type\": \"danger\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.stopPropagation();\n              _vm.handleDelete(scope.$index, scope.row)\n            }\n          }\n        }, [_vm._v(\"删除\\n            \")])]\n      }\n    }])\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"pagination\"\n  }, [_c('el-pagination', {\n    attrs: {\n      \"layout\": \"prev, pager, next\",\n      \"current-page\": _vm.cur_page,\n      \"total\": 100\n    },\n    on: {\n      \"current-change\": _vm.handleCurrentChange\n    }\n  })], 1)], 1)]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"el-fade-in-linear\"\n    }\n  }, [_c('problem-edit', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.isShowEdit),\n      expression: \"isShowEdit\"\n    }],\n    ref: \"problemEdit\",\n    attrs: {\n      \"isEdit\": _vm.isEdit\n    },\n    on: {\n      \"editFinish\": _vm.hideEdit\n    }\n  })], 1)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-1ffcf786\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/manager/manage-problems.vue\n// module id = oxMS\n// module chunks = 3","var core = require('../../modules/_core');\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/json/stringify.js\n// module id = qkKv\n// module chunks = 0 1 3","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786]{width:100%}.manage-problem .handle-box[data-v-1ffcf786]{margin-bottom:15px;width:80%}.manage-problem .handle-box .el-button-group .el-button[data-v-1ffcf786]{width:100px}.manage-problem .handle-box .search-wrapper[data-v-1ffcf786]{float:right}.pagination[data-v-1ffcf786]{margin:20px 20% 0 0;text-align:right}\", \"\", {\"version\":3,\"sources\":[\"E:/前端/bootstrap学习/codeproject/src/components/manager/manage-problems.vue\"],\"names\":[],\"mappings\":\"AACA,mEACE,UAAY,CACb,AACD,6CACE,mBAAoB,AACpB,SAAW,CACZ,AACD,yEACE,WAAa,CACd,AACD,6DACE,WAAa,CACd,AACD,6BACE,oBAAqB,AACrB,gBAAkB,CACnB\",\"file\":\"manage-problems.vue\",\"sourcesContent\":[\"\\n.manage-problem .el-dialog .block .el-date-editor[data-v-1ffcf786] {\\n  width: 100%;\\n}\\n.manage-problem .handle-box[data-v-1ffcf786] {\\n  margin-bottom: 15px;\\n  width: 80%;\\n}\\n.manage-problem .handle-box .el-button-group .el-button[data-v-1ffcf786] {\\n  width: 100px;\\n}\\n.manage-problem .handle-box .search-wrapper[data-v-1ffcf786] {\\n  float: right;\\n}\\n.pagination[data-v-1ffcf786] {\\n  margin: 20px 20% 0 0;\\n  text-align: right;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-1ffcf786\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/manager/manage-problems.vue\n// module id = qm6i\n// module chunks = 3","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = sOR5\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/fold/comment-fold.js\n// module id = soCA\n// module chunks = 2 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function posEq(a, b) { return a.line == b.line && a.ch == b.ch; }\n\n  // Kill 'ring'\n\n  var killRing = [];\n  function addToRing(str) {\n    killRing.push(str);\n    if (killRing.length > 50) killRing.shift();\n  }\n  function growRingTop(str) {\n    if (!killRing.length) return addToRing(str);\n    killRing[killRing.length - 1] += str;\n  }\n  function getFromRing(n) { return killRing[killRing.length - (n ? Math.min(n, 1) : 1)] || \"\"; }\n  function popFromRing() { if (killRing.length > 1) killRing.pop(); return getFromRing(); }\n\n  var lastKill = null;\n\n  function kill(cm, from, to, mayGrow, text) {\n    if (text == null) text = cm.getRange(from, to);\n\n    if (mayGrow && lastKill && lastKill.cm == cm && posEq(from, lastKill.pos) && cm.isClean(lastKill.gen))\n      growRingTop(text);\n    else\n      addToRing(text);\n    cm.replaceRange(\"\", from, to, \"+delete\");\n\n    if (mayGrow) lastKill = {cm: cm, pos: from, gen: cm.changeGeneration()};\n    else lastKill = null;\n  }\n\n  // Boundaries of various units\n\n  function byChar(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"char\", true);\n  }\n\n  function byWord(cm, pos, dir) {\n    return cm.findPosH(pos, dir, \"word\", true);\n  }\n\n  function byLine(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"line\", cm.doc.sel.goalColumn);\n  }\n\n  function byPage(cm, pos, dir) {\n    return cm.findPosV(pos, dir, \"page\", cm.doc.sel.goalColumn);\n  }\n\n  function byParagraph(cm, pos, dir) {\n    var no = pos.line, line = cm.getLine(no);\n    var sawText = /\\S/.test(dir < 0 ? line.slice(0, pos.ch) : line.slice(pos.ch));\n    var fst = cm.firstLine(), lst = cm.lastLine();\n    for (;;) {\n      no += dir;\n      if (no < fst || no > lst)\n        return cm.clipPos(Pos(no - dir, dir < 0 ? 0 : null));\n      line = cm.getLine(no);\n      var hasText = /\\S/.test(line);\n      if (hasText) sawText = true;\n      else if (sawText) return Pos(no, 0);\n    }\n  }\n\n  function bySentence(cm, pos, dir) {\n    var line = pos.line, ch = pos.ch;\n    var text = cm.getLine(pos.line), sawWord = false;\n    for (;;) {\n      var next = text.charAt(ch + (dir < 0 ? -1 : 0));\n      if (!next) { // End/beginning of line reached\n        if (line == (dir < 0 ? cm.firstLine() : cm.lastLine())) return Pos(line, ch);\n        text = cm.getLine(line + dir);\n        if (!/\\S/.test(text)) return Pos(line, ch);\n        line += dir;\n        ch = dir < 0 ? text.length : 0;\n        continue;\n      }\n      if (sawWord && /[!?.]/.test(next)) return Pos(line, ch + (dir > 0 ? 1 : 0));\n      if (!sawWord) sawWord = /\\w/.test(next);\n      ch += dir;\n    }\n  }\n\n  function byExpr(cm, pos, dir) {\n    var wrap;\n    if (cm.findMatchingBracket && (wrap = cm.findMatchingBracket(pos, {strict: true}))\n        && wrap.match && (wrap.forward ? 1 : -1) == dir)\n      return dir > 0 ? Pos(wrap.to.line, wrap.to.ch + 1) : wrap.to;\n\n    for (var first = true;; first = false) {\n      var token = cm.getTokenAt(pos);\n      var after = Pos(pos.line, dir < 0 ? token.start : token.end);\n      if (first && dir > 0 && token.end == pos.ch || !/\\w/.test(token.string)) {\n        var newPos = cm.findPosH(after, dir, \"char\");\n        if (posEq(after, newPos)) return pos;\n        else pos = newPos;\n      } else {\n        return after;\n      }\n    }\n  }\n\n  // Prefixes (only crudely supported)\n\n  function getPrefix(cm, precise) {\n    var digits = cm.state.emacsPrefix;\n    if (!digits) return precise ? null : 1;\n    clearPrefix(cm);\n    return digits == \"-\" ? -1 : Number(digits);\n  }\n\n  function repeated(cmd) {\n    var f = typeof cmd == \"string\" ? function(cm) { cm.execCommand(cmd); } : cmd;\n    return function(cm) {\n      var prefix = getPrefix(cm);\n      f(cm);\n      for (var i = 1; i < prefix; ++i) f(cm);\n    };\n  }\n\n  function findEnd(cm, pos, by, dir) {\n    var prefix = getPrefix(cm);\n    if (prefix < 0) { dir = -dir; prefix = -prefix; }\n    for (var i = 0; i < prefix; ++i) {\n      var newPos = by(cm, pos, dir);\n      if (posEq(newPos, pos)) break;\n      pos = newPos;\n    }\n    return pos;\n  }\n\n  function move(by, dir) {\n    var f = function(cm) {\n      cm.extendSelection(findEnd(cm, cm.getCursor(), by, dir));\n    };\n    f.motion = true;\n    return f;\n  }\n\n  function killTo(cm, by, dir) {\n    var selections = cm.listSelections(), cursor;\n    var i = selections.length;\n    while (i--) {\n      cursor = selections[i].head;\n      kill(cm, cursor, findEnd(cm, cursor, by, dir), true);\n    }\n  }\n\n  function killRegion(cm) {\n    if (cm.somethingSelected()) {\n      var selections = cm.listSelections(), selection;\n      var i = selections.length;\n      while (i--) {\n        selection = selections[i];\n        kill(cm, selection.anchor, selection.head);\n      }\n      return true;\n    }\n  }\n\n  function addPrefix(cm, digit) {\n    if (cm.state.emacsPrefix) {\n      if (digit != \"-\") cm.state.emacsPrefix += digit;\n      return;\n    }\n    // Not active yet\n    cm.state.emacsPrefix = digit;\n    cm.on(\"keyHandled\", maybeClearPrefix);\n    cm.on(\"inputRead\", maybeDuplicateInput);\n  }\n\n  var prefixPreservingKeys = {\"Alt-G\": true, \"Ctrl-X\": true, \"Ctrl-Q\": true, \"Ctrl-U\": true};\n\n  function maybeClearPrefix(cm, arg) {\n    if (!cm.state.emacsPrefixMap && !prefixPreservingKeys.hasOwnProperty(arg))\n      clearPrefix(cm);\n  }\n\n  function clearPrefix(cm) {\n    cm.state.emacsPrefix = null;\n    cm.off(\"keyHandled\", maybeClearPrefix);\n    cm.off(\"inputRead\", maybeDuplicateInput);\n  }\n\n  function maybeDuplicateInput(cm, event) {\n    var dup = getPrefix(cm);\n    if (dup > 1 && event.origin == \"+input\") {\n      var one = event.text.join(\"\\n\"), txt = \"\";\n      for (var i = 1; i < dup; ++i) txt += one;\n      cm.replaceSelection(txt);\n    }\n  }\n\n  function addPrefixMap(cm) {\n    cm.state.emacsPrefixMap = true;\n    cm.addKeyMap(prefixMap);\n    cm.on(\"keyHandled\", maybeRemovePrefixMap);\n    cm.on(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  function maybeRemovePrefixMap(cm, arg) {\n    if (typeof arg == \"string\" && (/^\\d$/.test(arg) || arg == \"Ctrl-U\")) return;\n    cm.removeKeyMap(prefixMap);\n    cm.state.emacsPrefixMap = false;\n    cm.off(\"keyHandled\", maybeRemovePrefixMap);\n    cm.off(\"inputRead\", maybeRemovePrefixMap);\n  }\n\n  // Utilities\n\n  function setMark(cm) {\n    cm.setCursor(cm.getCursor());\n    cm.setExtending(!cm.getExtending());\n    cm.on(\"change\", function() { cm.setExtending(false); });\n  }\n\n  function clearMark(cm) {\n    cm.setExtending(false);\n    cm.setCursor(cm.getCursor());\n  }\n\n  function getInput(cm, msg, f) {\n    if (cm.openDialog)\n      cm.openDialog(msg + \": <input type=\\\"text\\\" style=\\\"width: 10em\\\"/>\", f, {bottom: true});\n    else\n      f(prompt(msg, \"\"));\n  }\n\n  function operateOnWord(cm, op) {\n    var start = cm.getCursor(), end = cm.findPosH(start, 1, \"word\");\n    cm.replaceRange(op(cm.getRange(start, end)), start, end);\n    cm.setCursor(end);\n  }\n\n  function toEnclosingExpr(cm) {\n    var pos = cm.getCursor(), line = pos.line, ch = pos.ch;\n    var stack = [];\n    while (line >= cm.firstLine()) {\n      var text = cm.getLine(line);\n      for (var i = ch == null ? text.length : ch; i > 0;) {\n        var ch = text.charAt(--i);\n        if (ch == \")\")\n          stack.push(\"(\");\n        else if (ch == \"]\")\n          stack.push(\"[\");\n        else if (ch == \"}\")\n          stack.push(\"{\");\n        else if (/[\\(\\{\\[]/.test(ch) && (!stack.length || stack.pop() != ch))\n          return cm.extendSelection(Pos(line, i));\n      }\n      --line; ch = null;\n    }\n  }\n\n  function quit(cm) {\n    cm.execCommand(\"clearSearch\");\n    clearMark(cm);\n  }\n\n  CodeMirror.emacs = {kill: kill, killRegion: killRegion, repeated: repeated};\n\n  // Actual keymap\n\n  var keyMap = CodeMirror.keyMap.emacs = CodeMirror.normalizeKeyMap({\n    \"Ctrl-W\": function(cm) {kill(cm, cm.getCursor(\"start\"), cm.getCursor(\"end\"));},\n    \"Ctrl-K\": repeated(function(cm) {\n      var start = cm.getCursor(), end = cm.clipPos(Pos(start.line));\n      var text = cm.getRange(start, end);\n      if (!/\\S/.test(text)) {\n        text += \"\\n\";\n        end = Pos(start.line + 1, 0);\n      }\n      kill(cm, start, end, true, text);\n    }),\n    \"Alt-W\": function(cm) {\n      addToRing(cm.getSelection());\n      clearMark(cm);\n    },\n    \"Ctrl-Y\": function(cm) {\n      var start = cm.getCursor();\n      cm.replaceRange(getFromRing(getPrefix(cm)), start, start, \"paste\");\n      cm.setSelection(start, cm.getCursor());\n    },\n    \"Alt-Y\": function(cm) {cm.replaceSelection(popFromRing(), \"around\", \"paste\");},\n\n    \"Ctrl-Space\": setMark, \"Ctrl-Shift-2\": setMark,\n\n    \"Ctrl-F\": move(byChar, 1), \"Ctrl-B\": move(byChar, -1),\n    \"Right\": move(byChar, 1), \"Left\": move(byChar, -1),\n    \"Ctrl-D\": function(cm) { killTo(cm, byChar, 1); },\n    \"Delete\": function(cm) { killRegion(cm) || killTo(cm, byChar, 1); },\n    \"Ctrl-H\": function(cm) { killTo(cm, byChar, -1); },\n    \"Backspace\": function(cm) { killRegion(cm) || killTo(cm, byChar, -1); },\n\n    \"Alt-F\": move(byWord, 1), \"Alt-B\": move(byWord, -1),\n    \"Alt-D\": function(cm) { killTo(cm, byWord, 1); },\n    \"Alt-Backspace\": function(cm) { killTo(cm, byWord, -1); },\n\n    \"Ctrl-N\": move(byLine, 1), \"Ctrl-P\": move(byLine, -1),\n    \"Down\": move(byLine, 1), \"Up\": move(byLine, -1),\n    \"Ctrl-A\": \"goLineStart\", \"Ctrl-E\": \"goLineEnd\",\n    \"End\": \"goLineEnd\", \"Home\": \"goLineStart\",\n\n    \"Alt-V\": move(byPage, -1), \"Ctrl-V\": move(byPage, 1),\n    \"PageUp\": move(byPage, -1), \"PageDown\": move(byPage, 1),\n\n    \"Ctrl-Up\": move(byParagraph, -1), \"Ctrl-Down\": move(byParagraph, 1),\n\n    \"Alt-A\": move(bySentence, -1), \"Alt-E\": move(bySentence, 1),\n    \"Alt-K\": function(cm) { killTo(cm, bySentence, 1); },\n\n    \"Ctrl-Alt-K\": function(cm) { killTo(cm, byExpr, 1); },\n    \"Ctrl-Alt-Backspace\": function(cm) { killTo(cm, byExpr, -1); },\n    \"Ctrl-Alt-F\": move(byExpr, 1), \"Ctrl-Alt-B\": move(byExpr, -1),\n\n    \"Shift-Ctrl-Alt-2\": function(cm) {\n      var cursor = cm.getCursor();\n      cm.setSelection(findEnd(cm, cursor, byExpr, 1), cursor);\n    },\n    \"Ctrl-Alt-T\": function(cm) {\n      var leftStart = byExpr(cm, cm.getCursor(), -1), leftEnd = byExpr(cm, leftStart, 1);\n      var rightEnd = byExpr(cm, leftEnd, 1), rightStart = byExpr(cm, rightEnd, -1);\n      cm.replaceRange(cm.getRange(rightStart, rightEnd) + cm.getRange(leftEnd, rightStart) +\n                      cm.getRange(leftStart, leftEnd), leftStart, rightEnd);\n    },\n    \"Ctrl-Alt-U\": repeated(toEnclosingExpr),\n\n    \"Alt-Space\": function(cm) {\n      var pos = cm.getCursor(), from = pos.ch, to = pos.ch, text = cm.getLine(pos.line);\n      while (from && /\\s/.test(text.charAt(from - 1))) --from;\n      while (to < text.length && /\\s/.test(text.charAt(to))) ++to;\n      cm.replaceRange(\" \", Pos(pos.line, from), Pos(pos.line, to));\n    },\n    \"Ctrl-O\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"start\"); }),\n    \"Ctrl-T\": repeated(function(cm) {\n      cm.execCommand(\"transposeChars\");\n    }),\n\n    \"Alt-C\": repeated(function(cm) {\n      operateOnWord(cm, function(w) {\n        var letter = w.search(/\\w/);\n        if (letter == -1) return w;\n        return w.slice(0, letter) + w.charAt(letter).toUpperCase() + w.slice(letter + 1).toLowerCase();\n      });\n    }),\n    \"Alt-U\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toUpperCase(); });\n    }),\n    \"Alt-L\": repeated(function(cm) {\n      operateOnWord(cm, function(w) { return w.toLowerCase(); });\n    }),\n\n    \"Alt-;\": \"toggleComment\",\n\n    \"Ctrl-/\": repeated(\"undo\"), \"Shift-Ctrl--\": repeated(\"undo\"),\n    \"Ctrl-Z\": repeated(\"undo\"), \"Cmd-Z\": repeated(\"undo\"),\n    \"Shift-Alt-,\": \"goDocStart\", \"Shift-Alt-.\": \"goDocEnd\",\n    \"Ctrl-S\": \"findPersistentNext\", \"Ctrl-R\": \"findPersistentPrev\", \"Ctrl-G\": quit, \"Shift-Alt-5\": \"replace\",\n    \"Alt-/\": \"autocomplete\",\n    \"Enter\": \"newlineAndIndent\",\n    \"Ctrl-J\": repeated(function(cm) { cm.replaceSelection(\"\\n\", \"end\"); }),\n    \"Tab\": \"indentAuto\",\n\n    \"Alt-G G\": function(cm) {\n      var prefix = getPrefix(cm, true);\n      if (prefix != null && prefix > 0) return cm.setCursor(prefix - 1);\n\n      getInput(cm, \"Goto line\", function(str) {\n        var num;\n        if (str && !isNaN(num = Number(str)) && num == (num|0) && num > 0)\n          cm.setCursor(num - 1);\n      });\n    },\n\n    \"Ctrl-X Tab\": function(cm) {\n      cm.indentSelection(getPrefix(cm, true) || cm.getOption(\"indentUnit\"));\n    },\n    \"Ctrl-X Ctrl-X\": function(cm) {\n      cm.setSelection(cm.getCursor(\"head\"), cm.getCursor(\"anchor\"));\n    },\n    \"Ctrl-X Ctrl-S\": \"save\",\n    \"Ctrl-X Ctrl-W\": \"save\",\n    \"Ctrl-X S\": \"saveAll\",\n    \"Ctrl-X F\": \"open\",\n    \"Ctrl-X U\": repeated(\"undo\"),\n    \"Ctrl-X K\": \"close\",\n    \"Ctrl-X Delete\": function(cm) { kill(cm, cm.getCursor(), bySentence(cm, cm.getCursor(), 1), true); },\n    \"Ctrl-X H\": \"selectAll\",\n\n    \"Ctrl-Q Tab\": repeated(\"insertTab\"),\n    \"Ctrl-U\": addPrefixMap\n  });\n\n  var prefixMap = {\"Ctrl-G\": clearPrefix};\n  function regPrefix(d) {\n    prefixMap[d] = function(cm) { addPrefix(cm, d); };\n    keyMap[\"Ctrl-\" + d] = function(cm) { addPrefix(cm, d); };\n    prefixPreservingKeys[\"Ctrl-\" + d] = true;\n  }\n  for (var i = 0; i < 10; ++i) regPrefix(String(i));\n  regPrefix(\"-\");\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/keymap/emacs.js\n// module id = tjx/\n// module chunks = 2 3","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = ujcs\n// module chunks = 3","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && matching[line.text.charAt(pos)]) ||\n        matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/codemirror/addon/edit/matchbrackets.js\n// module id = vq+x\n// module chunks = 2 3","/*\n * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n\n(function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.3.2\";\n    // if node.js, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = require('buffer').Buffer;\n        } catch (err) {}\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ?\n        buffer.from && buffer.from !== Uint8Array.from ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (typeof define === 'function' && define.amd) {\t\t\n        // AMD. Register as an anonymous module.\t\n        define([], function(){ return global.Base64 });\n    }\n    // that's it!\n})(   typeof self   !== 'undefined' ? self\n    : typeof window !== 'undefined' ? window\n    : typeof global !== 'undefined' ? global\n    : this\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-base64/base64.js\n// module id = xrTZ\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2d96e4b2\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./search.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"56e4b5b6\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-2d96e4b2\",\"scoped\":true,\"hasInlineConfig\":false}!./~/stylus-loader?{\"sourceMap\":true}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/search/search.vue\n// module id = yGpH\n// module chunks = 0 3"],"sourceRoot":""}